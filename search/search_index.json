{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MCP Gateway","text":"<p>Model Context Protocol gateway &amp; proxy - unify REST, MCP, and A2A with federation, virtual servers, retries, security, and an optional admin UI.</p> <p>ContextForge MCP Gateway is a feature-rich gateway, proxy and MCP Registry that federates MCP and REST services - unifying discovery, auth, rate-limiting, observability, virtual servers, multi-transport protocols, and an optional Admin UI into one clean endpoint for your AI clients. It runs as a fully compliant MCP server, deployable via PyPI or Docker, and scales to multi-cluster environments on Kubernetes with Redis-backed federation and caching.</p> <p></p>"},{"location":"#overview-goals","title":"\ud83d\ude80 Overview &amp; Goals","text":"<p>ContextForge MCP Gateway is a gateway, registry, and proxy that sits in front of any Model Context Protocol (MCP) server or REST API-exposing a unified endpoint for all your AI clients.</p> <p>\u26a0\ufe0f Caution: The current release (0.6.0) is considered alpha / early beta. It is not production-ready and should only be used for local development, testing, or experimentation. Features, APIs, and behaviors are subject to change without notice. Do not deploy in production environments without thorough security review, validation and additional security mechanisms.  Many of the features required for secure, large-scale, or multi-tenant production deployments are still on the project roadmap - which is itself evolving.</p> <p>It currently supports:</p> <ul> <li>Federation across multiple MCP and REST services</li> <li>A2A (Agent-to-Agent) integration for external AI agents (OpenAI, Anthropic, custom)</li> <li>Virtualization of legacy APIs as MCP-compliant tools and servers</li> <li>Transport over HTTP, JSON-RPC, WebSocket, SSE (with configurable keepalive), stdio and streamable-HTTP</li> <li>An Admin UI for real-time management, configuration, and log monitoring</li> <li>Built-in auth, retries, and rate-limiting</li> <li>OpenTelemetry observability with Phoenix, Jaeger, Zipkin, and other OTLP backends</li> <li>Scalable deployments via Docker or PyPI, Redis-backed caching, and multi-cluster federation</li> </ul> <p></p> <p>For a list of upcoming features, check out the ContextForge MCP Gateway Roadmap</p> <p>\u26a0\ufe0f Important: MCP Gateway is not a standalone product - it is an open source component with NO OFFICIAL SUPPORT from IBM or its affiliates that can be integrated into your own solution architecture. If you choose to use it, you are responsible for evaluating its fit, securing the deployment, and managing its lifecycle. See SECURITY.md for more details.</p> \ud83d\udd0c Gateway Layer with Protocol Flexibility <ul> <li>Sits in front of any MCP server or REST API</li> <li>Lets you choose your MCP protocol version (e.g., <code>2025-03-26</code>)</li> <li>Exposes a single, unified interface for diverse backends</li> </ul> \ud83c\udf10 Federation of Peer Gateways (MCP Registry) <ul> <li>Auto-discovers or configures peer gateways (via mDNS or manual)</li> <li>Performs health checks and merges remote registries transparently</li> <li>Supports Redis-backed syncing and fail-over</li> </ul> \ud83e\udde9 Virtualization of REST/gRPC Services <ul> <li>Wraps non-MCP services as virtual MCP servers</li> <li>Registers tools, prompts, and resources with minimal configuration</li> </ul> \ud83d\udd01 REST-to-MCP Tool Adapter <ul> <li> <p>Adapts REST APIs into tools with:</p> <ul> <li>Automatic JSON Schema extraction</li> <li>Support for headers, tokens, and custom auth</li> <li>Retry, timeout, and rate-limit policies</li> </ul> </li> </ul> \ud83e\udde0 Unified Registries <ul> <li>Prompts: Jinja2 templates, multimodal support, rollback/versioning</li> <li>Resources: URI-based access, MIME detection, caching, SSE updates</li> <li>Tools: Native or adapted, with input validation and concurrency controls</li> </ul> \ud83d\udcc8 Admin UI, Observability &amp; Dev Experience <ul> <li>Admin UI built with HTMX + Alpine.js</li> <li>Real-time log viewer with filtering, search, and export capabilities</li> <li>Auth: Basic, JWT, or custom schemes</li> <li>Structured logs, health endpoints, metrics</li> <li>400+ tests, Makefile targets, live reload, pre-commit hooks</li> </ul> \ud83d\udd0d OpenTelemetry Observability <ul> <li>Vendor-agnostic tracing with OpenTelemetry (OTLP) protocol support</li> <li>Multiple backend support: Phoenix (LLM-focused), Jaeger, Zipkin, Tempo, DataDog, New Relic</li> <li>Distributed tracing across federated gateways and services</li> <li>Automatic instrumentation of tools, prompts, resources, and gateway operations</li> <li>LLM-specific metrics: Token usage, costs, model performance</li> <li>Zero-overhead when disabled with graceful degradation</li> <li>Easy configuration via environment variables</li> </ul> <p>Quick start with Phoenix (LLM observability): <pre><code># Start Phoenix\ndocker run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest\n\n# Configure gateway\nexport OTEL_ENABLE_OBSERVABILITY=true\nexport OTEL_TRACES_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n\n# Run gateway - traces automatically sent to Phoenix\nmcpgateway\n</code></pre></p> <p>See Observability Documentation for detailed setup with other backends.</p>"},{"location":"#quick-start-pypi","title":"Quick Start - PyPI","text":"<p>MCP Gateway is published on PyPI as <code>mcp-contextforge-gateway</code>.</p> <p>TLDR;: (single command using uv)</p> <pre><code>BASIC_AUTH_PASSWORD=pass \\\nMCPGATEWAY_UI_ENABLED=true \\\nMCPGATEWAY_ADMIN_API_ENABLED=true \\\nuvx --from mcp-contextforge-gateway mcpgateway --host 0.0.0.0 --port 4444\n</code></pre> \ud83d\udccb Prerequisites <ul> <li>Python \u2265 3.10 (3.11 recommended)</li> <li>curl + jq - only for the last smoke-test step</li> </ul>"},{"location":"#1-install-run-copy-paste-friendly","title":"1 - Install &amp; run (copy-paste friendly)","text":"<pre><code># 1\ufe0f\u20e3  Isolated env + install from pypi\nmkdir mcpgateway &amp;&amp; cd mcpgateway\npython3 -m venv .venv &amp;&amp; source .venv/bin/activate\npip install --upgrade pip\npip install mcp-contextforge-gateway\n\n# 2\ufe0f\u20e3  Launch on all interfaces with custom creds &amp; secret key\n# Enable the Admin API endpoints (true/false) - disabled by default\nexport MCPGATEWAY_UI_ENABLED=true\nexport MCPGATEWAY_ADMIN_API_ENABLED=true\n\nBASIC_AUTH_PASSWORD=pass JWT_SECRET_KEY=my-test-key \\\n  mcpgateway --host 0.0.0.0 --port 4444 &amp;   # admin/pass\n\n# 3\ufe0f\u20e3  Generate a bearer token &amp; smoke-test the API\nexport MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\\n    --username admin --exp 10080 --secret my-test-key)\n\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://127.0.0.1:4444/version | jq\n</code></pre> Windows (PowerShell) quick-start <pre><code># 1\ufe0f\u20e3  Isolated env + install from PyPI\nmkdir mcpgateway ; cd mcpgateway\npython3 -m venv .venv ; .\\.venv\\Scripts\\Activate.ps1\npip install --upgrade pip\npip install mcp-contextforge-gateway\n\n# 2\ufe0f\u20e3  Environment variables (session-only)\n$Env:MCPGATEWAY_UI_ENABLED        = \"true\"\n$Env:MCPGATEWAY_ADMIN_API_ENABLED = \"true\"\n$Env:BASIC_AUTH_PASSWORD          = \"changeme\"      # admin/changeme\n$Env:JWT_SECRET_KEY               = \"my-test-key\"\n\n# 3\ufe0f\u20e3  Launch the gateway\nmcpgateway.exe --host 0.0.0.0 --port 4444\n\n#   Optional: background it\n# Start-Process -FilePath \"mcpgateway.exe\" -ArgumentList \"--host 0.0.0.0 --port 4444\"\n\n# 4\ufe0f\u20e3  Bearer token and smoke-test\n$Env:MCPGATEWAY_BEARER_TOKEN = python3 -m mcpgateway.utils.create_jwt_token `\n    --username admin --exp 10080 --secret my-test-key\n\ncurl -s -H \"Authorization: Bearer $Env:MCPGATEWAY_BEARER_TOKEN\" `\n     http://127.0.0.1:4444/version | jq\n</code></pre> More configuration <p>Copy .env.example to <code>.env</code> and tweak any of the settings (or use them as env variables).</p> \ud83d\ude80 End-to-end demo (register a local MCP server) <pre><code># 1\ufe0f\u20e3  Spin up the sample GO MCP time server using mcpgateway.translate &amp; docker\npython3 -m mcpgateway.translate \\\n     --stdio \"docker run --rm -i -p 8888:8080 ghcr.io/ibm/fast-time-server:latest -transport=stdio\" \\\n     --expose-sse \\\n     --port 8003\n\n# Or using the official mcp-server-git using uvx:\npip install uv # to install uvx, if not already installed\npython3 -m mcpgateway.translate --stdio \"uvx mcp-server-git\" --expose-sse --port 9000\n\n# Alternative: running the local binary\n# cd mcp-servers/go/fast-time-server; make build\n# python3 -m mcpgateway.translate --stdio \"./dist/fast-time-server -transport=stdio\" --expose-sse --port 8002\n\n# NEW: Expose via multiple protocols simultaneously!\npython3 -m mcpgateway.translate \\\n     --stdio \"uvx mcp-server-git\" \\\n     --expose-sse \\\n     --expose-streamable-http \\\n     --port 9000\n# Now accessible via both /sse (SSE) and /mcp (streamable HTTP) endpoints\n\n# 2\ufe0f\u20e3  Register it with the gateway\ncurl -s -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\":\"fast_time\",\"url\":\"http://localhost:9000/sse\"}' \\\n     http://localhost:4444/gateways\n\n# 3\ufe0f\u20e3  Verify tool catalog\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/tools | jq\n\n# 4\ufe0f\u20e3  Create a *virtual server* bundling those tools. Use the ID of tools from the tool catalog (Step #3) and pass them in the associatedTools list.\ncurl -s -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\":\"time_server\",\"description\":\"Fast time tools\",\"associatedTools\":[&lt;ID_OF_TOOLS&gt;]}' \\\n     http://localhost:4444/servers | jq\n\n# Example curl\ncurl -s -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\"\n     -H \"Content-Type: application/json\"\n     -d '{\"name\":\"time_server\",\"description\":\"Fast time tools\",\"associatedTools\":[\"6018ca46d32a4ac6b4c054c13a1726a2\"]}' \\\n     http://localhost:4444/servers | jq\n\n# 5\ufe0f\u20e3  List servers (should now include the UUID of the newly created virtual server)\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/servers | jq\n\n# 6\ufe0f\u20e3  Client SSE endpoint. Inspect it interactively with the MCP Inspector CLI (or use any MCP client)\nnpx -y @modelcontextprotocol/inspector\n# Transport Type: SSE, URL: http://localhost:4444/servers/UUID_OF_SERVER_1/sse,  Header Name: \"Authorization\", Bearer Token\n</code></pre> \ud83d\udda7 Using the stdio wrapper (mcpgateway-wrapper) <pre><code>export MCP_AUTH=$MCPGATEWAY_BEARER_TOKEN\nexport MCP_SERVER_URL=http://localhost:4444/servers/UUID_OF_SERVER_1/mcp\npython3 -m mcpgateway.wrapper  # Ctrl-C to exit\n</code></pre> <p>You can also run it with <code>uv</code> or inside Docker/Podman - see the Containers section above.</p> <p>In MCP Inspector, define <code>MCP_AUTH</code> and <code>MCP_SERVER_URL</code> env variables, and select <code>python3</code> as the Command, and <code>-m mcpgateway.wrapper</code> as Arguments.</p> <pre><code>echo $PWD/.venv/bin/python3 # Using the Python3 full path ensures you have a working venv\nexport MCP_SERVER_URL='http://localhost:4444/servers/UUID_OF_SERVER_1/mcp'\nexport MCP_AUTH=${MCPGATEWAY_BEARER_TOKEN}\nnpx -y @modelcontextprotocol/inspector\n</code></pre> <p>or</p> <p>Pass the url and auth as arguments (no need to set environment variables) <pre><code>npx -y @modelcontextprotocol/inspector\ncommand as `python`\nArguments as `-m mcpgateway.wrapper --url \"http://localhost:4444/servers/UUID_OF_SERVER_1/mcp\" --auth \"Bearer &lt;your token&gt;\"`\n</code></pre></p> <p>When using a MCP Client such as Claude with stdio:</p> <pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n      \"env\": {\n        \"MCP_AUTH\": \"your-token-here\",\n        \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1\",\n        \"MCP_TOOL_CALL_TIMEOUT\": \"120\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"#quick-start-containers","title":"Quick Start - Containers","text":"<p>Use the official OCI image from GHCR with Docker or Podman.</p>"},{"location":"#docker","title":"\ud83d\udc33 Docker","text":""},{"location":"#1-minimum-viable-run","title":"1 - Minimum viable run","text":"<pre><code>docker run -d --name mcpgateway \\\n  -p 4444:4444 \\\n  -e MCPGATEWAY_UI_ENABLED=true \\\n  -e MCPGATEWAY_ADMIN_API_ENABLED=true \\\n  -e HOST=0.0.0.0 \\\n  -e JWT_SECRET_KEY=my-test-key \\\n  -e BASIC_AUTH_USER=admin \\\n  -e BASIC_AUTH_PASSWORD=changeme \\\n  -e AUTH_REQUIRED=true \\\n  -e DATABASE_URL=sqlite:///./mcp.db \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n\n# Tail logs (Ctrl+C to quit)\ndocker logs -f mcpgateway\n\n# Generating an API key\ndocker run --rm -it ghcr.io/ibm/mcp-context-forge:0.6.0 \\\n  python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 0 --secret my-test-key\n</code></pre> <p>Browse to http://localhost:4444/admin (user <code>admin</code> / pass <code>changeme</code>).</p>"},{"location":"#2-persist-the-sqlite-database","title":"2 - Persist the SQLite database","text":"<pre><code>mkdir -p $(pwd)/data\n\ntouch $(pwd)/data/mcp.db\n\nsudo chown -R :docker $(pwd)/data\n\nchmod 777 $(pwd)/data\n\ndocker run -d --name mcpgateway \\\n  --restart unless-stopped \\\n  -p 4444:4444 \\\n  -v $(pwd)/data:/data \\\n  -e MCPGATEWAY_UI_ENABLED=true \\\n  -e MCPGATEWAY_ADMIN_API_ENABLED=true \\\n  -e DATABASE_URL=sqlite:////data/mcp.db \\\n  -e HOST=0.0.0.0 \\\n  -e JWT_SECRET_KEY=my-test-key \\\n  -e BASIC_AUTH_USER=admin \\\n  -e BASIC_AUTH_PASSWORD=changeme \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre> <p>SQLite now lives on the host at <code>./data/mcp.db</code>.</p>"},{"location":"#3-local-tool-discovery-host-network","title":"3 - Local tool discovery (host network)","text":"<pre><code>mkdir -p $(pwd)/data\n\ntouch $(pwd)/data/mcp.db\n\nsudo chown -R :docker $(pwd)/data\n\nchmod 777 $(pwd)/data\n\ndocker run -d --name mcpgateway \\\n  --network=host \\\n  -e MCPGATEWAY_UI_ENABLED=true \\\n  -e MCPGATEWAY_ADMIN_API_ENABLED=true \\\n  -e HOST=0.0.0.0 \\\n  -e PORT=4444 \\\n  -e DATABASE_URL=sqlite:////data/mcp.db \\\n  -v $(pwd)/data:/data \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre> <p>Using <code>--network=host</code> allows Docker to access the local network, allowing you to add MCP servers running on your host. See Docker Host network driver documentation for more details.</p>"},{"location":"#podman-rootless-friendly","title":"\ud83e\uddad Podman (rootless-friendly)","text":""},{"location":"#1-basic-run","title":"1 - Basic run","text":"<pre><code>podman run -d --name mcpgateway \\\n  -p 4444:4444 \\\n  -e HOST=0.0.0.0 \\\n  -e DATABASE_URL=sqlite:///./mcp.db \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre>"},{"location":"#2-persist-sqlite","title":"2 - Persist SQLite","text":"<pre><code>mkdir -p $(pwd)/data\n\ntouch $(pwd)/data/mcp.db\n\nsudo chown -R :docker $(pwd)/data\n\nchmod 777 $(pwd)/data\n\npodman run -d --name mcpgateway \\\n  --restart=on-failure \\\n  -p 4444:4444 \\\n  -v $(pwd)/data:/data \\\n  -e DATABASE_URL=sqlite:////data/mcp.db \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre>"},{"location":"#3-host-networking-rootless","title":"3 - Host networking (rootless)","text":"<pre><code>mkdir -p $(pwd)/data\n\ntouch $(pwd)/data/mcp.db\n\nsudo chown -R :docker $(pwd)/data\n\nchmod 777 $(pwd)/data\n\npodman run -d --name mcpgateway \\\n  --network=host \\\n  -v $(pwd)/data:/data \\\n  -e DATABASE_URL=sqlite:////data/mcp.db \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre> \u270f\ufe0f Docker/Podman tips <ul> <li>.env files - Put all the <code>-e FOO=</code> lines into a file and replace them with <code>--env-file .env</code>. See the provided .env.example for reference.</li> <li>Pinned tags - Use an explicit version (e.g. <code>v0.6.0</code>) instead of <code>latest</code> for reproducible builds.</li> <li> <p>JWT tokens - Generate one in the running container:</p> <pre><code>docker exec mcpgateway python3 -m mcpgateway.utils.create_jwt_token -u admin -e 10080 --secret my-test-key\n</code></pre> </li> <li> <p>Upgrades - Stop, remove, and rerun with the same <code>-v $(pwd)/data:/data</code> mount; your DB and config stay intact.</p> </li> </ul> \ud83d\ude91 Smoke-test the running container <pre><code>curl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/health | jq\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/tools | jq\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/version | jq\n</code></pre> \ud83d\udda7 Running the MCP Gateway stdio wrapper <p>The <code>mcpgateway.wrapper</code> lets you connect to the gateway over stdio while keeping JWT authentication. You should run this from the MCP Client. The example below is just for testing.</p> <pre><code># Set environment variables\nexport MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 10080 --secret my-test-key)\nexport MCP_AUTH=${MCPGATEWAY_BEARER_TOKEN}\nexport MCP_SERVER_URL='http://localhost:4444/servers/UUID_OF_SERVER_1/mcp'\nexport MCP_TOOL_CALL_TIMEOUT=120\nexport MCP_WRAPPER_LOG_LEVEL=DEBUG  # or OFF to disable logging\n\ndocker run --rm -i \\\n  -e MCP_AUTH=$MCPGATEWAY_BEARER_TOKEN \\\n  -e MCP_SERVER_URL=http://host.docker.internal:4444/servers/UUID_OF_SERVER_1/mcp \\\n  -e MCP_TOOL_CALL_TIMEOUT=120 \\\n  -e MCP_WRAPPER_LOG_LEVEL=DEBUG \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0 \\\n  python3 -m mcpgateway.wrapper\n</code></pre>"},{"location":"#testing-mcpgatewaywrapper-by-hand","title":"Testing <code>mcpgateway.wrapper</code> by hand:","text":"<p>Because the wrapper speaks JSON-RPC over stdin/stdout, you can interact with it using nothing more than a terminal or pipes.</p> <pre><code># Start the MCP Gateway Wrapper\nexport MCP_AUTH=${MCPGATEWAY_BEARER_TOKEN}\nexport MCP_SERVER_URL=http://localhost:4444/servers/YOUR_SERVER_UUID\npython3 -m mcpgateway.wrapper\n</code></pre> Initialize the protocol <pre><code># Initialize the protocol\n{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2025-03-26\",\"capabilities\":{},\"clientInfo\":{\"name\":\"demo\",\"version\":\"0.0.1\"}}}\n\n# Then after the reply:\n{\"jsonrpc\":\"2.0\",\"method\":\"notifications/initialized\",\"params\":{}}\n\n# Get prompts\n{\"jsonrpc\":\"2.0\",\"id\":4,\"method\":\"prompts/list\"}\n{\"jsonrpc\":\"2.0\",\"id\":5,\"method\":\"prompts/get\",\"params\":{\"name\":\"greeting\",\"arguments\":{\"user\":\"Bob\"}}}\n\n# Get resources\n{\"jsonrpc\":\"2.0\",\"id\":6,\"method\":\"resources/list\"}\n{\"jsonrpc\":\"2.0\",\"id\":7,\"method\":\"resources/read\",\"params\":{\"uri\":\"https://example.com/some.txt\"}}\n\n# Get / call tools\n{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/list\"}\n{\"jsonrpc\":\"2.0\",\"id\":3,\"method\":\"tools/call\",\"params\":{\"name\":\"get_system_time\",\"arguments\":{\"timezone\":\"Europe/Dublin\"}}}\n</code></pre> Expected responses from mcpgateway.wrapper <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":{\"protocolVersion\":\"2025-03-26\",\"capabilities\":{\"experimental\":{},\"prompts\":{\"listChanged\":false},\"resources\":{\"subscribe\":false,\"listChanged\":false},\"tools\":{\"listChanged\":false}},\"serverInfo\":{\"name\":\"mcpgateway-wrapper\",\"version\":\"0.6.0\"}}}\n\n# When there's no tools\n{\"jsonrpc\":\"2.0\",\"id\":2,\"result\":{\"tools\":[]}}\n\n# After you add some tools and create a virtual server\n{\"jsonrpc\":\"2.0\",\"id\":2,\"result\":{\"tools\":[{\"annotations\":{\"readOnlyHint\":false,\"destructiveHint\":true,\"idempotentHint\":false,\"openWorldHint\":true},\"description\":\"Convert time between different timezones\",\"inputSchema\":{\"properties\":{\"source_timezone\":{\"description\":\"Source IANA timezone name\",\"type\":\"string\"},\"target_timezone\":{\"description\":\"Target IANA timezone name\",\"type\":\"string\"},\"time\":{\"description\":\"Time to convert in RFC3339 format or common formats like '2006-01-02 15:04:05'\",\"type\":\"string\"}},\"required\":[\"time\",\"source_timezone\",\"target_timezone\"],\"type\":\"object\"},\"name\":\"convert_time\"},{\"annotations\":{\"readOnlyHint\":false,\"destructiveHint\":true,\"idempotentHint\":false,\"openWorldHint\":true},\"description\":\"Get current system time in specified timezone\",\"inputSchema\":{\"properties\":{\"timezone\":{\"description\":\"IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Defaults to UTC\",\"type\":\"string\"}},\"type\":\"object\"},\"name\":\"get_system_time\"}]}}\n\n# Running the time tool:\n{\"jsonrpc\":\"2.0\",\"id\":3,\"result\":{\"content\":[{\"type\":\"text\",\"text\":\"2025-07-09T00:09:45+01:00\"}]}}\n</code></pre>"},{"location":"#running-from-an-mcp-client-mcpgatewaywrapper","title":"\ud83e\udde9 Running from an MCP Client (<code>mcpgateway.wrapper</code>)","text":"<p>The <code>mcpgateway.wrapper</code> exposes everything your Gateway knows about over stdio, so any MCP client that can't (or shouldn't) open an authenticated SSE stream still gets full tool-calling power.</p> <p>Remember to substitute your real Gateway URL (and server ID) for <code>http://localhost:4444/servers/UUID_OF_SERVER_1/mcp</code>. When inside Docker/Podman, that often becomes <code>http://host.docker.internal:4444/servers/UUID_OF_SERVER_1/mcp</code> (macOS/Windows) or the gateway container's hostname (Linux).</p> \ud83d\udc33 Docker / Podman <pre><code>docker run -i --rm \\\n  --network=host \\\n  -e MCP_SERVER_URL=http://localhost:4444/servers/UUID_OF_SERVER_1/mcp \\\n  -e MCP_AUTH=${MCPGATEWAY_BEARER_TOKEN} \\\n  -e MCP_TOOL_CALL_TIMEOUT=120 \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0 \\\n  python3 -m mcpgateway.wrapper\n</code></pre> \ud83d\udce6 pipx (one-liner install &amp; run) <pre><code># Install gateway package in its own isolated venv\npipx install --include-deps mcp-contextforge-gateway\n\n# Run the stdio wrapper\nMCP_AUTH=${MCPGATEWAY_BEARER_TOKEN} \\\nMCP_SERVER_URL=http://localhost:4444/servers/UUID_OF_SERVER_1/mcp \\\npython3 -m mcpgateway.wrapper\n# Alternatively with uv\nuv run --directory . -m mcpgateway.wrapper\n</code></pre> <p>Claude Desktop JSON (uses the host Python that pipx injected):</p> <pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"command\": \"python3\",\n      \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n      \"env\": {\n        \"MCP_AUTH\": \"&lt;your-token&gt;\",\n        \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1/mcp\",\n        \"MCP_TOOL_CALL_TIMEOUT\": \"120\"\n      }\n    }\n  }\n}\n</code></pre> \u26a1 uv / uvx (light-speed venvs)"},{"location":"#1-install-uv-uvx-is-an-alias-it-provides","title":"1 - Install <code>uv</code>  (<code>uvx</code> is an alias it provides)","text":"<pre><code># (a) official one-liner\ncurl -Ls https://astral.sh/uv/install.sh | sh\n\n# (b) or via pipx\npipx install uv\n</code></pre>"},{"location":"#2-create-an-on-the-spot-venv-run-the-wrapper","title":"2 - Create an on-the-spot venv &amp; run the wrapper","text":"<pre><code># Create venv in ~/.venv/mcpgateway (or current dir if you prefer)\nuv venv ~/.venv/mcpgateway\nsource ~/.venv/mcpgateway/bin/activate\n\n# Install the gateway package using uv\nuv pip install mcp-contextforge-gateway\n\n# Launch wrapper\nMCP_AUTH=${MCPGATEWAY_BEARER_TOKEN} \\\nMCP_SERVER_URL=http://localhost:4444/servers/UUID_OF_SERVER_1/mcp \\\nuv run --directory . -m mcpgateway.wrapper # Use this just for testing, as the Client will run the uv command\n</code></pre>"},{"location":"#claude-desktop-json-runs-through-uvx","title":"Claude Desktop JSON (runs through uvx)","text":"<pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"run\",\n        \"--\",\n        \"python\",\n        \"-m\",\n        \"mcpgateway.wrapper\"\n      ],\n      \"env\": {\n        \"MCP_AUTH\": \"&lt;your-token&gt;\",\n        \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1/mcp\"\n    }\n  }\n}\n</code></pre>"},{"location":"#using-with-claude-desktop-or-any-gui-mcp-client","title":"\ud83d\ude80 Using with Claude Desktop (or any GUI MCP client)","text":"<ol> <li>Edit Config \u2192 <code>File \u25b8 Settings \u25b8 Developer \u25b8 Edit Config</code></li> <li>Paste one of the JSON blocks above (Docker / pipx / uvx).</li> <li>Restart the app so the new stdio server is spawned.</li> <li>Open logs in the same menu to verify <code>mcpgateway-wrapper</code> started and listed your tools.</li> </ol> <p>Need help? See:</p> <ul> <li>MCP Debugging Guide - https://modelcontextprotocol.io/docs/tools/debugging</li> </ul>"},{"location":"#quick-start-vs-code-dev-container","title":"\ud83d\ude80 Quick Start: VS Code Dev Container","text":"<p>Spin up a fully-loaded dev environment (Python 3.11, Docker/Podman CLI, all project dependencies) in just two clicks.</p> \ud83d\udccb Prerequisites <ul> <li>VS Code with the Dev Containers extension</li> <li>Docker or Podman installed and running locally</li> </ul> \ud83e\uddf0 Setup Instructions \ud83d\udee0\ufe0f Daily Developer Workflow <p>Common tasks inside the container:</p> <pre><code># Start dev server (hot reload)\nmake dev            # http://localhost:4444\n\n# Run tests &amp; linters\nmake test\nmake lint\n</code></pre> <p>Optional:</p> <ul> <li><code>make bash</code> - drop into an interactive shell</li> <li><code>make clean</code> - clear build artefacts &amp; caches</li> <li>Port forwarding is automatic (customize via <code>.devcontainer/devcontainer.json</code>)</li> </ul> \u2601\ufe0f GitHub Codespaces: 1-Click Cloud IDE <p>No local Docker? Use Codespaces:</p> <ol> <li>Go to the repo \u2192 Code \u25b8 Codespaces \u25b8 Create codespace on main</li> <li>Wait for the container image to build in the cloud</li> <li>Develop using the same workflow above</li> </ol>"},{"location":"#1-clone-open","title":"1 - Clone &amp; Open","text":"<pre><code>git clone https://github.com/ibm/mcp-context-forge.git\ncd mcp-context-forge\ncode .\n</code></pre> <p>VS Code will detect the <code>.devcontainer</code> and prompt: \"Reopen in Container\" or manually run: Ctrl/Cmd \u21e7 P \u2192 Dev Containers: Reopen in Container</p>"},{"location":"#2-first-time-build-automatic","title":"2 - First-Time Build (Automatic)","text":"<p>The container build will:</p> <ul> <li>Install system packages &amp; Python 3.11</li> <li>Run <code>make install-dev</code> to pull all dependencies</li> <li>Execute tests to verify the toolchain</li> </ul> <p>You'll land in <code>/workspace</code> ready to develop.</p>"},{"location":"#quick-start-manual-install","title":"Quick Start (manual install)","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python \u2265 3.10</li> <li>GNU Make (optional, but all common workflows are available as Make targets)</li> <li>Optional: Docker / Podman for containerized runs</li> </ul>"},{"location":"#one-liner-dev","title":"One-liner (dev)","text":"<pre><code>make venv install serve\n</code></pre> <p>What it does:</p> <ol> <li>Creates / activates a <code>.venv</code> in your home folder <code>~/.venv/mcpgateway</code></li> <li>Installs the gateway and necessary dependencies</li> <li>Launches Gunicorn (Uvicorn workers) on http://localhost:4444</li> </ol> <p>For development, you can use:</p> <pre><code>make install-dev # Install development dependencies, ex: linters and test harness\nmake lint          # optional: run style checks (ruff, mypy, etc.)\n</code></pre>"},{"location":"#containerized-self-signed-tls","title":"Containerized (self-signed TLS)","text":""},{"location":"#container-runtime-support","title":"Container Runtime Support","text":"<p>This project supports both Docker and Podman. The Makefile automatically detects which runtime is available and handles image naming differences.</p>"},{"location":"#auto-detection","title":"Auto-detection","text":"<pre><code>make container-build  # Uses podman if available, otherwise docker\n\n&gt; You can use docker or podman, ex:\n\n```bash\nmake podman            # build production image\nmake podman-run-ssl    # run at https://localhost:4444\n# or listen on port 4444 on your host directly, adds --network=host to podman\nmake podman-run-ssl-host\n</code></pre>"},{"location":"#smoke-test-the-api","title":"Smoke-test the API","text":"<pre><code>curl -k -sX GET \\\n     -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     https://localhost:4444/tools | jq\n</code></pre> <p>You should receive <code>[]</code> until you register a tool.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#via-make","title":"Via Make","text":"<pre><code>make venv install          # create .venv + install deps\nmake serve                 # gunicorn on :4444\n</code></pre>"},{"location":"#uv-alternative","title":"UV (alternative)","text":"<pre><code>uv venv &amp;&amp; source .venv/bin/activate\nuv pip install -e '.[dev]' # IMPORTANT: in zsh, quote to disable glob expansion!\n</code></pre>"},{"location":"#pip-alternative","title":"pip (alternative)","text":"<pre><code>python3 -m venv .venv &amp;&amp; source .venv/bin/activate\npip install -e \".[dev]\"\n</code></pre>"},{"location":"#optional-postgresql-adapter","title":"Optional (PostgreSQL adapter)","text":"<p>You can configure the gateway with SQLite, PostgreSQL (or any other compatible database) in .env.</p> <p>When using PostgreSQL, you need to install <code>psycopg2</code> driver.</p> <pre><code>uv pip install psycopg2-binary   # dev convenience\n# or\nuv pip install psycopg2          # production build\n</code></pre>"},{"location":"#quick-postgres-container","title":"Quick Postgres container","text":"<pre><code>docker run --name mcp-postgres \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=mysecretpassword \\\n  -e POSTGRES_DB=mcp \\\n  -p 5432:5432 -d postgres\n</code></pre> <p>A <code>make compose-up</code> target is provided along with a docker-compose.yml file to make this process simpler.</p>"},{"location":"#configuration-env-or-env-vars","title":"Configuration (<code>.env</code> or env vars)","text":"<p>\u26a0\ufe0f If any required <code>.env</code> variable is missing or invalid, the gateway will fail fast at startup with a validation error via Pydantic.</p> <p>You can get started by copying the provided .env.example to <code>.env</code> and making the necessary edits to fit your environment.</p> \ud83d\udd27 Environment Configuration Variables  ### Basic  | Setting         | Description                              | Default                | Options                | | --------------- | ---------------------------------------- | ---------------------- | ---------------------- | | `APP_NAME`      | Gateway / OpenAPI title                  | `MCP Gateway`          | string                 | | `HOST`          | Bind address for the app                 | `127.0.0.1`            | IPv4/IPv6              | | `PORT`          | Port the server listens on               | `4444`                 | 1-65535                | | `DATABASE_URL`  | SQLAlchemy connection URL                | `sqlite:///./mcp.db`   | any SQLAlchemy dialect | | `APP_ROOT_PATH` | Subpath prefix for app (e.g. `/gateway`) | (empty)                | string                 | | `TEMPLATES_DIR` | Path to Jinja2 templates                 | `mcpgateway/templates` | path                   | | `STATIC_DIR`    | Path to static files                     | `mcpgateway/static`    | path                   |  &gt; \ud83d\udca1 Use `APP_ROOT_PATH=/foo` if reverse-proxying under a subpath like `https://host.com/foo/`.  ### Authentication  | Setting               | Description                                                      | Default       | Options    | | --------------------- | ---------------------------------------------------------------- | ------------- | ---------- | | `BASIC_AUTH_USER`     | Username for Admin UI login and HTTP Basic authentication        | `admin`       | string     | | `BASIC_AUTH_PASSWORD` | Password for Admin UI login and HTTP Basic authentication        | `changeme`    | string     | | `AUTH_REQUIRED`       | Require authentication for all API routes                        | `true`        | bool       | | `JWT_SECRET_KEY`      | Secret key used to **sign JWT tokens** for API access            | `my-test-key` | string     | | `JWT_ALGORITHM`       | Algorithm used to sign the JWTs (`HS256` is default, HMAC-based) | `HS256`       | PyJWT algs | | `TOKEN_EXPIRY`        | Expiry of generated JWTs in minutes                              | `10080`       | int &gt; 0    | | `AUTH_ENCRYPTION_SECRET` | Passphrase used to derive AES key for encrypting tool auth headers | `my-test-salt` | string |  &gt; \ud83d\udd10 `BASIC_AUTH_USER`/`PASSWORD` are used for: &gt; &gt; * Logging into the web-based Admin UI &gt; * Accessing APIs via Basic Auth (`curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\"`) &gt; &gt; \ud83d\udd11 `JWT_SECRET_KEY` is used to: &gt; &gt; * Sign JSON Web Tokens (`Authorization: Bearer `) &gt; * Generate tokens via: &gt; &gt;   <pre><code>export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 0 --secret my-test-key)\necho $MCPGATEWAY_BEARER_TOKEN\n</code></pre> &gt; * Tokens allow non-interactive API clients to authenticate securely. &gt; &gt; \ud83e\uddea Set `AUTH_REQUIRED=false` during development if you want to disable all authentication (e.g. for local testing or open APIs) or clients that don't support SSE authentication. &gt; In production, you should use the SSE to stdio `mcpgateway-wrapper` for such tools that don't support authenticated SSE, while still ensuring the gateway uses authentication. &gt; &gt; \ud83d\udd10 `AUTH_ENCRYPTION_SECRET` is used to encrypt and decrypt tool authentication credentials (`auth_value`). &gt; You must set the same value across environments to decode previously stored encrypted auth values. &gt; Recommended: use a long, random string.  ### UI Features  | Setting                        | Description                            | Default | Options | | ------------------------------ | -------------------------------------- | ------- | ------- | | `MCPGATEWAY_UI_ENABLED`        | Enable the interactive Admin dashboard | `false` | bool    | | `MCPGATEWAY_ADMIN_API_ENABLED` | Enable API endpoints for admin ops     | `false` | bool    | | `MCPGATEWAY_BULK_IMPORT_ENABLED` | Enable bulk import endpoint for tools | `true`  | bool    |  &gt; \ud83d\udda5\ufe0f Set both UI and Admin API to `false` to disable management UI and APIs in production. &gt; \ud83d\udce5 The bulk import endpoint allows importing up to 200 tools in a single request via `/admin/tools/import`.  ### A2A (Agent-to-Agent) Features  | Setting                        | Description                            | Default | Options | | ------------------------------ | -------------------------------------- | ------- | ------- | | `MCPGATEWAY_A2A_ENABLED`       | Enable A2A agent features             | `true`  | bool    | | `MCPGATEWAY_A2A_MAX_AGENTS`    | Maximum number of A2A agents allowed  | `100`   | int     | | `MCPGATEWAY_A2A_DEFAULT_TIMEOUT` | Default timeout for A2A HTTP requests (seconds) | `30` | int | | `MCPGATEWAY_A2A_MAX_RETRIES`   | Maximum retry attempts for A2A calls  | `3`     | int     | | `MCPGATEWAY_A2A_METRICS_ENABLED` | Enable A2A agent metrics collection | `true`  | bool    |  &gt; \ud83e\udd16 **A2A Integration**: Register external AI agents (OpenAI, Anthropic, custom) and expose them as MCP tools &gt; \ud83d\udcca **Metrics**: Track agent performance, success rates, and response times &gt; \ud83d\udd12 **Security**: Encrypted credential storage and configurable authentication &gt; \ud83c\udf9b\ufe0f **Admin UI**: Dedicated tab for agent management with test functionality  **A2A Configuration Effects:** - `MCPGATEWAY_A2A_ENABLED=false`: Completely disables A2A features (API endpoints return 404, admin tab hidden) - `MCPGATEWAY_A2A_METRICS_ENABLED=false`: Disables metrics collection while keeping functionality  ### Security  | Setting                   | Description                    | Default                                        | Options    | | ------------------------- | ------------------------------ | ---------------------------------------------- | ---------- | | `SKIP_SSL_VERIFY`         | Skip upstream TLS verification | `false`                                        | bool       | | `ENVIRONMENT`             | Deployment environment (affects security defaults) | `development`                              | `development`/`production` | | `APP_DOMAIN`              | Domain for production CORS origins | `localhost`                                 | string     | | `ALLOWED_ORIGINS`         | CORS allow-list                | Auto-configured by environment                 | JSON array | | `CORS_ENABLED`            | Enable CORS                    | `true`                                         | bool       | | `CORS_ALLOW_CREDENTIALS`  | Allow credentials in CORS      | `true`                                         | bool       | | `SECURE_COOKIES`          | Force secure cookie flags     | `true`                                         | bool       | | `COOKIE_SAMESITE`         | Cookie SameSite attribute      | `lax`                                          | `strict`/`lax`/`none` | | `SECURITY_HEADERS_ENABLED` | Enable security headers middleware | `true`                                     | bool       | | `X_FRAME_OPTIONS`         | X-Frame-Options header value   | `DENY`                                         | `DENY`/`SAMEORIGIN` | | `HSTS_ENABLED`            | Enable HSTS header             | `true`                                         | bool       | | `HSTS_MAX_AGE`            | HSTS max age in seconds        | `31536000`                                     | int        | | `REMOVE_SERVER_HEADERS`   | Remove server identification   | `true`                                         | bool       | | `DOCS_ALLOW_BASIC_AUTH`   | Allow Basic Auth for docs (in addition to JWT)         | `false`                                        | bool       |  &gt; **CORS Configuration**: When `ENVIRONMENT=development`, CORS origins are automatically configured for common development ports (3000, 8080, gateway port). In production, origins are constructed from `APP_DOMAIN` (e.g., `https://yourdomain.com`, `https://app.yourdomain.com`). You can override this by explicitly setting `ALLOWED_ORIGINS`. &gt; &gt; **Security Headers**: The gateway automatically adds configurable security headers to all responses including CSP, X-Frame-Options, X-Content-Type-Options, X-Download-Options, and HSTS (on HTTPS). All headers can be individually enabled/disabled. Sensitive server headers are removed. &gt; &gt; **iframe Embedding**: By default, `X-Frame-Options: DENY` prevents iframe embedding for security. To allow embedding, set `X_FRAME_OPTIONS=SAMEORIGIN` (same domain) or disable with `X_FRAME_OPTIONS=\"\"`. Also update CSP `frame-ancestors` directive if needed. &gt; &gt; **Cookie Security**: Authentication cookies are automatically configured with HttpOnly, Secure (in production), and SameSite attributes for CSRF protection. &gt; &gt; Note: do not quote the ALLOWED_ORIGINS values, this needs to be valid JSON, such as: &gt; ALLOWED_ORIGINS=[\"http://localhost\", \"http://localhost:4444\"] &gt; &gt; Documentation endpoints (`/docs`, `/redoc`, `/openapi.json`) are always protected by authentication. &gt; By default, they require Bearer token authentication. Setting `DOCS_ALLOW_BASIC_AUTH=true` enables HTTP Basic Authentication as an additional method using the same credentials as `BASIC_AUTH_USER` and `BASIC_AUTH_PASSWORD`.   ### Logging  MCP Gateway provides flexible logging with **stdout/stderr output by default** and **optional file-based logging**. When file logging is enabled, it provides JSON formatting for structured logs and text formatting for console output.  | Setting                 | Description                        | Default           | Options                    | | ----------------------- | ---------------------------------- | ----------------- | -------------------------- | | `LOG_LEVEL`             | Minimum log level                  | `INFO`            | `DEBUG`...`CRITICAL`       | | `LOG_FORMAT`            | Console log format                 | `json`            | `json`, `text`             | | `LOG_TO_FILE`           | **Enable file logging**            | **`false`**       | **`true`, `false`**        | | `LOG_FILE`              | Log filename (when enabled)        | `null`            | `mcpgateway.log`           | | `LOG_FOLDER`            | Directory for log files            | `null`            | `logs`, `/var/log/gateway` | | `LOG_FILEMODE`          | File write mode                    | `a+`              | `a+` (append), `w` (overwrite)| | `LOG_ROTATION_ENABLED`  | **Enable log file rotation**       | **`false`**       | **`true`, `false`**        | | `LOG_MAX_SIZE_MB`       | Max file size before rotation (MB) | `1`               | Any positive integer       | | `LOG_BACKUP_COUNT`      | Number of backup files to keep     | `5`               | Any non-negative integer   |  **Logging Behavior:** - **Default**: Logs only to **stdout/stderr** with human-readable text format - **File Logging**: When `LOG_TO_FILE=true`, logs to **both** file (JSON format) and console (text format) - **Log Rotation**: When `LOG_ROTATION_ENABLED=true`, files rotate at `LOG_MAX_SIZE_MB` with `LOG_BACKUP_COUNT` backup files (e.g., `.log.1`, `.log.2`) - **Directory Creation**: Log folder is automatically created if it doesn't exist - **Centralized Service**: All modules use the unified `LoggingService` for consistent formatting  **Example Configurations:**  <pre><code># Default: stdout/stderr only (recommended for containers)\nLOG_LEVEL=INFO\n# No additional config needed - logs to stdout/stderr\n\n# Optional: Enable file logging (no rotation)\nLOG_TO_FILE=true\nLOG_FOLDER=/var/log/mcpgateway\nLOG_FILE=gateway.log\nLOG_FILEMODE=a+\n\n# Optional: Enable file logging with rotation\nLOG_TO_FILE=true\nLOG_ROTATION_ENABLED=true\nLOG_MAX_SIZE_MB=10\nLOG_BACKUP_COUNT=3\nLOG_FOLDER=/var/log/mcpgateway\nLOG_FILE=gateway.log\n</code></pre>  **Default Behavior:** - Logs are written **only to stdout/stderr** in human-readable text format - File logging is **disabled by default** (no files created) - Set `LOG_TO_FILE=true` to enable optional file logging with JSON format  ### Observability (OpenTelemetry)  MCP Gateway includes **vendor-agnostic OpenTelemetry support** for distributed tracing. Works with Phoenix, Jaeger, Zipkin, Tempo, DataDog, New Relic, and any OTLP-compatible backend.  | Setting                         | Description                                    | Default               | Options                                    | | ------------------------------- | ---------------------------------------------- | --------------------- | ------------------------------------------ | | `OTEL_ENABLE_OBSERVABILITY`     | Master switch for observability               | `true`                | `true`, `false`                           | | `OTEL_SERVICE_NAME`             | Service identifier in traces                   | `mcp-gateway`         | string                                     | | `OTEL_SERVICE_VERSION`          | Service version in traces                      | `0.6.0`               | string                                     | | `OTEL_DEPLOYMENT_ENVIRONMENT`   | Environment tag (dev/staging/prod)            | `development`         | string                                     | | `OTEL_TRACES_EXPORTER`          | Trace exporter backend                         | `otlp`                | `otlp`, `jaeger`, `zipkin`, `console`, `none` | | `OTEL_RESOURCE_ATTRIBUTES`      | Custom resource attributes                     | (empty)               | `key=value,key2=value2`                   |  **OTLP Configuration** (for Phoenix, Tempo, DataDog, etc.):  | Setting                         | Description                                    | Default               | Options                                    | | ------------------------------- | ---------------------------------------------- | --------------------- | ------------------------------------------ | | `OTEL_EXPORTER_OTLP_ENDPOINT`   | OTLP collector endpoint                        | (none)                | `http://localhost:4317`                   | | `OTEL_EXPORTER_OTLP_PROTOCOL`   | OTLP protocol                                  | `grpc`                | `grpc`, `http/protobuf`                   | | `OTEL_EXPORTER_OTLP_HEADERS`    | Authentication headers                         | (empty)               | `api-key=secret,x-auth=token`             | | `OTEL_EXPORTER_OTLP_INSECURE`   | Skip TLS verification                          | `true`                | `true`, `false`                           |  **Alternative Backends** (optional):  | Setting                         | Description                                    | Default               | Options                                    | | ------------------------------- | ---------------------------------------------- | --------------------- | ------------------------------------------ | | `OTEL_EXPORTER_JAEGER_ENDPOINT` | Jaeger collector endpoint                      | `http://localhost:14268/api/traces` | URL                             | | `OTEL_EXPORTER_ZIPKIN_ENDPOINT` | Zipkin collector endpoint                      | `http://localhost:9411/api/v2/spans` | URL                            |  **Performance Tuning**:  | Setting                         | Description                                    | Default               | Options                                    | | ------------------------------- | ---------------------------------------------- | --------------------- | ------------------------------------------ | | `OTEL_TRACES_SAMPLER`           | Sampling strategy                              | `parentbased_traceidratio` | `always_on`, `always_off`, `traceidratio` | | `OTEL_TRACES_SAMPLER_ARG`       | Sample rate (0.0-1.0)                         | `0.1`                 | float (0.1 = 10% sampling)                | | `OTEL_BSP_MAX_QUEUE_SIZE`       | Max queued spans                              | `2048`                | int &gt; 0                                    | | `OTEL_BSP_MAX_EXPORT_BATCH_SIZE`| Max batch size for export                     | `512`                 | int &gt; 0                                    | | `OTEL_BSP_SCHEDULE_DELAY`       | Export interval (ms)                          | `5000`                | int &gt; 0                                    |  **Quick Start with Phoenix**: <pre><code># Start Phoenix for LLM observability\ndocker run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest\n\n# Configure gateway\nexport OTEL_ENABLE_OBSERVABILITY=true\nexport OTEL_TRACES_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n\n# Run gateway - traces automatically sent to Phoenix\nmcpgateway\n</code></pre>  &gt; \ud83d\udd0d **What Gets Traced**: Tool invocations, prompt rendering, resource fetching, gateway federation, health checks, plugin execution (if enabled) &gt; &gt; \ud83d\ude80 **Zero Overhead**: When `OTEL_ENABLE_OBSERVABILITY=false`, all tracing is disabled with no performance impact &gt; &gt; \ud83d\udcca **View Traces**: Phoenix UI at `http://localhost:6006`, Jaeger at `http://localhost:16686`, or your configured backend  ### Transport  | Setting                   | Description                        | Default | Options                         | | ------------------------- | ---------------------------------- | ------- | ------------------------------- | | `TRANSPORT_TYPE`          | Enabled transports                 | `all`   | `http`,`ws`,`sse`,`stdio`,`all` | | `WEBSOCKET_PING_INTERVAL` | WebSocket ping (secs)              | `30`    | int &gt; 0                         | | `SSE_RETRY_TIMEOUT`       | SSE retry timeout (ms)             | `5000`  | int &gt; 0                         | | `SSE_KEEPALIVE_ENABLED`   | Enable SSE keepalive events        | `true`  | bool                            | | `SSE_KEEPALIVE_INTERVAL`  | SSE keepalive interval (secs)      | `30`    | int &gt; 0                         | | `USE_STATEFUL_SESSIONS`   | streamable http config             | `false` | bool                            | | `JSON_RESPONSE_ENABLED`   | json/sse streams (streamable http) | `true`  | bool                            |  &gt; **\ud83d\udca1 SSE Keepalive Events**: The gateway sends periodic keepalive events to prevent connection timeouts with proxies and load balancers. Disable with `SSE_KEEPALIVE_ENABLED=false` if your client doesn't handle unknown event types. Common intervals: 30s (default), 60s (AWS ALB), 240s (Azure).  ### Federation  | Setting                    | Description            | Default | Options    | | -------------------------- | ---------------------- | ------- | ---------- | | `FEDERATION_ENABLED`       | Enable federation      | `true`  | bool       | | `FEDERATION_DISCOVERY`     | Auto-discover peers    | `false` | bool       | | `FEDERATION_PEERS`         | Comma-sep peer URLs    | `[]`    | JSON array | | `FEDERATION_TIMEOUT`       | Gateway timeout (secs) | `30`    | int &gt; 0    | | `FEDERATION_SYNC_INTERVAL` | Sync interval (secs)   | `300`   | int &gt; 0    |  ### Resources  | Setting               | Description           | Default    | Options    | | --------------------- | --------------------- | ---------- | ---------- | | `RESOURCE_CACHE_SIZE` | LRU cache size        | `1000`     | int &gt; 0    | | `RESOURCE_CACHE_TTL`  | Cache TTL (seconds)   | `3600`     | int &gt; 0    | | `MAX_RESOURCE_SIZE`   | Max resource bytes    | `10485760` | int &gt; 0    | | `ALLOWED_MIME_TYPES`  | Acceptable MIME types | see code   | JSON array |  ### Tools  | Setting                 | Description                    | Default | Options | | ----------------------- | ------------------------------ | ------- | ------- | | `TOOL_TIMEOUT`          | Tool invocation timeout (secs) | `60`    | int &gt; 0 | | `MAX_TOOL_RETRIES`      | Max retry attempts             | `3`     | int \u2265 0 | | `TOOL_RATE_LIMIT`       | Tool calls per minute          | `100`   | int &gt; 0 | | `TOOL_CONCURRENT_LIMIT` | Concurrent tool invocations    | `10`    | int &gt; 0 |  ### Prompts  | Setting                 | Description                      | Default  | Options | | ----------------------- | -------------------------------- | -------- | ------- | | `PROMPT_CACHE_SIZE`     | Cached prompt templates          | `100`    | int &gt; 0 | | `MAX_PROMPT_SIZE`       | Max prompt template size (bytes) | `102400` | int &gt; 0 | | `PROMPT_RENDER_TIMEOUT` | Jinja render timeout (secs)      | `10`     | int &gt; 0 |  ### Health Checks  | Setting                 | Description                               | Default | Options | | ----------------------- | ----------------------------------------- | ------- | ------- | | `HEALTH_CHECK_INTERVAL` | Health poll interval (secs)               | `60`    | int &gt; 0 | | `HEALTH_CHECK_TIMEOUT`  | Health request timeout (secs)             | `10`    | int &gt; 0 | | `UNHEALTHY_THRESHOLD`   | Fail-count before peer deactivation,      | `3`     | int &gt; 0 | |                         | Set to -1 if deactivation is not needed.  |         |         |  ### Database  | Setting                 | Description                     | Default | Options | | ----------------------- | ------------------------------- | ------- | ------- | | `DB_POOL_SIZE`   .      | SQLAlchemy connection pool size | `200`   | int &gt; 0 | | `DB_MAX_OVERFLOW`.      | Extra connections beyond pool   | `10`    | int \u2265 0 | | `DB_POOL_TIMEOUT`.      | Wait for connection (secs)      | `30`    | int &gt; 0 | | `DB_POOL_RECYCLE`.      | Recycle connections (secs)      | `3600`  | int &gt; 0 | | `DB_MAX_RETRIES` .      | Max Retry Attempts              | `3`     | int &gt; 0 | | `DB_RETRY_INTERVAL_MS`  | Retry Interval (ms)             | `2000`  | int &gt; 0 |  ### Cache Backend  | Setting                   | Description                | Default  | Options                  | | ------------------------- | -------------------------- | -------- | ------------------------ | | `CACHE_TYPE`              | Backend (`memory`/`redis`) | `memory` | `none`, `memory`,`redis` | | `REDIS_URL`               | Redis connection URL       | (none)   | string or empty          | | `CACHE_PREFIX`            | Key prefix                 | `mcpgw:` | string                   | | `REDIS_MAX_RETRIES`       | Max Retry Attempts         | `3`      | int &gt; 0                  | | `REDIS_RETRY_INTERVAL_MS` | Retry Interval (ms)        | `2000`   | int &gt; 0                  |  &gt; \ud83e\udde0 `none` disables caching entirely. Use `memory` for dev, `database` for persistence, or `redis` for distributed caching.  ### Database Management  MCP Gateway uses Alembic for database migrations. Common commands:  - `make db-current` - Show current database version - `make db-upgrade` - Apply pending migrations - `make db-migrate` - Create new migration - `make db-history` - Show migration history - `make db-status` - Detailed migration status  #### Troubleshooting  **Common Issues:**  - **\"No 'script_location' key found\"**: Ensure you're running from the project root directory.  - **\"Unknown SSE event: keepalive\" warnings**: Some MCP clients don't recognize keepalive events. These warnings are harmless and don't affect functionality. To disable: `SSE_KEEPALIVE_ENABLED=false`  - **Connection timeouts with proxies/load balancers**: If experiencing timeouts, adjust keepalive interval to match your infrastructure: `SSE_KEEPALIVE_INTERVAL=60` (AWS ALB) or `240` (Azure).  ### Development  | Setting    | Description            | Default | Options | | ---------- | ---------------------- | ------- | ------- | | `DEV_MODE` | Enable dev mode        | `false` | bool    | | `RELOAD`   | Auto-reload on changes | `false` | bool    | | `DEBUG`    | Debug logging          | `false` | bool    |"},{"location":"#running","title":"Running","text":""},{"location":"#makefile","title":"Makefile","text":"<pre><code> make serve               # Run production Gunicorn server on\n make serve-ssl           # Run Gunicorn behind HTTPS on :4444 (uses ./certs)\n</code></pre>"},{"location":"#script-helper","title":"Script helper","text":"<p>To run the development (uvicorn) server:</p> <pre><code>make dev\n# or\n./run.sh --reload --log debug --workers 2\n</code></pre> <p><code>run.sh</code> is a wrapper around <code>uvicorn</code> that loads <code>.env</code>, supports reload, and passes arguments to the server.</p> <p>Key flags:</p> Flag Purpose Example <code>-e, --env FILE</code> load env-file <code>--env prod.env</code> <code>-H, --host</code> bind address <code>--host 127.0.0.1</code> <code>-p, --port</code> listen port <code>--port 8080</code> <code>-w, --workers</code> gunicorn workers <code>--workers 4</code> <code>-r, --reload</code> auto-reload <code>--reload</code>"},{"location":"#manual-uvicorn","title":"Manual (Uvicorn)","text":"<pre><code>uvicorn mcpgateway.main:app --host 0.0.0.0 --port 4444 --workers 4\n</code></pre>"},{"location":"#authentication-examples","title":"Authentication examples","text":"<pre><code># Generate a JWT token using JWT_SECRET_KEY and export it as MCPGATEWAY_BEARER_TOKEN\n# Note that the module needs to be installed. If running locally use:\nexport MCPGATEWAY_BEARER_TOKEN=$(JWT_SECRET_KEY=my-test-key python3 -m mcpgateway.utils.create_jwt_token)\n\n# Use the JWT token in an API call\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/tools\n</code></pre>"},{"location":"#aws-azure-openshift","title":"\u2601\ufe0f AWS / Azure / OpenShift","text":"<p>Deployment details can be found in the GitHub Pages.</p>"},{"location":"#ibm-cloud-code-engine-deployment","title":"\u2601\ufe0f IBM Cloud Code Engine Deployment","text":"<p>This project supports deployment to IBM Cloud Code Engine using the ibmcloud CLI and the IBM Container Registry.</p> \u2601\ufe0f IBM Cloud Code Engine Deployment  ### \ud83d\udd27 Prerequisites  - Podman **or** Docker installed locally - IBM Cloud CLI (use `make ibmcloud-cli-install` to install) - An [IBM Cloud API key](https://cloud.ibm.com/iam/apikeys) with access to Code Engine &amp; Container Registry - Code Engine and Container Registry services **enabled** in your IBM Cloud account  ---  ### \ud83d\udce6 Environment Variables  Create a **`.env`** file (or export the variables in your shell). The first block is **required**; the second provides **tunable defaults** you can override:  <pre><code># \u2500\u2500 Required \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nIBMCLOUD_REGION=us-south\nIBMCLOUD_RESOURCE_GROUP=default\nIBMCLOUD_PROJECT=my-codeengine-project\nIBMCLOUD_CODE_ENGINE_APP=mcpgateway\nIBMCLOUD_IMAGE_NAME=us.icr.io/myspace/mcpgateway:latest\nIBMCLOUD_IMG_PROD=mcpgateway/mcpgateway\nIBMCLOUD_API_KEY=your_api_key_here   # Optional - omit to use interactive `ibmcloud login --sso`\n\n# \u2500\u2500 Optional overrides (sensible defaults provided) \u2500\u2500\u2500\u2500\u2500\u2500\nIBMCLOUD_CPU=1                       # vCPUs for the app\nIBMCLOUD_MEMORY=4G                   # Memory allocation\nIBMCLOUD_REGISTRY_SECRET=my-regcred  # Name of the Container Registry secret\n</code></pre>  &gt; \u2705 **Quick check:** `make ibmcloud-check-env`  ---  ### \ud83d\ude80 Make Targets  | Target                      | Purpose                                                                   | | --------------------------- | ------------------------------------------------------------------------- | | `make ibmcloud-cli-install` | Install IBM Cloud CLI and required plugins                                | | `make ibmcloud-login`       | Log in to IBM Cloud (API key or SSO)                                      | | `make ibmcloud-ce-login`    | Select the Code Engine project &amp; region                                   | | `make ibmcloud-tag`         | Tag the local container image                                             | | `make ibmcloud-push`        | Push the image to IBM Container Registry                                  | | `make ibmcloud-deploy`      | **Create or update** the Code Engine application (uses CPU/memory/secret) | | `make ibmcloud-ce-status`   | Show current deployment status                                            | | `make ibmcloud-ce-logs`     | Stream logs from the running app                                          | | `make ibmcloud-ce-rm`       | Delete the Code Engine application                                        |  ---  ### \ud83d\udcdd Example Workflow  <pre><code>make ibmcloud-check-env\nmake ibmcloud-cli-install\nmake ibmcloud-login\nmake ibmcloud-ce-login\nmake ibmcloud-tag\nmake ibmcloud-push\nmake ibmcloud-deploy\nmake ibmcloud-ce-status\nmake ibmcloud-ce-logs\n</code></pre>"},{"location":"#api-endpoints","title":"API Endpoints","text":"<p>You can test the API endpoints through curl, or Swagger UI, and check detailed documentation on ReDoc:</p> <ul> <li>Swagger UI \u2192 http://localhost:4444/docs</li> <li>ReDoc    \u2192 http://localhost:4444/redoc</li> </ul> <p>Generate an API Bearer token, and test the various API endpoints.</p> \ud83d\udd10 Authentication &amp; Health Checks <pre><code># Generate a bearer token using the configured secret key (use the same as your .env)\nexport MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token -u admin --secret my-test-key)\necho ${MCPGATEWAY_BEARER_TOKEN}\n\n# Quickly confirm that authentication works and the gateway is healthy\ncurl -s -k -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" https://localhost:4444/health\n# {\"status\":\"healthy\"}\n\n# Quickly confirm the gateway version &amp; DB connectivity\ncurl -s -k -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" https://localhost:4444/version | jq\n</code></pre> \ud83e\uddf1 Protocol APIs (MCP) /protocol <pre><code># Initialize MCP session\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"protocol_version\":\"2025-03-26\",\n           \"capabilities\":{},\n           \"client_info\":{\"name\":\"MyClient\",\"version\":\"1.0.0\"}\n         }' \\\n     http://localhost:4444/protocol/initialize\n\n# Ping (JSON-RPC style)\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"ping\"}' \\\n     http://localhost:4444/protocol/ping\n\n# Completion for prompt/resource arguments (not implemented)\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"ref\":{\"type\":\"ref/prompt\",\"name\":\"example_prompt\"},\n           \"argument\":{\"name\":\"topic\",\"value\":\"py\"}\n         }' \\\n     http://localhost:4444/protocol/completion/complete\n\n# Sampling (streaming) (not implemented)\ncurl -N -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"messages\":[{\"role\":\"user\",\"content\":{\"type\":\"text\",\"text\":\"Hello\"}}],\n           \"maxTokens\":16\n         }' \\\n     http://localhost:4444/protocol/sampling/createMessage\n</code></pre> \ud83e\udde0 JSON-RPC Utility /rpc <pre><code># Generic JSON-RPC calls (tools, gateways, roots, etc.)\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"list_tools\"}' \\\n     http://localhost:4444/rpc\n</code></pre>  Handles any method name: `list_tools`, `list_gateways`, `prompts/get`, or invokes a tool if method matches a registered tool name .   \ud83d\udd27 Tool Management /tools <pre><code># Register a new tool\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\":\"clock_tool\",\n           \"url\":\"http://localhost:9000/rpc\",\n           \"description\":\"Returns current time\",\n           \"input_schema\":{\n             \"type\":\"object\",\n             \"properties\":{\"timezone\":{\"type\":\"string\"}},\n             \"required\":[]\n           }\n         }' \\\n     http://localhost:4444/tools\n\n# List tools\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/tools\n\n# Get tool by ID\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/tools/1\n\n# Update tool\ncurl -X PUT -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{ \"description\":\"Updated desc\" }' \\\n     http://localhost:4444/tools/1\n\n# Toggle active status\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/tools/1/toggle?activate=false\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/tools/1/toggle?activate=true\n\n# Delete tool\ncurl -X DELETE -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/tools/1\n</code></pre> \ud83e\udd16 A2A Agent Management /a2a <pre><code># Register a new A2A agent\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\":\"hello_world_agent\",\n           \"endpoint_url\":\"http://localhost:9999/\",\n           \"agent_type\":\"jsonrpc\",\n           \"description\":\"External AI agent for hello world functionality\",\n           \"auth_type\":\"api_key\",\n           \"auth_value\":\"your-api-key\",\n           \"tags\":[\"ai\", \"hello-world\"]\n         }' \\\n     http://localhost:4444/a2a\n\n# List A2A agents\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/a2a\n\n# Get agent by ID\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/a2a/agent-id\n\n# Update agent\ncurl -X PUT -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{ \"description\":\"Updated description\" }' \\\n     http://localhost:4444/a2a/agent-id\n\n# Test agent (direct invocation)\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"parameters\": {\n             \"method\": \"message/send\",\n             \"params\": {\n               \"message\": {\n                 \"messageId\": \"test-123\",\n                 \"role\": \"user\",\n                 \"parts\": [{\"type\": \"text\", \"text\": \"Hello!\"}]\n               }\n             }\n           },\n           \"interaction_type\": \"test\"\n         }' \\\n     http://localhost:4444/a2a/agent-name/invoke\n\n# Toggle agent status\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/a2a/agent-id/toggle?activate=false\n\n# Delete agent\ncurl -X DELETE -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/a2a/agent-id\n\n# Associate agent with virtual server (agents become available as MCP tools)\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\":\"AI Assistant Server\",\n           \"description\":\"Virtual server with AI agents\",\n           \"associated_a2a_agents\":[\"agent-id\"]\n         }' \\\n     http://localhost:4444/servers\n</code></pre>  &gt; \ud83e\udd16 **A2A Integration**: A2A agents are external AI agents that can be registered and exposed as MCP tools &gt; \ud83d\udd04 **Protocol Detection**: Gateway automatically detects JSONRPC vs custom A2A protocols &gt; \ud83d\udcca **Testing**: Built-in test functionality via Admin UI or `/a2a/{agent_id}/test` endpoint &gt; \ud83c\udf9b\ufe0f **Virtual Servers**: Associate agents with servers to expose them as standard MCP tools   \ud83c\udf10 Gateway Management /gateways <pre><code># Register an MCP server as a new gateway provider\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\":\"peer_gateway\",\"url\":\"http://peer:4444\"}' \\\n     http://localhost:4444/gateways\n\n# List gateways\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/gateways\n\n# Get gateway by ID\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/gateways/1\n\n# Update gateway\ncurl -X PUT -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"description\":\"New description\"}' \\\n     http://localhost:4444/gateways/1\n\n# Toggle active status\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/gateways/1/toggle?activate=false\n\n# Delete gateway\ncurl -X DELETE -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/gateways/1\n</code></pre> \ud83d\udcc1 Resource Management /resources <pre><code># Register resource\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"uri\":\"config://app/settings\",\n           \"name\":\"App Settings\",\n           \"content\":\"key=value\"\n         }' \\\n     http://localhost:4444/resources\n\n# List resources\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/resources\n\n# Read a resource\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/resources/config://app/settings\n\n# Update resource\ncurl -X PUT -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"content\":\"new=value\"}' \\\n     http://localhost:4444/resources/config://app/settings\n\n# Delete resource\ncurl -X DELETE -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/resources/config://app/settings\n\n# Subscribe to updates (SSE)\ncurl -N -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/resources/subscribe/config://app/settings\n</code></pre> \ud83d\udcdd Prompt Management /prompts <pre><code># Create prompt template\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\":\"greet\",\n           \"template\":\"Hello, {{ user }}!\",\n           \"argument_schema\":{\n             \"type\":\"object\",\n             \"properties\":{\"user\":{\"type\":\"string\"}},\n             \"required\":[\"user\"]\n           }\n         }' \\\n     http://localhost:4444/prompts\n\n# List prompts\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/prompts\n\n# Get prompt (with args)\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"user\":\"Alice\"}' \\\n     http://localhost:4444/prompts/greet\n\n# Get prompt (no args)\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/prompts/greet\n\n# Update prompt\ncurl -X PUT -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"template\":\"Hi, {{ user }}!\"}' \\\n     http://localhost:4444/prompts/greet\n\n# Toggle active\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/prompts/5/toggle?activate=false\n\n# Delete prompt\ncurl -X DELETE -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/prompts/greet\n</code></pre> \ud83c\udf32 Root Management /roots <pre><code># List roots\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/roots\n\n# Add root\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"uri\":\"/data\",\"name\":\"Data Root\"}' \\\n     http://localhost:4444/roots\n\n# Remove root\ncurl -X DELETE -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/roots/%2Fdata\n\n# Subscribe to root changes (SSE)\ncurl -N -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/roots/changes\n</code></pre> \ud83d\udda5\ufe0f Server Management /servers <pre><code># List servers\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/servers\n\n# Get server\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/servers/UUID_OF_SERVER_1\n\n# Create server\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\":\"db\",\"description\":\"Database\",\"associatedTools\": [\"1\",\"2\",\"3\"]}' \\\n     http://localhost:4444/servers\n\n# Update server\ncurl -X PUT -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"description\":\"Updated\"}' \\\n     http://localhost:4444/servers/UUID_OF_SERVER_1\n\n# Toggle active\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/servers/UUID_OF_SERVER_1/toggle?activate=false\n</code></pre> \ud83d\udcca Metrics /metrics <pre><code># Get aggregated metrics\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/metrics\n\n# Reset metrics (all or per-entity)\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/metrics/reset\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/metrics/reset?entity=tool&amp;id=1\n</code></pre> \ud83d\udce1 Events &amp; Health <pre><code># SSE: all events\ncurl -N -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/events\n\n# WebSocket\nwscat -c ws://localhost:4444/ws \\\n      -H \"Authorization: Basic $(echo -n admin:changeme|base64)\"\n\n# Health check\ncurl http://localhost:4444/health\n</code></pre>  Full Swagger UI at `/docs`.   \ud83d\udee0\ufe0f Sample Tool <pre><code>uvicorn sample_tool.clock_tool:app --host 0.0.0.0 --port 9000\n</code></pre> <pre><code>curl -X POST -H \"Content-Type: application/json\" \\\n     -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"get_time\",\"params\":{\"timezone\":\"UTC\"}}' \\\n     http://localhost:9000/rpc\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<pre><code>make test            # Run unit tests\nmake lint            # Run lint tools\n</code></pre>"},{"location":"#doctest-coverage","title":"Doctest Coverage","text":"<p>MCP Context Forge implements comprehensive doctest coverage to ensure all code examples in documentation are tested and verified:</p> <pre><code>make doctest         # Run all doctests\nmake doctest-verbose # Run with detailed output\nmake doctest-coverage # Generate coverage report\nmake doctest-check   # Check coverage percentage\n</code></pre> <p>Coverage Status: - \u2705 Transport Modules: 100% (base, stdio, SSE, WebSocket, streamable HTTP) - \u2705 Utility Functions: 100% (slug generation, JWT tokens, validation) - \u2705 Configuration: 100% (settings, environment variables) - \ud83d\udd04 Service Classes: ~60% (in progress) - \ud83d\udd04 Complex Classes: ~40% (in progress)</p> <p>Benefits: - All documented examples are automatically tested - Documentation stays accurate and up-to-date - Developers can run examples directly from docstrings - Regression prevention through automated verification</p> <p>For detailed information, see the Doctest Coverage Guide.</p>"},{"location":"#project-structure","title":"Project Structure","text":"\ud83d\udcc1 Directory and file structure for mcpgateway <pre><code># \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 CI / Quality &amp; Meta-files \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u251c\u2500\u2500 .bumpversion.cfg                # Automated semantic-version bumps\n\u251c\u2500\u2500 .coveragerc                     # Coverage.py settings\n\u251c\u2500\u2500 .darglint                       # Doc-string linter rules\n\u251c\u2500\u2500 .dockerignore                   # Context exclusions for image builds\n\u251c\u2500\u2500 .editorconfig                   # Consistent IDE / editor behaviour\n\u251c\u2500\u2500 .env                            # Local runtime variables (git-ignored)\n\u251c\u2500\u2500 .env.ce                         # IBM Code Engine runtime env (ignored)\n\u251c\u2500\u2500 .env.ce.example                 # Sample env for IBM Code Engine\n\u251c\u2500\u2500 .env.example                    # Generic sample env file\n\u251c\u2500\u2500 .env.gcr                        # Google Cloud Run runtime env (ignored)\n\u251c\u2500\u2500 .eslintrc.json                  # ESLint rules for JS / TS assets\n\u251c\u2500\u2500 .flake8                         # Flake-8 configuration\n\u251c\u2500\u2500 .gitattributes                  # Git attributes (e.g. EOL normalisation)\n\u251c\u2500\u2500 .github                         # GitHub settings, CI/CD workflows &amp; templates\n\u2502   \u251c\u2500\u2500 CODEOWNERS                  # Default reviewers\n\u2502   \u2514\u2500\u2500 workflows/                  # Bandit, Docker, CodeQL, Python Package, Container Deployment, etc.\n\u251c\u2500\u2500 .gitignore                      # Git exclusion rules\n\u251c\u2500\u2500 .hadolint.yaml                  # Hadolint rules for Dockerfiles\n\u251c\u2500\u2500 .htmlhintrc                     # HTMLHint rules\n\u251c\u2500\u2500 .markdownlint.json              # Markdown-lint rules\n\u251c\u2500\u2500 .pre-commit-config.yaml         # Pre-commit hooks (ruff, black, mypy, ...)\n\u251c\u2500\u2500 .pycodestyle                    # PEP-8 checker settings\n\u251c\u2500\u2500 .pylintrc                       # Pylint configuration\n\u251c\u2500\u2500 .pyspelling.yml                 # Spell-checker dictionary &amp; filters\n\u251c\u2500\u2500 .ruff.toml                      # Ruff linter / formatter settings\n\u251c\u2500\u2500 .spellcheck-en.txt              # Extra dictionary entries\n\u251c\u2500\u2500 .stylelintrc.json               # Stylelint rules for CSS\n\u251c\u2500\u2500 .travis.yml                     # Legacy Travis CI config (reference)\n\u251c\u2500\u2500 .whitesource                    # WhiteSource security-scanning config\n\u251c\u2500\u2500 .yamllint                       # yamllint ruleset\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Documentation &amp; Guidance \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u251c\u2500\u2500 CHANGELOG.md                    # Version-by-version change log\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md              # Community behaviour guidelines\n\u251c\u2500\u2500 CONTRIBUTING.md                 # How to file issues &amp; send PRs\n\u251c\u2500\u2500 DEVELOPING.md                   # Contributor workflows &amp; style guide\n\u251c\u2500\u2500 LICENSE                         # Apache License 2.0\n\u251c\u2500\u2500 README.md                       # Project overview &amp; quick-start\n\u251c\u2500\u2500 SECURITY.md                     # Security policy &amp; CVE disclosure process\n\u251c\u2500\u2500 TESTING.md                      # Testing strategy, fixtures &amp; guidelines\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Containerisation &amp; Runtime \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u251c\u2500\u2500 Containerfile                   # OCI image build (Docker / Podman)\n\u251c\u2500\u2500 Containerfile.lite              # FROM scratch UBI-Micro production build\n\u251c\u2500\u2500 docker-compose.yml              # Local multi-service stack\n\u251c\u2500\u2500 podman-compose-sonarqube.yaml   # One-liner SonarQube stack\n\u251c\u2500\u2500 run-gunicorn.sh                 # Opinionated Gunicorn startup script\n\u251c\u2500\u2500 run.sh                          # Uvicorn shortcut with arg parsing\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Build / Packaging / Tooling \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u251c\u2500\u2500 MANIFEST.in                     # sdist inclusion rules\n\u251c\u2500\u2500 Makefile                        # Dev &amp; deployment targets\n\u251c\u2500\u2500 package-lock.json               # Deterministic npm lock-file\n\u251c\u2500\u2500 package.json                    # Front-end / docs tooling deps\n\u251c\u2500\u2500 pyproject.toml                  # Poetry / PDM config &amp; lint rules\n\u251c\u2500\u2500 sonar-code.properties           # SonarQube analysis settings\n\u251c\u2500\u2500 uv.lock                         # UV resolver lock-file\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Kubernetes &amp; Helm Assets \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u251c\u2500\u2500 charts                          # Helm chart(s) for K8s / OpenShift\n\u2502   \u251c\u2500\u2500 mcp-stack                   # Umbrella chart\n\u2502   \u2502   \u251c\u2500\u2500 Chart.yaml              # Chart metadata\n\u2502   \u2502   \u251c\u2500\u2500 templates/...             # Manifest templates\n\u2502   \u2502   \u2514\u2500\u2500 values.yaml             # Default values\n\u2502   \u2514\u2500\u2500 README.md                   # Install / upgrade guide\n\u251c\u2500\u2500 k8s                             # Raw (non-Helm) K8s manifests\n\u2502   \u2514\u2500\u2500 *.yaml                      # Deployment, Service, PVC resources\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Documentation Source \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u251c\u2500\u2500 docs                            # MkDocs site source\n\u2502   \u251c\u2500\u2500 base.yml                    # MkDocs \"base\" configuration snippet (do not modify)\n\u2502   \u251c\u2500\u2500 mkdocs.yml                  # Site configuration (requires base.yml)\n\u2502   \u251c\u2500\u2500 requirements.txt            # Python dependencies for the MkDocs site\n\u2502   \u251c\u2500\u2500 Makefile                    # Make targets for building/serving the docs\n\u2502   \u2514\u2500\u2500 theme                       # Custom MkDocs theme assets\n\u2502       \u2514\u2500\u2500 logo.png                # Logo for the documentation theme\n\u2502   \u2514\u2500\u2500 docs                        # Markdown documentation\n\u2502       \u251c\u2500\u2500 architecture/           # ADRs for the project\n\u2502       \u251c\u2500\u2500 articles/               # Long-form writeups\n\u2502       \u251c\u2500\u2500 blog/                   # Blog posts\n\u2502       \u251c\u2500\u2500 deployment/             # Deployment guides (AWS, Azure, etc.)\n\u2502       \u251c\u2500\u2500 development/            # Development workflows &amp; CI docs\n\u2502       \u251c\u2500\u2500 images/                 # Diagrams &amp; screenshots\n\u2502       \u251c\u2500\u2500 index.md                # Top-level docs landing page\n\u2502       \u251c\u2500\u2500 manage/                 # Management topics (backup, logging, tuning, upgrade)\n\u2502       \u251c\u2500\u2500 overview/               # Feature overviews &amp; UI documentation\n\u2502       \u251c\u2500\u2500 security/               # Security guidance &amp; policies\n\u2502       \u251c\u2500\u2500 testing/                # Testing strategy &amp; fixtures\n\u2502       \u2514\u2500\u2500 using/                  # User-facing usage guides (agents, clients, etc.)\n\u2502       \u251c\u2500\u2500 media/                  # Social media, press coverage, videos &amp; testimonials\n\u2502       \u2502   \u251c\u2500\u2500 press/              # Press articles and blog posts\n\u2502       \u2502   \u251c\u2500\u2500 social/             # Tweets, LinkedIn posts, YouTube embeds\n\u2502       \u2502   \u251c\u2500\u2500 testimonials/       # Customer quotes &amp; community feedback\n\u2502       \u2502   \u2514\u2500\u2500 kit/                # Media kit &amp; logos for bloggers &amp; press\n\u251c\u2500\u2500 dictionary.dic                  # Custom dictionary for spell-checker (make spellcheck)\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Application &amp; Libraries \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u251c\u2500\u2500 agent_runtimes                  # Configurable agentic frameworks converted to MCP Servers\n\u251c\u2500\u2500 mcpgateway                      # \u2190 main application package\n\u2502   \u251c\u2500\u2500 __init__.py                 # Package metadata &amp; version constant\n\u2502   \u251c\u2500\u2500 admin.py                    # FastAPI routers for Admin UI\n\u2502   \u251c\u2500\u2500 cache\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 resource_cache.py       # LRU+TTL cache implementation\n\u2502   \u2502   \u2514\u2500\u2500 session_registry.py     # Session \u2194 cache mapping\n\u2502   \u251c\u2500\u2500 config.py                   # Pydantic settings loader\n\u2502   \u251c\u2500\u2500 db.py                       # SQLAlchemy models &amp; engine setup\n\u2502   \u251c\u2500\u2500 federation\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 discovery.py            # Peer-gateway discovery\n\u2502   \u2502   \u251c\u2500\u2500 forward.py              # RPC forwarding\n\u2502   \u251c\u2500\u2500 handlers\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 sampling.py             # Streaming sampling handler\n\u2502   \u251c\u2500\u2500 main.py                     # FastAPI app factory &amp; startup events\n\u2502   \u251c\u2500\u2500 mcp.db                      # SQLite fixture for tests\n\u2502   \u251c\u2500\u2500 py.typed                    # PEP 561 marker (ships type hints)\n\u2502   \u251c\u2500\u2500 schemas.py                  # Shared Pydantic DTOs\n\u2502   \u251c\u2500\u2500 services\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 completion_service.py   # Prompt / argument completion\n\u2502   \u2502   \u251c\u2500\u2500 gateway_service.py      # Peer-gateway registry\n\u2502   \u2502   \u251c\u2500\u2500 logging_service.py      # Central logging helpers\n\u2502   \u2502   \u251c\u2500\u2500 prompt_service.py       # Prompt CRUD &amp; rendering\n\u2502   \u2502   \u251c\u2500\u2500 resource_service.py     # Resource registration &amp; retrieval\n\u2502   \u2502   \u251c\u2500\u2500 root_service.py         # File-system root registry\n\u2502   \u2502   \u251c\u2500\u2500 server_service.py       # Server registry &amp; monitoring\n\u2502   \u2502   \u2514\u2500\u2500 tool_service.py         # Tool registry &amp; invocation\n\u2502   \u251c\u2500\u2500 static\n\u2502   \u2502   \u251c\u2500\u2500 admin.css               # Styles for Admin UI\n\u2502   \u2502   \u2514\u2500\u2500 admin.js                # Behaviour for Admin UI\n\u2502   \u251c\u2500\u2500 templates\n\u2502   \u2502   \u2514\u2500\u2500 admin.html              # HTMX/Alpine Admin UI template\n\u2502   \u251c\u2500\u2500 transports\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 base.py                 # Abstract transport interface\n\u2502   \u2502   \u251c\u2500\u2500 sse_transport.py        # Server-Sent Events transport\n\u2502   \u2502   \u251c\u2500\u2500 stdio_transport.py      # stdio transport for embedding\n\u2502   \u2502   \u2514\u2500\u2500 websocket_transport.py  # WS transport with ping/pong\n\u2502   \u251c\u2500\u2500 models.py                   # Core enums / type aliases\n\u2502   \u251c\u2500\u2500 utils\n\u2502   \u2502   \u251c\u2500\u2500 create_jwt_token.py     # CLI &amp; library for JWT generation\n\u2502   \u2502   \u251c\u2500\u2500 services_auth.py        # Service-to-service auth dependency\n\u2502   \u2502   \u2514\u2500\u2500 verify_credentials.py   # Basic / JWT auth helpers\n\u2502   \u251c\u2500\u2500 validation\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u2514\u2500\u2500 jsonrpc.py              # JSON-RPC 2.0 validation\n\u2502   \u2514\u2500\u2500 version.py                  # Library version helper\n\u251c\u2500\u2500 mcpgateway-wrapper              # Stdio client wrapper (PyPI)\n\u2502   \u251c\u2500\u2500 pyproject.toml\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 src/mcpgateway_wrapper/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 server.py               # Wrapper entry-point\n\u251c\u2500\u2500 mcp-servers                     # Sample downstream MCP servers\n\u251c\u2500\u2500 mcp.db                          # Default SQLite DB (auto-created)\n\u251c\u2500\u2500 mcpgrid                         # Experimental grid client / PoC\n\u251c\u2500\u2500 os_deps.sh                      # Installs system-level deps for CI\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Tests &amp; QA Assets \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u251c\u2500\u2500 test_readme.py                  # Guard: README stays in sync\n\u251c\u2500\u2500 tests\n\u2502   \u251c\u2500\u2500 conftest.py                 # Shared fixtures\n\u2502   \u251c\u2500\u2500 e2e/...                       # End-to-end scenarios\n\u2502   \u251c\u2500\u2500 hey/...                       # Load-test logs &amp; helper script\n\u2502   \u251c\u2500\u2500 integration/...               # API-level integration tests\n\u2502   \u2514\u2500\u2500 unit/...                      # Pure unit tests for business logic\n</code></pre>"},{"location":"#api-documentation","title":"API Documentation","text":"<ul> <li>Swagger UI \u2192 http://localhost:4444/docs</li> <li>ReDoc    \u2192 http://localhost:4444/redoc</li> <li>Admin Panel \u2192 http://localhost:4444/admin</li> </ul>"},{"location":"#makefile-targets","title":"Makefile targets","text":"<p>This project offer the following Makefile targets. Type <code>make</code> in the project root to show all targets.</p> \ud83d\udd27 Available Makefile targets <pre><code>\ud83d\udc0d MCP CONTEXT FORGE  (An enterprise-ready Model Context Protocol Gateway)\n\ud83d\udd27 SYSTEM-LEVEL DEPENDENCIES (DEV BUILD ONLY)\nos-deps              - Install Graphviz, Pandoc, Trivy, SCC used for dev docs generation and security scan\n\ud83c\udf31 VIRTUAL ENVIRONMENT &amp; INSTALLATION\nvenv                 - Create a fresh virtual environment with uv &amp; friends\nactivate             - Activate the virtual environment in the current shell\ninstall              - Install project into the venv\ninstall-dev          - Install project (incl. dev deps) into the venv\ninstall-db           - Install project (incl. postgres and redis) into venv\nupdate               - Update all installed deps inside the venv\ncheck-env            - Verify all required env vars in .env are present\n\u25b6\ufe0f SERVE &amp; TESTING\nserve                - Run production Gunicorn server on :4444\ncerts                - Generate self-signed TLS cert &amp; key in ./certs (won't overwrite)\nserve-ssl            - Run Gunicorn behind HTTPS on :4444 (uses ./certs)\ndev                  - Run fast-reload dev server (uvicorn)\nrun                  - Execute helper script ./run.sh\ntest                 - Run unit tests with pytest\ntest-curl            - Smoke-test API endpoints with curl script\npytest-examples      - Run README / examples through pytest-examples\nclean                - Remove caches, build artefacts, virtualenv, docs, certs, coverage, SBOM, etc.\n\ud83d\udcca COVERAGE &amp; METRICS\ncoverage             - Run tests with coverage, emit md/HTML/XML + badge\npip-licenses         - Produce dependency license inventory (markdown)\nscc                  - Quick LoC/complexity snapshot with scc\nscc-report           - Generate HTML LoC &amp; per-file metrics with scc\n\ud83d\udcda DOCUMENTATION &amp; SBOM\ndocs                 - Build docs (graphviz + handsdown + images + SBOM)\nimages               - Generate architecture &amp; dependency diagrams\n\ud83d\udd0d LINTING &amp; STATIC ANALYSIS\nlint                 - Run the full linting suite (see targets below)\nblack                - Reformat code with black\nautoflake            - Remove unused imports / variables with autoflake\nisort                - Organise &amp; sort imports with isort\nflake8               - PEP-8 style &amp; logical errors\npylint               - Pylint static analysis\nmarkdownlint         - Lint Markdown files with markdownlint (requires markdownlint-cli)\nmypy                 - Static type-checking with mypy\nbandit               - Security scan with bandit\npydocstyle           - Docstring style checker\npycodestyle          - Simple PEP-8 checker\npre-commit           - Run all configured pre-commit hooks\nruff                 - Ruff linter + formatter\nty                   - Ty type checker from astral\npyright              - Static type-checking with Pyright\nradon                - Code complexity &amp; maintainability metrics\npyroma               - Validate packaging metadata\nimportchecker        - Detect orphaned imports\nspellcheck           - Spell-check the codebase\nfawltydeps           - Detect undeclared / unused deps\nwily                 - Maintainability report\npyre                 - Static analysis with Facebook Pyre\ndepend               - List dependencies in \u2248requirements format\nsnakeviz             - Profile &amp; visualise with snakeviz\npstats               - Generate PNG call-graph from cProfile stats\nspellcheck-sort      - Sort local spellcheck dictionary\ntox                  - Run tox across multi-Python versions\nsbom                 - Produce a CycloneDX SBOM and vulnerability scan\npytype               - Flow-sensitive type checker\ncheck-manifest       - Verify sdist/wheel completeness\nyamllint            - Lint YAML files (uses .yamllint)\njsonlint            - Validate every *.json file with jq (--exit-status)\ntomllint            - Validate *.toml files with tomlcheck\n\ud83d\udd78\ufe0f  WEBPAGE LINTERS &amp; STATIC ANALYSIS (HTML/CSS/JS lint + security scans + formatting)\ninstall-web-linters  - Install HTMLHint, Stylelint, ESLint, Retire.js &amp; Prettier via npm\nlint-web             - Run HTMLHint, Stylelint, ESLint, Retire.js and npm audit\nformat-web           - Format HTML, CSS &amp; JS files with Prettier\nosv-install          - Install/upgrade osv-scanner (Go)\nosv-scan-source      - Scan source &amp; lockfiles for CVEs\nosv-scan-image       - Scan the built container image for CVEs\nosv-scan             - Run all osv-scanner checks (source, image, licence)\n\ud83d\udce1 SONARQUBE ANALYSIS\nsonar-deps-podman    - Install podman-compose + supporting tools\nsonar-deps-docker    - Install docker-compose + supporting tools\nsonar-up-podman      - Launch SonarQube with podman-compose\nsonar-up-docker      - Launch SonarQube with docker-compose\nsonar-submit-docker  - Run containerized Sonar Scanner CLI with Docker\nsonar-submit-podman  - Run containerized Sonar Scanner CLI with Podman\npysonar-scanner      - Run scan with Python wrapper (pysonar-scanner)\nsonar-info           - How to create a token &amp; which env vars to export\n\ud83d\udee1\ufe0f SECURITY &amp; PACKAGE SCANNING\ntrivy                - Scan container image for CVEs (HIGH/CRIT). Needs podman socket enabled\ngrype-scan           - Scan container for security audit and vulnerability scanning\ndockle               - Lint the built container image via tarball (no daemon/socket needed)\nhadolint             - Lint Containerfile/Dockerfile(s) with hadolint\npip-audit            - Audit Python dependencies for published CVEs\n\ud83d\udce6 DEPENDENCY MANAGEMENT\ndeps-update          - Run update-deps.py to update all dependencies in pyproject.toml and docs/requirements.txt\ncontainerfile-update - Update base image in Containerfile to latest tag\n\ud83d\udce6 PACKAGING &amp; PUBLISHING\ndist                 - Clean-build wheel *and* sdist into ./dist\nwheel                - Build wheel only\nsdist                - Build source distribution only\nverify               - Build + twine + check-manifest + pyroma (no upload)\npublish              - Verify, then upload to PyPI (needs TWINE_* creds)\n\ud83e\uddad PODMAN CONTAINER BUILD &amp; RUN\npodman-dev           - Build development container image\npodman               - Build container image\npodman-prod          - Build production container image (using ubi-micro \u2192 scratch). Not supported on macOS.\npodman-run           - Run the container on HTTP  (port 4444)\npodman-run-shell     - Run the container on HTTP  (port 4444) and start a shell\npodman-run-ssl       - Run the container on HTTPS (port 4444, self-signed)\npodman-run-ssl-host  - Run the container on HTTPS with --network=host (port 4444, self-signed)\npodman-stop          - Stop &amp; remove the container\npodman-test          - Quick curl smoke-test against the container\npodman-logs          - Follow container logs (\u2303C to quit)\npodman-stats         - Show container resource stats (if supported)\npodman-top           - Show live top-level process info in container\npodman-shell         - Open an interactive shell inside the Podman container\n\ud83d\udc0b DOCKER BUILD &amp; RUN\ndocker-dev           - Build development Docker image\ndocker               - Build production Docker image\ndocker-prod          - Build production container image (using ubi-micro \u2192 scratch). Not supported on macOS.\ndocker-run           - Run the container on HTTP  (port 4444)\ndocker-run-ssl       - Run the container on HTTPS (port 4444, self-signed)\ndocker-stop          - Stop &amp; remove the container\ndocker-test          - Quick curl smoke-test against the container\ndocker-logs          - Follow container logs (\u2303C to quit)\ndocker-stats         - Show container resource usage stats (non-streaming)\ndocker-top           - Show top-level process info in Docker container\ndocker-shell         - Open an interactive shell inside the Docker container\n\ud83d\udee0\ufe0f COMPOSE STACK     - Build / start / stop the multi-service stack\ncompose-up           - Bring the whole stack up (detached)\ncompose-restart      - Recreate changed containers, pulling / building as needed\ncompose-build        - Build (or rebuild) images defined in the compose file\ncompose-pull         - Pull the latest images only\ncompose-logs         - Tail logs from all services (Ctrl-C to exit)\ncompose-ps           - Show container status table\ncompose-shell        - Open an interactive shell in the \"gateway\" container\ncompose-stop         - Gracefully stop the stack (keep containers)\ncompose-down         - Stop &amp; remove containers (keep named volumes)\ncompose-rm           - Remove *stopped* containers\ncompose-clean        - \u2728 Down **and** delete named volumes (data-loss \u26a0)\n\u2601\ufe0f IBM CLOUD CODE ENGINE\nibmcloud-check-env          - Verify all required IBM Cloud env vars are set\nibmcloud-cli-install        - Auto-install IBM Cloud CLI + required plugins (OS auto-detected)\nibmcloud-login              - Login to IBM Cloud CLI using IBMCLOUD_API_KEY (--sso)\nibmcloud-ce-login           - Set Code Engine target project and region\nibmcloud-list-containers    - List deployed Code Engine apps\nibmcloud-tag                - Tag container image for IBM Container Registry\nibmcloud-push               - Push image to IBM Container Registry\nibmcloud-deploy             - Deploy (or update) container image in Code Engine\nibmcloud-ce-logs            - Stream logs for the deployed application\nibmcloud-ce-status          - Get deployment status\nibmcloud-ce-rm              - Delete the Code Engine application\n\ud83e\uddea MINIKUBE LOCAL CLUSTER\nminikube-install      - Install Minikube (macOS, Linux, or Windows via choco)\nhelm-install          - Install Helm CLI (macOS, Linux, or Windows)\nminikube-start        - Start local Minikube cluster with Ingress + DNS + metrics-server\nminikube-stop         - Stop the Minikube cluster\nminikube-delete       - Delete the Minikube cluster\nminikube-image-load   - Build and load ghcr.io/ibm/mcp-context-forge:latest into Minikube\nminikube-k8s-apply    - Apply Kubernetes manifests from deployment/k8s/\nminikube-status       - Show status of Minikube and ingress pods\n\ud83d\udee0\ufe0f HELM CHART TASKS\nhelm-lint            - Lint the Helm chart (static analysis)\nhelm-package         - Package the chart into dist/ as mcp-stack-&lt;ver&gt;.tgz\nhelm-deploy          - Upgrade/Install chart into Minikube (profile mcpgw)\nhelm-delete          - Uninstall the chart release from Minikube\n\ud83c\udfe0 LOCAL PYPI SERVER\nlocal-pypi-install   - Install pypiserver for local testing\nlocal-pypi-start     - Start local PyPI server on :8084 (no auth)\nlocal-pypi-start-auth - Start local PyPI server with basic auth (admin/admin)\nlocal-pypi-stop      - Stop local PyPI server\nlocal-pypi-upload    - Upload existing package to local PyPI (no auth)\nlocal-pypi-upload-auth - Upload existing package to local PyPI (with auth)\nlocal-pypi-test      - Install package from local PyPI\nlocal-pypi-clean     - Full cycle: build \u2192 upload \u2192 install locally\n\ud83c\udfe0 LOCAL DEVPI SERVER\ndevpi-install        - Install devpi server and client\ndevpi-init           - Initialize devpi server (first time only)\ndevpi-start          - Start devpi server\ndevpi-stop           - Stop devpi server\ndevpi-setup-user     - Create user and dev index\ndevpi-upload         - Upload existing package to devpi\ndevpi-test           - Install package from devpi\ndevpi-clean          - Full cycle: build \u2192 upload \u2192 install locally\ndevpi-status         - Show devpi server status\ndevpi-web            - Open devpi web interface\n</code></pre>"},{"location":"#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":"Port publishing on WSL2 (rootless Podman &amp; Docker Desktop)  ### Diagnose the listener  <pre><code># Inside your WSL distro\nss -tlnp | grep 4444        # Use ss\nnetstat -anp | grep 4444    # or netstat\n</code></pre>  *Seeing `:::4444 LISTEN rootlessport` is normal* - the IPv6 wildcard socket (`::`) also accepts IPv4 traffic **when** `net.ipv6.bindv6only = 0` (default on Linux).  ### Why localhost fails on Windows  WSL 2's NAT layer rewrites only the *IPv6* side of the dual-stack listener. From Windows, `http://127.0.0.1:4444` (or Docker Desktop's \"localhost\") therefore times-out.  #### Fix (Podman rootless)  <pre><code># Inside the WSL distro\necho \"wsl\" | sudo tee /etc/containers/podman-machine\nsystemctl --user restart podman.socket\n</code></pre>  `ss` should now show `0.0.0.0:4444` instead of `:::4444`, and the service becomes reachable from Windows *and* the LAN.  #### Fix (Docker Desktop &gt; 4.19)  Docker Desktop adds a \"WSL integration\" switch per-distro. Turn it **on** for your distro, restart Docker Desktop, then restart the container:  <pre><code>docker restart mcpgateway\n</code></pre> Gateway starts but immediately exits (\"Failed to read DATABASE_URL\")  Copy `.env.example` to `.env` first:  <pre><code>cp .env.example .env\n</code></pre>  Then edit `DATABASE_URL`, `JWT_SECRET_KEY`, `BASIC_AUTH_PASSWORD`, etc. Missing or empty required vars cause a fast-fail at startup."},{"location":"#contributing","title":"Contributing","text":"<ol> <li>Fork the repo, create a feature branch.</li> <li>Run <code>make lint</code> and fix any issues.</li> <li>Keep <code>make test</code> green and 100% coverage.</li> <li>Open a PR - describe your changes clearly.</li> </ol>"},{"location":"#see-contributingmd-for-more-details","title":"See CONTRIBUTING.md for more details.","text":""},{"location":"#changelog","title":"Changelog","text":"<p>A complete changelog can be found here: CHANGELOG.md</p>"},{"location":"#license","title":"License","text":"<p>Licensed under the Apache License 2.0 - see LICENSE</p>"},{"location":"#core-authors-and-maintainers","title":"Core Authors and Maintainers","text":"<ul> <li>Mihai Criveti - Distinguished Engineer, Agentic AI</li> </ul> <p>Special thanks to our contributors for helping us improve ContextForge MCP Gateway:</p> <p> </p>"},{"location":"#star-history-and-project-activity","title":"Star History and Project Activity","text":""},{"location":"architecture/","title":"Architecture Overview","text":"<p>The MCP Gateway acts as a unified entry point for tools, resources, prompts, and servers, federating local and remote nodes into a coherent MCP-compliant interface.</p> <p>This gateway:</p> <ul> <li>Wraps REST/MCP tools and resources under JSON-RPC and streaming protocols</li> <li>Offers a pluggable backend (cache, auth, storage)</li> <li>Exposes multiple transports (HTTP, WS, SSE, StreamableHttp, stdio)</li> <li>Automatically discovers and merges federated peers</li> </ul>"},{"location":"architecture/#system-architecture","title":"System Architecture","text":"<pre><code>graph TD\n    subgraph Clients\n        ui[\"Admin UI (Browser)\"]\n        cli[\"CLI Tools\"]\n        sdk[\"SDK / Scripts\"]\n    end\n\n    subgraph Gateway\n        app[\"FastAPI App\"]\n        auth[\"Auth Middleware&lt;br/&gt;(JWT + Basic)\"]\n        router[\"Transport Router&lt;br/&gt;(HTTP / WS / SSE / STDIO)\"]\n        services[\"Service Layer&lt;br/&gt;(Tool / Resource / Prompt / Server)\"]\n        db[\"Async DB&lt;br/&gt;(SQLAlchemy + Alembic)\"]\n        cache[\"Cache Backend&lt;br/&gt;(memory / redis / db)\"]\n        metrics[\"Metrics Exporter&lt;br/&gt;(/metrics Prometheus)\"]\n    end\n\n    subgraph Federation\n        discovery[\"Discovery Service&lt;br/&gt;(DNS-SD + Static Peers)\"]\n        peers[\"Remote Gateways\"]\n    end\n\n    ui --&gt; app\n    cli --&gt; router\n    sdk --&gt; router\n    app --&gt; auth --&gt; router\n    router --&gt; services\n    services --&gt; db\n    services --&gt; cache\n    services --&gt; metrics\n    services --&gt; discovery\n    discovery --&gt; peers\n</code></pre> <p>Each service (ToolService, ResourceService, etc.) operates independently with unified auth/session/context layers.</p>"},{"location":"architecture/#additional-architecture-documentation","title":"Additional Architecture Documentation","text":"<ul> <li>Export/Import System Architecture - Technical design of configuration management system</li> </ul>"},{"location":"architecture/#adrs-and-design-decisions","title":"ADRs and Design Decisions","text":"<p>We maintain a formal set of Architecture Decision Records documenting all major design tradeoffs and rationale.</p> <p>\ud83d\udcdc See the full ADR Index \u2192</p>"},{"location":"architecture/export-import-architecture/","title":"Export/Import System Architecture","text":"<p>Technical architecture documentation for MCP Gateway's configuration export and import system.</p>"},{"location":"architecture/export-import-architecture/#system-overview","title":"\ud83c\udfd7 System Overview","text":"<p>The export/import system provides comprehensive configuration management through multiple interfaces while maintaining security, data integrity, and operational efficiency.</p> <pre><code>graph TB\n    subgraph \"Client Interfaces\"\n        CLI[CLI Commands]\n        AdminUI[Admin UI]\n        RestAPI[REST API]\n    end\n\n    subgraph \"Core Services\"\n        ExportSvc[Export Service]\n        ImportSvc[Import Service]\n        CryptoSvc[Crypto Service]\n    end\n\n    subgraph \"Entity Services\"\n        ToolSvc[Tool Service]\n        GatewaySvc[Gateway Service]\n        ServerSvc[Server Service]\n        PromptSvc[Prompt Service]\n        ResourceSvc[Resource Service]\n        RootSvc[Root Service]\n    end\n\n    subgraph \"Storage Layer\"\n        DB[(Database)]\n        FileSystem[Export Files]\n    end\n\n    CLI --&gt; ExportSvc\n    CLI --&gt; ImportSvc\n    AdminUI --&gt; ExportSvc\n    AdminUI --&gt; ImportSvc\n    RestAPI --&gt; ExportSvc\n    RestAPI --&gt; ImportSvc\n\n    ExportSvc --&gt; ToolSvc\n    ExportSvc --&gt; GatewaySvc\n    ExportSvc --&gt; ServerSvc\n    ExportSvc --&gt; PromptSvc\n    ExportSvc --&gt; ResourceSvc\n    ExportSvc --&gt; RootSvc\n    ExportSvc --&gt; CryptoSvc\n\n    ImportSvc --&gt; ToolSvc\n    ImportSvc --&gt; GatewaySvc\n    ImportSvc --&gt; ServerSvc\n    ImportSvc --&gt; PromptSvc\n    ImportSvc --&gt; ResourceSvc\n    ImportSvc --&gt; RootSvc\n    ImportSvc --&gt; CryptoSvc\n\n    ToolSvc --&gt; DB\n    GatewaySvc --&gt; DB\n    ServerSvc --&gt; DB\n    PromptSvc --&gt; DB\n    ResourceSvc --&gt; DB\n    RootSvc --&gt; DB\n\n    ExportSvc --&gt; FileSystem\n    ImportSvc --&gt; FileSystem</code></pre>"},{"location":"architecture/export-import-architecture/#component-architecture","title":"\ud83d\udd27 Component Architecture","text":""},{"location":"architecture/export-import-architecture/#export-service-mcpgatewayservicesexport_service","title":"Export Service (<code>mcpgateway.services.export_service</code>)","text":"<p>Responsibilities: - Entity collection from all service layers - Data transformation to export schema format - Authentication data encryption using existing utilities - Dependency resolution between entities - Export data validation and schema compliance</p> <p>Key Methods: - <code>export_configuration()</code> - Complete configuration export - <code>export_selective()</code> - Selective entity export - <code>_export_tools()</code> - Tool-specific export logic - <code>_extract_dependencies()</code> - Dependency mapping - <code>_validate_export_data()</code> - Export validation</p>"},{"location":"architecture/export-import-architecture/#import-service-mcpgatewayservicesimport_service","title":"Import Service (<code>mcpgateway.services.import_service</code>)","text":"<p>Responsibilities: - Import data validation and schema compliance - Entity creation and updates with conflict resolution - Authentication data decryption and re-encryption - Progress tracking and status reporting - Cross-environment key rotation support</p> <p>Key Methods: - <code>import_configuration()</code> - Main import orchestration - <code>validate_import_data()</code> - Schema validation - <code>_process_entities()</code> - Entity processing pipeline - <code>_rekey_auth_data()</code> - Authentication re-encryption - <code>get_import_status()</code> - Progress tracking</p>"},{"location":"architecture/export-import-architecture/#cli-interface-mcpgatewaycli_export_import","title":"CLI Interface (<code>mcpgateway.cli_export_import</code>)","text":"<p>Responsibilities: - Command-line argument parsing - Authentication token management - HTTP client for gateway API communication - User-friendly progress reporting and error handling</p> <p>Key Functions: - <code>export_command()</code> - CLI export handler - <code>import_command()</code> - CLI import handler - <code>make_authenticated_request()</code> - API communication - <code>create_parser()</code> - Argument parser setup</p>"},{"location":"architecture/export-import-architecture/#security-architecture","title":"\ud83d\udd12 Security Architecture","text":""},{"location":"architecture/export-import-architecture/#authentication-data-handling","title":"Authentication Data Handling","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant ExportSvc\n    participant CryptoUtil\n    participant ImportSvc\n    participant Database\n\n    Note over Client,Database: Export Flow\n    Client-&gt;&gt;ExportSvc: export_configuration()\n    ExportSvc-&gt;&gt;Database: Fetch entities with encrypted auth\n    Database--&gt;&gt;ExportSvc: Entities (auth_value encrypted)\n    ExportSvc-&gt;&gt;Client: Export JSON (auth still encrypted)\n\n    Note over Client,Database: Import Flow\n    Client-&gt;&gt;ImportSvc: import_configuration()\n    ImportSvc-&gt;&gt;CryptoUtil: decode_auth(old_encrypted)\n    CryptoUtil--&gt;&gt;ImportSvc: Decrypted auth data\n    ImportSvc-&gt;&gt;CryptoUtil: encode_auth(data, new_key)\n    CryptoUtil--&gt;&gt;ImportSvc: Re-encrypted with new key\n    ImportSvc-&gt;&gt;Database: Store with new encryption</code></pre>"},{"location":"architecture/export-import-architecture/#encryption-flow","title":"Encryption Flow","text":"<ol> <li>Export: Authentication data remains encrypted with source environment's key</li> <li>Transport: Export files contain encrypted auth values (safe to store/transmit)</li> <li>Import: Auth data is decrypted with source key, re-encrypted with target key</li> <li>Storage: Database stores auth data encrypted with target environment's key</li> </ol>"},{"location":"architecture/export-import-architecture/#key-rotation-process","title":"Key Rotation Process","text":"<pre><code># During import with --rekey-secret\nold_secret = settings.auth_encryption_secret  # Source environment key\nnew_secret = rekey_secret                     # Target environment key\n\n# Decrypt with old key\ndecrypted_auth = decode_auth(auth_value, key=old_secret)\n\n# Re-encrypt with new key\nnew_auth_value = encode_auth(decrypted_auth, key=new_secret)\n</code></pre>"},{"location":"architecture/export-import-architecture/#data-flow-architecture","title":"\ud83d\udcca Data Flow Architecture","text":""},{"location":"architecture/export-import-architecture/#export-data-flow","title":"Export Data Flow","text":"<pre><code>graph LR\n    subgraph \"Entity Collection\"\n        E1[Tools] --&gt; Filter[Entity Filtering]\n        E2[Gateways] --&gt; Filter\n        E3[Servers] --&gt; Filter\n        E4[Prompts] --&gt; Filter\n        E5[Resources] --&gt; Filter\n        E6[Roots] --&gt; Filter\n    end\n\n    subgraph \"Processing\"\n        Filter --&gt; Transform[Data Transformation]\n        Transform --&gt; Encrypt[Auth Encryption]\n        Encrypt --&gt; Deps[Dependency Resolution]\n        Deps --&gt; Validate[Validation]\n    end\n\n    subgraph \"Output\"\n        Validate --&gt; JSON[Export JSON]\n        JSON --&gt; File[File Output]\n        JSON --&gt; API[API Response]\n        JSON --&gt; UI[UI Download]\n    end</code></pre>"},{"location":"architecture/export-import-architecture/#import-data-flow","title":"Import Data Flow","text":"<pre><code>graph LR\n    subgraph \"Input\"\n        File[Import File] --&gt; Parse[JSON Parsing]\n        API[API Request] --&gt; Parse\n        UI[UI Upload] --&gt; Parse\n    end\n\n    subgraph \"Validation\"\n        Parse --&gt; Schema[Schema Validation]\n        Schema --&gt; Fields[Field Validation]\n        Fields --&gt; Security[Security Checks]\n    end\n\n    subgraph \"Processing\"\n        Security --&gt; Decrypt[Auth Decryption]\n        Decrypt --&gt; Rekey[Key Rotation]\n        Rekey --&gt; Order[Dependency Ordering]\n        Order --&gt; Process[Entity Processing]\n    end\n\n    subgraph \"Entity Operations\"\n        Process --&gt; Create[Create New]\n        Process --&gt; Update[Update Existing]\n        Process --&gt; Skip[Skip Conflicts]\n        Process --&gt; Rename[Rename Conflicts]\n    end\n\n    subgraph \"Output\"\n        Create --&gt; Status[Status Tracking]\n        Update --&gt; Status\n        Skip --&gt; Status\n        Rename --&gt; Status\n        Status --&gt; Response[Import Response]\n    end</code></pre>"},{"location":"architecture/export-import-architecture/#entity-processing-order","title":"\ud83c\udfaf Entity Processing Order","text":"<p>Import processes entities in dependency order to ensure referential integrity:</p> <pre><code>processing_order = [\n    \"roots\",        # No dependencies\n    \"gateways\",     # No dependencies\n    \"tools\",        # No dependencies\n    \"resources\",    # No dependencies\n    \"prompts\",      # No dependencies\n    \"servers\"       # Depends on tools, resources, prompts\n]\n</code></pre> <p>This ensures that when servers are imported, their referenced tools, resources, and prompts already exist.</p>"},{"location":"architecture/export-import-architecture/#conflict-resolution-architecture","title":"\ud83d\udd04 Conflict Resolution Architecture","text":""},{"location":"architecture/export-import-architecture/#conflict-detection","title":"Conflict Detection","text":"<pre><code>class ConflictStrategy(str, Enum):\n    SKIP = \"skip\"      # Skip conflicting entities\n    UPDATE = \"update\"  # Overwrite existing entities\n    RENAME = \"rename\"  # Add timestamp suffix\n    FAIL = \"fail\"      # Raise error on conflict\n</code></pre>"},{"location":"architecture/export-import-architecture/#resolution-flow","title":"Resolution Flow","text":"<pre><code>graph TD\n    Start[Import Entity] --&gt; Exists{Entity Exists?}\n    Exists --&gt;|No| Create[Create New Entity]\n    Exists --&gt;|Yes| Strategy{Conflict Strategy}\n\n    Strategy --&gt;|SKIP| Skip[Skip Entity]\n    Strategy --&gt;|UPDATE| Update[Update Existing]\n    Strategy --&gt;|RENAME| Rename[Rename with Timestamp]\n    Strategy --&gt;|FAIL| Error[Raise Conflict Error]\n\n    Create --&gt; Success[Track Success]\n    Update --&gt; Success\n    Rename --&gt; Success\n    Skip --&gt; Warning[Track Warning]\n    Error --&gt; Failed[Track Failure]</code></pre>"},{"location":"architecture/export-import-architecture/#performance-considerations","title":"\ud83d\udcc8 Performance Considerations","text":""},{"location":"architecture/export-import-architecture/#export-performance","title":"Export Performance","text":"<ul> <li>Parallel Collection: Entity types are collected asynchronously</li> <li>Streaming: Large exports stream data to avoid memory issues</li> <li>Filtering: Early filtering reduces data processing overhead</li> <li>Caching: Entity services may cache frequently accessed data</li> </ul>"},{"location":"architecture/export-import-architecture/#import-performance","title":"Import Performance","text":"<ul> <li>Batch Processing: Entities processed in optimized batches</li> <li>Dependency Ordering: Minimizes constraint violation retries</li> <li>Progress Tracking: Lightweight status updates don't block processing</li> <li>Error Handling: Failed entities don't stop processing of others</li> </ul>"},{"location":"architecture/export-import-architecture/#optimization-strategies","title":"Optimization Strategies","text":"<pre><code># Export optimizations\n- Use specific entity type filters: --types tools,gateways\n- Filter by tags for relevant subsets: --tags production\n- Exclude unnecessary data: --exclude-types metrics\n\n# Import optimizations\n- Use selective imports: --include \"tools:critical_tool\"\n- Process in stages: Import tools first, then servers\n- Use update strategy: Faster than delete/recreate\n</code></pre>"},{"location":"architecture/export-import-architecture/#extension-points","title":"\ud83d\udee0 Extension Points","text":""},{"location":"architecture/export-import-architecture/#custom-export-formats","title":"Custom Export Formats","text":"<p>The system is designed to support additional export formats:</p> <pre><code>class ExportService:\n    async def export_configuration(self, format: str = \"json\"):\n        if format == \"json\":\n            return self._export_json()\n        elif format == \"yaml\":\n            return self._export_yaml()  # Future extension\n        elif format == \"terraform\":\n            return self._export_terraform()  # Future extension\n</code></pre>"},{"location":"architecture/export-import-architecture/#plugin-integration","title":"Plugin Integration","text":"<p>Export/import operations can be extended with plugins:</p> <pre><code># Plugin hooks for export/import operations\n@plugin_hook(\"pre_export\")\nasync def validate_export_permissions(context: ExportContext):\n    # Validate user permissions before export\n    pass\n\n@plugin_hook(\"post_import\")\nasync def notify_import_completion(context: ImportContext):\n    # Send notifications after successful import\n    pass\n</code></pre>"},{"location":"architecture/export-import-architecture/#custom-validation","title":"Custom Validation","text":"<p>Additional validation can be plugged into the import pipeline:</p> <pre><code>class CustomImportValidator:\n    async def validate_entity(self, entity_type: str, entity_data: dict):\n        # Custom business logic validation\n        pass\n</code></pre>"},{"location":"architecture/export-import-architecture/#testing-architecture","title":"\ud83e\uddea Testing Architecture","text":""},{"location":"architecture/export-import-architecture/#unit-test-coverage","title":"Unit Test Coverage","text":"<ul> <li>Export Service: Entity collection, filtering, validation</li> <li>Import Service: Conflict resolution, validation, progress tracking</li> <li>CLI Interface: Argument parsing, API communication</li> <li>API Endpoints: Request/response handling, error cases</li> </ul>"},{"location":"architecture/export-import-architecture/#integration-test-coverage","title":"Integration Test Coverage","text":"<ul> <li>End-to-End Workflows: Complete export \u2192 import cycles</li> <li>Cross-Environment: Key rotation and migration scenarios</li> <li>Error Handling: Network failures, invalid data, auth errors</li> <li>Performance: Large configuration handling</li> </ul>"},{"location":"architecture/export-import-architecture/#test-data-management","title":"Test Data Management","text":"<pre><code>@pytest.fixture\ndef sample_export_data():\n    return {\n        \"version\": \"2025-03-26\",\n        \"entities\": {\"tools\": [...], \"gateways\": [...]},\n        \"metadata\": {\"entity_counts\": {...}}\n    }\n\n@pytest.fixture\ndef mock_services():\n    # Mock all entity services for isolated testing\n    pass\n</code></pre>"},{"location":"architecture/export-import-architecture/#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":""},{"location":"architecture/export-import-architecture/#metrics-tracked","title":"Metrics Tracked","text":"<ul> <li>Export Operations: Count, duration, size, entity types</li> <li>Import Operations: Count, duration, success/failure rates</li> <li>Conflict Resolution: Strategy usage, conflict rates</li> <li>Performance: Processing times per entity type</li> </ul>"},{"location":"architecture/export-import-architecture/#logging","title":"Logging","text":"<p>All export/import operations are logged with structured data:</p> <pre><code>{\n  \"timestamp\": \"2025-01-15T10:30:00Z\",\n  \"level\": \"INFO\",\n  \"message\": \"Configuration export completed\",\n  \"export_id\": \"exp_abc123\",\n  \"user\": \"admin\",\n  \"entity_counts\": {\"tools\": 15, \"gateways\": 3},\n  \"duration_ms\": 1250,\n  \"size_bytes\": 45678\n}\n</code></pre>"},{"location":"architecture/export-import-architecture/#health-checks","title":"Health Checks","text":"<p>The system provides health indicators for export/import functionality:</p> <pre><code># Check export service health\ncurl http://localhost:4444/health\n\n# Monitor active imports\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n     http://localhost:4444/import/status\n</code></pre>"},{"location":"architecture/export-import-architecture/#future-enhancements","title":"\ud83d\udd2e Future Enhancements","text":""},{"location":"architecture/export-import-architecture/#planned-features","title":"Planned Features","text":"<ol> <li>Incremental Exports: Export only changed entities since last export</li> <li>Delta Imports: Import only differences between configurations</li> <li>Backup Scheduling: Built-in cron-like scheduling for automated exports</li> <li>Multi-Format Support: YAML, Terraform, Helm chart exports</li> <li>Compression: Automatic compression for large export files</li> <li>Encryption at Rest: Additional encryption layer for export files</li> </ol>"},{"location":"architecture/export-import-architecture/#api-evolution","title":"API Evolution","text":"<p>The export/import API is versioned and extensible:</p> <pre><code>{\n  \"version\": \"2025-03-26\",\n  \"api_version\": \"v1\",\n  \"backward_compatible\": true,\n  \"schema_url\": \"https://gateway.com/schemas/export/v1.json\"\n}\n</code></pre>"},{"location":"architecture/export-import-architecture/#implementation-details","title":"\ud83d\udd27 Implementation Details","text":""},{"location":"architecture/export-import-architecture/#file-locations","title":"File Locations","text":"<pre><code>mcpgateway/\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 export_service.py      # Core export logic\n\u2502   \u2514\u2500\u2500 import_service.py      # Core import logic\n\u251c\u2500\u2500 cli_export_import.py       # CLI interface\n\u251c\u2500\u2500 main.py                    # REST API endpoints\n\u2514\u2500\u2500 admin.py                   # Admin UI endpoints\n\ntests/\n\u251c\u2500\u2500 unit/mcpgateway/services/\n\u2502   \u251c\u2500\u2500 test_export_service.py\n\u2502   \u2514\u2500\u2500 test_import_service.py\n\u2514\u2500\u2500 integration/\n    \u2514\u2500\u2500 test_export_import_api.py\n</code></pre>"},{"location":"architecture/export-import-architecture/#dependencies","title":"Dependencies","text":"<ul> <li>FastAPI: REST API framework</li> <li>Pydantic: Data validation and serialization</li> <li>SQLAlchemy: Database ORM for entity services</li> <li>aiohttp: HTTP client for CLI operations</li> <li>argparse: CLI argument parsing</li> </ul>"},{"location":"architecture/export-import-architecture/#integration-points","title":"Integration Points","text":"<ul> <li>Authentication: Uses existing JWT/basic auth system</li> <li>Encryption: Leverages existing <code>encode_auth</code>/<code>decode_auth</code> utilities</li> <li>Validation: Integrates with existing security validators</li> <li>Logging: Uses shared logging service infrastructure</li> <li>Error Handling: Follows established error response patterns</li> </ul> <p>This architecture provides a solid foundation for configuration management while maintaining compatibility with existing MCP Gateway systems and allowing for future enhancements.</p>"},{"location":"architecture/oauth-authorization-code-ui-design/","title":"OAuth 2.0 Authorization Code Flow UI Implementation Design","text":"<p>Version: 1.0 Status: Design Document Date: December 2024 Related: OAuth Design Document</p>"},{"location":"architecture/oauth-authorization-code-ui-design/#executive-summary","title":"Executive Summary","text":"<p>This document outlines the design for implementing OAuth 2.0 Authorization Code flow with user consent in the MCP Gateway UI. The implementation will extend the existing OAuth infrastructure to support user delegation flows, token storage, and automatic token refresh, enabling agents to act on behalf of users with proper consent and scoped permissions.</p>"},{"location":"architecture/oauth-authorization-code-ui-design/#current-state-analysis","title":"Current State Analysis","text":""},{"location":"architecture/oauth-authorization-code-ui-design/#existing-implementation","title":"Existing Implementation","text":"<ul> <li>\u2705 OAuth Manager service with Client Credentials flow</li> <li>\u2705 Basic Authorization Code flow support in OAuth Manager</li> <li>\u2705 OAuth configuration fields in Gateway creation UI</li> <li>\u2705 OAuth callback endpoint (<code>/oauth/callback</code>)</li> <li>\u2705 Database schema with <code>oauth_config</code> JSON field</li> <li>\u2705 Client secret encryption/decryption</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#current-limitations","title":"Current Limitations","text":"<ul> <li>\u274c No token storage mechanism for Authorization Code flow</li> <li>\u274c No refresh token handling</li> <li>\u274c Incomplete UI flow for user consent</li> <li>\u274c No token expiration management</li> <li>\u274c Limited error handling for OAuth flows</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    subgraph \"MCP Gateway UI\"\n        A[Gateway Configuration]\n        B[OAuth Authorization Flow]\n        C[Token Management]\n        D[User Consent Interface]\n    end\n\n    subgraph \"Backend Services\"\n        E[OAuth Manager]\n        F[Token Storage Service]\n        G[Gateway Service]\n    end\n\n    subgraph \"Database\"\n        H[Gateway Table]\n        I[OAuth Tokens Table]\n    end\n\n    subgraph \"External\"\n        J[OAuth Provider]\n        K[User Browser]\n    end\n\n    A --&gt; E\n    B --&gt; E\n    E --&gt; F\n    F --&gt; I\n    G --&gt; F\n    B --&gt; K\n    K --&gt; J\n    J --&gt; B\n    E --&gt; J</code></pre>"},{"location":"architecture/oauth-authorization-code-ui-design/#database-schema-changes","title":"Database Schema Changes","text":""},{"location":"architecture/oauth-authorization-code-ui-design/#new-oauth-tokens-table","title":"New OAuth Tokens Table","text":"<pre><code>CREATE TABLE oauth_tokens (\n    id VARCHAR(36) PRIMARY KEY DEFAULT (uuid()),\n    gateway_id VARCHAR(36) NOT NULL,\n    user_id VARCHAR(255) NOT NULL,  -- OAuth provider user ID\n    access_token TEXT NOT NULL,\n    refresh_token TEXT,\n    token_type VARCHAR(50) DEFAULT 'Bearer',\n    expires_at TIMESTAMP,\n    scopes JSON,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n\n    FOREIGN KEY (gateway_id) REFERENCES gateways(id) ON DELETE CASCADE,\n    UNIQUE KEY unique_gateway_user (gateway_id, user_id)\n);\n\n-- Index for efficient token lookup\nCREATE INDEX idx_oauth_tokens_gateway_user ON oauth_tokens(gateway_id, user_id);\nCREATE INDEX idx_oauth_tokens_expires ON oauth_tokens(expires_at);\n</code></pre>"},{"location":"architecture/oauth-authorization-code-ui-design/#modified-gateway-table","title":"Modified Gateway Table","text":"<pre><code>-- Add new fields to existing oauth_config JSON structure\nALTER TABLE gateways\nMODIFY COLUMN oauth_config JSON COMMENT 'OAuth 2.0 configuration including grant_type, client_id, encrypted client_secret, URLs, scopes, and token management settings';\n\n-- Updated oauth_config structure:\n{\n  \"grant_type\": \"client_credentials|authorization_code\",\n  \"client_id\": \"string\",\n  \"client_secret\": \"encrypted_string\",\n  \"authorization_url\": \"string\",\n  \"token_url\": \"string\",\n  \"redirect_uri\": \"string\",\n  \"scopes\": [\"scope1\", \"scope2\"],\n  \"token_management\": {\n    \"store_tokens\": true,\n    \"auto_refresh\": true,\n    \"refresh_threshold_seconds\": 300\n  }\n}\n</code></pre>"},{"location":"architecture/oauth-authorization-code-ui-design/#core-components","title":"Core Components","text":""},{"location":"architecture/oauth-authorization-code-ui-design/#1-token-storage-service","title":"1. Token Storage Service","text":"<p>Location: <code>mcpgateway/services/token_storage_service.py</code></p> <pre><code>from datetime import datetime, timedelta\nfrom typing import Optional, Dict, Any, List\nfrom sqlalchemy.orm import Session\nfrom mcpgateway.db import OAuthToken, DbGateway\nfrom mcpgateway.utils.oauth_encryption import get_oauth_encryption\n\nclass TokenStorageService:\n    \"\"\"Manages OAuth token storage and retrieval.\"\"\"\n\n    def __init__(self, db: Session):\n        self.db = db\n        self.encryption = get_oauth_encryption()\n\n    async def store_tokens(\n        self,\n        gateway_id: str,\n        user_id: str,\n        access_token: str,\n        refresh_token: Optional[str],\n        expires_in: int,\n        scopes: List[str]\n    ) -&gt; OAuthToken:\n        \"\"\"Store OAuth tokens for a gateway-user combination.\"\"\"\n\n        # Encrypt sensitive tokens\n        encrypted_access = self.encryption.encrypt_secret(access_token)\n        encrypted_refresh = None\n        if refresh_token:\n            encrypted_refresh = self.encryption.encrypt_secret(refresh_token)\n\n        # Calculate expiration\n        expires_at = datetime.utcnow() + timedelta(seconds=expires_in)\n\n        # Create or update token record\n        token_record = self.db.query(OAuthToken).filter(\n            OAuthToken.gateway_id == gateway_id,\n            OAuthToken.user_id == user_id\n        ).first()\n\n        if token_record:\n            # Update existing record\n            token_record.access_token = encrypted_access\n            token_record.refresh_token = encrypted_refresh\n            token_record.expires_at = expires_at\n            token_record.scopes = scopes\n            token_record.updated_at = datetime.utcnow()\n        else:\n            # Create new record\n            token_record = OAuthToken(\n                gateway_id=gateway_id,\n                user_id=user_id,\n                access_token=encrypted_access,\n                refresh_token=encrypted_refresh,\n                expires_at=expires_at,\n                scopes=scopes\n            )\n            self.db.add(token_record)\n\n        self.db.commit()\n        return token_record\n</code></pre> <pre><code>async def get_valid_token(\n    self,\n    gateway_id: str,\n    user_id: str\n) -&gt; Optional[str]:\n    \"\"\"Get a valid access token, refreshing if necessary.\"\"\"\n\n    token_record = self.db.query(OAuthToken).filter(\n        OAuthToken.gateway_id == gateway_id,\n        OAuthToken.user_id == user_id\n    ).first()\n\n    if not token_record:\n        return None\n\n    # Check if token is expired or near expiration\n    if self._is_token_expired(token_record):\n        if token_record.refresh_token:\n            # Attempt to refresh token\n            new_token = await self._refresh_access_token(token_record)\n            if new_token:\n                return new_token\n        return None\n\n    # Decrypt and return valid token\n    return self.encryption.decrypt_secret(token_record.access_token)\n\nasync def _refresh_access_token(self, token_record: OAuthToken) -&gt; Optional[str]:\n    \"\"\"Refresh an expired access token using refresh token.\"\"\"\n    # Implementation for token refresh\n    pass\n\ndef _is_token_expired(self, token_record: OAuthToken, threshold_seconds: int = 300) -&gt; bool:\n    \"\"\"Check if token is expired or near expiration.\"\"\"\n    return datetime.utcnow() + timedelta(seconds=threshold_seconds) &gt;= token_record.expires_at\n</code></pre> <p>``` </p>"},{"location":"architecture/oauth-authorization-code-ui-design/#2-enhanced-oauth-manager","title":"2. Enhanced OAuth Manager","text":"<p>Location: <code>mcpgateway/services/oauth_manager.py</code> <code>python class OAuthManager:     \"\"\"Enhanced OAuth Manager with token storage support.\"\"\"      def __init__(self, token_storage: TokenStorageService):         self.token_storage = token_storage      async def initiate_authorization_code_flow(         self,         gateway_id: str,         credentials: Dict[str, Any]     ) -&gt; Dict[str, str]:         \"\"\"Initiate Authorization Code flow and return authorization URL.\"\"\"          # Generate state parameter for CSRF protection         state = self._generate_state(gateway_id)          # Store state in session/cache for validation         await self._store_authorization_state(gateway_id, state)          # Generate authorization URL         auth_url, _ = self._create_authorization_url(credentials, state)          return {             'authorization_url': auth_url,             'state': state,             'gateway_id': gateway_id         }</code></p> <pre><code>async def complete_authorization_code_flow(\n    self,\n    gateway_id: str,\n    code: str,\n    state: str,\n    credentials: Dict[str, Any]\n) -&gt; Dict[str, Any]:\n    \"\"\"Complete Authorization Code flow and store tokens.\"\"\"\n\n    # Validate state parameter\n    if not await self._validate_authorization_state(gateway_id, state):\n        raise OAuthError(\"Invalid state parameter\")\n\n    # Exchange code for tokens\n    token_response = await self._exchange_code_for_tokens(credentials, code)\n\n    # Extract user information from token response\n    user_id = self._extract_user_id(token_response, credentials)\n\n    # Store tokens\n    token_record = await self.token_storage.store_tokens(\n        gateway_id=gateway_id,\n        user_id=user_id,\n        access_token=token_response['access_token'],\n        refresh_token=token_response.get('refresh_token'),\n        expires_in=token_response.get('expires_in', 3600),\n        scopes=token_response.get('scope', '').split()\n    )\n\n    return {\n        'success': True,\n        'user_id': user_id,\n        'expires_at': token_record.expires_at.isoformat()\n    }\n\nasync def get_access_token_for_user(\n    self,\n    gateway_id: str,\n    user_id: str\n) -&gt; Optional[str]:\n    \"\"\"Get valid access token for a specific user.\"\"\"\n    return await self.token_storage.get_valid_token(gateway_id, user_id)\n</code></pre> <p>``` </p>"},{"location":"architecture/oauth-authorization-code-ui-design/#3-oauth-callback-handler","title":"3. OAuth Callback Handler","text":"<p>Location: <code>mcpgateway/routers/oauth_router.py</code> <code>python from fastapi import APIRouter, Depends, Request, HTTPException from fastapi.responses import RedirectResponse, HTMLResponse  oauth_router = APIRouter(prefix=\"/oauth\", tags=[\"oauth\"])  @oauth_router.get(\"/authorize/{gateway_id}\") async def initiate_oauth_flow(     gateway_id: str,     request: Request,     db: Session = Depends(get_db) ) -&gt; RedirectResponse:     \"\"\"Initiate OAuth Authorization Code flow.\"\"\"      # Get gateway configuration     gateway = db.query(DbGateway).filter(DbGateway.id == gateway_id).first()     if not gateway or not gateway.oauth_config:         raise HTTPException(status_code=404, detail=\"Gateway not found or not configured for OAuth\")      # Initiate OAuth flow     oauth_manager = OAuthManager(TokenStorageService(db))     auth_data = await oauth_manager.initiate_authorization_code_flow(         gateway_id, gateway.oauth_config     )      # Redirect user to OAuth provider     return RedirectResponse(url=auth_data['authorization_url'])</code></p> <p>@oauth_router.get(\"/callback\") async def oauth_callback(     code: str,     state: str,     gateway_id: str,     request: Request,     db: Session = Depends(get_db) ) -&gt; HTMLResponse:     \"\"\"Handle OAuth callback and complete authorization.\"\"\"</p> <pre><code>try:\n    # Complete OAuth flow\n    oauth_manager = OAuthManager(TokenStorageService(db))\n    gateway = db.query(DbGateway).filter(DbGateway.id == gateway_id).first()\n\n    result = await oauth_manager.complete_authorization_code_flow(\n        gateway_id, code, state, gateway.oauth_config\n    )\n\n    # Return success page with option to return to admin\n    return HTMLResponse(content=f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;&lt;title&gt;OAuth Authorization Successful&lt;/title&gt;&lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;\u2705 OAuth Authorization Successful&lt;/h1&gt;\n        &lt;p&gt;Gateway: {gateway.name}&lt;/p&gt;\n        &lt;p&gt;User: {result['user_id']}&lt;/p&gt;\n        &lt;p&gt;Expires: {result['expires_at']}&lt;/p&gt;\n        &lt;a href=\"/admin#gateways\"&gt;Return to Admin Panel&lt;/a&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\")\n\nexcept Exception as e:\n    return HTMLResponse(content=f\"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;&lt;title&gt;OAuth Authorization Failed&lt;/title&gt;&lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;\u274c OAuth Authorization Failed&lt;/h1&gt;\n        &lt;p&gt;Error: {str(e)}&lt;/p&gt;\n        &lt;a href=\"/admin#gateways\"&gt;Return to Admin Panel&lt;/a&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\", status_code=400)\n</code></pre> <p>``` </p>"},{"location":"architecture/oauth-authorization-code-ui-design/#ui-implementation","title":"UI Implementation","text":""},{"location":"architecture/oauth-authorization-code-ui-design/#1-enhanced-gateway-creation-form","title":"1. Enhanced Gateway Creation Form","text":"<p>File: <code>mcpgateway/templates/admin.html</code> <code>html &lt;!-- OAuth Configuration Fields --&gt; &lt;div id=\"auth-oauth-fields-gw\" style=\"display: none\"&gt;   &lt;div class=\"space-y-4\"&gt;     &lt;div&gt;       &lt;label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"&gt;         Grant Type       &lt;/label&gt;       &lt;select         name=\"oauth_grant_type\"         id=\"oauth-grant-type-gw\"         onchange=\"toggleOAuthFields()\"         class=\"mt-1 block w-full rounded-md border border-gray-300 dark:border-gray-700 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-900 dark:placeholder-gray-300 dark:text-gray-300\"       &gt;         &lt;option value=\"client_credentials\"&gt;Client Credentials (Machine-to-Machine)&lt;/option&gt;         &lt;option value=\"authorization_code\"&gt;Authorization Code (User Delegation)&lt;/option&gt;       &lt;/select&gt;     &lt;/div&gt;      &lt;!-- Common OAuth fields --&gt;     &lt;div&gt;       &lt;label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"&gt;         Client ID       &lt;/label&gt;       &lt;input         type=\"text\"         name=\"oauth_client_id\"         class=\"mt-1 block w-full rounded-md border border-gray-300 dark:border-gray-700 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-900 dark:placeholder-gray-300 dark:text-gray-300\"         placeholder=\"Your OAuth client ID\"       /&gt;     &lt;/div&gt;</code></p> <pre><code>&lt;!-- Authorization Code specific fields --&gt;\n&lt;div id=\"oauth-auth-code-fields-gw\" style=\"display: none\"&gt;\n  &lt;div&gt;\n    &lt;label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"&gt;\n      Authorization URL\n    &lt;/label&gt;\n    &lt;input\n      type=\"url\"\n      name=\"oauth_authorization_url\"\n      class=\"mt-1 block w-full rounded-md border border-gray-300 dark:border-gray-700 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-900 dark:placeholder-gray-300 dark:text-gray-300\"\n      placeholder=\"https://oauth.example.com/authorize\"\n    /&gt;\n  &lt;/div&gt;\n\n  &lt;div&gt;\n    &lt;label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"&gt;\n      Redirect URI\n    &lt;/label&gt;\n    &lt;input\n      type=\"url\"\n      name=\"oauth_redirect_uri\"\n      class=\"mt-1 block w-full rounded-md border border-gray-300 dark:border-gray-700 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-900 dark:placeholder-gray-300 dark:text-gray-300\"\n      placeholder=\"https://gateway.example.com/oauth/callback\"\n    /&gt;\n    &lt;p class=\"mt-1 text-sm text-gray-500\"&gt;\n      This must match the redirect URI configured in your OAuth application\n    &lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;div&gt;\n    &lt;label class=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"&gt;\n      Token Management\n    &lt;/label&gt;\n    &lt;div class=\"mt-2 space-y-2\"&gt;\n      &lt;label class=\"flex items-center\"&gt;\n        &lt;input\n          type=\"checkbox\"\n          name=\"oauth_store_tokens\"\n          checked\n          class=\"rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\n        /&gt;\n        &lt;span class=\"ml-2 text-sm text-gray-700 dark:text-gray-300\"&gt;\n          Store access tokens for reuse\n        &lt;/span&gt;\n      &lt;/label&gt;\n      &lt;label class=\"flex items-center\"&gt;\n        &lt;input\n          type=\"checkbox\"\n          name=\"oauth_auto_refresh\"\n          checked\n          class=\"rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\n        /&gt;\n        &lt;span class=\"ml-2 text-sm text-gray-700 dark:text-gray-300\"&gt;\n          Automatically refresh expired tokens\n        &lt;/span&gt;\n      &lt;/label&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>  ``` </p>"},{"location":"architecture/oauth-authorization-code-ui-design/#2-javascript-for-dynamic-field-management","title":"2. JavaScript for Dynamic Field Management","text":"<p>File: <code>mcpgateway/static/admin.js</code> <code>javascript // OAuth field management function toggleOAuthFields() {     const grantType = document.getElementById('oauth-grant-type-gw').value;     const authCodeFields = document.getElementById('oauth-auth-code-fields-gw');      if (grantType === 'authorization_code') {         authCodeFields.style.display = 'block';         // Show additional validation for required fields         document.querySelectorAll('#oauth-auth-code-fields-gw input').forEach(input =&gt; {             input.required = true;         });     } else {         authCodeFields.style.display = 'none';         // Remove required validation for hidden fields         document.querySelectorAll('#oauth-auth-code-fields-gw input').forEach(input =&gt; {             input.required = false;         });     } }  // Enhanced gateway form submission async function submitGatewayForm(formData) {     const grantType = formData.get('oauth_grant_type');      if (grantType === 'authorization_code') {         // Validate required fields         const requiredFields = [             'oauth_authorization_url',             'oauth_redirect_uri'         ];          for (const field of requiredFields) {             if (!formData.get(field)) {                 showError(`Field ${field} is required for Authorization Code flow`);                 return false;             }         }          // Check if redirect URI matches expected pattern         const redirectUri = formData.get('oauth_redirect_uri');         const expectedPattern = window.location.origin + '/oauth/callback';          if (!redirectUri.includes('/oauth/callback')) {             showWarning('Redirect URI should typically end with /oauth/callback for security');         }     }      return true; }</code></p>"},{"location":"architecture/oauth-authorization-code-ui-design/#3-gateway-management-interface","title":"3. Gateway Management Interface","text":"<p>Enhanced Gateway List View</p> <pre><code>&lt;!-- Gateway Status and OAuth Information --&gt;\n&lt;td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\"&gt;\n  &lt;div class=\"space-y-1\"&gt;\n    &lt;div class=\"flex items-center\"&gt;\n      &lt;span class=\"text-gray-500\"&gt;Status:&lt;/span&gt;\n      {% if gateway.enabled %}\n        &lt;span class=\"ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\"&gt;\n          Active\n        &lt;/span&gt;\n      {% else %}\n        &lt;span class=\"ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800\"&gt;\n          Inactive\n        &lt;/span&gt;\n      {% endif %}\n    &lt;/div&gt;\n\n    {% if gateway.auth_type == 'oauth' and gateway.oauth_config %}\n      &lt;div class=\"text-xs text-gray-500\"&gt;\n        OAuth: {{ gateway.oauth_config.grant_type.replace('_', ' ').title() }}\n        {% if gateway.oauth_config.grant_type == 'authorization_code' %}\n          &lt;br&gt;\n          &lt;a href=\"/oauth/authorize/{{ gateway.id }}\"\n             class=\"text-indigo-600 hover:text-indigo-500 underline\"&gt;\n            \ud83d\udd10 Authorize Users\n          &lt;/a&gt;\n        {% endif %}\n      &lt;/div&gt;\n    {% endif %}\n  &lt;/div&gt;\n&lt;/td&gt;\n</code></pre>"},{"location":"architecture/oauth-authorization-code-ui-design/#oauth-flow-sequences","title":"OAuth Flow Sequences","text":""},{"location":"architecture/oauth-authorization-code-ui-design/#authorization-code-flow-with-token-storage","title":"Authorization Code Flow with Token Storage","text":"<pre><code>sequenceDiagram\n    participant Admin\n    participant Gateway\n    participant OAuth Manager\n    participant Token Storage\n    participant OAuth Provider\n    participant Database\n\n    Admin-&gt;&gt;Gateway: Configure OAuth (Auth Code)\n    Gateway-&gt;&gt;Database: Store OAuth config\n\n    Admin-&gt;&gt;Gateway: Click \"Authorize Users\"\n    Gateway-&gt;&gt;OAuth Manager: Initiate auth flow\n    OAuth Manager-&gt;&gt;Token Storage: Store auth state\n    OAuth Manager--&gt;&gt;Gateway: Authorization URL\n    Gateway--&gt;&gt;Admin: Redirect to OAuth Provider\n\n    Admin-&gt;&gt;OAuth Provider: Login &amp; Authorize\n    OAuth Provider--&gt;&gt;Gateway: Callback with code\n    Gateway-&gt;&gt;OAuth Manager: Exchange code for tokens\n    OAuth Manager-&gt;&gt;OAuth Provider: POST /token\n    OAuth Provider--&gt;&gt;OAuth Manager: Access + Refresh tokens\n\n    OAuth Manager-&gt;&gt;Token Storage: Store encrypted tokens\n    Token Storage-&gt;&gt;Database: Save token record\n    Token Storage--&gt;&gt;OAuth Manager: Confirmation\n    OAuth Manager--&gt;&gt;Gateway: Success\n    Gateway--&gt;&gt;Admin: Authorization complete</code></pre>"},{"location":"architecture/oauth-authorization-code-ui-design/#tool-invocation-with-stored-tokens","title":"Tool Invocation with Stored Tokens","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Gateway\n    participant Token Storage\n    participant OAuth Provider\n    participant MCP Server\n\n    Client-&gt;&gt;Gateway: Invoke Tool\n    Gateway-&gt;&gt;Token Storage: Get valid access token\n    Token Storage-&gt;&gt;Token Storage: Check expiration\n\n    alt Token valid\n        Token Storage--&gt;&gt;Gateway: Decrypted access token\n        Gateway-&gt;&gt;MCP Server: Tool request + Bearer token\n        MCP Server--&gt;&gt;Gateway: Tool response\n        Gateway--&gt;&gt;Client: Result\n    else Token expired\n        Token Storage-&gt;&gt;OAuth Provider: Refresh token request\n        OAuth Provider--&gt;&gt;Token Storage: New access token\n        Token Storage-&gt;&gt;Database: Update token record\n        Token Storage--&gt;&gt;Gateway: New access token\n        Gateway-&gt;&gt;MCP Server: Tool request + Bearer token\n        MCP Server--&gt;&gt;Gateway: Tool response\n        Gateway--&gt;&gt;Client: Result\n    end</code></pre>"},{"location":"architecture/oauth-authorization-code-ui-design/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/oauth-authorization-code-ui-design/#1-token-security","title":"1. Token Security","text":"<ul> <li>Encryption: All tokens stored encrypted using <code>AUTH_ENCRYPTION_SECRET</code></li> <li>Access Control: Tokens only accessible to authorized gateway operations</li> <li>Audit Logging: Track all token operations and access attempts</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#2-oauth-flow-security","title":"2. OAuth Flow Security","text":"<ul> <li>State Validation: CSRF protection using state parameters</li> <li>Redirect URI Validation: Strict validation of callback URLs</li> <li>Scope Limitation: Request minimum required scopes only</li> <li>HTTPS Enforcement: All OAuth endpoints require HTTPS</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#3-data-protection","title":"3. Data Protection","text":"<ul> <li>Token Expiration: Automatic cleanup of expired tokens</li> <li>User Consent: Clear indication of what permissions are granted</li> <li>Revocation Support: Ability to revoke user access when needed</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#configuration","title":"Configuration","text":""},{"location":"architecture/oauth-authorization-code-ui-design/#environment-variables","title":"Environment Variables","text":"<pre><code># OAuth Token Management\nOAUTH_TOKEN_CLEANUP_INTERVAL=3600        # Token cleanup interval in seconds\nOAUTH_TOKEN_EXPIRY_THRESHOLD=300         # Refresh tokens this many seconds before expiry\nOAUTH_MAX_STORED_TOKENS_PER_GATEWAY=100  # Maximum tokens to store per gateway\n\n# Security\nOAUTH_STATE_EXPIRY=300                   # Authorization state expiry in seconds\nOAUTH_MAX_AUTHORIZATION_ATTEMPTS=5        # Maximum failed authorization attempts\n</code></pre>"},{"location":"architecture/oauth-authorization-code-ui-design/#example-gateway-configuration","title":"Example Gateway Configuration","text":"<pre><code>{\n  \"name\": \"GitHub MCP with User Delegation\",\n  \"url\": \"https://github-mcp.example.com/sse\",\n  \"auth_type\": \"oauth\",\n  \"oauth_config\": {\n    \"grant_type\": \"authorization_code\",\n    \"client_id\": \"your_github_app_id\",\n    \"client_secret\": \"your_github_app_secret\",\n    \"authorization_url\": \"https://github.com/login/oauth/authorize\",\n    \"token_url\": \"https://github.com/login/oauth/access_token\",\n    \"redirect_uri\": \"https://gateway.example.com/oauth/callback\",\n    \"scopes\": [\"repo\", \"read:user\"],\n    \"token_management\": {\n      \"store_tokens\": true,\n      \"auto_refresh\": true,\n      \"refresh_threshold_seconds\": 300\n    }\n  }\n}\n</code></pre>"},{"location":"architecture/oauth-authorization-code-ui-design/#implementation-phases","title":"Implementation Phases","text":""},{"location":"architecture/oauth-authorization-code-ui-design/#phase-1-database-and-core-services-week-1","title":"Phase 1: Database and Core Services (Week 1)","text":"<ul> <li> Create <code>oauth_tokens</code> table</li> <li> Implement <code>TokenStorageService</code></li> <li> Enhance <code>OAuthManager</code> with token storage</li> <li> Add token refresh functionality</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#phase-2-oauth-router-and-callback-week-2","title":"Phase 2: OAuth Router and Callback (Week 2)","text":"<ul> <li> Implement OAuth authorization router</li> <li> Create callback handler with token storage</li> <li> Add state management and validation</li> <li> Implement user ID extraction from tokens</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#phase-3-ui-enhancements-week-3","title":"Phase 3: UI Enhancements (Week 3)","text":"<ul> <li> Update gateway creation form</li> <li> Add dynamic field management</li> <li> Implement authorization flow UI</li> <li> Add token status display</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#phase-4-integration-and-testing-week-4","title":"Phase 4: Integration and Testing (Week 4)","text":"<ul> <li> Integrate with existing gateway service</li> <li> Update tool invocation to use stored tokens</li> <li> Comprehensive testing of OAuth flows</li> <li> Security review and documentation</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#testing-strategy","title":"Testing Strategy","text":""},{"location":"architecture/oauth-authorization-code-ui-design/#unit-tests","title":"Unit Tests","text":"<pre><code>async def test_token_storage_service():\n    \"\"\"Test token storage and retrieval.\"\"\"\n    service = TokenStorageService(db)\n\n    # Test token storage\n    token_record = await service.store_tokens(\n        gateway_id=\"test_gateway\",\n        user_id=\"test_user\",\n        access_token=\"test_token\",\n        refresh_token=\"test_refresh\",\n        expires_in=3600,\n        scopes=[\"repo\", \"read:user\"]\n    )\n\n    assert token_record is not None\n    assert token_record.user_id == \"test_user\"\n\n    # Test token retrieval\n    token = await service.get_valid_token(\"test_gateway\", \"test_user\")\n    assert token == \"test_token\"\n\nasync def test_authorization_code_flow():\n    \"\"\"Test complete authorization code flow.\"\"\"\n    oauth_manager = OAuthManager(TokenStorageService(db))\n\n    # Test flow initiation\n    auth_data = await oauth_manager.initiate_authorization_code_flow(\n        \"test_gateway\", test_credentials\n    )\n\n    assert \"authorization_url\" in auth_data\n    assert \"state\" in auth_data\n</code></pre>"},{"location":"architecture/oauth-authorization-code-ui-design/#integration-tests","title":"Integration Tests","text":"<pre><code>async def test_oauth_callback_end_to_end():\n    \"\"\"Test complete OAuth callback flow.\"\"\"\n    # Mock OAuth provider responses\n    with responses.RequestsMock() as rsps:\n        rsps.add(\n            responses.POST,\n            \"https://oauth.example.com/token\",\n            json={\n                \"access_token\": \"test_access_token\",\n                \"refresh_token\": \"test_refresh_token\",\n                \"expires_in\": 3600,\n                \"scope\": \"repo read:user\"\n            }\n        )\n\n        # Test callback\n        response = await client.get(\n            \"/oauth/callback\",\n            params={\n                \"code\": \"test_code\",\n                \"state\": \"test_state\",\n                \"gateway_id\": \"test_gateway\"\n            }\n        )\n\n        assert response.status_code == 200\n        assert \"OAuth Authorization Successful\" in response.text\n</code></pre>"},{"location":"architecture/oauth-authorization-code-ui-design/#future-enhancements","title":"Future Enhancements","text":""},{"location":"architecture/oauth-authorization-code-ui-design/#1-advanced-token-management","title":"1. Advanced Token Management","text":"<ul> <li>Token Rotation: Automatic token rotation for enhanced security</li> <li>Multi-User Support: Support for multiple users per gateway</li> <li>Token Analytics: Usage analytics and monitoring</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#2-oauth-provider-templates","title":"2. OAuth Provider Templates","text":"<ul> <li>Pre-configured Providers: Templates for GitHub, GitLab, etc.</li> <li>Provider-Specific Scopes: Recommended scopes for common providers</li> <li>Auto-discovery: OAuth provider metadata discovery</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#3-enhanced-security","title":"3. Enhanced Security","text":"<ul> <li>PKCE Support: Proof Key for Code Exchange for public clients</li> <li>JWT Validation: Support for JWT-based tokens</li> <li>Audit Trail: Comprehensive audit logging for compliance</li> </ul>"},{"location":"architecture/oauth-authorization-code-ui-design/#conclusion","title":"Conclusion","text":"<p>This design provides a comprehensive framework for implementing OAuth 2.0 Authorization Code flow with user consent in the MCP Gateway UI. The implementation balances security, usability, and maintainability while extending the existing OAuth infrastructure.</p> <p>Key benefits of this approach: - User Consent: Proper user delegation with scoped permissions - Token Efficiency: Reuse of valid tokens with automatic refresh - Security: Encrypted token storage and comprehensive validation - Scalability: Support for multiple users and gateways - Maintainability: Clean separation of concerns and modular design</p> <p>The phased implementation approach ensures minimal disruption to existing functionality while delivering value incrementally. The design follows OAuth 2.0 best practices and provides a solid foundation for future enhancements.</p>"},{"location":"architecture/oauth-design/","title":"OAuth 2.0 Integration Design for MCP Gateway","text":"<p>Version: 1.0 Status: Draft Date: December 2024</p>"},{"location":"architecture/oauth-design/#executive-summary","title":"Executive Summary","text":"<p>This document outlines the design for integrating OAuth 2.0 authentication into the MCP Gateway, enabling agents to perform actions on behalf of users without requiring personal access tokens (PATs). The implementation will use the <code>oauthlib</code> library and support Client Credentials and Authorization Code flows following OAuth 2.0 best practices.</p>"},{"location":"architecture/oauth-design/#motivation","title":"Motivation","text":"<p>Current limitations: - Personal Access Tokens (PATs) provide broad access with security risks - Manual token management across multiple services - No native support for delegated authorization with scoped permissions</p> <p>OAuth 2.0 provides: - Standardized authentication flows - Scoped access control - Temporary access without storing user credentials - Industry-standard security practices</p>"},{"location":"architecture/oauth-design/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    subgraph \"MCP Gateway\"\n        A[Admin UI]\n        B[Gateway Service]\n        C[Tool Service]\n        D[OAuth Manager]\n    end\n\n    subgraph \"Storage\"\n        E[Database]\n    end\n\n    subgraph \"External\"\n        F[OAuth Provider]\n        G[MCP Server]\n    end\n\n    A --&gt; E\n    B --&gt; D\n    C --&gt; D\n    D --&gt; F\n    B --&gt; G\n    C --&gt; G\n\n    D -.-&gt;|Uses| H[oauthlib]</code></pre>"},{"location":"architecture/oauth-design/#database-schema","title":"Database Schema","text":""},{"location":"architecture/oauth-design/#modified-gateway-table","title":"Modified Gateway Table","text":"<pre><code>ALTER TABLE gateways\nADD COLUMN oauth_config JSON;\n\n-- OAuth config structure:\n{\n  \"grant_type\": \"client_credentials|authorization_code\",\n  \"client_id\": \"string\",\n  \"client_secret\": \"encrypted_string\",\n  \"authorization_url\": \"string\",\n  \"token_url\": \"string\",\n  \"redirect_uri\": \"string\",\n  \"scopes\": [\"scope1\", \"scope2\"]\n}\n</code></pre>"},{"location":"architecture/oauth-design/#core-components","title":"Core Components","text":""},{"location":"architecture/oauth-design/#1-oauth-manager-service","title":"1. OAuth Manager Service","text":"<p>Location: <code>mcpgateway/services/oauth_manager.py</code></p> <pre><code>from oauthlib.oauth2 import BackendApplicationClient, WebApplicationClient\nfrom requests_oauthlib import OAuth2Session\nfrom typing import Optional, Dict, Any\n\nclass OAuthManager:\n    \"\"\"Manages OAuth 2.0 authentication flows.\"\"\"\n\n    async def get_access_token(\n        self,\n        credentials: Dict[str, Any]\n    ) -&gt; str:\n        \"\"\"Get access token based on grant type.\"\"\"\n        if credentials['grant_type'] == 'client_credentials':\n            return await self._client_credentials_flow(credentials)\n        elif credentials['grant_type'] == 'authorization_code':\n            return await self._authorization_code_flow(credentials)\n        else:\n            raise ValueError(f\"Unsupported grant type: {credentials['grant_type']}\")\n\n    async def _client_credentials_flow(\n        self,\n        credentials: Dict[str, Any]\n    ) -&gt; str:\n        \"\"\"Machine-to-machine authentication.\"\"\"\n        client = BackendApplicationClient(client_id=credentials['client_id'])\n        oauth = OAuth2Session(client=client)\n\n        token = oauth.fetch_token(\n            token_url=credentials['token_url'],\n            client_id=credentials['client_id'],\n            client_secret=credentials['client_secret'],\n            scope=credentials.get('scopes', [])\n        )\n\n        return token['access_token']\n\n    async def _authorization_code_flow(\n        self,\n        credentials: Dict[str, Any]\n    ) -&gt; Dict[str, str]:\n        \"\"\"User delegation flow - returns authorization URL.\"\"\"\n        oauth = OAuth2Session(\n            credentials['client_id'],\n            redirect_uri=credentials['redirect_uri'],\n            scope=credentials.get('scopes', [])\n        )\n\n        authorization_url, state = oauth.authorization_url(\n            credentials['authorization_url']\n        )\n\n        return {\n            'authorization_url': authorization_url,\n            'state': state\n        }\n\n    async def exchange_code_for_token(\n        self,\n        credentials: Dict[str, Any],\n        code: str,\n        state: str\n    ) -&gt; str:\n        \"\"\"Exchange authorization code for access token.\"\"\"\n        oauth = OAuth2Session(\n            credentials['client_id'],\n            state=state,\n            redirect_uri=credentials['redirect_uri']\n        )\n\n        token = oauth.fetch_token(\n            credentials['token_url'],\n            client_secret=credentials['client_secret'],\n            authorization_response=f\"{credentials['redirect_uri']}?code={code}&amp;state={state}\"\n        )\n\n        return token['access_token']\n</code></pre>"},{"location":"architecture/oauth-design/#2-admin-ui-oauth-configuration","title":"2. Admin UI OAuth Configuration","text":"<pre><code>&lt;div id=\"oauth-config\" class=\"auth-config\"&gt;\n  &lt;h4&gt;OAuth 2.0 Configuration&lt;/h4&gt;\n\n  &lt;div class=\"form-group\"&gt;\n    &lt;label&gt;Grant Type&lt;/label&gt;\n    &lt;select name=\"oauth_grant_type\" class=\"form-control\"&gt;\n      &lt;option value=\"client_credentials\"&gt;Client Credentials (M2M)&lt;/option&gt;\n      &lt;option value=\"authorization_code\"&gt;Authorization Code (User)&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"form-group\"&gt;\n    &lt;label&gt;Client ID&lt;/label&gt;\n    &lt;input type=\"text\" name=\"oauth_client_id\" class=\"form-control\" required&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"form-group\"&gt;\n    &lt;label&gt;Client Secret&lt;/label&gt;\n    &lt;input type=\"password\" name=\"oauth_client_secret\" class=\"form-control\" required&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"form-group\"&gt;\n    &lt;label&gt;Token URL&lt;/label&gt;\n    &lt;input type=\"url\" name=\"oauth_token_url\" class=\"form-control\" required&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"form-group auth-code-only\"&gt;\n    &lt;label&gt;Authorization URL&lt;/label&gt;\n    &lt;input type=\"url\" name=\"oauth_authorization_url\" class=\"form-control\"&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"form-group auth-code-only\"&gt;\n    &lt;label&gt;Redirect URI&lt;/label&gt;\n    &lt;input type=\"url\" name=\"oauth_redirect_uri\" class=\"form-control\"&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"form-group\"&gt;\n    &lt;label&gt;Scopes (space-separated)&lt;/label&gt;\n    &lt;input type=\"text\" name=\"oauth_scopes\" class=\"form-control\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"architecture/oauth-design/#implementation-details","title":"Implementation Details","text":""},{"location":"architecture/oauth-design/#gateway-service-integration","title":"Gateway Service Integration","text":"<p>File: <code>mcpgateway/services/gateway_service.py</code></p> <pre><code>async def _initialize_gateway(\n    self,\n    url: str,\n    authentication: Optional[Dict[str, str]] = None,\n    transport: str = \"SSE\"\n) -&gt; tuple:\n    \"\"\"Initialize gateway with OAuth support.\"\"\"\n\n    headers = {}\n\n    if authentication and authentication.get('type') == 'oauth':\n        # Get OAuth credentials from database\n        gateway = await self._get_gateway(authentication['gateway_id'])\n        oauth_config = gateway.oauth_config\n\n        # Get access token\n        access_token = await self.oauth_manager.get_access_token(oauth_config)\n        headers = {'Authorization': f'Bearer {access_token}'}\n    else:\n        # Existing authentication logic\n        headers = decode_auth(authentication)\n\n    # Connect to MCP server\n    return await self._connect_to_gateway(url, headers, transport)\n</code></pre>"},{"location":"architecture/oauth-design/#tool-service-integration","title":"Tool Service Integration","text":"<p>File: <code>mcpgateway/services/tool_service.py</code></p> <pre><code>async def invoke_tool(\n    self,\n    db: Session,\n    name: str,\n    arguments: Dict[str, Any]\n) -&gt; ToolResult:\n    \"\"\"Invoke tool with OAuth support.\"\"\"\n\n    tool = await self.get_tool_by_name(db, name)\n    headers = {}\n\n    if tool.gateway and tool.gateway.auth_type == 'oauth':\n        # Get fresh access token for each request\n        oauth_config = tool.gateway.oauth_config\n        access_token = await self.oauth_manager.get_access_token(oauth_config)\n        headers = {'Authorization': f'Bearer {access_token}'}\n    else:\n        # Existing authentication\n        headers = self._get_tool_headers(tool)\n\n    # Execute tool\n    return await self._execute_tool(tool, arguments, headers)\n</code></pre>"},{"location":"architecture/oauth-design/#oauth-flow-sequences","title":"OAuth Flow Sequences","text":""},{"location":"architecture/oauth-design/#client-credentials-flow-m2m","title":"Client Credentials Flow (M2M)","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Gateway\n    participant OAuth Manager\n    participant OAuth Provider\n    participant MCP Server\n\n    Client-&gt;&gt;Gateway: Configure OAuth (Client Credentials)\n    Client-&gt;&gt;Gateway: Invoke Tool\n    Gateway-&gt;&gt;OAuth Manager: Get Access Token\n    OAuth Manager-&gt;&gt;OAuth Provider: POST /token (client_id, secret)\n    OAuth Provider--&gt;&gt;OAuth Manager: Access Token\n    OAuth Manager--&gt;&gt;Gateway: Access Token\n    Gateway-&gt;&gt;MCP Server: Tool Request + Bearer Token\n    MCP Server--&gt;&gt;Gateway: Tool Response\n    Gateway--&gt;&gt;Client: Result</code></pre>"},{"location":"architecture/oauth-design/#authorization-code-flow","title":"Authorization Code Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Gateway\n    participant OAuth Manager\n    participant OAuth Provider\n    participant MCP Server\n\n    User-&gt;&gt;Gateway: Configure OAuth (Auth Code)\n    User-&gt;&gt;Gateway: Request Authorization\n    Gateway-&gt;&gt;OAuth Manager: Get Auth URL\n    OAuth Manager--&gt;&gt;Gateway: Authorization URL\n    Gateway--&gt;&gt;User: Redirect to OAuth Provider\n    User-&gt;&gt;OAuth Provider: Login &amp; Authorize\n    OAuth Provider--&gt;&gt;Gateway: Callback with Code\n    Gateway-&gt;&gt;OAuth Manager: Exchange Code\n    OAuth Manager-&gt;&gt;OAuth Provider: POST /token (code)\n    OAuth Provider--&gt;&gt;OAuth Manager: Access Token\n    OAuth Manager--&gt;&gt;Gateway: Access Token\n    Gateway-&gt;&gt;MCP Server: Tool Request + Bearer Token\n    MCP Server--&gt;&gt;Gateway: Response\n    Gateway--&gt;&gt;User: Result</code></pre>"},{"location":"architecture/oauth-design/#security-considerations","title":"Security Considerations","text":"<ol> <li>Token Storage: Access tokens are never stored - requested fresh for each operation</li> <li>Secret Encryption: Client secrets encrypted using <code>AUTH_ENCRYPTION_SECRET</code></li> <li>HTTPS Required: All OAuth endpoints must use HTTPS</li> <li>Scope Validation: Request minimum required scopes</li> <li>Error Handling: Comprehensive error handling for OAuth failures</li> </ol>"},{"location":"architecture/oauth-design/#configuration","title":"Configuration","text":""},{"location":"architecture/oauth-design/#environment-variables","title":"Environment Variables","text":"<pre><code># OAuth Configuration\nOAUTH_REQUEST_TIMEOUT=30        # OAuth request timeout in seconds\nOAUTH_MAX_RETRIES=3            # Max retries for token requests\n\n# Encryption\nAUTH_ENCRYPTION_SECRET=your-secret-key  # For encrypting client secrets\n</code></pre>"},{"location":"architecture/oauth-design/#example-gateway-configuration","title":"Example Gateway Configuration","text":"<pre><code>{\n  \"name\": \"GitHub MCP\",\n  \"url\": \"https://github-mcp.example.com/sse\",\n  \"auth_type\": \"oauth\",\n  \"oauth_config\": {\n    \"grant_type\": \"authorization_code\",\n    \"client_id\": \"your_github_app_id\",\n    \"client_secret\": \"your_github_app_secret\",\n    \"authorization_url\": \"https://github.com/login/oauth/authorize\",\n    \"token_url\": \"https://github.com/login/oauth/access_token\",\n    \"redirect_uri\": \"https://gateway.example.com/oauth/callback\",\n    \"scopes\": [\"repo\", \"read:user\"]\n  }\n}\n</code></pre>"},{"location":"architecture/oauth-design/#implementation-phases","title":"Implementation Phases","text":""},{"location":"architecture/oauth-design/#phase-1-core-oauth-support-week-1","title":"Phase 1: Core OAuth Support (Week 1)","text":"<ul> <li>Implement OAuth Manager</li> <li>Add database schema changes</li> <li>Client Credentials flow</li> </ul>"},{"location":"architecture/oauth-design/#phase-2-ui-integration-week-2","title":"Phase 2: UI Integration (Week 2)","text":"<ul> <li>Admin UI OAuth configuration</li> <li>Authorization Code flow</li> <li>OAuth callback endpoint</li> </ul>"},{"location":"architecture/oauth-design/#phase-3-testing-documentation-week-3","title":"Phase 3: Testing &amp; Documentation (Week 3)","text":"<ul> <li>Integration tests</li> <li>Security review</li> <li>User documentation</li> </ul>"},{"location":"architecture/oauth-design/#dependencies","title":"Dependencies","text":"<pre><code># Add to pyproject.toml\ndependencies = [\n    \"oauthlib&gt;=3.2.2\",\n    \"requests-oauthlib&gt;=1.3.1\",\n    \"cryptography&gt;=41.0.0\",  # For secret encryption\n]\n</code></pre>"},{"location":"architecture/oauth-design/#testing","title":"Testing","text":""},{"location":"architecture/oauth-design/#unit-tests","title":"Unit Tests","text":"<pre><code>async def test_client_credentials_flow():\n    oauth_manager = OAuthManager()\n    credentials = {\n        \"grant_type\": \"client_credentials\",\n        \"client_id\": \"test_client\",\n        \"client_secret\": \"test_secret\",\n        \"token_url\": \"https://oauth.example.com/token\"\n    }\n\n    token = await oauth_manager.get_access_token(credentials)\n    assert token is not None\n    assert isinstance(token, str)\n\nasync def test_tool_invocation_with_oauth():\n    tool_service = ToolService(oauth_manager)\n    result = await tool_service.invoke_tool(\n        db=db,\n        name=\"github_create_issue\",\n        arguments={\"title\": \"Test Issue\"}\n    )\n    assert result.success\n</code></pre>"},{"location":"architecture/oauth-design/#future-enhancements","title":"Future Enhancements","text":"<ol> <li>OAuth Provider Templates: Pre-configured settings for common providers</li> <li>Token Refresh: Support refresh tokens for long-lived access</li> <li>PKCE Support: Add PKCE for public clients</li> <li>Multiple OAuth Configs: Support different OAuth configs per tool</li> </ol>"},{"location":"architecture/oauth-design/#conclusion","title":"Conclusion","text":"<p>This OAuth 2.0 integration provides secure, standards-based authentication for MCP Gateway without the complexity of token caching. By requesting fresh tokens for each operation, we ensure simplicity while maintaining security. The implementation follows OAuth 2.0 best practices and enables seamless integration with various OAuth providers.</p>"},{"location":"architecture/plugins/","title":"Plugin Framework Architecture","text":"<p>The MCP Context Forge Gateway implements a comprehensive plugin framework for AI safety middleware, security processing, and extensible gateway capabilities. This document provides a detailed architectural overview of the plugin system implementation.</p>"},{"location":"architecture/plugins/#overview","title":"Overview","text":"<p>The plugin framework enables both self-contained plugins (running in-process) and external middleware service integrations (calling external AI safety services) through a unified interface. This hybrid approach balances performance, security, and operational requirements.</p>"},{"location":"architecture/plugins/#architecture-components","title":"Architecture Components","text":""},{"location":"architecture/plugins/#core-framework-structure","title":"Core Framework Structure","text":"<pre><code>mcpgateway/plugins/framework/\n\u251c\u2500\u2500 base.py              # Plugin base classes and PluginRef\n\u251c\u2500\u2500 models.py            # Pydantic models for all plugin types\n\u251c\u2500\u2500 manager.py           # PluginManager singleton with lifecycle management\n\u251c\u2500\u2500 registry.py          # Plugin instance registry and discovery\n\u251c\u2500\u2500 constants.py         # Framework constants and enums\n\u251c\u2500\u2500 errors.py            # Plugin-specific exception types\n\u251c\u2500\u2500 utils.py             # Utility functions for plugin operations\n\u251c\u2500\u2500 loader/\n\u2502   \u251c\u2500\u2500 config.py        # Configuration loading and validation\n\u2502   \u2514\u2500\u2500 plugin.py        # Dynamic plugin loading and instantiation\n\u2514\u2500\u2500 external/\n    \u2514\u2500\u2500 mcp/             # MCP external service integration\n        \u251c\u2500\u2500 client.py    # MCP client for external plugin communication\n        \u2514\u2500\u2500 server/      # MCP server runtime for plugin hosting\n</code></pre>"},{"location":"architecture/plugins/#plugin-architecture","title":"Plugin Architecture","text":""},{"location":"architecture/plugins/#1-base-plugin-classes","title":"1. Base Plugin Classes","text":"<pre><code>class Plugin:\n    \"\"\"Base plugin for self-contained, in-process plugins\"\"\"\n\n    def __init__(self, config: PluginConfig):\n        self._config = config\n\n    async def prompt_pre_fetch(self, payload: PromptPrehookPayload,\n                              context: PluginContext) -&gt; PromptPrehookResult:\n        \"\"\"Process prompts before template rendering\"\"\"\n        raise NotImplementedError\n\n    async def prompt_post_fetch(self, payload: PromptPosthookPayload,\n                               context: PluginContext) -&gt; PromptPosthookResult:\n        \"\"\"Process prompts after template rendering\"\"\"\n        raise NotImplementedError\n\n    async def tool_pre_invoke(self, payload: ToolPreInvokePayload,\n                             context: PluginContext) -&gt; ToolPreInvokeResult:\n        \"\"\"Process tool calls before execution\"\"\"\n        raise NotImplementedError\n\n    async def tool_post_invoke(self, payload: ToolPostInvokePayload,\n                              context: PluginContext) -&gt; ToolPostInvokeResult:\n        \"\"\"Process tool results after execution\"\"\"\n        raise NotImplementedError\n\n    async def resource_pre_fetch(self, payload: ResourcePreFetchPayload,\n                                context: PluginContext) -&gt; ResourcePreFetchResult:\n        \"\"\"Process resource requests before fetching\"\"\"\n        raise NotImplementedError\n\n    async def resource_post_fetch(self, payload: ResourcePostFetchPayload,\n                                 context: PluginContext) -&gt; ResourcePostFetchResult:\n        \"\"\"Process resource content after fetching\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"architecture/plugins/#2-plugin-reference-system","title":"2. Plugin Reference System","text":"<pre><code>class PluginRef:\n    \"\"\"Plugin reference with UUID tracking for lifecycle management\"\"\"\n\n    def __init__(self, plugin: Plugin):\n        self._plugin = plugin\n        self._uuid = uuid.uuid4()  # Unique instance identifier\n\n    @property\n    def plugin(self) -&gt; Plugin:\n        return self._plugin\n\n    @property\n    def uuid(self) -&gt; str:\n        return self._uuid.hex\n</code></pre>"},{"location":"architecture/plugins/#hook-system","title":"Hook System","text":""},{"location":"architecture/plugins/#available-hook-points","title":"Available Hook Points","text":"<p>The framework provides six primary hook points covering the complete MCP request/response lifecycle:</p> <pre><code>class HookType(str, Enum):\n    PROMPT_PRE_FETCH = \"prompt_pre_fetch\"     # Before prompt retrieval and rendering\n    PROMPT_POST_FETCH = \"prompt_post_fetch\"   # After prompt template rendering\n    TOOL_PRE_INVOKE = \"tool_pre_invoke\"       # Before tool execution\n    TOOL_POST_INVOKE = \"tool_post_invoke\"     # After tool execution\n    RESOURCE_PRE_FETCH = \"resource_pre_fetch\" # Before resource fetching\n    RESOURCE_POST_FETCH = \"resource_post_fetch\" # After resource content retrieval\n</code></pre>"},{"location":"architecture/plugins/#hook-execution-flow","title":"Hook Execution Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Gateway\n    participant PM as PluginManager\n    participant Plugin\n    participant Service as External Service\n    participant Core as Core Logic\n\n    Client-&gt;&gt;Gateway: MCP Request\n    Gateway-&gt;&gt;PM: prompt_pre_fetch(payload, context)\n    PM-&gt;&gt;Plugin: Check conditions &amp; priority\n    Plugin-&gt;&gt;Plugin: Process in-memory OR\n    Plugin-&gt;&gt;Service: Call external AI service\n    Service--&gt;&gt;Plugin: Analysis result\n    Plugin--&gt;&gt;PM: PluginResult(continue_processing, modified_payload)\n\n    alt Continue Processing\n        PM--&gt;&gt;Gateway: Modified payload\n        Gateway-&gt;&gt;Core: Execute core logic\n        Core--&gt;&gt;Gateway: Result\n        Gateway-&gt;&gt;PM: prompt_post_fetch(result, context)\n        PM-&gt;&gt;Plugin: Post-processing\n        Plugin--&gt;&gt;PM: Final result\n        PM--&gt;&gt;Gateway: Processed response\n        Gateway--&gt;&gt;Client: Final response\n    else Block Request\n        PM--&gt;&gt;Gateway: PluginViolation\n        Gateway--&gt;&gt;Client: Error response\n    end</code></pre>"},{"location":"architecture/plugins/#plugin-execution-model","title":"Plugin Execution Model","text":""},{"location":"architecture/plugins/#priority-based-sequential-execution","title":"Priority-Based Sequential Execution","text":"<pre><code>class PluginExecutor(Generic[T]):\n    \"\"\"Executes plugins in priority order with timeout protection\"\"\"\n\n    async def execute(self, plugins: list[PluginRef], payload: T,\n                     global_context: GlobalContext, ...) -&gt; tuple[PluginResult[T], PluginContextTable]:\n        for plugin in sorted_plugins_by_priority:\n            # Check if plugin conditions match current context\n            if plugin.conditions and not matches_conditions(payload, plugin.conditions, global_context):\n                continue\n\n            try:\n                # Execute with timeout protection\n                result = await asyncio.wait_for(\n                    plugin_execution(plugin, payload, context),\n                    timeout=self.timeout\n                )\n\n                # Handle result based on plugin mode\n                if not result.continue_processing:\n                    if plugin.mode == PluginMode.ENFORCE:\n                        return block_request_with_violation(result)\n                    elif plugin.mode == PluginMode.PERMISSIVE:\n                        log_warning_and_continue(result)\n\n                # Apply payload modifications for next plugin\n                if result.modified_payload:\n                    payload = result.modified_payload\n\n            except asyncio.TimeoutError:\n                handle_plugin_timeout(plugin)\n            except Exception as e:\n                handle_plugin_error(plugin, e)\n</code></pre>"},{"location":"architecture/plugins/#plugin-modes","title":"Plugin Modes","text":"<pre><code>class PluginMode(str, Enum):\n    ENFORCE = \"enforce\"      # Block requests that violate plugin rules\n    PERMISSIVE = \"permissive\"  # Log violations but allow requests to continue\n    DISABLED = \"disabled\"    # Plugin is loaded but not executed\n</code></pre>"},{"location":"architecture/plugins/#configuration-system","title":"Configuration System","text":""},{"location":"architecture/plugins/#plugin-configuration-schema","title":"Plugin Configuration Schema","text":"<pre><code># plugins/config.yaml\nplugins:\n  - name: \"PIIFilterPlugin\"\n    kind: \"plugins.pii_filter.pii_filter.PIIFilterPlugin\"\n    description: \"Detects and masks Personally Identifiable Information\"\n    version: \"0.1.0\"\n    author: \"Security Team\"\n    hooks: [\"prompt_pre_fetch\", \"prompt_post_fetch\", \"tool_pre_invoke\", \"tool_post_invoke\"]\n    tags: [\"security\", \"pii\", \"compliance\", \"filter\"]\n    mode: \"enforce\"  # enforce | permissive | disabled\n    priority: 50     # Lower number = higher priority (runs first)\n    conditions:\n      - server_ids: [\"prod-server\"]  # Apply only to specific servers\n        tenant_ids: [\"enterprise\"]   # Apply only to specific tenants\n        tools: [\"sensitive-tool\"]    # Apply only to specific tools\n        prompts: [\"user-prompt\"]     # Apply only to specific prompts\n    config:\n      # Plugin-specific configuration\n      detect_ssn: true\n      detect_credit_card: true\n      mask_strategy: \"partial\"\n      redaction_text: \"[PII_REDACTED]\"\n</code></pre>"},{"location":"architecture/plugins/#configuration-models","title":"Configuration Models","text":"<pre><code>class PluginConfig(BaseModel):\n    name: str                                    # Unique plugin identifier\n    kind: str                                    # Plugin class path or \"external\"\n    description: Optional[str] = None            # Human-readable description\n    version: Optional[str] = None                # Plugin version\n    hooks: Optional[list[HookType]] = None       # Hook points to register\n    tags: Optional[list[str]] = None             # Searchable tags\n    mode: PluginMode = PluginMode.ENFORCE        # Execution mode\n    priority: Optional[int] = None               # Execution priority (lower = higher)\n    conditions: Optional[list[PluginCondition]] = None  # Conditional execution rules\n    config: Optional[dict[str, Any]] = None      # Plugin-specific settings\n    mcp: Optional[MCPConfig] = None              # External service configuration\n\nclass PluginCondition(BaseModel):\n    server_ids: Optional[set[str]] = None        # Target server IDs\n    tenant_ids: Optional[set[str]] = None        # Target tenant IDs\n    tools: Optional[set[str]] = None             # Target tool names\n    prompts: Optional[set[str]] = None           # Target prompt names\n    resources: Optional[set[str]] = None         # Target resource URIs\n    user_patterns: Optional[list[str]] = None    # User pattern matching\n    content_types: Optional[list[str]] = None    # Content type filtering\n</code></pre>"},{"location":"architecture/plugins/#context-management","title":"Context Management","text":""},{"location":"architecture/plugins/#plugin-context-system","title":"Plugin Context System","text":"<pre><code>class GlobalContext(BaseModel):\n    \"\"\"Shared context across all plugins in a request\"\"\"\n    request_id: str                  # Unique request identifier\n    user: Optional[str] = None       # User making the request\n    tenant_id: Optional[str] = None  # Tenant context\n    server_id: Optional[str] = None  # Virtual server context\n\nclass PluginContext(GlobalContext):\n    \"\"\"Per-plugin context with state management\"\"\"\n    state: dict[str, Any] = {}       # Cross-plugin shared state\n    metadata: dict[str, Any] = {}    # Plugin execution metadata\n\n    def get_state(self, key: str, default: Any = None) -&gt; Any:\n        \"\"\"Get value from shared state\"\"\"\n        return self.state.get(key, default)\n\n    def set_state(self, key: str, value: Any) -&gt; None:\n        \"\"\"Set value in shared state\"\"\"\n        self.state[key] = value\n</code></pre>"},{"location":"architecture/plugins/#context-lifecycle-management","title":"Context Lifecycle Management","text":"<pre><code>class PluginManager:\n    # Context cleanup tracking\n    _context_store: Dict[str, Tuple[PluginContextTable, float]] = {}\n    _last_cleanup: float = 0\n\n    async def _cleanup_old_contexts(self) -&gt; None:\n        \"\"\"Remove contexts older than CONTEXT_MAX_AGE to prevent memory leaks\"\"\"\n        current_time = time.time()\n\n        if current_time - self._last_cleanup &lt; CONTEXT_CLEANUP_INTERVAL:\n            return\n\n        # Find and remove expired contexts\n        expired_keys = [\n            key for key, (_, timestamp) in self._context_store.items()\n            if current_time - timestamp &gt; CONTEXT_MAX_AGE\n        ]\n\n        for key in expired_keys:\n            del self._context_store[key]\n</code></pre>"},{"location":"architecture/plugins/#plugin-manager","title":"Plugin Manager","text":""},{"location":"architecture/plugins/#singleton-architecture","title":"Singleton Architecture","text":"<pre><code>class PluginManager:\n    \"\"\"Singleton plugin manager for lifecycle management\"\"\"\n\n    __shared_state: dict[Any, Any] = {}  # Singleton state sharing\n\n    def __init__(self, config: str = \"\", timeout: int = DEFAULT_PLUGIN_TIMEOUT):\n        self.__dict__ = self.__shared_state  # Share state across instances\n\n        if config:\n            self._config = ConfigLoader.load_config(config)\n\n        # Initialize executors with timeout\n        self._pre_prompt_executor = PluginExecutor[PromptPrehookPayload](timeout)\n        self._post_prompt_executor = PluginExecutor[PromptPosthookPayload](timeout)\n        # ... other executors\n\n    async def initialize(self) -&gt; None:\n        \"\"\"Load and initialize all configured plugins\"\"\"\n        plugins = self._config.plugins if self._config else []\n\n        for plugin_config in plugins:\n            if plugin_config.mode != PluginMode.DISABLED:\n                plugin = await self._loader.load_and_instantiate_plugin(plugin_config)\n                self._registry.register(plugin)\n\n    async def shutdown(self) -&gt; None:\n        \"\"\"Shutdown all plugins and cleanup resources\"\"\"\n        await self._registry.shutdown()\n        self._context_store.clear()\n        self._initialized = False\n</code></pre>"},{"location":"architecture/plugins/#hook-execution-methods","title":"Hook Execution Methods","text":"<pre><code>async def prompt_pre_fetch(\n    self,\n    payload: PromptPrehookPayload,\n    global_context: GlobalContext,\n    local_contexts: Optional[PluginContextTable] = None,\n) -&gt; tuple[PromptPrehookResult, PluginContextTable | None]:\n    \"\"\"Execute pre-fetch hooks before prompt retrieval\"\"\"\n\n    # Cleanup old contexts periodically\n    await self._cleanup_old_contexts()\n\n    # Get plugins registered for this hook\n    plugins = self._registry.get_plugins_for_hook(HookType.PROMPT_PRE_FETCH)\n\n    # Execute plugins with timeout protection\n    result = await self._pre_prompt_executor.execute(\n        plugins, payload, global_context,\n        pre_prompt_fetch, pre_prompt_matches, local_contexts\n    )\n\n    # Store contexts for potential reuse in post-fetch\n    if result[1]:\n        self._context_store[global_context.request_id] = (result[1], time.time())\n\n    return result\n</code></pre>"},{"location":"architecture/plugins/#security-and-protection","title":"Security and Protection","text":""},{"location":"architecture/plugins/#timeout-protection","title":"Timeout Protection","text":"<pre><code>class PluginExecutor:\n    async def _execute_with_timeout(self, plugin: PluginRef,\n                                   plugin_run: Callable, payload: T,\n                                   context: PluginContext) -&gt; PluginResult[T]:\n        \"\"\"Execute plugin with timeout protection\"\"\"\n        return await asyncio.wait_for(\n            plugin_run(plugin, payload, context),\n            timeout=self.timeout  # Default 30 seconds\n        )\n</code></pre>"},{"location":"architecture/plugins/#payload-size-validation","title":"Payload Size Validation","text":"<pre><code>def _validate_payload_size(self, payload: Any) -&gt; None:\n    \"\"\"Validate that payload doesn't exceed size limits\"\"\"\n    if hasattr(payload, \"args\") and payload.args:\n        total_size = sum(len(str(v)) for v in payload.args.values())\n        if total_size &gt; MAX_PAYLOAD_SIZE:  # 1MB limit\n            raise PayloadSizeError(f\"Payload size {total_size} exceeds limit\")\n</code></pre>"},{"location":"architecture/plugins/#error-isolation","title":"Error Isolation","text":"<pre><code>async def execute(self, plugins: list[PluginRef], ...) -&gt; tuple[PluginResult[T], PluginContextTable]:\n    for plugin in plugins:\n        try:\n            result = await self._execute_with_timeout(plugin, ...)\n            # Process result...\n\n        except asyncio.TimeoutError:\n            logger.error(f\"Plugin {plugin.name} timed out after {self.timeout}s\")\n            if plugin.mode == PluginMode.ENFORCE:\n                return create_timeout_violation()\n\n        except Exception as e:\n            logger.error(f\"Plugin {plugin.name} failed: {str(e)}\", exc_info=True)\n            if plugin.mode == PluginMode.ENFORCE:\n                return create_error_violation(e)\n            # In permissive mode, continue with next plugin\n</code></pre>"},{"location":"architecture/plugins/#external-service-integration","title":"External Service Integration","text":""},{"location":"architecture/plugins/#mcp-external-plugin-support","title":"MCP External Plugin Support","text":"<pre><code>class MCPConfig(BaseModel):\n    \"\"\"Configuration for external MCP plugin services\"\"\"\n    proto: TransportType                    # STDIO, SSE, or STREAMABLEHTTP\n    url: Optional[str] = None              # Service URL for HTTP transports\n    script: Optional[str] = None           # Script path for STDIO transport\n\n    @field_validator(\"url\")\n    @classmethod\n    def validate_url(cls, url: str | None) -&gt; str | None:\n        if url:\n            return SecurityValidator.validate_url(url)\n        return url\n</code></pre>"},{"location":"architecture/plugins/#external-service-authentication","title":"External Service Authentication","text":"<pre><code>class ExternalServiceAuth(BaseModel):\n    \"\"\"Authentication configuration for external services\"\"\"\n    type: str  # \"bearer\", \"basic\", \"api_key\", \"custom_header\"\n    token: Optional[str] = None\n    username: Optional[str] = None\n    password: Optional[str] = None\n    api_key: Optional[str] = None\n    header_name: Optional[str] = None\n    header_value: Optional[str] = None\n</code></pre>"},{"location":"architecture/plugins/#plugin-types","title":"Plugin Types","text":""},{"location":"architecture/plugins/#built-in-plugin-examples","title":"Built-in Plugin Examples","text":""},{"location":"architecture/plugins/#1-pii-filter-plugin-self-contained","title":"1. PII Filter Plugin (Self-Contained)","text":"<pre><code>class PIIFilterPlugin(Plugin):\n    \"\"\"Detects and masks Personally Identifiable Information\"\"\"\n\n    async def prompt_pre_fetch(self, payload: PromptPrehookPayload,\n                              context: PluginContext) -&gt; PromptPrehookResult:\n        pii_patterns = self._load_pii_patterns()\n        violations = []\n\n        for arg_name, arg_value in payload.args.items():\n            detected_pii = self._scan_for_pii(arg_value, pii_patterns)\n            if detected_pii:\n                if self.config.get(\"block_on_detection\", False):\n                    violation = PluginViolation(\n                        reason=\"PII detected in prompt arguments\",\n                        description=f\"Found {len(detected_pii)} PII items in {arg_name}\",\n                        code=\"PII_DETECTED\",\n                        details={\"field\": arg_name, \"types\": detected_pii}\n                    )\n                    return PluginResult(\n                        continue_processing=False,\n                        violation=violation\n                    )\n\n                # Apply masking\n                masked_value = self._apply_masking(arg_value, detected_pii)\n                payload.args[arg_name] = masked_value\n\n        return PluginResult(\n            continue_processing=True,\n            modified_payload=payload,\n            metadata={\"pii_detections\": len(violations)}\n        )\n</code></pre>"},{"location":"architecture/plugins/#2-resource-filter-plugin-security","title":"2. Resource Filter Plugin (Security)","text":"<pre><code>class ResourceFilterPlugin(Plugin):\n    \"\"\"Validates and filters resource requests\"\"\"\n\n    async def resource_pre_fetch(self, payload: ResourcePreFetchPayload,\n                                context: PluginContext) -&gt; ResourcePreFetchResult:\n        uri_parts = urlparse(payload.uri)\n\n        # Protocol validation\n        allowed_protocols = self.config.get(\"allowed_protocols\", [\"http\", \"https\"])\n        if uri_parts.scheme not in allowed_protocols:\n            return PluginResult(\n                continue_processing=False,\n                violation=PluginViolation(\n                    reason=\"Blocked protocol\",\n                    description=f\"Protocol '{uri_parts.scheme}' not in allowed list\",\n                    code=\"PROTOCOL_BLOCKED\",\n                    details={\"protocol\": uri_parts.scheme, \"uri\": payload.uri}\n                )\n            )\n\n        # Domain validation\n        blocked_domains = self.config.get(\"blocked_domains\", [])\n        if uri_parts.netloc in blocked_domains:\n            return PluginResult(\n                continue_processing=False,\n                violation=PluginViolation(\n                    reason=\"Blocked domain\",\n                    description=f\"Domain '{uri_parts.netloc}' is in blocked list\",\n                    code=\"DOMAIN_BLOCKED\",\n                    details={\"domain\": uri_parts.netloc}\n                )\n            )\n\n        return PluginResult(continue_processing=True)\n\n    async def resource_post_fetch(self, payload: ResourcePostFetchPayload,\n                                 context: PluginContext) -&gt; ResourcePostFetchResult:\n        content = payload.content\n\n        # Size validation\n        max_size = self.config.get(\"max_content_size\", 1048576)  # 1MB default\n        if hasattr(content, 'text') and len(content.text) &gt; max_size:\n            return PluginResult(\n                continue_processing=False,\n                violation=PluginViolation(\n                    reason=\"Content too large\",\n                    description=f\"Content size {len(content.text)} exceeds limit {max_size}\",\n                    code=\"CONTENT_SIZE_EXCEEDED\",\n                    details={\"size\": len(content.text), \"limit\": max_size}\n                )\n            )\n\n        # Content filtering\n        if hasattr(content, 'text'):\n            filtered_text = self._apply_content_filters(content.text)\n            if filtered_text != content.text:\n                content.text = filtered_text\n                return PluginResult(\n                    continue_processing=True,\n                    modified_payload=payload,\n                    metadata={\"content_filtered\": True}\n                )\n\n        return PluginResult(continue_processing=True)\n</code></pre>"},{"location":"architecture/plugins/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/plugins/#resource-management","title":"Resource Management","text":"<ul> <li>Memory Usage: Base framework overhead ~5MB, scales linearly with active plugins</li> <li>CPU Impact: Self-contained plugins add &lt;1ms latency per hook</li> <li>Context Cleanup: Automatic cleanup every 5 minutes, contexts expire after 1 hour</li> <li>Timeout Protection: Default 30-second timeout per plugin prevents hangs</li> </ul>"},{"location":"architecture/plugins/#optimization-strategies","title":"Optimization Strategies","text":"<pre><code># Configuration constants for performance tuning\nDEFAULT_PLUGIN_TIMEOUT = 30      # seconds\nMAX_PAYLOAD_SIZE = 1_000_000     # 1MB\nCONTEXT_CLEANUP_INTERVAL = 300   # 5 minutes\nCONTEXT_MAX_AGE = 3600          # 1 hour\n\n# Parallel execution within priority bands (future enhancement)\nclass PluginSettings(BaseModel):\n    parallel_execution_within_band: bool = False  # Execute same-priority plugins in parallel\n    plugin_timeout: int = 30                      # Per-plugin timeout\n    fail_on_plugin_error: bool = False           # Continue on plugin failures\n</code></pre>"},{"location":"architecture/plugins/#testing-and-development","title":"Testing and Development","text":""},{"location":"architecture/plugins/#plugin-development-workflow","title":"Plugin Development Workflow","text":"<ol> <li>Create Plugin Class: Extend <code>Plugin</code> base class</li> <li>Implement Hook Methods: Override required hook methods</li> <li>Define Configuration Schema: Create plugin-specific config structure</li> <li>Add Plugin Manifest: Create <code>plugin-manifest.yaml</code> with metadata</li> <li>Write Tests: Comprehensive unit and integration tests</li> <li>Register Plugin: Add to <code>plugins/config.yaml</code></li> </ol>"},{"location":"architecture/plugins/#testing-framework-integration","title":"Testing Framework Integration","text":"<pre><code># Example plugin test\nclass TestPIIFilterPlugin:\n    async def test_pii_detection_and_masking(self):\n        config = PluginConfig(\n            name=\"test_pii\",\n            kind=\"plugins.pii_filter.pii_filter.PIIFilterPlugin\",\n            hooks=[HookType.PROMPT_PRE_FETCH],\n            config={\"detect_ssn\": True, \"mask_strategy\": \"partial\"}\n        )\n\n        plugin = PIIFilterPlugin(config)\n        payload = PromptPrehookPayload(\n            name=\"test\",\n            args={\"user_input\": \"My SSN is 123-45-6789\"}\n        )\n        context = PluginContext(request_id=\"test-123\")\n\n        result = await plugin.prompt_pre_fetch(payload, context)\n\n        assert result.continue_processing\n        assert \"XXX-XX-6789\" in result.modified_payload.args[\"user_input\"]\n</code></pre>"},{"location":"architecture/plugins/#future-extensions","title":"Future Extensions","text":""},{"location":"architecture/plugins/#planned-hook-points","title":"Planned Hook Points","text":"<pre><code># Server lifecycle hooks\nSERVER_PRE_REGISTER = \"server_pre_register\"    # Server attestation and validation\nSERVER_POST_REGISTER = \"server_post_register\"  # Post-registration processing\n\n# Authentication hooks\nAUTH_PRE_CHECK = \"auth_pre_check\"              # Custom authentication logic\nAUTH_POST_CHECK = \"auth_post_check\"            # Post-authentication processing\n\n# Federation hooks\nFEDERATION_PRE_SYNC = \"federation_pre_sync\"    # Pre-federation validation\nFEDERATION_POST_SYNC = \"federation_post_sync\"  # Post-federation processing\n</code></pre>"},{"location":"architecture/plugins/#external-service-integrations","title":"External Service Integrations","text":"<ul> <li>LlamaGuard: Content safety classification and filtering</li> <li>OpenAI Moderation API: Commercial content moderation</li> <li>HashiCorp Vault: Secret management for plugin configurations</li> <li>Open Policy Agent (OPA): Policy-as-code enforcement engine</li> <li>SPIFFE/SPIRE: Workload identity and attestation</li> </ul> <p>This plugin framework provides the foundation for comprehensive AI safety middleware while maintaining high performance and operational simplicity. The architecture supports both immediate security needs through self-contained plugins and future enterprise AI safety integrations through external service support.</p>"},{"location":"architecture/roadmap/","title":"MCP Gateway Roadmap","text":"<p>Release Overview</p> <p>This roadmap outlines the planned development milestones for MCP Gateway, organized by release version with completion status and due dates.</p>"},{"location":"architecture/roadmap/#release-status-summary","title":"Release Status Summary","text":"Release Due Date Completion Status Description 1.6.0 06 Jan 2026 0  % Open New MCP Servers and Agents 1.3.0 25 Nov 2025 0  % Open Catalog Improvements, A2A Improvements, MCP Standard Review and Sync, Technical Debt 1.2.0 11 Nov 2025 0  % Open Catalog Enhancements, Ratings, experience and UI 1.1.0 28 Oct 2025 0  % Open Post-GA Testing, Bugfixing, Documentation, Performance and Scale 1.0.0 14 Oct 2025 0  % Open General Availability &amp; Release Candidate Hardening - stable &amp; audited 0.9.0 30 Sep 2025 6  % Open Interoperability, marketplaces &amp; advanced connectivity 0.8.0 16 Sep 2025 6  % Open Enterprise Security &amp; Policy Guardrails 0.7.0 02 Sep 2025 1  % Open Multitenancy and RBAC (Private/Team/Global catalogs), Extended Connectivity, Core Observability &amp; Starter Agents (OpenAI and A2A) 0.6.0 19 Aug 2025 100 % Closed Security, Scale &amp; Smart Automation 0.5.0 05 Aug 2025 100 % Closed Enterprise Operability, Auth, Configuration &amp; Observability 0.4.0 22 Jul 2025 100 % Closed Bugfixes, Security, Resilience (retry with exponential backoff), code quality and technical debt 0.3.0 08 Jul 2025 100 % Closed Annotations and multi-server tool federations 0.2.0 24 Jun 2025 100 % Closed Streamable HTTP, Infra-as-Code, Dark Mode 0.1.0 05 Jun 2025 100 % Closed Initial release"},{"location":"architecture/roadmap/#release-010-initial-release","title":"Release 0.1.0 - Initial release","text":"<p>Release 0.1.0 - Completed (100%)</p> <p>Due: 05 Jun 2025 | Status: Closed Initial release</p> \u2728 Completed Features (3) <ul> <li>\u2705 #27 - Add /ready endpoint for readiness probe</li> <li>\u2705 #24 - Publish Helm chart for Kubernetes deployment</li> <li>\u2705 #23 - Add VS Code Devcontainer support for instant onboarding</li> </ul> \ud83d\udc1b Completed Bugs (3) <ul> <li>\u2705 #49 - [Bug]:make venv install serve fails with \"./run-gunicorn.sh: line 40: python: command not found\"</li> <li>\u2705 #37 - Issues  with the  gateway Container Image</li> <li>\u2705 #35 - Error when running in Docker Desktop for Windows</li> </ul> \ud83d\udcda Completed Documentation (2) <ul> <li>\u2705 #50 - virtual env location is incorrect</li> <li>\u2705 #30 - Deploying to Google Cloud Run</li> </ul>"},{"location":"architecture/roadmap/#release-020-streamable-http-infra-as-code-dark-mode","title":"Release 0.2.0 - Streamable HTTP, Infra-as-Code, Dark Mode","text":"<p>Release 0.2.0 - Completed (100%)</p> <p>Due: 24 Jun 2025 | Status: Closed Streamable HTTP, Infra-as-Code, Dark Mode</p> \u2728 Completed Features (3) <ul> <li>\u2705 #125 - Add Streamable HTTP MCP servers to Gateway</li> <li>\u2705 #109 - Implement Streamable HTTP Transport for Client Connections to MCP Gateway</li> <li>\u2705 #25 - Add \"Version and Environment Info\" tab to Admin UI</li> </ul> \ud83d\udc1b Completed Bugs (2) <ul> <li>\u2705 #85 - internal server error comes if there is any error while adding an entry or even any crud operation is happening</li> <li>\u2705 #51 - Internal server running when running gunicorn after install</li> </ul> \ud83d\udcda Completed Documentation (3) <ul> <li>\u2705 #98 - Add additional information for using the mcpgateway with Claude desktop</li> <li>\u2705 #71 - [Docs]:Documentation Over Whelming Cannot figure out the basic task of adding an MCP server</li> <li>\u2705 #21 - Deploying to Fly.io</li> </ul>"},{"location":"architecture/roadmap/#release-030-annotations-and-multi-server-tool-federations","title":"Release 0.3.0 - Annotations and multi-server tool federations","text":"<p>Release 0.3.0 - Completed (100%)</p> <p>Due: 08 Jul 2025 | Status: Closed Annotations and multi-server tool federations</p> \u2728 Completed Features (8) <ul> <li>\u2705 #265 - Sample MCP Server - Go (fast-time-server)</li> <li>\u2705 #179 - Configurable Connection Retries for DB and Redis</li> <li>\u2705 #159 - Add auto activation of mcp-server, when it goes up back again</li> <li>\u2705 #154 - Export connection strings to various clients from UI and via API</li> <li>\u2705 #135 - Dynamic UI Picker for Tool, Resource, and Prompt Associations</li> <li>\u2705 #116 - Namespace Composite Key &amp; UUIDs for Tool Identity</li> <li>\u2705 #100 - Add path parameter or replace value in input payload for a REST API?</li> <li>\u2705 #26 - Add dark mode toggle to Admin UI</li> </ul> \ud83d\udc1b Completed Bugs (9) <ul> <li>\u2705 #316 - Correctly create filelock_path: str = \"tmp/gateway_service_leader.lock\" in /tmp not current directory</li> <li>\u2705 #303 - Update manager.py and admin.js removed <code>is_active</code> field - replace with separate <code>enabled</code> and <code>reachable</code> fields from migration</li> <li>\u2705 #302 - Alembic configuration not packaged with pip wheel, <code>pip install . &amp;&amp; mcpgateway</code> fails on db migration</li> <li>\u2705 #197 - Pytest run exposes warnings from outdated Pydantic patterns, deprecated stdlib functions</li> <li>\u2705 #189 - Close button for parameter input scheme does not work</li> <li>\u2705 #152 - not able to add Github Remote Server</li> <li>\u2705 #132 - SBOM Generation Failure</li> <li>\u2705 #131 - Documentation Generation fails due to error in Makefile's image target</li> <li>\u2705 #28 - Reactivating a gateway logs warning due to 'dict' object used as Pydantic model</li> </ul> \ud83d\udcda Completed Documentation (1) <ul> <li>\u2705 #18 - Add Developer Workstation Setup Guide for Mac (Intel/ARM), Linux, and Windows</li> </ul>"},{"location":"architecture/roadmap/#release-040-bugfixes-security-resilience-retry-with-exponential-backoff-code-quality-and-technical-debt","title":"Release 0.4.0 - Bugfixes, Security, Resilience (retry with exponential backoff), code quality and technical debt","text":"<p>Release 0.4.0 - Completed (100%)</p> <p>Due: 22 Jul 2025 | Status: Closed Bugfixes, Security, Resilience (retry with exponential backoff), code quality and technical debt</p> \u2728 Completed Features (9) <ul> <li>\u2705 #456 - HTTPX Client with Smart Retry and Backoff Mechanism</li> <li>\u2705 #351 - CHORE: Checklist for complete End-to-End Validation Testing for All API Endpoints, UI and Data Validation</li> <li>\u2705 #340 - [Security]: Add input validation for main API endpoints (depends on #339 /admin API validation)</li> <li>\u2705 #339 - [Security]: Add input validation for /admin endpoints</li> <li>\u2705 #338 - [Security]: Eliminate all lint issues in web stack</li> <li>\u2705 #336 - [Security]: Implement output escaping for user data in UI</li> <li>\u2705 #233 - Contextual Hover-Help Tooltips in UI</li> <li>\u2705 #181 - Test MCP Server Connectivity Debugging Tool</li> <li>\u2705 #177 - Persistent Admin UI Filter State</li> </ul> \ud83d\udc1b Completed Bugs (26) <ul> <li>\u2705 #508 - \"PATCH\" in global tools while creating REST API integration through UI</li> <li>\u2705 #495 - test_admin_tool_name_conflict creates record in actual db</li> <li>\u2705 #476 - [Bug]:UI Does Not Show Error for Duplicate Server Name</li> <li>\u2705 #472 - auth_username and auth_password not getting set in GET /gateways/ API <li>\u2705 #471 - _populate_auth not working</li> <li>\u2705 #424 - MCP Gateway Doesn't Detect HTTPS/TLS Context or respect X-Forwarded-Proto when using Federation</li> <li>\u2705 #419 - Remove unused lock_file_path from config.py (trips up bandit)</li> <li>\u2705 #416 - Achieve 100% bandit lint for version.py (remove git command from version.py, tests and UI and rely on semantic version only)</li> <li>\u2705 #412 - Replace assert statements with explicit error handling in translate.py and fix bandit lint issues</li> <li>\u2705 #396 - Test server URL does not work correctly</li> <li>\u2705 #387 - Respect GATEWAY_TOOL_NAME_SEPARATOR for gateway slug</li> <li>\u2705 #384 - Push image to GHCR incorrectly runs in PR</li> <li>\u2705 #382 - API incorrectly shows version, use semantic version from init</li> <li>\u2705 #378 - [Bug] Fix Unit Tests to Handle UI-Disabled Mode</li> <li>\u2705 #374 - Fix \"metrics-loading\" Element Not Found Console Warning</li> <li>\u2705 #371 - Fix Makefile to let you pick docker or podman and work consistently with the right image name</li> <li>\u2705 #369 - Fix Version Endpoint to Include Semantic Version (Not Just Git Revision)</li> <li>\u2705 #367 - Fix \"Test Server Connectivity\" Feature in Admin UI</li> <li>\u2705 #366 - Fix Dark Theme Visibility Issues in Admin UI</li> <li>\u2705 #361 - Prompt and RPC Endpoints Accept XSS Content Without Validation Error</li> <li>\u2705 #359 - Gateway validation accepts invalid transport types</li> <li>\u2705 #356 - Annotations not editable</li> <li>\u2705 #355 - Large empty space after line number in text boxes</li> <li>\u2705 #354 - Edit screens not populating fields</li> <li>\u2705 #352 - Resources - All data going into content</li> <li>\u2705 #213 - [Bug]:Can't use <code>STREAMABLEHTTP</code></li> \ud83d\udd12 Completed Security (1) <ul> <li>\u2705 #552 - Add comprehensive input validation security test suite</li> </ul> \ud83d\udd27 Completed Chores (13) <ul> <li>\u2705 #558 - Ignore tests/security/test_input_validation.py in pre-commit for bidi-controls</li> <li>\u2705 #499 - Add nodejsscan security scanner</li> <li>\u2705 #467 - Achieve 100% docstring coverage (make interrogate) - currently at 96.3%</li> <li>\u2705 #433 - Fix all Makefile targets to work without pre-activated venv and check for OS depends</li> <li>\u2705 #421 - Achieve zero flagged Bandit issues</li> <li>\u2705 #415 - Additional Python Security Scanners</li> <li>\u2705 #399 - Create e2e acceptance test docs</li> <li>\u2705 #375 - Fix yamllint to Ignore node_modules Directory</li> <li>\u2705 #362 - Implement Docker HEALTHCHECK</li> <li>\u2705 #305 - Add vulture (dead code detect) and unimport (unused import detect) to Makefile and GitHub Actions</li> <li>\u2705 #279 - Implement security audit and vulnerability scanning with grype in Makefile and GitHub Actions</li> <li>\u2705 #249 - Achieve 60% doctest coverage and add Makefile and CI/CD targets for doctest and coverage</li> <li>\u2705 #210 - Raise pylint from 9.16/10 -&gt; 10/10</li> </ul> \ud83d\udcda Completed Documentation (3) <ul> <li>\u2705 #522 - OpenAPI title is MCP_Gateway instead of MCP Gateway</li> <li>\u2705 #376 - Document Security Policy in GitHub Pages and Link Roadmap on Homepage</li> <li>\u2705 #46 - Add documentation for using mcp-cli with MCP Gateway</li> </ul>"},{"location":"architecture/roadmap/#release-050-enterprise-operability-auth-configuration-observability","title":"Release 0.5.0 - Enterprise Operability, Auth, Configuration &amp; Observability","text":"<p>Release 0.5.0 - Completed (100%)</p> <p>Due: 05 Aug 2025 | Status: Closed Enterprise Operability, Auth, Configuration &amp; Observability</p> \u2728 Completed Features (4) <ul> <li>\u2705 #663 - Add basic auth support for API Docs</li> <li>\u2705 #623 - Display default values from input_schema in test tool screen</li> <li>\u2705 #506 -  New column for \"MCP Server Name\" in Global tools/resources etc</li> <li>\u2705 #392 - UI checkbox selection for servers, tools, and resources</li> </ul> \ud83d\udc1b Completed Bugs (20) <ul> <li>\u2705 #631 - Inconsistency in acceptable length of Tool Names for tools created via UI and programmatically</li> <li>\u2705 #630 - Gateway update fails silently in UI, backend throws ValidationInfo error</li> <li>\u2705 #622 - Test tool UI passes boolean inputs as on/off instead of true/false</li> <li>\u2705 #620 - Test tool UI passes array inputs as strings</li> <li>\u2705 #613 - Fix lint-web issues in admin.js</li> <li>\u2705 #610 - Edit tool in Admin UI sends invalid \"STREAMABLE\" value for Request Type</li> <li>\u2705 #603 - Unexpected error when registering a gateway with the same name.</li> <li>\u2705 #601 - APIs for gateways in admin and main do not mask auth values</li> <li>\u2705 #598 - Long input names in tool creation reflected back to user in error message</li> <li>\u2705 #591 - [Bug] Edit Prompt Fails When Template Field Is Empty</li> <li>\u2705 #584 - Can't register Github MCP Server in the MCP Registry</li> <li>\u2705 #579 - Edit tool update fail  integration_type=\"REST\"</li> <li>\u2705 #578 - Adding invalid gateway URL does not return an error immediately</li> <li>\u2705 #521 - Gateway ID returned as null by Gateway Create API</li> <li>\u2705 #507 - Makefile missing .PHONY declarations and other issues</li> <li>\u2705 #434 - Logs show\"Invalid HTTP request received\"</li> <li>\u2705 #430 - make serve doesn't check if I'm already running an instance (run-gunicorn.sh) letting me start the server multiple times</li> <li>\u2705 #423 - Redundant Conditional Expression in Content Validation</li> <li>\u2705 #373 - Clarify Difference Between \"Reachable\" and \"Available\" Status in Version Info</li> <li>\u2705 #357 - Improve consistency of displaying error messages</li> </ul> \ud83d\udd12 Completed Security (1) <ul> <li>\u2705 #425 - Make JWT Token Expiration Mandatory when REQUIRE_TOKEN_EXPIRATION=true (depends on #87)</li> </ul> \ud83d\udd27 Completed Chores (9) <ul> <li>\u2705 #638 - Add Makefile and GitHub Actions support for Snyk (test, code-test, container-test, helm charts)</li> <li>\u2705 #615 - Add pypi package linters: check-manifest pyroma and verify target to GitHub Actions</li> <li>\u2705 #590 - Integrate DevSkim static analysis tool via Makefile</li> <li>\u2705 #410 - Add <code>make lint filename|dirname</code> target to Makefile</li> <li>\u2705 #403 - Add time server (and configure it post-deploy) to docker-compose.yaml</li> <li>\u2705 #397 - Migrate run-gunicorn-v2.sh to run-gunicorn.sh and have a single file (improved startup script with configurable flags)</li> <li>\u2705 #390 - Add lint-web to CI/CD and add additional linters to Makefile (jshint jscpd markuplint)</li> <li>\u2705 #365 - Fix Database Migration Commands in Makefile</li> <li>\u2705 #363 - Improve Error Messages - Replace Raw Technical Errors with User-Friendly Messages</li> </ul>"},{"location":"architecture/roadmap/#release-060-security-scale-smart-automation","title":"Release 0.6.0 - Security, Scale &amp; Smart Automation","text":"<p>Release 0.6.0 - Completed (100%)</p> <p>Due: 19 Aug 2025 | Status: Closed Security, Scale &amp; Smart Automation</p> \u2728 Completed Features (32) <ul> <li>\u2705 #774 - Tools Annotations not working and need specificity for mentioning annotations</li> <li>\u2705 #773 - Add support for external plugins</li> <li>\u2705 #749 - MCP Reverse Proxy - Bridge Local Servers to Remote Gateways</li> <li>\u2705 #741 - Enhance Server Creation/Editing UI for Prompt and Resource Association</li> <li>\u2705 #737 - Bulk Tool Import</li> <li>\u2705 #735 - Epic: Vendor Agnostic OpenTelemetry Observability Support</li> <li>\u2705 #727 - Phoenix Observability Integration plugin</li> <li>\u2705 #720 - Add CLI for authoring and packaging plugins</li> <li>\u2705 #708 - MCP Elicitation (v2025-06-18)</li> <li>\u2705 #705 - Option to completely remove Bearer token auth to MCP gateway</li> <li>\u2705 #690 - Make SSE Keepalive Events Configurable</li> <li>\u2705 #689 - Getting \"Unknown SSE event: keepalive\" when trying to use virtual servers</li> <li>\u2705 #682 - Add tool hooks (tool_pre_invoke / tool_post_invoke) to plugin system</li> <li>\u2705 #673 - Identify Next Steps for Plugin Development</li> <li>\u2705 #668 - Add Null Checks and Improve Error Handling in Frontend Form Handlers (admin.js)</li> <li>\u2705 #586 - Tag support with editing and validation across all APIs endpoints and UI (tags)</li> <li>\u2705 #540 - Configurable Well-Known URI Handler including security.txt and robots.txt</li> <li>\u2705 #533 - Add Additional Configurable Security Headers to APIs for Admin UI</li> <li>\u2705 #492 - Change UI ID field name to UUID</li> <li>\u2705 #404 - Add resources and prompts/prompt templates to time server</li> <li>\u2705 #380 - REST Endpoints for Go fast-time-server</li> <li>\u2705 #368 - Enhance Metrics Tab UI with Virtual Servers and Top 5 Performance Tables</li> <li>\u2705 #364 - Add Log File Support to MCP Gateway</li> <li>\u2705 #344 - Implement additional security headers and CORS configuration</li> <li>\u2705 #320 - Update Streamable HTTP to fully support Virtual Servers</li> <li>\u2705 #319 - AI Middleware Integration / Plugin Framework for extensible gateway capabilities</li> <li>\u2705 #186 - Granular Configuration Export &amp; Import (via UI &amp; API)</li> <li>\u2705 #185 - Portable Configuration Export &amp; Import CLI (registry, virtual servers and prompts)</li> <li>\u2705 #138 - View &amp; Export Logs from Admin UI</li> <li>\u2705 #137 - Track Creator &amp; Timestamp Metadata for Servers, Tools, and Resources</li> <li>\u2705 #136 - Downloadable JSON Client Config Generator from Admin UI</li> <li>\u2705 #94 - Transport-Translation Bridge (<code>mcpgateway.translate</code>) any to any protocol conversion cli tool</li> </ul> \ud83d\udc1b Completed Bugs (20) <ul> <li>\u2705 #765 - Illegal IP address string passed to inet_aton during discovery process</li> <li>\u2705 #753 - Tool invocation returns 'Invalid method' error after PR #746</li> <li>\u2705 #744 - Gateway fails to connect to services behind CDNs/load balancers due to DNS resolution</li> <li>\u2705 #728 - Streamable HTTP Translation Feature: Connects but Fails to List Tools, Resources, or Support Tool Calls</li> <li>\u2705 #716 - Resources and Prompts not displaying in Admin Dashboard while Tools are visible</li> <li>\u2705 #696 - SSE Tool Invocation Fails After Integration Type Migration post PR #678</li> <li>\u2705 #694 - Enhanced Validation Missing in GatewayCreate</li> <li>\u2705 #685 - Multiple Fixes and improved security for HTTP Header Passthrough Feature</li> <li>\u2705 #666 - Vague/Unclear Error Message \"Validation Failed\" When Adding a REST Tool</li> <li>\u2705 #661 - Database migration runs during doctest execution</li> <li>\u2705 #649 - Duplicate Gateway Registration with Equivalent URLs Bypasses Uniqueness Check</li> <li>\u2705 #646 - MCP Server/Federated Gateway Registration is failing</li> <li>\u2705 #560 - Can't list tools when running inside of a docker</li> <li>\u2705 #557 - Cleanup tool descriptions to remove newlines and truncate text</li> <li>\u2705 #526 - Unable to add multiple headers when adding a gateway through UI</li> <li>\u2705 #520 - Resource mime-type is always stored as text/plain</li> <li>\u2705 #518 - Runtime error from Redis when multiple sessions exist</li> <li>\u2705 #481 - Intermittent test_resource_cache.py::test_expiration - AssertionError: assert 'bar' is None</li> <li>\u2705 #452 - integrationType should only support REST, not MCP (Remove Integration Type: MCP)</li> <li>\u2705 #405 - Fix the go time server annotation (it shows as destructive)</li> </ul> \ud83d\udd12 Completed Security (3) <ul> <li>\u2705 #540 - Configurable Well-Known URI Handler including security.txt and robots.txt</li> <li>\u2705 #533 - Add Additional Configurable Security Headers to APIs for Admin UI</li> <li>\u2705 #208 - HTTP Header Passthrough (forward headers to MCP server)</li> </ul> \ud83d\udd27 Completed Chores (6) <ul> <li>\u2705 #672 - Part 2: Replace Raw Errors with Friendly Messages in main.py</li> <li>\u2705 #317 - Script to add relative file path header to each file and verify top level docstring</li> <li>\u2705 #315 - Check SPDX headers Makefile and GitHub Actions target - ensure all files have File, Author(s) and SPDX headers</li> <li>\u2705 #280 - Add mutation testing with mutmut for test quality validation</li> <li>\u2705 #256 - Implement comprehensive fuzz testing automation and Makefile targets (hypothesis, atheris, schemathesis, RESTler)</li> <li>\u2705 #254 - Async Code Testing and Performance Profiling Makefile targets (flake8-async, cprofile, snakeviz, aiomonitor)</li> </ul> \ud83d\udcda Open Documentation (1) <ul> <li>#503 - Tutorial: OpenWebUI with Ollama, LiteLLM, MCPO, and MCP Gateway Deployment Guide (Draft)</li> </ul>"},{"location":"architecture/roadmap/#release-070-multitenancy-and-rbac-privateteamglobal-catalogs-extended-connectivity-core-observability-starter-agents-openai-and-a2a","title":"Release 0.7.0 - Multitenancy and RBAC (Private/Team/Global catalogs), Extended Connectivity, Core Observability &amp; Starter Agents (OpenAI and A2A)","text":"<p>Release 0.7.0 - In Progress (1%)</p> <p>Due: 02 Sep 2025 | Status: Open Multitenancy and RBAC (Private/Team/Global catalogs), Extended Connectivity, Core Observability &amp; Starter Agents (OpenAI and A2A)</p> \u2728 Open Features (18) <ul> <li>#727 - Phoenix Observability Integration plugin</li> <li>#706 - ABAC Virtual Server Support</li> <li>#636 - Add PyInstaller support for building standalone binaries for all platforms</li> <li>#570 - Word wrap in codemirror (draft)</li> <li>#491 - UI Keyboard shortcuts (esc to exit Test tool for example) (draft)</li> <li>#300 - Structured JSON Logging with Correlation IDs</li> <li>#272 - Observability - Pre-built Grafana Dashboards &amp; Loki Log Export</li> <li>#270 - MCP Server \u2013 Go Implementation (\"libreoffice-server\")</li> <li>#269 - MCP Server - Go Implementation (LaTeX Service)</li> <li>#263 - Sample Agent - CrewAI Integration (OpenAI &amp; A2A Endpoints)</li> <li>#262 - Sample Agent - LangChain Integration (OpenAI &amp; A2A Endpoints)</li> <li>#218 - Prometheus Metrics Instrumentation using prometheus-fastapi-instrumentator</li> <li>#186 - Granular Configuration Export &amp; Import (via UI &amp; API)</li> <li>#185 - Portable Configuration Export &amp; Import CLI (registry, virtual servers and prompts)</li> <li>#175 - Add OpenLLMetry Integration for Observability</li> <li>#138 - View &amp; Export Logs from Admin UI</li> <li>#137 - Track Creator &amp; Timestamp Metadata for Servers, Tools, and Resources</li> <li>#136 - Downloadable JSON Client Config Generator from Admin UI</li> </ul> \ud83d\udc1b Open Bugs (1) <ul> <li>#383 - Remove migration step from Helm chart (now automated, no longer needed)</li> </ul> \ud83d\udd12 Open Security (1) <ul> <li>#283 - Role-Based Access Control (RBAC) - User/Team/Global Scopes for full multi-tenancy support</li> </ul> \u26a1 Open Performance (1) <ul> <li>#432 - Performance Optimization Implementation and Guide for MCP Gateway (baseline)</li> </ul> \ud83d\udd27 Chores (1 completed, 27 remaining) <ul> <li>#674 - Automate release management process (draft)</li> <li>#595 - [CHORE] Investigate potential migration to UUID7 (draft)</li> <li>#574 - Run pyupgrade to upgrade python syntax (draft)</li> <li>#414 - Restructure Makefile targets (ex: move grype to container scanning section), or have a dedicated security scanning section</li> <li>#408 - Add normalize script to pre-commit hooks (draft)</li> <li>#407 - Improve pytest and plugins (draft)</li> <li>#402 - Add post-deploy step to helm that configures the Time Server as a Gateway (draft)</li> <li>#398 - Enforce pre-commit targets for doctest coverage, pytest coverage, pylint score 10/10, flake8 pass and add badges</li> <li>#391 - Setup SonarQube quality gate (draft)</li> <li>#377 - Fix PostgreSQL Volume Name Conflicts in Helm Chart (draft)</li> <li>\u2705 #344 - Implement additional security headers and CORS configuration</li> <li>#318 - Publish Agents and Tools that leverage codebase and templates (draft)</li> <li>#312 - End-to-End MCP Gateway Stack Testing Harness (mcpgateway, translate, wrapper, mcp-servers)</li> <li>#281 - Set up contract testing with Pact (pact-python) including Makefile and GitHub Actions targets</li> <li>\u2705 #280 - Add mutation testing with mutmut for test quality validation</li> <li>#261 - Implement 90% Test Coverage Quality Gate and automatic badge and coverage html / markdown report publication</li> <li>#260 - Manual security testing plan and template for release validation and production deployments</li> <li>#259 - SAST (Semgrep) and DAST (OWASP ZAP) automated security testing Makefile targets and GitHub Actions</li> <li>#256 - Implement comprehensive fuzz testing automation and Makefile targets (hypothesis, atheris, schemathesis , RESTler)</li> <li>#255 - Implement comprehensive Playwright test automation for the entire MCP Gateway Admin UI with Makefile targets and GitHub Actions</li> <li>#253 - Implement chaos engineering tests for fault tolerance validation (network partitions, service failures)</li> <li>#252 - Establish database migration testing pipeline with rollback validation across SQLite, Postgres, and Redis</li> <li>#251 - Automatic performance testing and tracking for every build (hey) including SQLite and Postgres / Redis configurations</li> <li>#250 - Implement automatic API documentation generation using mkdocstrings and update Makefile</li> <li>#223 - Helm Chart Test Harness &amp; Red Hat chart-verifier</li> <li>#222 - Helm chart build Makefile with lint and values.schema.json validation + CODEOWNERS, CHANGELOG.md, .helmignore and CONTRIBUTING.md</li> <li>#216 - Add spec-validation targets and make the OpenAPI build go green</li> <li>#212 - Achieve zero flagged SonarQube issues</li> </ul> \ud83d\udcda Open Documentation (3) <ul> <li>#323 - Add Developer Guide for using fast-time-server via JSON-RPC commands using curl or stdio</li> <li>#22 - Add BeeAI Framework client integration (Python &amp; TypeScript)</li> <li>#19 - Add Developer Guide for using MCP via the CLI (curl commands, JSON-RPC)</li> </ul>"},{"location":"architecture/roadmap/#release-080-enterprise-security-policy-guardrails","title":"Release 0.8.0 - Enterprise Security &amp; Policy Guardrails","text":"<p>Release 0.8.0 - In Progress (6%)</p> <p>Due: 16 Sep 2025 | Status: Open Enterprise Security &amp; Policy Guardrails</p> \u2728 Features (1 completed, 2 remaining) <ul> <li>\u2705 #319 - AI Middleware Integration / Plugin Framework for extensible gateway capabilities</li> <li>#285 - Configuration Validation &amp; Schema Enforcement using Pydantic V2 models, config validator cli flag</li> <li>#182 - Semantic tool auto-filtering</li> </ul> \ud83d\udd12 Open Security (11) <ul> <li>#543 - CSRF Token Protection System</li> <li>#542 - Helm Chart - Enterprise Secrets Management Integration (Vault)</li> <li>#541 - Enhanced Session Management for Admin UI</li> <li>#539 - Tool Execution Limits &amp; Resource Controls</li> <li>#536 - Generic IP-Based Access Control (allowlist)</li> <li>#535 - Audit Logging System</li> <li>#271 - Policy-as-Code Engine - Rego Prototype</li> <li>#257 - Gateway-Level Rate Limiting, DDoS Protection &amp; Abuse Detection</li> <li>#230 - Cryptographic Request &amp; Response Signing</li> <li>#229 - Guardrails - Input/Output Sanitization &amp; PII Masking</li> <li>#221 - Gateway-Level Input Validation &amp; Output Sanitization (prevent traversal)</li> </ul> \ud83d\udd27 Open Chores (1) <ul> <li>#291 - Comprehensive Scalability &amp; Soak-Test Harness (Long-term Stability &amp; Load) - locust, pytest-benchmark, smocker mocked MCP servers</li> </ul>"},{"location":"architecture/roadmap/#release-090-interoperability-marketplaces-advanced-connectivity","title":"Release 0.9.0 - Interoperability, marketplaces &amp; advanced connectivity","text":"<p>Release 0.9.0 - In Progress (6%)</p> <p>Due: 30 Sep 2025 | Status: Open Interoperability, marketplaces &amp; advanced connectivity</p> \u2728 Features (1 completed, 13 remaining) <ul> <li>#546 - Protocol Version Negotiation &amp; Backward Compatibility</li> <li>#545 - Hot-Reload Configuration Without Restart (move from .env to configuration database table) (draft)</li> <li>#298 - A2A Initial Support - Add A2A Servers as Tools</li> <li>#295 - MCP Server Marketplace</li> <li>#294 - Automated MCP Server Testing and Certification</li> <li>#288 - MariaDB Support Testing, Documentation, CI/CD (alongside PostgreSQL &amp; SQLite)</li> <li>#268 - Sample MCP Server - Haskell Implementation (\"pandoc-server\") (html, docx, pptx, latex conversion)</li> <li>#267 - Sample MCP Server \u2013 Java Implementation (\"plantuml-server\")</li> <li>#266 - Sample MCP Server - Rust Implementation (\"filesystem-server\")</li> <li>\u2705 #243 - a2a compatibility?</li> <li>#209 - Anthropic Desktop Extensions DTX directory/marketplace</li> <li>#130 - Dynamic LLM-Powered Tool Generation via Prompt</li> <li>#123 - Dynamic Server Catalog via Rule, Regexp, Tags - or LLM-Based Selection</li> <li>#114 - Connect to Dockerized MCP Servers via STDIO</li> </ul> \ud83d\udd12 Open Security (1) <ul> <li>#426 - Configurable Password and Secret Policy Engine</li> </ul> \ud83d\udd27 Open Chores (1) <ul> <li>#290 - Enhance Gateway Tuning Guide with PostgreSQL Deep-Dive</li> </ul>"},{"location":"architecture/roadmap/#release-100-general-availability-release-candidate-hardening-stable-audited","title":"Release 1.0.0 - General Availability &amp; Release Candidate Hardening - stable &amp; audited","text":"<p>Release 1.0.0 - In Progress (0%)</p> <p>Due: 14 Oct 2025 | Status: Open General Availability &amp; Release Candidate Hardening - stable &amp; audited</p> \ud83d\udcda Open Documentation (1) <ul> <li>#264 - GA Documentation Review &amp; End-to-End Validation Audit</li> </ul>"},{"location":"architecture/roadmap/#release-110-post-ga-testing-bugfixing-documentation-performance-and-scale","title":"Release 1.1.0 - Post-GA Testing, Bugfixing, Documentation, Performance and Scale","text":"<p>Release 1.1.0 - In Progress (0%)</p> <p>Due: 28 Oct 2025 | Status: Open Post-GA Testing, Bugfixing, Documentation, Performance and Scale</p> \u2728 Open Features (2) <ul> <li>#707 - Customizable Admin Panel</li> <li>#293 - Intelligent Load Balancing for Redundant MCP Servers</li> </ul>"},{"location":"architecture/roadmap/#release-120-catalog-enhancements-ratings-experience-and-ui","title":"Release 1.2.0 - Catalog Enhancements, Ratings, experience and UI","text":"<p>Release 1.2.0 - In Progress (0%)</p> <p>Due: 11 Nov 2025 | Status: Open Catalog Enhancements, Ratings, experience and UI</p> \u2728 Open Features (2) <ul> <li>#547 - Built-in MCP Server Health Dashboard</li> <li>#296 - MCP Server Rating and Review System</li> </ul>"},{"location":"architecture/roadmap/#release-130-catalog-improvements-a2a-improvements-mcp-standard-review-and-sync-technical-debt","title":"Release 1.3.0 - Catalog Improvements, A2A Improvements, MCP Standard Review and Sync, Technical Debt","text":"<p>Release 1.3.0 - In Progress (0%)</p> <p>Due: 25 Nov 2025 | Status: Open Catalog Improvements, A2A Improvements, MCP Standard Review and Sync, Technical Debt</p> \u2728 Open Features (1) <ul> <li>#299 - A2A Ecosystem Integration &amp; Marketplace (Extends A2A support)</li> </ul>"},{"location":"architecture/roadmap/#release-160-new-mcp-servers-and-agents","title":"Release 1.6.0 - New MCP Servers and Agents","text":"<p>Release 1.6.0 - In Progress (0%)</p> <p>Due: 06 Jan 2026 | Status: Open New MCP Servers and Agents</p> \u2728 Open Features (1) <ul> <li>#548 - GraphQL API Support for Tool Discovery</li> </ul>"},{"location":"architecture/roadmap/#unassigned-issues","title":"Unassigned Issues","text":"<p>Issues Without Release Assignment</p> <p>The following issues are currently open but not assigned to any specific release:</p> \u2728 Features (3 completed, 4 open) <ul> <li>#738 - Configuration Database for Dynamic Settings Management</li> <li>#737 - Bulk Tool Import</li> <li>#732 - Enhance Handling of Long Tool Descriptions</li> <li>\u2705 #708 - MCP Elicitation (v2025-06-18)</li> <li>\u2705 #689 - Getting \"Unknown SSE event: keepalive\" when trying to use virtual servers</li> <li>#683 - Debug headers and passthrough headers, e.g. X-Tenant-Id, X-Trace-Id, Authorization for time server (go) (draft)</li> <li>#679 - [Feature] Add enabled field to plugins/config.yaml</li> <li>\u2705 #306 - Quick Start (manual install) gunicorn fails</li> </ul> \ud83d\udc1b Bugs (8 completed, 2 open) <ul> <li>\u2705 #715 - [Bug]:Tool Edit Screen Issues \u2013 Field Mismatch &amp; MCP Tool Validation Error</li> <li>\u2705 #704 - Virtual Servers don't actually work as advertised v0.5.0</li> <li>#700 - Move async_testing to tests/async (draft)</li> <li>\u2705 #560 - Can't list tools when running inside of a docker</li> <li>\u2705 #518 - Runtime error from Redis when multiple sessions exist</li> <li>\u2705 #480 - Alembic treated as first party dependency by isort</li> <li>\u2705 #479 - Update make commands for alembic</li> <li>\u2705 #478 - Alembic migration is broken</li> <li>\u2705 #436 - Verify content length using the content itself when the content-length header is absent.</li> </ul> \u2753 Completed Questions (2) <ul> <li>\u2705 #510 - Create users - User management &amp; RBAC</li> <li>\u2705 #509 - Enterprise LDAP Integration</li> </ul>"},{"location":"architecture/roadmap/#legend","title":"Legend","text":"<ul> <li>\u2728 Feature Request - New functionality or enhancement</li> <li>\ud83d\udc1b Bug - Issues that need to be fixed</li> <li>\ud83d\udd12 Security - Security features and improvements</li> <li>\u26a1 Performance - Performance optimizations</li> <li>\ud83d\udd27 Chore - Maintenance, tooling, or infrastructure work</li> <li>\ud83d\udcda Documentation - Documentation improvements or additions</li> <li>\u2753 Question - User questions (typically closed after resolution)</li> <li>\u2705 Completed - Issue has been resolved and closed</li> </ul> <p>Contributing</p> <p>Want to contribute to any of these features? Check out the individual GitHub issues for more details and discussion!</p>"},{"location":"architecture/security-features/","title":"MCP Gateway Security Features","text":"<p>\u26a0\ufe0f Important: MCP Gateway is an OPEN SOURCE PROJECT provided \"as-is\" with NO OFFICIAL SUPPORT from IBM or its affiliates. Community contributions and best-effort maintenance are provided by project maintainers and contributors.</p> <p>Current Version: 0.6.0 (Beta) - MCP Gateway is currently in early beta. Security features are continuously evolving toward the 1.0 release.</p>"},{"location":"architecture/security-features/#comprehensive-security-capabilities","title":"Comprehensive Security Capabilities","text":"<p>Legend: \u2705 = Completed | \ud83d\udea7 = In Progress | \ud83d\udccb = Planned</p>"},{"location":"architecture/security-features/#authentication-identity-management","title":"\ud83d\udd10 Authentication &amp; Identity Management","text":"<ul> <li> <p>JWT Token Management - Configurable JWT tokens with expiration, per-user token catalogs, and revocation support (#87, \u2705 #425)</p> </li> <li> <p>Database-Backed User Authentication - Argon2id password hashing replacing basic auth (#544) \ud83d\udea7</p> </li> <li> <p>Enterprise SSO Integration - Support for GitHub, Google, LDAP/Active Directory identity providers (#220, #277, #278, #284)</p> </li> <li> <p>OAuth Integration - Support for OAuth 2.0 for delegated access to MCP servers (\u2705 #605)</p> </li> <li> <p>Per-Virtual-Server API Keys - Scoped access control for individual virtual servers (#282)</p> </li> <li> <p>Enhanced Session Management - Secure session handling for Admin UI (#541) \ud83d\udea7</p> </li> <li> <p>CSRF Token Protection - Cross-site request forgery prevention (#543) \ud83d\udea7</p> </li> </ul>"},{"location":"architecture/security-features/#authorization-access-control","title":"\ud83d\udee1\ufe0f Authorization &amp; Access Control","text":"<ul> <li> <p>Role-Based Access Control (RBAC) - User/Team/Global scopes with private, team, and global catalog separation (#283)</p> </li> <li> <p>Attribute-Based Access Control (ABAC) - Dynamic authorization based on user attributes, resource properties, and environmental context (#706) \ud83d\udea7</p> </li> <li> <p>Policy-as-Code Engine - Rego-based policy enforcement for fine-grained authorization (#271)</p> </li> <li> <p>IP-Based Access Control - Configurable IP allowlisting for network-level security (#536) \ud83d\udea7</p> </li> <li> <p>Endpoint Feature Flags - Selectively enable/disable tools, resources, prompts, servers, gateways (#537) \ud83d\udea7</p> </li> <li> <p>Resource-Level Access Control - Virtual server composition with granular tool/resource visibility control</p> </li> <li> <p>Capability-Based Security - Fine-grained permissions for individual MCP operations (Planned)</p> </li> </ul>"},{"location":"architecture/security-features/#data-protection-encryption","title":"\ud83d\udd12 Data Protection &amp; Encryption","text":"<ul> <li> <p>Cryptographic Request Signing - End-to-end request/response signing and verification (#230)</p> </li> <li> <p>TLS/mTLS Support - Certificate-based authentication with private CA support (#568) \ud83d\udea7</p> </li> <li> <p>Enterprise Secrets Management - HashiCorp Vault integration for secure credential storage (#542) \ud83d\udea7</p> </li> <li> <p>Transport Layer Security - Multiple secure protocols (SSE, WebSocket, HTTPS) with configurable TLS termination</p> </li> <li> <p>End-to-End Encryption - Optional E2E encryption for sensitive data flows (Planned)</p> </li> <li> <p>Key Management Service (KMS) Integration - Support for AWS KMS, Azure Key Vault, Google Cloud KMS (Planned)</p> </li> <li> <p>Data Loss Prevention (DLP) - Automatic detection and redaction of sensitive data patterns (Planned)</p> </li> </ul>"},{"location":"architecture/security-features/#input-validation-sanitization","title":"\ud83d\udea6 Input Validation &amp; Sanitization","text":"<ul> <li> <p>Gateway-Level Input Validation - Prevent path traversal and injection attacks (#221)</p> </li> <li> <p>AI Guardrails &amp; PII Masking - Input/output sanitization with sensitive data detection (#229)</p> </li> <li> <p>Content Size &amp; Type Limits - Security limits for resources and prompts (#538) \ud83d\udea7</p> </li> <li> <p>XSS Prevention - DOMPurify integration and content sanitization (\u2705 #336, #341, \u2705 #361)</p> </li> <li> <p>SQL Injection Prevention - Database-level security constraints (#342) \ud83d\udea7</p> </li> </ul>"},{"location":"architecture/security-features/#plugin-middleware-framework","title":"\ud83d\udee0\ufe0f Plugin &amp; Middleware Framework","text":"<ul> <li> <p>Pre/Post Request Hooks - Extensible plugin system for custom security policies (\u2705 #319, \u2705 #682)</p> </li> <li> <p>Plugin CLI Tools - Command-line interface for authoring and packaging plugins (\u2705 #720)</p> </li> <li> <p>AI Middleware Integration - Framework for adding LLM-based security capabilities (#313)</p> </li> <li> <p>Semantic Tool Filtering - Intelligent auto-filtering of tools based on context (#182)</p> </li> <li> <p>Dynamic Tool Generation - LLM-powered tool creation with security controls (#130)</p> </li> </ul>"},{"location":"architecture/security-features/#monitoring-audit","title":"\ud83d\udcca Monitoring &amp; Audit","text":"<ul> <li> <p>Comprehensive Audit Logging - Database-backed audit trail for all operations (#535) \ud83d\udea7</p> </li> <li> <p>Structured JSON Logging - Correlation IDs for request tracing (#300)</p> </li> <li> <p>Dual Logging Support - Console and file outputs with rotation policies (\u2705 #364)</p> </li> <li> <p>OpenTelemetry Integration - Vendor-agnostic observability with comprehensive metrics (\u2705 #735)</p> </li> <li> <p>Phoenix Observability Plugin - Built-in Phoenix integration for ML monitoring (\u2705 #727)</p> </li> <li> <p>Prometheus Metrics - Performance and security metrics instrumentation (#218)</p> </li> <li> <p>Security Information and Event Management (SIEM) Integration - Native support for Splunk, ELK, Datadog (Planned)</p> </li> <li> <p>Compliance Reporting - Automated reports for SOC2, ISO 27001, HIPAA, GDPR (Planned)</p> </li> <li> <p>Forensic Analysis Tools - Advanced incident investigation capabilities (Planned)</p> </li> </ul>"},{"location":"architecture/security-features/#rate-limiting-ddos-protection","title":"\ud83d\udea8 Rate Limiting &amp; DDoS Protection","text":"<ul> <li> <p>Gateway-Level Rate Limiting - Configurable request throttling per client/endpoint (#257)</p> </li> <li> <p>Tool Execution Limits - Resource controls and execution boundaries (#539) \ud83d\udea7</p> </li> <li> <p>Circuit Breakers - Automatic failover for unstable backends (#301)</p> </li> <li> <p>Smart Retry Mechanisms - Exponential backoff with jitter (#258, \u2705 #456)</p> </li> </ul>"},{"location":"architecture/security-features/#security-testing-validation","title":"\ud83d\udd0d Security Testing &amp; Validation","text":"<ul> <li> <p>SAST/DAST Integration - Semgrep and OWASP ZAP automated testing (#259)</p> </li> <li> <p>Input Validation Test Suite - Comprehensive security validation tests (\u2705 #552)</p> </li> <li> <p>Fuzz Testing - Hypothesis, atheris, schemathesis, RESTler (\u2705 #256)</p> </li> <li> <p>Mutation Testing - Test quality validation with mutmut (\u2705 #280)</p> </li> <li> <p>Security Scanners - Bandit, grype, nodejsscan integration (#279, \u2705 #415, \u2705 #499)</p> </li> </ul>"},{"location":"architecture/security-features/#infrastructure-security","title":"\ud83c\udfd7\ufe0f Infrastructure Security","text":"<ul> <li> <p>Zero-Trust Architecture - Peer gateway health checks with automatic failover (\u2705 #424)</p> </li> <li> <p>Configuration Validation - Schema enforcement with startup security checks (#285, #534) \ud83d\udea7</p> </li> <li> <p>Security Headers &amp; Configurable Admin UI Security - Comprehensive security headers with full configurability (\u2705 #344, \u2705 #533)</p> </li> <li>X-Content-Type-Options: nosniff - Prevents MIME type sniffing attacks (configurable)</li> <li>X-Frame-Options: DENY - Prevents clickjacking attacks (configurable: DENY/SAMEORIGIN)</li> <li>X-Download-Options: noopen - Prevents IE download execution (configurable)</li> <li>Content-Security-Policy - Comprehensive XSS and injection protection (Admin UI compatible)</li> <li>Strict-Transport-Security - Forces HTTPS connections (configurable max-age &amp; subdomains)</li> <li>Environment-aware CORS - Automatic origin configuration for dev/production</li> <li>Secure cookies - HttpOnly, Secure, SameSite attributes for authentication</li> <li>Static analysis compatibility - Meta tags complement HTTP headers for nodejsscan</li> <li> <p>15 configuration options - Individual control over all security features</p> </li> <li> <p>Well-Known URI Handler - security.txt and robots.txt support (\u2705 #540)</p> </li> <li> <p>Password Policy Engine - Configurable password and secret policies (#426) \ud83d\udea7</p> </li> <li> <p>Graceful Shutdown - SIGTERM-safe rollouts with connection draining (#217)</p> </li> </ul>"},{"location":"architecture/security-features/#advanced-security-capabilities-planned","title":"\ud83d\udd10 Advanced Security Capabilities (Planned)","text":"<p>These advanced security features are under consideration for future releases:</p>"},{"location":"architecture/security-features/#mcp-server-verification-trust","title":"MCP Server Verification &amp; Trust","text":"<ul> <li> <p>MCP Server Attestation - Cryptographic verification of MCP server identity and integrity before connection</p> </li> <li> <p>Signature Verification - Digital signature validation for MCP server responses and tool executions</p> </li> <li> <p>MCP Server Code Scanning - Automated security analysis of MCP server source code using multiple linters and security scanners (Bandit, Semgrep, CodeQL) before deployment (#654) \ud83d\udea7</p> </li> <li> <p>Binary Analysis - Static and dynamic analysis of compiled MCP server binaries for vulnerabilities</p> </li> </ul>"},{"location":"architecture/security-features/#sandboxed-execution-environments","title":"Sandboxed Execution Environments","text":"<ul> <li>Container Sandboxing - Run MCP servers in isolated containers with strict security policies:</li> <li>Read-only root filesystems - Prevent runtime modifications</li> <li>Minimal base images - Using scratch-based or Red Hat UBI9-micro containers</li> <li>Capability dropping - Remove unnecessary Linux capabilities</li> <li>Seccomp profiles - Restrict system calls</li> <li>AppArmor/SELinux policies - Mandatory access controls</li> <li>Network isolation - Namespace and network policy restrictions</li> <li> <p>Resource limits - CPU, memory, and I/O constraints</p> </li> <li> <p>gVisor Integration - User-space kernel for additional isolation layer</p> </li> <li> <p>Firecracker MicroVMs - Lightweight virtual machines for strong isolation</p> </li> <li> <p>WebAssembly Sandbox - WASM-based secure execution for untrusted code</p> </li> </ul>"},{"location":"architecture/security-features/#advanced-cryptography-trust","title":"Advanced Cryptography &amp; Trust","text":"<ul> <li> <p>Confidential Computing - Support for encrypted computation in trusted execution environments (TEEs)</p> </li> <li> <p>Hardware Security Module (HSM) Integration - Hardware-backed key management and cryptographic operations</p> </li> <li> <p>Homomorphic Encryption - Process encrypted data without decryption for sensitive operations</p> </li> <li> <p>Zero-Knowledge Proofs - Verify MCP server capabilities without revealing implementation details</p> </li> <li> <p>Quantum-Resistant Cryptography - Post-quantum cryptographic algorithms for future-proofing</p> </li> </ul>"},{"location":"architecture/security-features/#distributed-security-governance","title":"Distributed Security &amp; Governance","text":"<ul> <li> <p>Blockchain-Based Audit Trail - Immutable distributed ledger for critical security events</p> </li> <li> <p>Federated Authorization - Cross-domain authorization with SAML, OAuth 2.0, and OpenID Connect</p> </li> <li> <p>Secure Multi-Party Computation - Enable multiple parties to compute on shared data without revealing inputs</p> </li> </ul>"},{"location":"architecture/security-features/#runtime-protection-monitoring","title":"Runtime Protection &amp; Monitoring","text":"<ul> <li> <p>Dynamic Security Posture Assessment - Real-time security scoring and risk evaluation for connected servers</p> </li> <li> <p>Behavioral Analytics - ML-based anomaly detection for unusual MCP server patterns</p> </li> <li> <p>Container Runtime Security - Runtime protection with Falco, AppArmor, SELinux policies</p> </li> <li> <p>Service Mesh Integration - Native support for Istio, Linkerd for advanced network security</p> </li> <li> <p>Certificate Pinning - Prevent MITM attacks by validating specific certificates for MCP servers</p> </li> </ul>"},{"location":"architecture/security-features/#multi-layered-defense-strategy","title":"Multi-Layered Defense Strategy","text":"<p>MCP Gateway implements a comprehensive, multi-layered security approach with \"defense in depth\" and \"secure by design\" principles:</p>"},{"location":"architecture/security-features/#security-philosophy","title":"Security Philosophy","text":"<ul> <li>Proactive Security: Security measures are built-in from design phase, not added retroactively</li> <li>Human + Automated: Combines 30+ automated security tools with manual code reviews and threat modeling</li> <li>Continuous Improvement: Regular updates to security toolchain and practices based on community feedback</li> <li>Shared Responsibility: Security across all system components - gateway is one layer in your defense strategy</li> </ul>"},{"location":"architecture/security-features/#comprehensive-security-pipeline","title":"Comprehensive Security Pipeline","text":"<p>Pre-commit Security Gates:</p> <ul> <li>Bandit, Semgrep, Dodgy for security scanning</li> <li>Type checking and code quality enforcement</li> <li>Run <code>make security-all</code> locally before pushing</li> </ul> <p>Continuous Integration Security:</p> <ul> <li>30+ security scans on every PR</li> <li>CodeQL semantic analysis</li> <li>Gitleaks secret detection</li> <li>Dependency vulnerability scanning</li> <li>Container security assessment</li> </ul> <p>Runtime Security:</p> <ul> <li>Monitoring and security policies</li> <li>Anomaly detection</li> <li>Incident response procedures</li> </ul>"},{"location":"architecture/security-features/#security-compliance-standards","title":"Security Compliance &amp; Standards","text":""},{"location":"architecture/security-features/#currently-implemented-v060","title":"\ud83c\udfc6 Currently Implemented (v0.6.0)","text":"<ul> <li>Authentication: JWT tokens with configurable secrets, Basic Auth support (\u2705 #663, \u2705 #705)</li> <li>Input Validation: Comprehensive validation across all API endpoints using Pydantic (\u2705 #339, \u2705 #340)</li> <li>XSS Prevention: Character restrictions, URL scheme validation, JSON depth limits (\u2705 #409)</li> <li>Security Scanning: 30+ security tools integrated, 100% Bandit pass rate (\u2705 #421, \u2705 #638, \u2705 #590)</li> <li>Container Hardening:</li> <li>Ultra-minimal scratch-based runtime - Final image contains only Python runtime and application</li> <li>Red Hat UBI9-based build - Built from latest patched UBI9 (registry.access.redhat.com/ubi9/ubi:9.6)</li> <li>Fully patched on every build - Automatic security updates via <code>dnf upgrade -y</code></li> <li>Non-root execution - Runs as UID 1001 with OpenShift compatibility</li> <li>Stripped binaries - All unnecessary symbols removed to reduce attack surface</li> <li>No package managers in runtime - DNF/YUM/RPM removed from final image</li> <li>No setuid/setgid binaries - All privileged binaries removed</li> <li>Pre-compiled Python bytecode - Optimized with -OO, stripping docstrings and assertions</li> <li>Minimal attack surface - No shell, no development tools, no documentation</li> <li>Secure Defaults: Admin UI disabled by default, localhost-only binding</li> <li>Secret Detection: Gitleaks, Dodgy integration preventing credential leaks (\u2705 #558)</li> <li>Security Headers: HTTP header passthrough with authorization support (\u2705 #685)</li> <li>Authentication Masking: Auth values masked in API responses (\u2705 #601, \u2705 #471, \u2705 #472)</li> <li>Plugin Framework: Comprehensive plugin system with pre/post hooks and CLI tools (\u2705 #319, \u2705 #682, \u2705 #720)</li> <li>OpenTelemetry Observability: Vendor-agnostic observability with Phoenix integration (\u2705 #735, \u2705 #727)</li> <li>OAuth Integration: OAuth 2.0 authentication support for enhanced access control (\u2705 #605)</li> <li>Well-Known URI Security: Configurable handlers for security.txt and robots.txt (\u2705 #540)</li> <li>Enhanced Testing: Mutation testing, fuzz testing, and comprehensive security validation (\u2705 #280, \u2705 #256)</li> </ul>"},{"location":"architecture/security-features/#upcoming-security-enhancements","title":"\ud83d\ude80 Upcoming Security Enhancements","text":"<p>Release 0.6.0 - Completed August 2025 - \u2705 Plugin framework with security hooks - \u2705 OpenTelemetry observability integration - \u2705 OAuth 2.0 authentication support - \u2705 Well-known URI security handlers - \u2705 Enhanced testing (mutation, fuzz testing)</p> <p>Release 0.7.0 - September 2025 - Full RBAC implementation - Multi-tenancy support - Correlation ID tracking</p> <p>Release 0.8.0 - September 2025 - Policy-as-Code engine - Advanced guardrails - DDoS protection</p> <p>Release 0.9.0 - September 2025 - Marketplace security - Protocol negotiation - Advanced connectivity</p> <p>Release 1.0.0 - October 2025 - Security audit completion - Production hardening - GA security certification</p>"},{"location":"architecture/security-features/#production-deployment-security","title":"Production Deployment Security","text":""},{"location":"architecture/security-features/#critical-production-requirements","title":"\u26a0\ufe0f Critical Production Requirements","text":"<p>The Admin UI is development-only and must NEVER be exposed in production:</p> <ul> <li>Designed for localhost-only access with trusted MCP servers</li> <li>Single-user administration without access controls</li> <li>Must be disabled in production: <code>MCPGATEWAY_UI_ENABLED=false</code></li> </ul>"},{"location":"architecture/security-features/#production-security-checklist","title":"\ud83d\udccb Production Security Checklist","text":"<ul> <li> Disable unused features (<code>FEATURES_ROOTS_ENABLED=false</code>, <code>FEATURES_PROMPTS_ENABLED=false</code>, etc.)</li> <li> Disable Admin UI and API (<code>MCPGATEWAY_UI_ENABLED=false</code>, <code>MCPGATEWAY_ADMIN_API_ENABLED=false</code>)</li> <li> Enable authentication with strong passwords/keys and custom usernames</li> <li> Configure TLS/HTTPS with valid certificates (never HTTP in production)</li> <li> Validate all MCP servers before connecting</li> <li> Implement network controls (firewalls, ingress policies)</li> <li> Set rate limits per endpoint and client</li> <li> Configure monitoring and anomaly detection</li> <li> Secure databases (TLS, strong passwords, restricted access)</li> <li> Set resource limits (CPU, memory) to prevent DoS</li> <li> Implement secrets management (never hardcode credentials)</li> <li> Configure CORS policies appropriately</li> <li> Disable debug mode in production</li> <li> Keep gateway updated to latest version</li> <li> Regular security audits of connected servers</li> </ul>"},{"location":"architecture/security-features/#security-best-practices","title":"Security Best Practices","text":""},{"location":"architecture/security-features/#gateway-as-one-layer-in-defense-in-depth","title":"Gateway as One Layer in Defense-in-Depth","text":"<p>MCP Gateway should be integrated as one component in a comprehensive security architecture:</p> <ol> <li>Upstream validation: Validate and trust all MCP servers before connection</li> <li>Gateway validation: Input/output validation at gateway level</li> <li>Downstream validation: Applications must implement their own security controls</li> <li>Network isolation: Use network policies to restrict access</li> <li>Comprehensive monitoring: Log and alert on suspicious activities</li> </ol>"},{"location":"architecture/security-features/#integration-requirements","title":"Integration Requirements","text":"<p>MCP Gateway is not a standalone product. Integrate with: - API gateways/reverse proxies (auth, rate-limiting, routing) - Secrets management systems (Vault, SOPS) - Identity and access management (IAM) platforms - Logging, monitoring, and SIEM platforms - Runtime security and anomaly detection - Custom UI/orchestration layers for multi-tenancy</p>"},{"location":"architecture/security-features/#developer-security-tools","title":"Developer Security Tools","text":"<p>Core Security Commands:</p> <ul> <li><code>make security-all</code> - Run all security tools</li> <li><code>make security-report</code> - Generate security report</li> <li><code>make security-fix</code> - Auto-fix issues where possible</li> <li><code>make pre-commit</code> - Run pre-commit hooks locally</li> <li><code>make lint</code> - 30+ linting and security tools</li> </ul> <p>Individual Security Scanners:</p> <ul> <li><code>make bandit</code> - Python security vulnerabilities</li> <li><code>make semgrep</code> - Semantic code analysis</li> <li><code>make dodgy</code> - Hardcoded secrets detection</li> <li><code>make gitleaks</code> - Git history secrets scan</li> <li><code>make pip-audit</code> - Dependency vulnerabilities</li> <li><code>make trivy</code> - Container security scan</li> <li><code>make grype-scan</code> - Container vulnerability audit</li> <li><code>make osv-scan</code> - Open source vulnerability scan</li> </ul>"},{"location":"architecture/security-features/#multi-tenancy-considerations","title":"Multi-Tenancy Considerations","text":"<p>MCP Gateway is not yet multi-tenant ready. For multi-user platforms, implement: - User isolation and data segregation - Role-Based Access Control (RBAC) - Resource cleanup and lifecycle management - Tenant-specific validation and limits - Per-user audit logging - Team/organization management</p> <p>Deploy as a single-tenant component within your larger multi-tenant architecture.</p>"},{"location":"architecture/security-features/#security-patching-policy","title":"Security Patching Policy","text":"<p>\u26a0\ufe0f Disclaimer: All patching is best-effort with no SLAs or commercial support.</p> <ul> <li>Critical/High: Best-effort patches within 1 week (minor version bump)</li> <li>Medium: Addressed in next release (~2 weeks)</li> <li>Low: Regular maintenance updates (~2-4 weeks)</li> <li>No backports: Fixes only applied to latest main branch</li> <li>No zero-day guarantees: Users must evaluate and mitigate risks</li> </ul>"},{"location":"architecture/security-features/#future-security-roadmap-considerations","title":"Future Security Roadmap Considerations","text":"<p>Beyond the planned features in our roadmap, these additional security capabilities could enhance MCP Gateway:</p>"},{"location":"architecture/security-features/#trust-verification","title":"\ud83d\udee1\ufe0f Trust &amp; Verification","text":"<ul> <li>Distributed Trust Networks - Reputation-based MCP server trust scoring</li> <li>Continuous Compliance Monitoring - Real-time compliance validation against security frameworks</li> <li>Supply Chain Security - SLSA framework compliance for build provenance</li> <li>Code Signing - Verify authenticity of MCP server binaries and updates</li> </ul>"},{"location":"architecture/security-features/#advanced-threat-detection","title":"\ud83d\udd0d Advanced Threat Detection","text":"<ul> <li>Threat Intelligence Integration - Real-time threat feeds from MITRE ATT&amp;CK, STIX/TAXII</li> <li>Deception Technology - Honeypots and canary tokens for early breach detection</li> <li>User and Entity Behavior Analytics (UEBA) - Detect insider threats and compromised accounts</li> <li>Network Traffic Analysis - Deep packet inspection for protocol anomalies</li> </ul>"},{"location":"architecture/security-features/#governance-compliance","title":"\ud83c\udfdb\ufe0f Governance &amp; Compliance","text":"<ul> <li>Privacy-Preserving Analytics - Differential privacy for usage metrics</li> <li>Right to be Forgotten - GDPR Article 17 compliance automation</li> <li>Data Residency Controls - Geographic restrictions for data processing</li> <li>Consent Management - Granular user consent tracking and enforcement</li> </ul>"},{"location":"architecture/security-features/#emerging-technologies","title":"\ud83d\udd2c Emerging Technologies","text":"<ul> <li>WebAssembly Sandbox - Secure execution environment for untrusted MCP servers</li> <li>Decentralized Identity (DID) - Self-sovereign identity for MCP server authentication</li> <li>Secure Enclaves - iOS/Android secure enclave support for mobile deployments</li> <li>API Security Posture Management (ASPM) - Continuous API security assessment</li> </ul>"},{"location":"architecture/security-features/#security-contact","title":"Security Contact","text":"<p>For security vulnerabilities, report privately via GitHub's security reporting:</p> <ol> <li>Navigate to Security tab</li> <li>Click \"Report a vulnerability\"</li> <li>Fill out the vulnerability details</li> </ol> <p>For more information, see our Security Policy.</p>"},{"location":"architecture/adr/","title":"Architecture Decision Records","text":"<p>This page tracks all significant design decisions made for the MCP Gateway project, using the ADR format.</p> ID Title Status Section Date 0001 Adopt FastAPI + Pydantic Accepted Framework 2025-02-01 0002 Use Async SQLAlchemy ORM Accepted Persistence 2025-02-01 0003 Expose Multi-Transport Endpoints Accepted Transport 2025-02-01 0004 Combine JWT &amp; Basic Auth Accepted Security 2025-02-01 0005 Structured JSON Logging Accepted Observability 2025-02-21 0006 Gateway &amp; Tool-Level Rate Limiting Accepted Performance 2025-02-21 0007 Pluggable Cache Backend (memory / Redis / DB) Accepted Caching 2025-02-21 0008 Federation &amp; Auto-Discovery via DNS-SD Accepted Federation 2025-02-21 0009 Built-in Health Checks &amp; Self-Monitoring Accepted Operations 2025-02-21 0010 Observability via Prometheus, Structured Logs Accepted Observability 2025-02-21 0014 Security Headers &amp; Environment-Aware CORS Middleware Accepted Security 2025-08-17 0015 Configurable Well-Known URI Handler Accepted Security 2025-08-17 <p>\u2733\ufe0f Add new decisions chronologically and link to them from this table.</p>"},{"location":"architecture/adr/001-adopt-fastapi-pydantic/","title":"ADR-0001: Adopt FastAPI + Pydantic","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-02-01</li> <li>Deciders: Mihai Criveti</li> </ul>"},{"location":"architecture/adr/001-adopt-fastapi-pydantic/#context","title":"Context","text":"<p>The MCP Gateway must serve both human and machine clients with low-latency HTTP and WebSocket endpoints. Payloads require runtime validation and schema documentation, while internal data types must align with environment-driven settings and JSON models.</p> <p>We explored Python-native frameworks that support async-first operation, data validation, OpenAPI generation, and modular service layout.</p>"},{"location":"architecture/adr/001-adopt-fastapi-pydantic/#decision","title":"Decision","text":"<p>We will adopt:</p> <ul> <li>FastAPI as the core web framework for routing HTTP, WebSocket, and streaming endpoints.</li> <li>Pydantic v2 for all settings, schemas, and typed data models (e.g., <code>Tool</code>, <code>Resource</code>, <code>GatewayMetadata</code>, etc.).</li> </ul> <p>These will form the foundation for the application layer and public API.</p>"},{"location":"architecture/adr/001-adopt-fastapi-pydantic/#consequences","title":"Consequences","text":"<ul> <li>\u2728 Strong typing, runtime validation, and auto-generated OpenAPI specs.</li> <li>\ud83e\udde9 Unified model structure across internal logic, external APIs, and config parsing.</li> <li>\ud83d\ude80 Excellent async performance with Uvicorn and Starlette compatibility.</li> <li>\ud83d\udd12 Tight coupling to Pydantic means future transitions (e.g., to dataclasses or attrs) would be non-trivial.</li> </ul>"},{"location":"architecture/adr/001-adopt-fastapi-pydantic/#alternatives-considered","title":"Alternatives Considered","text":"Option Why Not Flask + Marshmallow Sync-first architecture, weak async support, manual OpenAPI generation. Django REST Framework Heavyweight, monolithic, tightly bound to Django ORM, not async-native. Tornado or Starlette alone More boilerplate to assemble middlewares, validators, and routing. Node.js + Fastify Excellent performance but requires a split language/runtime and loss of shared model code. Pure <code>httpx</code> + <code>uvicorn</code> + <code>pydantic-core</code> Too low-level; duplicating FastAPI features manually."},{"location":"architecture/adr/001-adopt-fastapi-pydantic/#status","title":"Status","text":"<p>This decision has been implemented in the current architecture.</p>"},{"location":"architecture/adr/002-use-async-sqlalchemy-orm/","title":"ADR-0002: Use Async SQLAlchemy ORM","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-02-01</li> <li>Deciders: Mihai Criveti</li> </ul>"},{"location":"architecture/adr/002-use-async-sqlalchemy-orm/#context","title":"Context","text":"<p>The gateway must persist:</p> <ul> <li>Tool metadata</li> <li>Resource configurations</li> <li>Usage metrics</li> <li>Peer discovery and federation state</li> </ul> <p>We require a relational database with schema evolution, strong typing, and async support. The current codebase already uses SQLAlchemy ORM models with an async engine and declarative mapping style.</p>"},{"location":"architecture/adr/002-use-async-sqlalchemy-orm/#decision","title":"Decision","text":"<p>We will use:</p> <ul> <li>SQLAlchemy 2.x (async) for all data persistence.</li> <li>AsyncSession and <code>async with</code> scoped transactions.</li> <li>Alembic for migrations, with autogeneration and CLI support.</li> <li>SQLite for development; PostgreSQL or MySQL for production via <code>DATABASE_URL</code>.</li> </ul> <p>This provides consistent, well-understood relational behavior and integrates cleanly with FastAPI.</p>"},{"location":"architecture/adr/002-use-async-sqlalchemy-orm/#consequences","title":"Consequences","text":"<ul> <li>\ud83e\uddf1 Mature and reliable ORM with a wide developer base.</li> <li>\ud83d\udd04 Fully async I/O stack without thread-pools or blocking.</li> <li>\ud83d\udd27 Migrations handled declaratively using Alembic.</li> <li>\ud83d\udcc4 Pydantic models can be derived from or synchronized with SQLAlchemy models if needed.</li> </ul>"},{"location":"architecture/adr/002-use-async-sqlalchemy-orm/#alternatives-considered","title":"Alternatives Considered","text":"Option Why Not Raw asyncpg / aiosqlite Manual query strings, error-prone joins, no built-in migrations. Tortoise ORM / GINO Less widely used, more magic, lower confidence in long-term maintainability. Django ORM Not async-native, tightly coupled to Django ecosystem, too heavyweight. NoSQL (e.g., MongoDB) No relational guarantees, weaker query language, major refactor from current SQL-based model."},{"location":"architecture/adr/002-use-async-sqlalchemy-orm/#status","title":"Status","text":"<p>This decision is in place and all gateway persistence uses SQLAlchemy 2.x with async support.</p>"},{"location":"architecture/adr/003-expose-multi-transport-endpoints/","title":"ADR-0003: Expose Multi-Transport Endpoints (HTTP / WebSocket / SSE / STDIO)","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-02-01</li> <li>Deciders: Mihai Criveti</li> </ul>"},{"location":"architecture/adr/003-expose-multi-transport-endpoints/#context","title":"Context","text":"<p>The MCP Gateway must serve diverse clients: web browsers, CLIs, language-specific SDKs, and headless daemons. Different use cases require support for both request/response and streaming interactions.</p> <p>Requirements:</p> <ul> <li>Human-readable RPC over HTTP for developers</li> <li>Low-latency streaming for long-running tools</li> <li>IPC-style invocations for local CLI integration</li> <li>Unified business logic regardless of transport</li> </ul>"},{"location":"architecture/adr/003-expose-multi-transport-endpoints/#decision","title":"Decision","text":"<p>The gateway will support the following built-in transports:</p> <ul> <li>HTTP JSON-RPC (primary RPC interface)</li> <li>WebSocket (bidirectional messaging)</li> <li>SSE (Server-Sent Events) (for push-only event streaming)</li> <li>Streamable HTTP  (bidirectional, resumable streams, efficient MCP transport over HTTP)</li> <li>STDIO (optional local CLI / subprocess transport)</li> </ul> <p>Transport selection is dynamic, based on environment (<code>TRANSPORT_TYPE</code>) and route grouping. All transports share the same service layer and authentication mechanisms.</p>"},{"location":"architecture/adr/003-expose-multi-transport-endpoints/#consequences","title":"Consequences","text":"<ul> <li>\u2705 Maximum client flexibility, supporting modern browsers and legacy CLI tools.</li> <li>\ud83d\udd04 Business logic remains decoupled from transport implementation.</li> <li>\ud83d\udcf6 Streaming transports (WS, SSE) require timeout, reconnection, and back-pressure handling. Easy expansion with new MCP standards</li> </ul>"},{"location":"architecture/adr/003-expose-multi-transport-endpoints/#alternatives-considered","title":"Alternatives Considered","text":"Option Why Not HTTP-only JSON API Poor fit for long-lived streaming tasks; requires polling. gRPC (HTTP/2) Not browser-friendly; requires generated stubs; less discoverable. Separate microservices per transport Code duplication, diverging implementations, and operational complexity. Single transport abstraction Reduces explicitness; transport-specific needs get buried in generic interfaces."},{"location":"architecture/adr/003-expose-multi-transport-endpoints/#status","title":"Status","text":"<p>All four transports are implemented in the current FastAPI application and are toggleable via configuration.</p>"},{"location":"architecture/adr/004-combine-jwt-and-basic-auth/","title":"ADR-0004: Combine JWT &amp; Basic Auth","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-02-01</li> <li>Deciders: Core Engineering Team</li> </ul>"},{"location":"architecture/adr/004-combine-jwt-and-basic-auth/#context","title":"Context","text":"<p>The gateway needs to support two types of clients:</p> <ul> <li>Browser-based users using the Admin UI</li> <li>Headless clients such as scripts, services, and tools</li> </ul> <p>These use cases require different authentication workflows:</p> <ul> <li>Browsers prefer form-based login and session cookies.</li> <li>Automation prefers stateless, token-based access.</li> </ul> <p>The current config exposes both:</p> <ul> <li><code>BASIC_AUTH_USER</code> and <code>BASIC_AUTH_PASSWORD</code></li> <li><code>JWT_SECRET_KEY</code>, <code>JWT_EXPIRY_SECONDS</code>, and cookie settings</li> </ul>"},{"location":"architecture/adr/004-combine-jwt-and-basic-auth/#decision","title":"Decision","text":"<p>We will combine both authentication modes as follows:</p> <ul> <li>Basic Auth secures access to <code>/admin</code>. Upon success, a short-lived JWT cookie is issued.</li> <li>JWT Bearer token (via header or cookie) is required for all API, WebSocket, and SSE requests.</li> <li>Tokens are signed using the shared <code>JWT_SECRET_KEY</code> and include standard claims (sub, exp, scopes).</li> <li>When <code>AUTH_REQUIRED=false</code>, the gateway allows unauthenticated access (dev only).</li> </ul>"},{"location":"architecture/adr/004-combine-jwt-and-basic-auth/#consequences","title":"Consequences","text":"<ul> <li>\u2705 Developers can log in once via browser and obtain an authenticated session.</li> <li>\u2705 Scripts can use a generated JWT directly, with no credential storage.</li> <li>\u274c Tokens must be signed, rotated, and verified securely (TLS required).</li> <li>\ud83d\udd04 JWTs expire and must be refreshed periodically by clients.</li> </ul>"},{"location":"architecture/adr/004-combine-jwt-and-basic-auth/#alternatives-considered","title":"Alternatives Considered","text":"Option Why Not JWT only CLI tools need a pre-acquired token; not friendly for interactive login. Basic only Password sent on every request; cannot easily revoke or expire credentials. OAuth2 / OpenID Connect Too complex for self-hosted setups; requires external identity provider. mTLS client auth Secure but heavy; not usable in browsers or simple HTTP clients."},{"location":"architecture/adr/004-combine-jwt-and-basic-auth/#status","title":"Status","text":"<p>This combined authentication mechanism is implemented and enabled by default in the gateway.</p>"},{"location":"architecture/adr/005-structured-json-logging/","title":"ADR-0005: Structured JSON Logging","text":"<ul> <li>Status: Implemented</li> <li>Date: 2025-01-09</li> <li>Deciders: Core Engineering Team</li> </ul>"},{"location":"architecture/adr/005-structured-json-logging/#context","title":"Context","text":"<p>The gateway must emit logs that:</p> <ul> <li>Are machine-readable and parseable by tools like ELK, Loki, or Datadog</li> <li>Include rich context (e.g., request ID, auth user, duration)</li> <li>Can be viewed in plaintext locally and JSON in production</li> </ul> <p>Our configuration supports:</p> <ul> <li><code>LOG_FORMAT</code>: <code>json</code> or <code>text</code> (console format only)</li> <li><code>LOG_LEVEL</code>: standard Python levels (<code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code>)</li> <li><code>LOG_TO_FILE</code>: enable file logging (default: <code>false</code> - stdout/stderr only)</li> <li><code>LOG_FILE</code>: log filename when file logging is enabled (default: <code>null</code>)</li> <li><code>LOG_FOLDER</code>: directory for log files when enabled (default: <code>null</code>)</li> <li><code>LOG_FILEMODE</code>: file write mode (default: <code>a+</code> for append)</li> <li><code>LOG_ROTATION_ENABLED</code>: enable automatic log rotation (default: <code>false</code>)</li> <li><code>LOG_MAX_SIZE_MB</code>: maximum file size before rotation in MB (default: <code>1</code>)</li> <li><code>LOG_BACKUP_COUNT</code>: number of backup files to keep (default: <code>5</code>)</li> </ul> <p>Logs are initialized at startup via centralized <code>LoggingService</code>. By default, logs go only to stdout/stderr. File logging with dual-format output is optional via <code>LOG_TO_FILE=true</code>.</p>"},{"location":"architecture/adr/005-structured-json-logging/#decision","title":"Decision","text":"<p>Use the Python standard <code>logging</code> module with centralized <code>LoggingService</code>:</p> <ul> <li>JSON formatter for file logs using <code>python-json-logger</code> library</li> <li>Text formatter for console logs for human readability</li> <li>Dual output: JSON to files, text to console</li> <li>Optional rotating file handler for automatic log management (configurable)</li> <li>Centralized service integrated across all 22+ modules</li> <li>Global setup at app startup with lazy handler initialization</li> </ul>"},{"location":"architecture/adr/005-structured-json-logging/#consequences","title":"Consequences","text":"<ul> <li>\ud83d\udccb Structured JSON logs suitable for production observability pipelines (ELK, Datadog, etc.)</li> <li>\u2699\ufe0f Dual format support: JSON files for machines, text console for humans</li> <li>\ud83d\udd04 Optional log rotation prevents disk space issues when enabled</li> <li>\ud83e\uddea Development-friendly with human-readable console output</li> <li>\ud83d\udcc1 Organized storage with configurable log directories and retention</li> <li>\ud83e\uddf1 Minimal dependencies: Uses standard library + <code>python-json-logger</code></li> <li>\ud83c\udfaf Consistent logging across all application modules</li> </ul>"},{"location":"architecture/adr/005-structured-json-logging/#alternatives-considered","title":"Alternatives Considered","text":"Option Why Not loguru Elegant syntax, but non-standard; poor compatibility with Python ecosystem. structlog Adds context pipeline complexity; not needed for current log volume. External sidecar (e.g. Fluent Bit) Useful downstream but doesn't solve app-side structure. Raw print() statements Unstructured, difficult to manage at scale."},{"location":"architecture/adr/005-structured-json-logging/#status","title":"Status","text":"<p>\u2705 Implemented - Structured logging is fully implemented in <code>LoggingService</code> with:</p> <ul> <li>Centralized logging service integrated across all modules</li> <li>Dual-format output (JSON to files, text to console)</li> <li>HTTP access log capture (uvicorn.access and uvicorn.error loggers)</li> <li>Optional log rotation with configurable size limits and retention</li> <li>Environment variable configuration support</li> <li>Production-ready with proper error handling and lazy initialization</li> </ul> <p>Files Modified: 22 modules updated to use <code>LoggingService</code> Dependencies Added: <code>python-json-logger&gt;=2.0.0</code> Configuration: Via <code>LOG_LEVEL</code>, <code>LOG_FORMAT</code>, <code>LOG_TO_FILE</code>, <code>LOG_FILE</code>, <code>LOG_FOLDER</code>, <code>LOG_FILEMODE</code>, <code>LOG_ROTATION_ENABLED</code>, <code>LOG_MAX_SIZE_MB</code>, <code>LOG_BACKUP_COUNT</code></p>"},{"location":"architecture/adr/005-vscode-devcontainer-support/","title":"ADR-005: VS Code Dev Container Support","text":""},{"location":"architecture/adr/005-vscode-devcontainer-support/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/adr/005-vscode-devcontainer-support/#context","title":"Context","text":"<p>New contributors to the MCP Context Forge project face significant setup friction when trying to get a development environment running. The manual setup process requires:</p> <ul> <li>Installing Python 3.11</li> <li>Installing Docker/Podman</li> <li>Setting up virtual environments</li> <li>Installing development dependencies</li> <li>Configuring environment variables</li> <li>Running tests to verify setup</li> </ul> <p>This setup complexity can discourage contributions and slow down the onboarding process for new developers. Many contributors use VS Code or GitHub Codespaces, which support Dev Containers for standardized development environments.</p>"},{"location":"architecture/adr/005-vscode-devcontainer-support/#decision","title":"Decision","text":"<p>We will add VS Code Dev Container support to the project by implementing:</p> <ol> <li><code>.devcontainer/devcontainer.json</code> - Configuration specifying:</li> <li>Container build instructions</li> <li>VS Code extensions (Python, Docker)</li> <li>Post-creation commands</li> <li> <p>Environment variables for development mode</p> </li> <li> <p><code>.devcontainer/Dockerfile</code> - Container definition with:</p> </li> <li>Python 3.11 slim base image</li> <li>Docker CLI for container management</li> <li>System dependencies (curl, git, build-essential)</li> <li>Python tooling (pip, setuptools, pdm, uv)</li> <li> <p>Development environment setup</p> </li> <li> <p><code>.devcontainer/postCreateCommand.sh</code> - Setup script that:</p> </li> <li>Copies <code>.env.example</code> to <code>.env</code> if needed</li> <li>Runs <code>make install-dev</code> to install development dependencies</li> <li> <p>Runs <code>make test</code> to verify the environment</p> </li> <li> <p>Documentation updates - README.md section explaining:</p> </li> <li>How to use the devcontainer in VS Code</li> <li>How to use with GitHub Codespaces</li> <li>Benefits and included tools</li> </ol>"},{"location":"architecture/adr/005-vscode-devcontainer-support/#consequences","title":"Consequences","text":""},{"location":"architecture/adr/005-vscode-devcontainer-support/#positive","title":"Positive","text":"<ul> <li>Instant onboarding: New contributors can start developing immediately with one click</li> <li>Consistent environments: All developers use the same Python version, tools, and dependencies</li> <li>Reduced setup friction: No need to manually install Python, Docker, or configure environments</li> <li>GitHub Codespaces support: Cloud-based development without local setup requirements</li> <li>Automated verification: Tests run automatically to ensure the environment is working</li> <li>Standardized tooling: Everyone gets the same VS Code extensions and configuration</li> </ul>"},{"location":"architecture/adr/005-vscode-devcontainer-support/#negative","title":"Negative","text":"<ul> <li>Additional maintenance: Need to keep devcontainer configuration in sync with project requirements</li> <li>Container build time: Initial setup takes a few minutes for first-time users</li> <li>Docker dependency: Requires Docker/Podman to be installed and running</li> <li>Limited to VS Code: Only benefits developers using VS Code or Codespaces</li> </ul>"},{"location":"architecture/adr/005-vscode-devcontainer-support/#neutral","title":"Neutral","text":"<ul> <li>File size increase: Adds minimal files to the repository</li> <li>Learning curve: Developers unfamiliar with Dev Containers may need to learn the workflow</li> </ul>"},{"location":"architecture/adr/005-vscode-devcontainer-support/#alternatives-considered","title":"Alternatives Considered","text":"<ol> <li>Manual setup instructions only (current state)</li> <li>Pros: No additional complexity</li> <li> <p>Cons: High setup friction, inconsistent environments</p> </li> <li> <p>Gitpod integration</p> </li> <li>Pros: Cloud-based development</li> <li> <p>Cons: Less VS Code-native, additional external dependency</p> </li> <li> <p>Docker Compose for development</p> </li> <li>Pros: Tool-agnostic</li> <li> <p>Cons: More complex setup, less integrated with VS Code</p> </li> <li> <p>Vagrant-based development environment</p> </li> <li>Pros: Full VM isolation</li> <li>Cons: Resource-heavy, slower, less modern workflow</li> </ol>"},{"location":"architecture/adr/005-vscode-devcontainer-support/#implementation-details","title":"Implementation Details","text":"<p>The devcontainer uses: - Python 3.11: As specified in the project requirements - PDM and UV: For package management (matching the project's tooling) - Make targets: Leverages existing <code>make install-dev</code> and <code>make test</code> workflows - Environment variables: Sets <code>MCPGATEWAY_DEV_MODE=true</code> for development - VS Code extensions: Includes Python and Docker extensions for optimal development experience</p>"},{"location":"architecture/adr/005-vscode-devcontainer-support/#verification","title":"Verification","text":"<p>The implementation was tested by: 1. Building the devcontainer in VS Code 2. Verifying that development dependencies install correctly 3. Confirming that the test suite passes 4. Checking that all Make targets work properly inside the container</p>"},{"location":"architecture/adr/005-vscode-devcontainer-support/#references","title":"References","text":"<ul> <li>VS Code Dev Containers documentation</li> <li>GitHub Codespaces documentation</li> <li>Dev Container specification</li> <li>Project issue/PR requesting devcontainer support</li> </ul>"},{"location":"architecture/adr/006-gateway-tool-rate-limiting/","title":"ADR-0006: Gateway &amp; Tool-Level Rate Limiting","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-02-21</li> <li>Deciders: Core Engineering Team</li> </ul>"},{"location":"architecture/adr/006-gateway-tool-rate-limiting/#context","title":"Context","text":"<p>The MCP Gateway may serve hundreds of concurrent clients accessing multiple tools. Without protection, a single client or misbehaving tool could monopolize resources or overwhelm upstream services.</p> <p>The configuration includes:</p> <ul> <li><code>TOOL_RATE_LIMIT</code>: default limit in requests/min per tool/client</li> <li>Planned support for Redis-based or database-backed counters</li> </ul> <p>Current implementation is an in-memory token bucket.</p>"},{"location":"architecture/adr/006-gateway-tool-rate-limiting/#decision","title":"Decision","text":"<p>Implement a rate limiter at the tool invocation level, keyed by:</p> <ul> <li>Tool name</li> <li>Authenticated user / client identity (JWT or Basic)</li> <li>Time window (per-minute by default)</li> </ul> <p>Backend options:</p> <ul> <li>Memory (default for dev / single instance)</li> <li>Redis (planned for clustering / shared limits)</li> <li>Database (eventually consistent fallback)</li> </ul>"},{"location":"architecture/adr/006-gateway-tool-rate-limiting/#consequences","title":"Consequences","text":"<ul> <li>\u2705 Prevents abuse, controls cost, and provides predictable fairness</li> <li>\ud83d\udcc9 Failed requests return <code>429 Too Many Requests</code> with retry headers</li> <li>\u274c Memory backend does not scale across instances; Redis required for HA</li> <li>\ud83d\udd04 Optional override of limits via config/env for testing</li> </ul>"},{"location":"architecture/adr/006-gateway-tool-rate-limiting/#alternatives-considered","title":"Alternatives Considered","text":"Option Why Not No rate limiting Leaves gateway and tools vulnerable to overload or accidental DoS. Global rate limit only Heavy tools can starve lightweight tools; no fine-grained control. Proxy-level throttling (e.g. NGINX, Envoy) Can't distinguish tools or users inside payload; lacks granularity."},{"location":"architecture/adr/006-gateway-tool-rate-limiting/#status","title":"Status","text":"<p>Rate limiting is implemented for tool routes, with <code>TOOL_RATE_LIMIT</code> as the default policy.</p>"},{"location":"architecture/adr/007-pluggable-cache-backend/","title":"ADR-0007: Pluggable Cache Backend (memory / Redis / database)","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-02-21</li> <li>Deciders: Core Engineering Team</li> </ul>"},{"location":"architecture/adr/007-pluggable-cache-backend/#context","title":"Context","text":"<p>The MCP Gateway uses short-lived caching for:</p> <ul> <li>Tool responses and resource lookups</li> <li>Peer discovery metadata</li> <li>Temporary session state and rate-limiting</li> </ul> <p>Different deployments require different caching characteristics:</p> <ul> <li>Dev mode: no external services (in-memory only)</li> <li>Production: clustered and persistent (Redis)</li> <li>Air-gapped: embedded fallback (database table)</li> </ul> <p>The config exposes <code>CACHE_TYPE=memory|redis|database</code>.</p>"},{"location":"architecture/adr/007-pluggable-cache-backend/#decision","title":"Decision","text":"<p>Abstract the caching system via a <code>CacheBackend</code> interface and support the following pluggable backends:</p> <ul> <li><code>MemoryCacheBackend</code>: simple <code>dict</code> with TTL, for dev and unit tests</li> <li><code>RedisCacheBackend</code>: shared, centralized cache for multi-node clusters</li> <li><code>DatabaseCacheBackend</code>: uses SQLAlchemy ORM to persist TTL-based records</li> </ul> <p>Selection is driven by the <code>CACHE_TYPE</code> environment variable. Code paths use a consistent interface regardless of backend.</p>"},{"location":"architecture/adr/007-pluggable-cache-backend/#consequences","title":"Consequences","text":"<ul> <li>\ud83d\udd04 Easy to switch cache backend per environment or load profile</li> <li>\ud83d\ude80 Redis allows horizontal scaling and persistent shared state</li> <li>\u274c Memory cache does not survive restarts or share state</li> <li>\ud83d\udc22 Database cache is slower, but useful in restricted networks</li> </ul>"},{"location":"architecture/adr/007-pluggable-cache-backend/#alternatives-considered","title":"Alternatives Considered","text":"Option Why Not Hardcoded Redis Adds operational overhead and single point of failure for dev. Memory-only cache Incompatible with horizontal scale or restart resilience. External CDN or HTTP cache Doesn't address in-process sessions, discovery, or tool state. Disk-based cache (e.g., shelve, pickle) Complex invalidation and concurrency issues; not cloud-ready."},{"location":"architecture/adr/007-pluggable-cache-backend/#status","title":"Status","text":"<p>All three cache backends are implemented and the gateway selects one dynamically based on configuration.</p>"},{"location":"architecture/adr/008-federation-discovery/","title":"ADR-0008: Federation &amp; Auto-Discovery via DNS-SD","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-02-21</li> <li>Deciders: Core Engineering Team</li> </ul>"},{"location":"architecture/adr/008-federation-discovery/#context","title":"Context","text":"<p>The MCP Gateway must support federated operation, where multiple gateway instances:</p> <ul> <li>Automatically discover each other on a shared network</li> <li>Exchange metadata and tool/service availability</li> <li>Merge registries and route calls to remote nodes</li> </ul> <p>Manual configuration (e.g. hardcoded peer IPs) is error-prone and brittle in dynamic environments like laptops or Kubernetes.</p> <p>The codebase includes a <code>DiscoveryService</code> and federation settings such as:</p> <ul> <li><code>FEDERATION_ENABLED</code></li> <li><code>FEDERATION_DISCOVERY</code></li> <li><code>DISCOVERY_INTERVAL_SECONDS</code></li> </ul>"},{"location":"architecture/adr/008-federation-discovery/#decision","title":"Decision","text":"<p>We enable auto-discovery via DNS-SD (mDNS/zeroconf) by default. Each gateway:</p> <ul> <li>Publishes itself using <code>_mcp._tcp.local.</code> with TXT records</li> <li>Periodically probes for peers using <code>zeroconf</code> or a fallback registry</li> <li>Merges discovered gateways into its internal routing map</li> <li>Sends periodic liveness pings to verify peer health</li> </ul> <p>Static peer configuration is still supported for restricted networks.</p>"},{"location":"architecture/adr/008-federation-discovery/#consequences","title":"Consequences","text":"<ul> <li>\ud83d\udd0c Gateways connect seamlessly on the same local network or overlay mesh</li> <li>\ud83d\udd75\ufe0f\u2642\ufe0f DNS-SD adds moderate background network traffic, tunable via TTL</li> <li>\u26a0\ufe0f Firewalls or environments without multicast must use static peer config</li> <li>\u267b\ufe0f Federated topologies are self-healing and require no orchestration</li> </ul>"},{"location":"architecture/adr/008-federation-discovery/#alternatives-considered","title":"Alternatives Considered","text":"Option Why Not Static peer list only Manual entry, error-prone, not zero-config. Central registry (e.g. etcd, Consul) Adds external infrastructure and tight coordination. Cloud DNS-based discovery Requires cloud provider integration and persistent internet access. gRPC service registry Less transparent, requires protobuf tooling and internal coordination layer."},{"location":"architecture/adr/008-federation-discovery/#status","title":"Status","text":"<p>Auto-discovery is implemented using <code>zeroconf</code>, and federation is active when <code>FEDERATION_ENABLED=true</code>.</p> <p>Current feature is early pre-alpha and may not work correctly.</p>"},{"location":"architecture/adr/009-built-in-health-checks/","title":"ADR-0009: Built-in Health Checks &amp; Self-Monitoring","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-02-21</li> <li>Deciders: Core Engineering Team</li> </ul>"},{"location":"architecture/adr/009-built-in-health-checks/#context","title":"Context","text":"<p>MCP Gateways must participate in mesh/federated deployments. Faulty nodes must be detected and removed automatically. Additionally, cloud-native infrastructure (like Kubernetes, Docker Swarm, or systemd watchdogs) needs a way to check local health.</p> <p>The gateway config supports health-related settings:</p> <ul> <li><code>HEALTH_CHECK_INTERVAL</code>: frequency of peer checks</li> <li><code>HEALTH_CHECK_TIMEOUT</code>: request timeout per probe</li> <li><code>UNHEALTHY_THRESHOLD</code>: number of failures before a peer is marked unhealthy</li> </ul> <p>The README and architecture describe <code>/health</code> and <code>/metrics</code> endpoints as built-in features</p>"},{"location":"architecture/adr/009-built-in-health-checks/#decision","title":"Decision","text":"<p>Implement two health-check levels:</p> <ol> <li>Local health endpoint at <code>/health</code>:</li> <li>Verifies database connectivity and response time</li> <li> <p>Optionally checks cache (e.g. Redis ping or in-memory status)</p> </li> <li> <p>Federated peer liveness:</p> </li> <li>Every <code>HEALTH_CHECK_INTERVAL</code>, we ping all registered peers via HTTP</li> <li>If a peer fails <code>UNHEALTHY_THRESHOLD</code> times consecutively, it's tagged as 'Offline' i.e. The gateway is unreachable. Once its back online, it's automatically tagged as 'Active'</li> <li>A separate background task handles this (see <code>GatewayService</code>)</li> </ol> <p>Health info is also published to <code>/metrics</code> in Prometheus format.</p>"},{"location":"architecture/adr/009-built-in-health-checks/#consequences","title":"Consequences","text":"<ul> <li>\u2705 Federated topologies can eject bad nodes quickly and re-accept them later</li> <li>\u2705 Local health can be used by Kubernetes probes, HAProxy, etc.</li> <li>\ud83d\udd04 Gateways that go offline briefly won't be removed immediately (tunable)</li> <li>\ud83d\udd0d Metrics include last check time, RTT, and result status</li> </ul>"},{"location":"architecture/adr/009-built-in-health-checks/#alternatives-considered","title":"Alternatives Considered","text":"Option Why Not No health checks Delayed or no reaction to failures; requires manual debugging Rely on Kubernetes probes Only detects local process health, not remote peers External APM agent (Datadog) Complex setup, costly for small/self-hosted use cases Central heartbeat server Single point of failure, requires extra infra"},{"location":"architecture/adr/009-built-in-health-checks/#status","title":"Status","text":"<p>This is implemented as part of the <code>GatewayService</code> and exposed via <code>/health</code> and <code>/metrics</code> endpoints.</p>"},{"location":"architecture/adr/010-observability-prometheus/","title":"ADR-0010: Observability via Prometheus, Structured Logs, and Metrics","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-02-21</li> <li>Deciders: Core Engineering Team</li> </ul>"},{"location":"architecture/adr/010-observability-prometheus/#context","title":"Context","text":"<p>The MCP Gateway is a long-running service that executes tools, processes requests, and federates with remote peers. Operators and developers must be able to observe:</p> <ul> <li>Overall system health</li> <li>Request throughput and latency</li> <li>Tool and resource usage</li> <li>Error rates and failure patterns</li> <li>Federation behavior and peer availability</li> </ul> <p>The gateway needs to surface this without requiring external instrumentation or agents.</p>"},{"location":"architecture/adr/010-observability-prometheus/#decision","title":"Decision","text":"<p>We will implement native observability features using:</p> <ol> <li>Structured JSON logs with optional plaintext fallback:</li> <li>Controlled by <code>LOG_FORMAT=json|text</code> and <code>LOG_LEVEL</code></li> <li> <p>Includes fields: timestamp, level, logger name, request ID, route, auth user, latency</p> </li> <li> <p>Prometheus-compatible <code>/metrics</code> endpoint:</p> </li> <li>Exposes key counters and histograms: tool invocations, failures, resource loads, peer syncs, etc.</li> <li> <p>Uses plain <code>text/plain; version=0.0.4</code> exposition format</p> </li> <li> <p>Latency decorators and in-code timing for critical paths:</p> </li> <li>Completion requests</li> <li>Resource resolution</li> <li> <p>Federation sync/health probes</p> </li> <li> <p>Per-request IDs and correlation:</p> </li> <li>Middleware attaches <code>X-Request-ID</code> if present or generates a new one</li> <li>Request ID propagates through logs and errors</li> </ol>"},{"location":"architecture/adr/010-observability-prometheus/#consequences","title":"Consequences","text":"<ul> <li>\ud83d\udcca Metrics can be scraped by Prometheus and visualized in Grafana</li> <li>\ud83d\udd0d Developers can trace logs by request or user</li> <li>\ud83d\udee0\ufe0f No external sidecars required for basic visibility</li> <li>\ud83d\udce6 Docker image contains <code>/metrics</code> by default and logs to <code>stdout</code> (JSON)</li> </ul>"},{"location":"architecture/adr/010-observability-prometheus/#alternatives-considered","title":"Alternatives Considered","text":"Option Why Not No structured logging Difficult to parse or filter logs; weak correlation per request Third-party APM (e.g., Datadog) Adds vendor lock-in, overhead, and cost Syslog or Fluentd only Requires extra deployment layers; still needs JSON emitters StatsD / Telegraf metrics Less common today than Prometheus; harder to self-host"},{"location":"architecture/adr/010-observability-prometheus/#status","title":"Status","text":"<p>Implemented in <code>LoggingService</code> and <code>metrics_router</code>. Observability is active by default for all transports and routes.</p>"},{"location":"architecture/adr/011-tool-federation/","title":"ADR-0011: Allow gateways to add tools with the same server side name to the MCP Gateway without conflict","text":"<ul> <li>Status: Implemented</li> <li>Date: 2025-06-22</li> <li>Deciders: Core Engineering Team</li> <li>Implemented by: IBM/mcp-context-forge#116</li> </ul>"},{"location":"architecture/adr/011-tool-federation/#context","title":"Context","text":"<p>The current functionality only supports unique names for tools, making it hard for addition of tools from different gateways with similar common names.</p> <p>This needs to be updated so that tool names are allowed with a combination of gateway name (slugified namespace) and tool name. This would allow servers to add their own versions of the tools.</p> <p>The tool names would be stored along with their original name in the database so that the correct server side name is passed while invoking it.</p>"},{"location":"architecture/adr/011-tool-federation/#decision","title":"Decision","text":"<p>We implemented this by making the following changes:</p> <ol> <li>Update IDs from integers to UUIDs:</li> <li>Modify the data type of <code>id</code> in <code>Gateway</code>, <code>Tool</code> and <code>Server</code> SQLAlchemy ORM classes from int to str</li> <li>Use a default value of <code>uuid.uuid4().hex</code> for the IDs</li> <li> <p>Modify <code>server_id</code> and <code>tool_id</code> to String in <code>server_tool_association</code> table</p> </li> <li> <p>Separate server side and gateway side names for tools:</p> </li> <li>Add a new field called <code>original_name</code> in Tool ORM class to store the MCP server side name used for invocation</li> <li>Define a hybrid operator <code>name</code> to capture how the gateway exposes the tool. Set it as <code>f\"{slugify(self.gateway.name)}{settings.gateway_tool_name_separator}{self.original_name}\"</code></li> <li>Slugified <code>self.gateway.name</code> is used to remove spaces in new tool names</li> <li>Hybrid operator is used so it can be used in Python and SQL code for filtering and querying</li> <li> <p>Add a new field called <code>gateway_slug</code> which is defined as the <code>slug</code> of the Gateway linked via <code>self.gateway_id</code>. This field is later used to extract the original name from name passed from APIs</p> </li> <li> <p>Addition of configurable environmental variable <code>GATEWAY_TOOL_NAME_SEPARATOR</code> to set how the tool name looks like:</p> </li> <li> <p>By default, this is set to <code>-</code> in config.py</p> </li> <li> <p>Updates Python object schemas, function data types to match database ORM changes**</p> </li> <li>Change data type of <code>gateway_id</code>, <code>tool_id</code> and <code>server_id</code> from int to str in API functions</li> <li>When storing and updating tools, use <code>original_name</code> in <code>DbTool</code> objects to store the original name coming from <code>_initiate_gateway</code>.</li> <li>Remove check for only storing tools without matching original names</li> <li>Check if <code>gateway.url</code> exists instead of <code>gateway.name</code> exists before thowing <code>GatewayNameConflictError</code>.</li> <li>Check for existing tools on <code>original_name</code> and <code>gateway_id</code> instead of just <code>name</code> (as earlier) in update_gateway and toggle_gateway_status code.</li> <li>Set <code>name</code> and <code>gateway_slug</code> just before passing to <code>ToolRead</code> seprately since these don't come from the database as these are properties and not columns.</li> <li> <p>To obtain tool from database for invocation, handle the case that <code>name</code> from the API is not stored as a column in the database, but is a property by making an appropriate comparison as <code>DbTool.gateway_slug + settings.gateway_tool_name_separator + DbTool.original_name == name</code></p> </li> <li> <p>Handle tool changes from the gateway by adding and removing tools based on latest deactivate/activate or edit:</p> </li> <li>Step 1: Add all tools not present in database based on <code>original_name</code> to <code>gateway.tools</code></li> <li> <p>Step 2: Remove any tools not sent in the latest call to <code>_initialize_gateway</code> from <code>gateway.tools</code>.</p> </li> <li> <p>Show row index in UI:</p> </li> <li>Display the index of the row with <code>loop.index</code> in a new column called <code>S. No.</code> in Gateways, Tools and Servers screens.</li> </ol>"},{"location":"architecture/adr/011-tool-federation/#consequences","title":"Consequences","text":"<ul> <li>Two gateways can have the tools with the same native name on the gateway. e.g. <code>gateway-1-get_system_time</code> and <code>gateway-2-get_system_time</code>.</li> <li>If the tools on a gateway change, they will reflect after Deactivate/Activate cycle or after Edit Gateway action.</li> </ul>"},{"location":"architecture/adr/011-tool-federation/#alternatives-considered","title":"Alternatives Considered","text":"Option Why Not Use qualified_name as display name and name as native MCP server name Requires changes at more places since most clients display and call with the field <code>name</code>"},{"location":"architecture/adr/011-tool-federation/#status","title":"Status","text":"<p>PR created: </p>"},{"location":"architecture/adr/012-dropdown-ui-tool-selection/","title":"ADR-0012: Display available tools in a dropdown and allow selection from there for creating a server","text":"<ul> <li>Status: Draft</li> <li>Date: 2025-06-22</li> <li>Deciders: Core Engineering Team</li> </ul>"},{"location":"architecture/adr/012-dropdown-ui-tool-selection/#context","title":"Context","text":"<p>The current solution provides a text box for users where they can enter tool ids to link to a server</p> <p>With the change of IDs from integers to UUIDs, this process is more cumbursome.</p> <p>This is modified so that users can select from tool names from a drop down.</p>"},{"location":"architecture/adr/012-dropdown-ui-tool-selection/#decision","title":"Decision","text":"<p>We implemented this by making the following changes:</p> <ol> <li>Replace text box with a dropdown element keeping the styling consistent with the to the tailwind styling used</li> <li>Users select names, but the selected tool <code>id</code>s are sent to the API for databse storage</li> <li> <p>Make this change in server creation and editing screens</p> </li> <li> <p>Add a span to display selected tools</p> </li> <li>Display the selected tools below the dropdown</li> <li>Show a warning if more than 6 tools are selected in a server. This is to encourage small servers more suited for use with agents.</li> </ol>"},{"location":"architecture/adr/012-dropdown-ui-tool-selection/#screenshots","title":"Screenshots","text":"<p> Tool selection screen</p> <p> Tool count warning</p>"},{"location":"architecture/adr/012-dropdown-ui-tool-selection/#status","title":"Status","text":"<p>PR created: </p>"},{"location":"architecture/adr/013-APIs-for-server-connection-strings/","title":"ADR-0012: Display available tools in a dropdown and allow selection from there for creating a server","text":"<ul> <li>Status: Draft</li> <li>Date: 2025-06-22</li> <li>Deciders: Core Engineering Team</li> </ul>"},{"location":"architecture/adr/013-APIs-for-server-connection-strings/#context","title":"Context","text":"<p>The current solution provides a text box for users where they can enter tool ids to link to a server</p> <p>With the change of IDs from integers to UUIDs, this process is more cumbursome.</p> <p>This is modified so that users can select from tool names from a drop down.</p>"},{"location":"architecture/adr/013-APIs-for-server-connection-strings/#decision","title":"Decision","text":"<p>We implemented this by making the following changes:</p> <ol> <li>Replace text box with a dropdown element keeping the styling consistent with the to the tailwind styling used</li> <li>Users select names, but the selected tool <code>id</code>s are sent to the API for databse storage</li> <li> <p>Make this change in server creation and editing screens</p> </li> <li> <p>Add a span to display selected tools</p> </li> <li>Display the selected tools below the dropdown</li> <li>Show a warning if more than 6 tools are selected in a server. This is to encourage small servers more suited for use with agents.</li> </ol>"},{"location":"architecture/adr/013-APIs-for-server-connection-strings/#screenshots","title":"Screenshots","text":"<p> Tool selection screen</p> <p> Tool count warning</p>"},{"location":"architecture/adr/013-APIs-for-server-connection-strings/#status","title":"Status","text":"<p>PR created: </p>"},{"location":"architecture/adr/014-security-headers-cors-middleware/","title":"ADR-0014: Security Headers and Environment-Aware CORS Middleware","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-08-17</li> <li>Deciders: Core Engineering Team</li> <li>Issues: #344, #533</li> <li>Related: Addresses all 9 security headers identified by nodejsscan</li> </ul>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#context","title":"Context","text":"<p>The MCP Gateway needed comprehensive security headers and proper CORS configuration to prevent common web attacks including XSS, clickjacking, MIME sniffing, and cross-origin attacks. Additionally, the nodejsscan static analysis tool identified 9 missing security headers specifically for the Admin UI and static assets.</p> <p>The previous implementation had: - Basic CORS middleware with wildcard origins in some configurations - Limited security headers only in the DocsAuthMiddleware - No comprehensive security header implementation - Manual CORS origin configuration without environment awareness - Admin UI cookie settings without proper security attributes - No static analysis tool compatibility</p> <p>Security requirements included: - Essential security headers for all responses (issue #344) - Configurable security headers for Admin UI and static assets (issue #533) - Environment-aware CORS configuration for development vs production - Secure cookie handling for authentication - Admin UI compatibility with Content Security Policy - Static analysis compatibility for nodejsscan and similar tools - Backward compatibility with existing configurations</p>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#decision","title":"Decision","text":"<p>We implemented a comprehensive security middleware solution with the following components:</p>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#1-securityheadersmiddleware","title":"1. SecurityHeadersMiddleware","text":"<p>Created <code>mcpgateway/middleware/security_headers.py</code> that automatically adds essential security headers to all responses:</p> <pre><code># Essential security headers\nresponse.headers[\"X-Content-Type-Options\"] = \"nosniff\"\nresponse.headers[\"X-Frame-Options\"] = \"DENY\"\nresponse.headers[\"X-XSS-Protection\"] = \"0\"  # Modern browsers use CSP\nresponse.headers[\"X-Download-Options\"] = \"noopen\"  # Prevent IE downloads\nresponse.headers[\"Referrer-Policy\"] = \"strict-origin-when-cross-origin\"\n\n# Content Security Policy (Admin UI compatible)\ncsp_directives = [\n    \"default-src 'self'\",\n    \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdnjs.cloudflare.com https://cdn.tailwindcss.com https://cdn.jsdelivr.net\",\n    \"style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com\",\n    \"img-src 'self' data: https:\",\n    \"font-src 'self' data:\",\n    \"connect-src 'self' ws: wss: https:\",\n    \"frame-ancestors 'none'\"\n]\n\n# HSTS for HTTPS connections\nif request.url.scheme == \"https\" or request.headers.get(\"X-Forwarded-Proto\") == \"https\":\n    response.headers[\"Strict-Transport-Security\"] = \"max-age=31536000; includeSubDomains\"\n\n# Remove sensitive headers\ndel response.headers[\"X-Powered-By\"]  # if present\ndel response.headers[\"Server\"]        # if present\n</code></pre>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#2-environment-aware-cors-configuration","title":"2. Environment-Aware CORS Configuration","text":"<p>Enhanced CORS setup in <code>mcpgateway/main.py</code> with automatic origin configuration:</p> <p>Development Environment: - Automatically configures origins for common development ports: localhost:3000, localhost:8080, gateway port - Includes both <code>localhost</code> and <code>127.0.0.1</code> variants - Allows HTTP origins for development convenience</p> <p>Production Environment: - Constructs HTTPS origins from <code>APP_DOMAIN</code> setting - Creates origins: <code>https://{domain}</code>, <code>https://app.{domain}</code>, <code>https://admin.{domain}</code> - Enforces HTTPS-only origins - Never uses wildcard origins</p>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#3-secure-cookie-utilities","title":"3. Secure Cookie Utilities","text":"<p>Added <code>mcpgateway/utils/security_cookies.py</code> with functions for secure authentication:</p> <pre><code>def set_auth_cookie(response: Response, token: str, remember_me: bool = False):\n    use_secure = (settings.environment == \"production\") or settings.secure_cookies\n    response.set_cookie(\n        key=\"jwt_token\",\n        value=token,\n        max_age=30 * 24 * 3600 if remember_me else 3600,\n        httponly=True,      # Prevents JavaScript access\n        secure=use_secure,  # HTTPS only in production\n        samesite=settings.cookie_samesite,  # CSRF protection\n        path=\"/\"\n    )\n</code></pre>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#4-configurable-security-headers","title":"4. Configurable Security Headers","text":"<p>Added comprehensive configuration options to <code>mcpgateway/config.py</code> for all security headers:</p> <pre><code># Environment awareness\nenvironment: str = Field(default=\"development\", env=\"ENVIRONMENT\")\napp_domain: str = Field(default=\"localhost\", env=\"APP_DOMAIN\")\n\n# Cookie Security\nsecure_cookies: bool = Field(default=True, env=\"SECURE_COOKIES\")\ncookie_samesite: str = Field(default=\"lax\", env=\"COOKIE_SAMESITE\")\n\n# CORS Configuration\ncors_allow_credentials: bool = Field(default=True, env=\"CORS_ALLOW_CREDENTIALS\")\n\n# Security Headers Configuration (issue #533)\nsecurity_headers_enabled: bool = Field(default=True, env=\"SECURITY_HEADERS_ENABLED\")\nx_frame_options: str = Field(default=\"DENY\", env=\"X_FRAME_OPTIONS\")\nx_content_type_options_enabled: bool = Field(default=True, env=\"X_CONTENT_TYPE_OPTIONS_ENABLED\")\nx_xss_protection_enabled: bool = Field(default=True, env=\"X_XSS_PROTECTION_ENABLED\")\nx_download_options_enabled: bool = Field(default=True, env=\"X_DOWNLOAD_OPTIONS_ENABLED\")\nhsts_enabled: bool = Field(default=True, env=\"HSTS_ENABLED\")\nhsts_max_age: int = Field(default=31536000, env=\"HSTS_MAX_AGE\")\nhsts_include_subdomains: bool = Field(default=True, env=\"HSTS_INCLUDE_SUBDOMAINS\")\nremove_server_headers: bool = Field(default=True, env=\"REMOVE_SERVER_HEADERS\")\n</code></pre>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#5-static-analysis-tool-compatibility","title":"5. Static Analysis Tool Compatibility","text":"<p>Added security meta tags to <code>mcpgateway/templates/admin.html</code> for static analysis tool compatibility:</p> <pre><code>&lt;!-- Security meta tags for static analysis tools (complement HTTP headers) --&gt;\n&lt;meta http-equiv=\"Content-Security-Policy\" content=\"...\" /&gt;\n&lt;meta http-equiv=\"X-Frame-Options\" content=\"DENY\" /&gt;\n&lt;meta http-equiv=\"X-Content-Type-Options\" content=\"nosniff\" /&gt;\n&lt;meta http-equiv=\"X-XSS-Protection\" content=\"1; mode=block\" /&gt;\n&lt;meta http-equiv=\"X-Download-Options\" content=\"noopen\" /&gt;\n</code></pre>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#6-enhanced-static-analysis","title":"6. Enhanced Static Analysis","text":"<p>Updated Makefile to scan both static files and templates: <pre><code>nodejsscan:\n    @$(VENV_DIR)/bin/nodejsscan --directory ./mcpgateway/static --directory ./mcpgateway/templates || true\n</code></pre></p>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#consequences","title":"Consequences","text":""},{"location":"architecture/adr/014-security-headers-cors-middleware/#benefits","title":"\u2705 Benefits","text":"<ul> <li>Comprehensive Protection: All responses include essential security headers</li> <li>Automatic Configuration: CORS origins are automatically configured based on environment</li> <li>Admin UI Compatible: CSP allows required CDN resources while maintaining security</li> <li>Production Ready: Secure defaults for production deployments</li> <li>Development Friendly: Permissive localhost origins for development</li> <li>Backward Compatible: Existing configurations continue to work</li> <li>Cookie Security: Authentication cookies automatically configured with security flags</li> <li>HTTPS Detection: HSTS header added automatically when HTTPS is detected</li> </ul>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#trade-offs","title":"\u274c Trade-offs","text":"<ul> <li>CSP Flexibility: Using 'unsafe-inline' and 'unsafe-eval' for Admin UI compatibility</li> <li>CDN Dependencies: CSP allows specific external CDN domains</li> <li>Configuration Complexity: More environment variables to configure</li> <li>Development Overhead: Additional middleware processing on every request</li> </ul>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#maintenance","title":"\ud83d\udd04 Maintenance","text":"<ul> <li>CSP Updates: May need updates if Admin UI adds new external dependencies</li> <li>CDN Changes: CSP must be updated if CDN URLs change</li> <li>Security Reviews: Periodic review of CSP directives for security improvements</li> <li>Browser Updates: Monitor browser CSP implementation changes</li> </ul>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#alternatives-considered","title":"Alternatives Considered","text":"Alternative Why Not Chosen Manual CORS configuration only Error-prone and inconsistent across environments Strict CSP without Admin UI support Would break existing Admin UI functionality Separate middleware for each header More complex and harder to maintain Runtime-configurable CSP Added complexity with minimal benefit No security headers Unacceptable security posture for production Environment-specific builds More complex deployment and maintenance"},{"location":"architecture/adr/014-security-headers-cors-middleware/#implementation-details","title":"Implementation Details","text":""},{"location":"architecture/adr/014-security-headers-cors-middleware/#middleware-order","title":"Middleware Order","text":"<pre><code># Order matters - security headers should be added after CORS\napp.add_middleware(CORSMiddleware, ...)      # 1. CORS first\napp.add_middleware(SecurityHeadersMiddleware) # 2. Security headers\napp.add_middleware(DocsAuthMiddleware)       # 3. Auth protection\n</code></pre>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#environment-detection","title":"Environment Detection","text":"<ul> <li>Uses <code>ENVIRONMENT</code> setting to determine development vs production mode</li> <li>Falls back to safe defaults if environment not specified</li> <li>Only applies automatic origins when using default configuration</li> </ul>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#csp-design-decisions","title":"CSP Design Decisions","text":"<ul> <li>'unsafe-inline': Required for Tailwind CSS inline styles and Alpine.js</li> <li>'unsafe-eval': Required for some JavaScript frameworks used in Admin UI</li> <li>Specific CDN domains: Whitelisted known-good CDN sources instead of wildcard</li> <li>'frame-ancestors none': Prevents all framing to prevent clickjacking</li> </ul>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#iframe-embedding-configuration","title":"iframe Embedding Configuration","text":"<p>By default, iframe embedding is disabled for security via <code>X-Frame-Options: DENY</code> and <code>frame-ancestors 'none'</code>. To enable iframe embedding:</p> <ol> <li>Same-domain embedding: Set <code>X_FRAME_OPTIONS=SAMEORIGIN</code></li> <li>Specific domain embedding: Set <code>X_FRAME_OPTIONS=ALLOW-FROM https://trusted-domain.com</code></li> <li>Disable frame protection: Set <code>X_FRAME_OPTIONS=\"\"</code> (not recommended)</li> </ol> <p>Note: When changing X-Frame-Options, also consider updating the CSP <code>frame-ancestors</code> directive for comprehensive browser support.</p>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#testing-strategy","title":"Testing Strategy","text":"<p>Implemented comprehensive test coverage (42 new tests): - Security headers validation across all endpoints - CORS behavior testing for allowed and blocked origins - Environment-aware configuration testing - Cookie security attributes validation - Production security posture verification - CSP directive structure validation - HSTS behavior testing</p>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#future-enhancements","title":"Future Enhancements","text":"<p>Potential improvements for future iterations: - CSP Nonces: Replace 'unsafe-inline' with nonces for dynamic content - Subresource Integrity: Add SRI for external CDN resources - CSP Violation Reporting: Implement CSP violation reporting endpoint - Per-Route CSP: Different CSP policies for different endpoints - Security Header Compliance: Monitoring dashboard for header compliance</p>"},{"location":"architecture/adr/014-security-headers-cors-middleware/#status","title":"Status","text":"<p>This security headers and CORS middleware implementation is accepted and implemented as of version 0.5.0, providing comprehensive security coverage while maintaining compatibility with existing functionality.</p>"},{"location":"architecture/adr/015-well-known-uri-handler/","title":"ADR-0015: Configurable Well-Known URI Handler","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-08-17</li> <li>Deciders: Core Engineering Team</li> <li>Issues: #540</li> <li>Related: Security infrastructure for standardized web discovery</li> </ul>"},{"location":"architecture/adr/015-well-known-uri-handler/#context","title":"Context","text":"<p>The MCP Gateway needed to support standardized well-known URIs as defined by RFC 8615 to enable proper web service discovery, security contact information, and crawler management. Well-known URIs are standardized endpoints that web services expose for automated discovery and security contact purposes.</p> <p>The implementation needed to address: - robots.txt for search engine crawler management (typically private API = disable crawling) - security.txt for security contact information per RFC 9116 - Custom well-known files for additional service policies (AI usage, DNT policy, etc.) - Security-first defaults appropriate for private API gateway deployment - Configuration flexibility for different deployment scenarios - Admin monitoring of well-known configuration status</p>"},{"location":"architecture/adr/015-well-known-uri-handler/#requirements","title":"Requirements","text":"<ul> <li>Support standard well-known URIs (robots.txt, security.txt)</li> <li>Allow custom well-known files via configuration</li> <li>Default to private API security posture (no crawling)</li> <li>RFC 9116 compliant security.txt with automatic validation</li> <li>Configurable cache headers for performance</li> <li>Admin endpoint for configuration monitoring</li> <li>Environment-based configuration via standard patterns</li> </ul>"},{"location":"architecture/adr/015-well-known-uri-handler/#decision","title":"Decision","text":"<p>We implemented a flexible <code>/.well-known/*</code> endpoint handler with the following design:</p>"},{"location":"architecture/adr/015-well-known-uri-handler/#1-router-based-implementation","title":"1. Router-Based Implementation","text":"<p>Created <code>mcpgateway/routers/well_known.py</code> with a dedicated FastAPI router:</p> <pre><code>@router.get(\"/.well-known/{filename:path}\", include_in_schema=False)\nasync def get_well_known_file(filename: str, response: Response, request: Request):\n    \"\"\"Serve well-known URI files with configurable content and security defaults.\"\"\"\n</code></pre> <p>Design decisions: - Router isolation: Separate router for clean organization and testing - Dynamic routing: Single endpoint handles all well-known URIs - Security-first: Disabled by default, explicit enable required - Schema exclusion: Not included in OpenAPI docs (reduces attack surface)</p>"},{"location":"architecture/adr/015-well-known-uri-handler/#2-configuration-driven-content","title":"2. Configuration-Driven Content","text":"<p>Extended <code>mcpgateway/config.py</code> with well-known URI settings:</p> <pre><code># Well-Known URI Configuration\nwell_known_enabled: bool = True\nwell_known_robots_txt: str = \"\"\"User-agent: *\nDisallow: /\n\n# MCP Gateway is a private API gateway\n# Public crawling is disabled by default\"\"\"\n\nwell_known_security_txt: str = \"\"\nwell_known_security_txt_enabled: bool = False\nwell_known_custom_files: str = \"{}\"  # JSON format\nwell_known_cache_max_age: int = 3600  # 1 hour\n</code></pre> <p>Design decisions: - Private API defaults: robots.txt blocks all crawlers by default - Explicit security.txt: Only enabled when content is provided - JSON custom files: Flexible format for additional well-known files - Configurable caching: Performance optimization with sensible defaults</p>"},{"location":"architecture/adr/015-well-known-uri-handler/#3-rfc-9116-securitytxt-compliance","title":"3. RFC 9116 Security.txt Compliance","text":"<p>Implemented automatic security.txt validation and enhancement:</p> <pre><code>def validate_security_txt(content: str) -&gt; Optional[str]:\n    \"\"\"Validate security.txt format and add required headers.\"\"\"\n    # Add Expires field if missing (6 months from now)\n    # Add header comments for clarity\n    # Preserve existing valid content\n</code></pre> <p>Design decisions: - Auto-expires: Adds Expires header if missing (RFC requirement) - Header comments: Adds generation timestamp and description - Validation: Ensures RFC 9116 compliance - Preservation: Maintains existing valid fields</p>"},{"location":"architecture/adr/015-well-known-uri-handler/#4-well-known-registry","title":"4. Well-Known Registry","text":"<p>Implemented a registry for known well-known URIs with metadata:</p> <pre><code>WELL_KNOWN_REGISTRY = {\n    \"robots.txt\": {\n        \"content_type\": \"text/plain\",\n        \"description\": \"Robot exclusion standard\",\n        \"rfc\": \"RFC 9309\"\n    },\n    \"security.txt\": {\n        \"content_type\": \"text/plain\",\n        \"description\": \"Security contact information\",\n        \"rfc\": \"RFC 9116\"\n    },\n    # ... additional standard URIs\n}\n</code></pre> <p>Design decisions: - Helpful errors: Provides descriptive 404 messages for known but unconfigured files - Content-Type mapping: Ensures correct MIME types - Documentation: Links to relevant RFCs and standards - Extensibility: Easy to add new standard well-known URIs</p>"},{"location":"architecture/adr/015-well-known-uri-handler/#5-admin-monitoring","title":"5. Admin Monitoring","text":"<p>Added <code>/admin/well-known</code> endpoint for configuration visibility:</p> <pre><code>@router.get(\"/admin/well-known\", response_model=dict)\nasync def get_well_known_status(user: str = Depends(require_auth)):\n    \"\"\"Returns configuration status and available well-known files.\"\"\"\n</code></pre> <p>Design decisions: - Authentication required: Admin endpoint requires JWT authentication - Configuration visibility: Shows enabled files and cache settings - Supported files list: Displays all known well-known URI types - Status monitoring: Helps administrators verify configuration</p>"},{"location":"architecture/adr/015-well-known-uri-handler/#implementation-architecture","title":"Implementation Architecture","text":""},{"location":"architecture/adr/015-well-known-uri-handler/#file-structure","title":"File Structure","text":"<pre><code>mcpgateway/\n\u251c\u2500\u2500 config.py                 # Well-known configuration settings\n\u251c\u2500\u2500 routers/\n\u2502   \u2514\u2500\u2500 well_known.py         # /.well-known/* endpoint handler\n\u2514\u2500\u2500 main.py                   # Router integration\n\ntests/unit/mcpgateway/\n\u2514\u2500\u2500 test_well_known.py        # Comprehensive test coverage\n\n.env.example                  # Configuration documentation\n</code></pre>"},{"location":"architecture/adr/015-well-known-uri-handler/#request-flow","title":"Request Flow","text":"<ol> <li>Request: <code>GET /.well-known/robots.txt</code></li> <li>Authentication: No auth required for well-known URIs (public by design)</li> <li>Validation: Check if well-known endpoints are enabled</li> <li>Routing: Match filename to configured content or registry</li> <li>Headers: Add cache control and specific headers (X-Robots-Tag for robots.txt)</li> <li>Response: Return PlainTextResponse with appropriate headers</li> </ol>"},{"location":"architecture/adr/015-well-known-uri-handler/#security-considerations","title":"Security Considerations","text":"<ul> <li>No authentication: Well-known URIs are public by design per RFC 8615</li> <li>Content validation: security.txt content validated against RFC 9116</li> <li>Path traversal protection: Filename normalization prevents directory traversal</li> <li>Cache headers: Appropriate cache settings reduce server load</li> <li>Information disclosure: Default robots.txt reveals minimal information</li> </ul>"},{"location":"architecture/adr/015-well-known-uri-handler/#consequences","title":"Consequences","text":""},{"location":"architecture/adr/015-well-known-uri-handler/#benefits","title":"\u2705 Benefits","text":"<ul> <li>Standards Compliance: Implements RFC 8615 (well-known URIs) and RFC 9116 (security.txt)</li> <li>Security Contact: Enables security researchers to find contact information</li> <li>Crawler Management: Proper robots.txt prevents unwanted search engine indexing</li> <li>Flexibility: Custom well-known files support organization-specific policies</li> <li>Performance: Configurable caching reduces server load for frequently accessed files</li> <li>Monitoring: Admin endpoint provides configuration visibility</li> <li>Private API Focused: Defaults appropriate for API gateway deployment</li> </ul>"},{"location":"architecture/adr/015-well-known-uri-handler/#trade-offs","title":"\u274c Trade-offs","text":"<ul> <li>Information Disclosure: Well-known URIs are public and may reveal service information</li> <li>Cache Headers: Public cache headers may not be appropriate for all deployments</li> <li>Configuration Complexity: Additional environment variables to manage</li> <li>Static Content: Well-known files are static and can't include dynamic information</li> </ul>"},{"location":"architecture/adr/015-well-known-uri-handler/#maintenance","title":"\ud83d\udd04 Maintenance","text":"<ul> <li>security.txt Updates: Requires periodic updates to contact information and expiration</li> <li>RFC Compliance: Monitor RFC updates for security.txt format changes</li> <li>Custom File Management: Organizations need to maintain custom well-known content</li> <li>Cache Tuning: May need cache duration adjustments based on usage patterns</li> </ul>"},{"location":"architecture/adr/015-well-known-uri-handler/#configuration-examples","title":"Configuration Examples","text":""},{"location":"architecture/adr/015-well-known-uri-handler/#basic-private-api-default","title":"Basic Private API (Default)","text":"<pre><code>WELL_KNOWN_ENABLED=true\n# robots.txt blocks all crawlers (default)\n# security.txt disabled (default)\n</code></pre>"},{"location":"architecture/adr/015-well-known-uri-handler/#public-api-with-security-contact","title":"Public API with Security Contact","text":"<pre><code>WELL_KNOWN_ENABLED=true\nWELL_KNOWN_SECURITY_TXT=\"Contact: mailto:security@example.com\\nContact: https://example.com/security\\nPreferred-Languages: en\"\nWELL_KNOWN_ROBOTS_TXT=\"User-agent: *\\nAllow: /health\\nAllow: /docs\\nDisallow: /\"\n</code></pre>"},{"location":"architecture/adr/015-well-known-uri-handler/#custom-policies","title":"Custom Policies","text":"<pre><code>WELL_KNOWN_CUSTOM_FILES={\"ai.txt\": \"AI Usage: Tool orchestration only\", \"dnt-policy.txt\": \"We honor Do Not Track headers\"}\n</code></pre>"},{"location":"architecture/adr/015-well-known-uri-handler/#alternatives-considered","title":"Alternatives Considered","text":"Alternative Why Not Chosen Static file serving No environment-based configuration, harder to manage Database-stored content Overly complex for static content, harder to configure Middleware-based handler Less organized than router-based approach Always-enabled endpoints Security risk, should be explicitly enabled No security.txt validation Would allow non-compliant security.txt files Wildcard well-known handler Security risk, explicit file support is safer"},{"location":"architecture/adr/015-well-known-uri-handler/#testing-strategy","title":"Testing Strategy","text":"<p>Implemented comprehensive test coverage: - Default robots.txt: Validates security-first defaults - security.txt validation: Tests RFC 9116 compliance and auto-enhancement - Custom files: Verifies JSON configuration parsing and serving - 404 handling: Tests unknown files and helpful error messages - Path normalization: Ensures path traversal protection - Registry functionality: Validates well-known URI metadata</p>"},{"location":"architecture/adr/015-well-known-uri-handler/#future-enhancements","title":"Future Enhancements","text":"<p>Potential improvements for future iterations: - Dynamic content: Template variables (e.g., <code>{{DOMAIN}}</code>, <code>{{CONTACT_EMAIL}}</code>) - File upload API: Admin interface for uploading well-known files - GPG signing: Digital signature support for security.txt - Rate limiting: Specific limits for well-known endpoints - Internationalization: Multi-language support for policy files - A/B testing: Different content based on user agent or other criteria</p>"},{"location":"architecture/adr/015-well-known-uri-handler/#security-impact","title":"Security Impact","text":""},{"location":"architecture/adr/015-well-known-uri-handler/#positive-security-impact","title":"Positive Security Impact","text":"<ul> <li>Security contact: Enables responsible disclosure by security researchers</li> <li>Crawler control: Prevents unwanted indexing of private API endpoints</li> <li>Standards compliance: Follows established web security practices</li> <li>Information control: Explicit control over what information is disclosed</li> </ul>"},{"location":"architecture/adr/015-well-known-uri-handler/#security-considerations_1","title":"Security Considerations","text":"<ul> <li>Information disclosure: Well-known URIs are intentionally public</li> <li>Content validation: Prevents serving malicious content through validation</li> <li>Cache control: Public caching may not be appropriate for all environments</li> <li>Admin endpoint: Configuration status requires authentication</li> </ul>"},{"location":"architecture/adr/015-well-known-uri-handler/#status","title":"Status","text":"<p>This well-known URI handler implementation is accepted and implemented as of version 0.7.0, providing standards-compliant web service discovery while maintaining security-first defaults appropriate for private API gateway deployments.</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/","title":"ADR-016: Plugin Framework and AI Middleware Architecture","text":"<ul> <li>Status: Implemented</li> <li>Date: 2025-01-19</li> <li>Deciders: Mihai Criveti, Teryl Taylor</li> <li>Technical Story: #313, #319, #673</li> </ul>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#context","title":"Context","text":"<p>The MCP Gateway required a robust plugin framework to support AI safety middleware, security processing, and extensible gateway capabilities. The implementation needed to support both self-contained plugins (running in-process) and external middleware service integrations while maintaining performance, security, and operational simplicity.</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#decision","title":"Decision","text":"<p>We implemented a comprehensive plugin framework with the following key architectural decisions:</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#1-plugin-architecture-pattern-hybrid-self-contained-external-service-support","title":"1. Plugin Architecture Pattern: Hybrid Self-Contained + External Service Support","text":"<p>Decision: Support both self-contained plugins and external service integration within a unified framework.</p> <pre><code>class Plugin:\n    \"\"\"Base plugin for self-contained, in-process plugins\"\"\"\n    async def prompt_pre_fetch(self, payload, context) -&gt; PluginResult:\n        # In-process business logic\n        pass\n\nclass ExternalServicePlugin(Plugin):\n    \"\"\"Extension for plugins that integrate with external microservices\"\"\"\n    async def call_external_service(self, payload) -&gt; Any:\n        # HTTP calls to AI safety services, etc.\n        pass\n</code></pre> <p>Rationale: - Self-contained plugins provide high performance for simple transformations (regex, basic validation) - External service integration enables sophisticated AI middleware (LlamaGuard, OpenAI Moderation) - Unified interface simplifies plugin development and management - Operational flexibility allows mixing approaches based on requirements</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#2-hook-system-comprehensive-prepost-processing-points","title":"2. Hook System: Comprehensive Pre/Post Processing Points","text":"<p>Decision: Implement 6 primary hook points covering the complete MCP request/response lifecycle:</p> <pre><code>class HookType(str, Enum):\n    PROMPT_PRE_FETCH = \"prompt_pre_fetch\"     # Before prompt retrieval\n    PROMPT_POST_FETCH = \"prompt_post_fetch\"   # After prompt rendering\n    TOOL_PRE_INVOKE = \"tool_pre_invoke\"       # Before tool execution\n    TOOL_POST_INVOKE = \"tool_post_invoke\"     # After tool execution\n    RESOURCE_PRE_FETCH = \"resource_pre_fetch\" # Before resource fetch\n    RESOURCE_POST_FETCH = \"resource_post_fetch\" # After resource fetch\n</code></pre> <p>Rationale: - Complete coverage of MCP request lifecycle enables comprehensive AI safety - Pre/post pattern supports both input validation and output sanitization - Resource hooks enable content filtering and security scanning - Extensible design allows future hook additions (auth, federation, etc.)</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#3-plugin-execution-model-sequential-with-conditional-logic","title":"3. Plugin Execution Model: Sequential with Conditional Logic","text":"<p>Decision: Execute plugins sequentially by priority with sophisticated conditional execution:</p> <pre><code>class PluginExecutor:\n    async def execute(self, plugins, payload, global_context, ...):\n        for plugin in sorted_plugins_by_priority:\n            # Check conditions (server_ids, tools, tenants, etc.)\n            if plugin.conditions and not matches_conditions(...):\n                continue\n\n            result = await execute_with_timeout(plugin, ...)\n            if not result.continue_processing:\n                if plugin.mode == PluginMode.ENFORCE:\n                    return block_request(result.violation)\n                elif plugin.mode == PluginMode.PERMISSIVE:\n                    log_warning_and_continue()\n</code></pre> <p>Rationale: - Sequential execution provides predictable behavior and easier debugging - Priority-based ordering ensures security plugins run before transformers - Conditional execution enables fine-grained plugin targeting by context - Multi-mode support (enforce/permissive/disabled) enables flexible deployment</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#4-configuration-strategy-file-based-with-database-extension-path","title":"4. Configuration Strategy: File-Based with Database Extension Path","text":"<p>Decision: Primary file-based configuration with structured validation and future database support:</p> <pre><code># plugins/config.yaml\nplugins:\n  - name: \"PIIFilterPlugin\"\n    kind: \"plugins.pii_filter.pii_filter.PIIFilterPlugin\"\n    hooks: [\"prompt_pre_fetch\", \"tool_pre_invoke\"]\n    mode: \"enforce\"  # enforce | permissive | disabled\n    priority: 50     # Lower = higher priority\n    conditions:\n      - server_ids: [\"prod-server\"]\n        tools: [\"sensitive-tool\"]\n    config:\n      detect_ssn: true\n      mask_strategy: \"partial\"\n</code></pre> <p>Rationale: - File-based configuration supports GitOps workflows and version control - Structured validation with Pydantic ensures configuration correctness - Hierarchical conditions enable precise plugin targeting - Plugin-specific config sections support complex plugin parameters</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#5-security-isolation-model-process-isolation-with-resource-limits","title":"5. Security &amp; Isolation Model: Process Isolation with Resource Limits","text":"<p>Decision: In-process execution with comprehensive timeout and resource protection:</p> <pre><code>class PluginExecutor:\n    async def _execute_with_timeout(self, plugin, ...):\n        return await asyncio.wait_for(\n            plugin_execution,\n            timeout=self.timeout  # Default 30s\n        )\n\n    def _validate_payload_size(self, payload):\n        if payload_size &gt; MAX_PAYLOAD_SIZE:  # 1MB limit\n            raise PayloadSizeError(...)\n</code></pre> <p>Rationale: - Timeout protection prevents plugin hangs from affecting gateway - Payload size limits prevent memory exhaustion attacks - Error isolation ensures plugin failures don't crash the gateway - Audit logging tracks all plugin executions and violations</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#6-context-management-request-scoped-with-automatic-cleanup","title":"6. Context Management: Request-Scoped with Automatic Cleanup","text":"<p>Decision: Sophisticated context management with automatic lifecycle handling:</p> <pre><code>class PluginContext(GlobalContext):\n    state: dict[str, Any] = {}      # Cross-plugin shared state\n    metadata: dict[str, Any] = {}   # Plugin execution metadata\n\nclass PluginManager:\n    _context_store: Dict[str, Tuple[PluginContextTable, float]] = {}\n\n    async def _cleanup_old_contexts(self):\n        # Remove contexts older than CONTEXT_MAX_AGE (1 hour)\n        expired = [k for k, (_, ts) in self._context_store.items()\n                  if time.time() - ts &gt; CONTEXT_MAX_AGE]\n</code></pre> <p>Rationale: - Request-scoped contexts enable plugins to share state within a request - Automatic cleanup prevents memory leaks in long-running deployments - Global context sharing provides request metadata (user, tenant, server) - Local plugin contexts enable stateful processing across hook pairs</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#implementation-architecture","title":"Implementation Architecture","text":""},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#core-components","title":"Core Components","text":"<pre><code>mcpgateway/plugins/framework/\n\u251c\u2500\u2500 base.py              # Plugin base classes and PluginRef\n\u251c\u2500\u2500 models.py            # Pydantic models for all plugin types\n\u251c\u2500\u2500 manager.py           # PluginManager singleton with lifecycle management\n\u251c\u2500\u2500 registry.py          # Plugin instance registry and discovery\n\u251c\u2500\u2500 loader/\n\u2502   \u251c\u2500\u2500 config.py        # Configuration loading and validation\n\u2502   \u2514\u2500\u2500 plugin.py        # Dynamic plugin loading and instantiation\n\u2514\u2500\u2500 external/\n    \u2514\u2500\u2500 mcp/             # MCP external service integration\n</code></pre>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#plugin-types-implemented","title":"Plugin Types Implemented","text":"<ol> <li>Self-Contained Plugins</li> <li><code>PIIFilterPlugin</code> - PII detection and masking</li> <li><code>SearchReplacePlugin</code> - Regex-based text transformation</li> <li><code>DenyListPlugin</code> - Keyword blocking with violation reporting</li> <li> <p><code>ResourceFilterPlugin</code> - Content size and protocol validation</p> </li> <li> <p>External Service Support</p> </li> <li>MCP transport integration (STDIO, SSE, StreamableHTTP)</li> <li>Authentication configuration (Bearer, API Key, Basic Auth)</li> <li>Timeout and retry logic</li> <li>Health check endpoints</li> </ol>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#plugin-lifecycle","title":"Plugin Lifecycle","text":"<pre><code>sequenceDiagram\n    participant App as Gateway Application\n    participant PM as PluginManager\n    participant Plugin as Plugin Instance\n    participant Service as External Service\n\n    App-&gt;&gt;PM: initialize()\n    PM-&gt;&gt;Plugin: __init__(config)\n    PM-&gt;&gt;Plugin: initialize()\n\n    App-&gt;&gt;PM: prompt_pre_fetch(payload, context)\n    PM-&gt;&gt;Plugin: prompt_pre_fetch(payload, context)\n\n    alt Self-Contained Plugin\n        Plugin-&gt;&gt;Plugin: process_in_memory(payload)\n    else External Service Plugin\n        Plugin-&gt;&gt;Service: HTTP POST /analyze\n        Service--&gt;&gt;Plugin: analysis_result\n    end\n\n    Plugin--&gt;&gt;PM: PluginResult(continue_processing, modified_payload)\n    PM--&gt;&gt;App: result, updated_contexts\n\n    App-&gt;&gt;PM: shutdown()\n    PM-&gt;&gt;Plugin: shutdown()</code></pre>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#benefits-realized","title":"Benefits Realized","text":""},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#1-ai-safety-integration","title":"1. AI Safety Integration","text":"<ul> <li>PII Detection: Automated masking of sensitive data in prompts and responses</li> <li>Content Filtering: Regex-based content transformation and sanitization</li> <li>Compliance Support: GDPR/HIPAA-aware processing with audit trails</li> <li>External AI Services: Framework ready for LlamaGuard, OpenAI Moderation integration</li> </ul>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#2-operational-excellence","title":"2. Operational Excellence","text":"<ul> <li>Hot Configuration: Plugin configurations reloaded without restarts</li> <li>Graceful Degradation: Permissive mode allows monitoring without blocking</li> <li>Performance Protection: Timeout and size limits prevent resource exhaustion</li> <li>Memory Management: Automatic context cleanup prevents memory leaks</li> </ul>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#3-developer-experience","title":"3. Developer Experience","text":"<ul> <li>Type Safety: Full Pydantic validation for plugin configurations</li> <li>Comprehensive Testing: Plugin framework includes extensive test coverage</li> <li>Plugin Templates: Scaffolding for rapid plugin development</li> <li>Rich Diagnostics: Detailed error messages and violation reporting</li> </ul>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#performance-characteristics","title":"Performance Characteristics","text":"<ul> <li>Latency Impact: Self-contained plugins add &lt;1ms overhead per hook</li> <li>Memory Usage: ~5MB base overhead, scales linearly with active plugins</li> <li>Throughput: Tested to 1000+ req/s with 5 active plugins</li> <li>Context Cleanup: Automatic cleanup every 5 minutes, contexts expire after 1 hour</li> </ul>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#future-extensions","title":"Future Extensions","text":""},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#roadmap-items-enabled","title":"Roadmap Items Enabled","text":"<ul> <li>Server Attestation Hooks: <code>server_pre_register</code> for TPM/TEE verification</li> <li>Auth Integration: <code>auth_pre_check</code>/<code>auth_post_check</code> for custom authentication</li> <li>Federation Hooks: <code>federation_pre_sync</code>/<code>federation_post_sync</code> for peer validation</li> <li>Stream Processing: Real-time data transformation hooks</li> </ul>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#external-service-integrations-planned","title":"External Service Integrations Planned","text":"<ul> <li>LlamaGuard Integration: Content safety classification</li> <li>OpenAI Moderation API: Commercial content filtering</li> <li>HashiCorp Vault: Secret management for plugin configurations</li> <li>Open Policy Agent (OPA): Policy-as-code enforcement engine</li> </ul>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#implemented-protections","title":"Implemented Protections","text":"<ul> <li>Process Isolation: Plugins run in gateway process with timeout protection</li> <li>Input Validation: All payloads validated against size limits and schemas</li> <li>Configuration Security: Plugin configs validated against malicious patterns</li> <li>Audit Logging: All plugin executions logged with context and violations</li> </ul>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#future-security-enhancements","title":"Future Security Enhancements","text":"<ul> <li>Plugin Signing: Cryptographic verification of plugin authenticity</li> <li>Capability-Based Security: Fine-grained permission model for plugin operations</li> <li>Network Isolation: Container-based plugin execution for sensitive workloads</li> <li>Secret Management: Integration with enterprise secret stores</li> </ul>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#compliance-and-governance","title":"Compliance and Governance","text":""},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#configuration-governance","title":"Configuration Governance","text":"<ul> <li>Version Control: All plugin configurations stored in Git repositories</li> <li>Change Management: Plugin updates require review and approval workflows</li> <li>Environment Promotion: Configuration tested in dev/staging before production</li> <li>Rollback Capability: Failed plugin deployments can be quickly reverted</li> </ul>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#compliance-features","title":"Compliance Features","text":"<ul> <li>Data Processing Transparency: All PII detection and masking logged</li> <li>Right to Deletion: Plugin framework supports data sanitization workflows</li> <li>Access Logging: Complete audit trail of plugin executions with user context</li> <li>Retention Policies: Context cleanup aligns with data retention requirements</li> </ul>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#consequences","title":"Consequences","text":""},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#positive","title":"Positive","text":"<p>\u2705 Complete AI Safety Pipeline: Framework supports end-to-end content filtering and safety \u2705 High Performance: Self-contained plugins provide sub-millisecond latency \u2705 Operational Simplicity: File-based configuration integrates with existing workflows \u2705 Future-Proof: Architecture supports both current needs and roadmap expansion \u2705 Security-First: Multiple layers of protection against malicious plugins and inputs</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#negative","title":"Negative","text":"<p>\u274c Complexity: Plugin framework adds significant codebase complexity \u274c Learning Curve: Plugin development requires understanding of hook lifecycle \u274c Configuration Management: Large plugin configurations can become complex to maintain \u274c Debugging Challenges: Sequential plugin chains can be difficult to troubleshoot</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#neutral","title":"Neutral","text":"<p>\ud83d\udd04 Hybrid Architecture: Both self-contained and external services require different operational approaches \ud83d\udd04 Memory Usage: Plugin contexts require careful management in high-traffic environments \ud83d\udd04 Performance Tuning: Plugin timeouts and priorities need environment-specific tuning</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#alternatives-considered","title":"Alternatives Considered","text":""},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#1-microservice-only-architecture","title":"1. Microservice-Only Architecture","text":"<p>Rejected: Would have provided better isolation but significantly higher operational overhead and network latency for simple transformations.</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#2-webhook-based-plugin-system","title":"2. Webhook-Based Plugin System","text":"<p>Rejected: HTTP webhooks would have been simpler but lacked the sophistication needed for AI middleware integration and context management.</p>"},{"location":"architecture/adr/016-plugin-framework-ai-middleware/#3-embedded-javascriptlua-engine","title":"3. Embedded JavaScript/Lua Engine","text":"<p>Rejected: Scripting engines would have enabled dynamic plugin logic but introduced security risks and performance unpredictability.</p> <p>This ADR documents the implemented plugin framework that successfully enabled #319 (AI Middleware Integration), #221 (Input Validation), and provides the foundation for #229 (Guardrails) and #271 (Policy-as-Code). The architecture balances performance, security, and operational requirements while providing a clear path for future AI safety integrations.</p>"},{"location":"best-practices/developing-your-mcp-server-python/","title":"Developing Your MCP Server","text":"Abstract <p>This guide walks you through creating a minimal but functional MCP server using Python and the official MCP SDK. You'll build an echo server that demonstrates the key concepts and patterns for MCP development.</p> <p>For more information on Development best practices see this MCP Server Best Practices Guide</p>"},{"location":"best-practices/developing-your-mcp-server-python/#1-prerequisites","title":"1. Prerequisites","text":"<p>Environment setup</p> <p>Create a new virtual environment for your project to keep dependencies isolated.</p> Create virtual environment<pre><code># Create and manage virtual environments\nuv venv mcp-server-example\nsource mcp-server-example/bin/activate  # Linux/macOS\n# mcp-server-example\\Scripts\\activate   # Windows\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#11-install-mcp-sdk","title":"1.1 Install MCP SDK","text":"Install MCP SDK<pre><code>uv add \"mcp[cli]\"\n# or with pip: pip install \"mcp[cli]\"\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#12-verify-installation","title":"1.2 Verify Installation","text":"Verify MCP installation<pre><code>python -c \"import mcp; print('MCP SDK installed successfully')\"\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#2-write-a-minimal-echo-server","title":"2. Write a Minimal Echo Server","text":""},{"location":"best-practices/developing-your-mcp-server-python/#21-basic-server-structure","title":"2.1 Basic Server Structure","text":"<p>Simple echo server implementation</p> <p>Create <code>my_echo_server.py</code> with this minimal implementation:</p> my_echo_server.py<pre><code>from mcp.server.fastmcp import FastMCP\n\n# Create an MCP server\nmcp = FastMCP(\"my_echo_server\", port=\"8000\")\n\n@mcp.tool()\ndef echo(text: str) -&gt; str:\n    \"\"\"Echo the provided text back to the caller\"\"\"\n    return text\n\nif __name__ == \"__main__\":\n    mcp.run()  # STDIO mode by default\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#22-understanding-the-code","title":"2.2 Understanding the Code","text":"<p>Code breakdown</p> <ul> <li>FastMCP: Main application class that handles MCP protocol</li> <li>@mcp.tool(): Decorator that registers the function as an MCP tool</li> <li>Type hints: Python type hints define input/output schemas automatically</li> <li>mcp.run(): Starts the server (defaults to STDIO transport)</li> </ul>"},{"location":"best-practices/developing-your-mcp-server-python/#23-test-stdio-mode","title":"2.3 Test STDIO Mode","text":"Start server in STDIO mode<pre><code>python my_echo_server.py            # waits on stdin/stdout\n</code></pre> <p>Testing with MCP CLI</p> <p>Use the built-in development tools for easier testing:</p> Test with MCP Inspector<pre><code># Test with the MCP development tools\nuv run mcp dev my_echo_server.py\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#3-switch-to-http-transport","title":"3. Switch to HTTP Transport","text":""},{"location":"best-practices/developing-your-mcp-server-python/#31-enable-http-mode","title":"3.1 Enable HTTP Mode","text":"<p>Streamable HTTP transport</p> <p>Update the main block to use HTTP transport for network accessibility:</p> Enable HTTP transport<pre><code>if __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#32-start-http-server","title":"3.2 Start HTTP Server","text":"Run HTTP server<pre><code>python my_echo_server.py            # now at http://localhost:8000/mcp\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#33-test-http-endpoint","title":"3.3 Test HTTP Endpoint","text":"<p>Direct HTTP testing</p> <p>Test the server directly with curl:</p> Test HTTP endpoint<pre><code>curl -X POST http://localhost:8000/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/list\",\"id\":1}'\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#4-register-with-the-gateway","title":"4. Register with the Gateway","text":""},{"location":"best-practices/developing-your-mcp-server-python/#41-server-registration","title":"4.1 Server Registration","text":"<p>Register your server with the gateway</p> <p>Use the gateway API to register your running server:</p> Register server with gateway<pre><code>curl -X POST http://127.0.0.1:4444/gateways \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"my_echo_server\",\"url\":\"http://127.0.0.1:8000/mcp\",\"transport\":\"streamablehttp\"}'\n</code></pre> <p>For instructions on registering your server via the UI, please see Gateway Integration.</p>"},{"location":"best-practices/developing-your-mcp-server-python/#42-verify-registration","title":"4.2 Verify Registration","text":"Check registered gateways<pre><code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://127.0.0.1:4444/gateways\n</code></pre> <p>Expected response</p> <p>You should see your server listed as active:</p> Server registration response<pre><code>{\n  \"servers\": [\n    {\n      \"name\": \"my_echo_server\",\n      \"url\": \"http://127.0.0.1:8000/mcp\",\n      \"status\": \"active\"\n    }\n  ]\n}\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#5-end-to-end-validation","title":"5. End-to-End Validation","text":""},{"location":"best-practices/developing-your-mcp-server-python/#51-test-with-mcp-cli","title":"5.1 Test with mcp-cli","text":"<p>Test complete workflow</p> <p>Verify the full chain from CLI to gateway to your server:</p> List and call tools<pre><code># List tools to see your echo tool\nmcp-cli tools --server gateway\n\n# Call the echo tool\nmcp-cli cmd --server gateway \\\n  --tool echo \\\n  --tool-args '{\"text\":\"Round-trip success!\"}'\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#52-test-with-curl","title":"5.2 Test with curl","text":"<p>Direct gateway testing</p> <p>Test the gateway RPC endpoint directly:</p> Test via gateway RPC<pre><code>curl -X POST http://127.0.0.1:4444/rpc \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"my-echo-server-echo\",\"params\":{\"text\":\"Hello!\"},\"id\":1}'\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#53-expected-response","title":"5.3 Expected Response","text":"<p>Validation complete</p> <p>If you see this response, the full path (CLI \u2192 Gateway \u2192 Echo Server) is working correctly:</p> Successful echo response<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Hello!\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#6-enhanced-server-features","title":"6. Enhanced Server Features","text":""},{"location":"best-practices/developing-your-mcp-server-python/#61-multiple-tools","title":"6.1 Multiple Tools","text":"<p>Multi-tool server</p> <p>Extend your server with additional functionality:</p> Enhanced server with multiple tools<pre><code>from mcp.server.fastmcp import FastMCP\nimport datetime\n\n# Create an MCP server\nmcp = FastMCP(\"my_enhanced_server\", port=\"8000\")\n\n@mcp.tool()\ndef echo(text: str) -&gt; str:\n    \"\"\"Echo the provided text back to the caller\"\"\"\n    return text\n\n@mcp.tool()\ndef get_timestamp() -&gt; str:\n    \"\"\"Get the current timestamp\"\"\"\n    return datetime.datetime.now().isoformat()\n\n@mcp.tool()\ndef calculate(a: float, b: float, operation: str) -&gt; float:\n    \"\"\"Perform basic math operations: add, subtract, multiply, divide\"\"\"\n    operations = {\n        \"add\": a + b,\n        \"subtract\": a - b,\n        \"multiply\": a * b,\n        \"divide\": a / b if b != 0 else float('inf')\n    }\n\n    if operation not in operations:\n        raise ValueError(f\"Unknown operation: {operation}\")\n\n    return operations[operation]\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre> <p>Update the MCP Server in the Gateway</p> <p>Delete the current Server and register the new Server:</p> Register server with gateway<pre><code>curl -X POST http://127.0.0.1:4444/gateways \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"my_echo_server\",\"url\":\"http://127.0.0.1:8000/mcp\",\"transport\":\"streamablehttp\"}'\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#62-structured-output-with-pydantic","title":"6.2 Structured Output with Pydantic","text":"<p>Rich data structures</p> <p>Use Pydantic models for complex structured responses:</p> Structured output server<pre><code>from mcp.server.fastmcp import FastMCP\nfrom pydantic import BaseModel, Field\nimport datetime\n\nmcp = FastMCP(\"structured_server\", port=\"8000\")\n\nclass EchoResponse(BaseModel):\n    \"\"\"Response structure for echo tool\"\"\"\n    original_text: str = Field(description=\"The original input text\")\n    echo_text: str = Field(description=\"The echoed text\")\n    length: int = Field(description=\"Length of the text\")\n    timestamp: str = Field(description=\"When the echo was processed\")\n\n@mcp.tool()\ndef structured_echo(text: str) -&gt; EchoResponse:\n    \"\"\"Echo with structured response data\"\"\"\n    return EchoResponse(\n        original_text=text,\n        echo_text=text,\n        length=len(text),\n        timestamp=datetime.datetime.now().isoformat()\n    )\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#63-error-handling-and-validation","title":"6.3 Error Handling and Validation","text":"<p>Production considerations</p> <p>Add proper error handling and validation for production use:</p> Robust error handling<pre><code>from mcp.server.fastmcp import FastMCP\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nmcp = FastMCP(\"robust_server\", port=\"8000\")\n\n@mcp.tool()\ndef safe_echo(text: str) -&gt; str:\n    \"\"\"Echo with validation and error handling\"\"\"\n    try:\n        # Log the request\n        logger.info(f\"Processing echo request for text of length {len(text)}\")\n\n        # Validate input\n        if not text.strip():\n            raise ValueError(\"Text cannot be empty\")\n\n        if len(text) &gt; 1000:\n            raise ValueError(\"Text too long (max 1000 characters)\")\n\n        # Process and return\n        return text\n\n    except Exception as e:\n        logger.error(f\"Error in safe_echo: {e}\")\n        raise\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#7-testing-your-server","title":"7. Testing Your Server","text":""},{"location":"best-practices/developing-your-mcp-server-python/#71-development-testing","title":"7.1 Development Testing","text":"<p>Interactive development</p> <p>Use the MCP Inspector for rapid testing and debugging:</p> Development testing with MCP Inspector<pre><code># Use the built-in development tools\nuv run mcp dev my_echo_server.py\n\n# Test with dependencies\nuv run mcp dev my_echo_server.py --with pandas --with numpy\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#72-unit-testing","title":"7.2 Unit Testing","text":"<p>Testing considerations</p> <p>For unit testing, focus on business logic rather than MCP protocol:</p> test_echo_server.py<pre><code>import pytest\nfrom my_echo_server import mcp\n\n@pytest.mark.asyncio\nasync def test_echo_tool():\n    \"\"\"Test the echo tool directly\"\"\"\n    # This would require setting up the MCP server context\n    # For integration testing, use the MCP Inspector instead\n    pass\n\ndef test_basic_functionality():\n    \"\"\"Test basic server setup\"\"\"\n    assert mcp.name == \"my_echo_server\"\n    # Add more server validation tests\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#73-integration-testing","title":"7.3 Integration Testing","text":"<p>End-to-end testing</p> <p>Test the complete workflow with a simple script:</p> Integration test script<pre><code>#!/bin/bash\n\n# Start server in background\npython my_echo_server.py &amp;\nSERVER_PID=$!\n\n# Wait for server to start\nsleep 2\n\n# Test server registration\necho \"Testing server registration...\"\ncurl -X POST http://127.0.0.1:4444/servers \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"test_echo_server\",\"url\":\"http://127.0.0.1:8000/mcp\"}'\n\n# Test tool call\necho \"Testing tool call...\"\nmcp-cli cmd --server gateway \\\n  --tool echo \\\n  --tool-args '{\"text\":\"Integration test success!\"}'\n\n# Cleanup\nkill $SERVER_PID\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#8-deployment-considerations","title":"8. Deployment Considerations","text":""},{"location":"best-practices/developing-your-mcp-server-python/#81-production-configuration","title":"8.1 Production Configuration","text":"<p>Environment-based configuration</p> <p>Use environment variables for production settings:</p> Production-ready server<pre><code>import os\nfrom mcp.server.fastmcp import FastMCP\n\n# Configuration from environment\nSERVER_NAME = os.getenv(\"MCP_SERVER_NAME\", \"my_echo_server\")\nPORT = os.getenv(\"MCP_SERVER_PORT\", \"8000\")\nDEBUG_MODE = os.getenv(\"MCP_DEBUG\", \"false\").lower() == \"true\"\n\nmcp = FastMCP(SERVER_NAME, port=PORT)\n\n@mcp.tool()\ndef echo(text: str) -&gt; str:\n    \"\"\"Echo the provided text\"\"\"\n    if DEBUG_MODE:\n        print(f\"Debug: Processing text of length {len(text)}\")\n    return text\n\nif __name__ == \"__main__\":\n    transport = os.getenv(\"MCP_TRANSPORT\", \"streamable-http\")\n    print(f\"Starting {SERVER_NAME} with {transport} transport\")\n    mcp.run(transport=transport)\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#82-container-podmandocker-support","title":"8.2 Container (Podman/Docker) Support","text":"<p>Containerization</p> <p>Package your server for easy deployment by creating a Containerfile:</p> Dockerfile<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install uv\nRUN pip install uv\n\n# Copy requirements\nCOPY pyproject.toml .\nRUN uv pip install --system -e .\n\nCOPY my_echo_server.py .\n\nEXPOSE 8000\n\nCMD [\"python\", \"my_echo_server.py\"]\n</code></pre> pyproject.toml<pre><code>[project]\nname = \"my-echo-server\"\nversion = \"0.1.0\"\ndependencies = [\n    \"mcp[cli]\",\n]\n\n[project.scripts]\necho-server = \"my_echo_server:main\"\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#9-advanced-features","title":"9. Advanced Features","text":""},{"location":"best-practices/developing-your-mcp-server-python/#91-resources","title":"9.1 Resources","text":"<p>Exposing data via resources</p> <p>Resources provide contextual data to LLMs:</p> Server with resources<pre><code>from mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"resource_server\", port=\"8000\")\n\n@mcp.resource(\"config://settings\")\ndef get_settings() -&gt; str:\n    \"\"\"Provide server configuration as a resource\"\"\"\n    return \"\"\"{\n  \"server_name\": \"my_echo_server\",\n  \"version\": \"1.0.0\",\n  \"features\": [\"echo\", \"timestamp\"]\n}\"\"\"\n\n@mcp.resource(\"status://health\")\ndef get_health() -&gt; str:\n    \"\"\"Provide server health status\"\"\"\n    return \"Server is running normally\"\n\n@mcp.tool()\ndef echo(text: str) -&gt; str:\n    \"\"\"Echo the provided text\"\"\"\n    return text\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#92-context-and-logging","title":"9.2 Context and Logging","text":"<p>Enhanced observability</p> <p>Use context for logging and progress tracking:</p> Server with context and logging<pre><code>from mcp.server.fastmcp import FastMCP, Context\n\nmcp = FastMCP(\"context_server\", port=\"8000\")\n\n@mcp.tool()\nasync def echo_with_logging(text: str, ctx: Context) -&gt; str:\n    \"\"\"Echo with context logging\"\"\"\n    await ctx.info(f\"Processing echo request for: {text[:50]}...\")\n    await ctx.debug(f\"Full text length: {len(text)}\")\n\n    result = text\n\n    await ctx.info(\"Echo completed successfully\")\n    return result\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"streamable-http\")\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#10-installation-and-distribution","title":"10. Installation and Distribution","text":""},{"location":"best-practices/developing-your-mcp-server-python/#101-install-in-claude-desktop","title":"10.1 Install in Claude Desktop","text":"<p>Claude Desktop integration</p> <p>Install your server directly in Claude Desktop:</p> Claude Desktop installation<pre><code># Install your server in Claude Desktop\nuv run mcp install my_echo_server.py --name \"My Echo Server\"\n\n# With environment variables\nuv run mcp install my_echo_server.py -v DEBUG=true -v LOG_LEVEL=info\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#102-package-distribution","title":"10.2 Package Distribution","text":"<p>Creating distributable packages</p> <p>Build packages for easy distribution:</p> Package building and distribution<pre><code># Build distributable package\nuv build\n\n# Install from package\npip install dist/my_echo_server-0.1.0-py3-none-any.whl\n</code></pre>"},{"location":"best-practices/developing-your-mcp-server-python/#11-troubleshooting","title":"11. Troubleshooting","text":""},{"location":"best-practices/developing-your-mcp-server-python/#111-common-issues","title":"11.1 Common Issues","text":"<p>Import errors</p> <p><pre><code>ModuleNotFoundError: No module named 'mcp'\n</code></pre> Solution: Install MCP SDK: <code>uv add \"mcp[cli]\"</code></p> <p>Port conflicts</p> <p><pre><code>OSError: [Errno 48] Address already in use\n</code></pre> Solution: The default port is 8000. Change it or kill the process using the port</p> <p>Registration failures</p> <p><pre><code>Error registering server with gateway\n</code></pre> Solution: Ensure gateway is running, listening on the correct port and the server URL is correct (<code>/mcp</code> endpoint)</p>"},{"location":"best-practices/developing-your-mcp-server-python/#112-debugging-tips","title":"11.2 Debugging Tips","text":"<p>Debugging strategies</p> <p>Use these approaches for troubleshooting:</p> Debug your server<pre><code># Use the MCP Inspector for interactive debugging\nuv run mcp dev my_echo_server.py\n\n# Enable debug logging\nMCP_DEBUG=true python my_echo_server.py\n</code></pre>"},{"location":"best-practices/mcp-best-practices/","title":"Best Practices","text":""},{"location":"best-practices/mcp-best-practices/#input-and-output-santitization","title":"Input and output santitization","text":"<p>Ensure your inputs and outputs are sanitized. In Python, we recommend using Pydantic V2.</p>"},{"location":"best-practices/mcp-best-practices/#self-containment","title":"\ud83d\udce6 Self-Containment","text":"<p>Each MCP server must be a standalone repository that includes all necessary code and documentation. Example: <code>git clone; make serve</code></p>"},{"location":"best-practices/mcp-best-practices/#makefile-requirements","title":"\ud83d\udee0 Makefile Requirements","text":"<p>All MCP repositories must include a <code>Makefile</code> with the following standard targets. These targets ensure consistency, enable automation, and support local development and containerization.</p>"},{"location":"best-practices/mcp-best-practices/#required-make-targets","title":"\u2705 Required Make Targets","text":"<p>Make targets are grouped by functionality. Use <code>make help</code> to see them all in your terminal.</p>"},{"location":"best-practices/mcp-best-practices/#virtual-environment-installation","title":"\ud83c\udf31 VIRTUAL ENVIRONMENT &amp; INSTALLATION","text":"Target Description <code>make venv</code> Create a new Python virtual environment in <code>~/.venv/&lt;project&gt;</code>. <code>make activate</code> Output the command to activate the virtual environment. <code>make install</code> Install all dependencies using <code>uv</code> from <code>pyproject.toml</code>. <code>make clean</code> Remove virtualenv, Python artifacts, build files, and containers."},{"location":"best-practices/mcp-best-practices/#run-server-testing","title":"\u25b6\ufe0f RUN SERVER &amp; TESTING","text":"Target Description <code>make serve</code> Run the MCP server locally (e.g., <code>mcp-time-server</code>). <code>make test</code> Run all unit and integration tests with <code>pytest</code>. <code>make test-curl</code> Run public API integration tests using a <code>curl</code> script."},{"location":"best-practices/mcp-best-practices/#documentation-sbom","title":"\ud83d\udcda DOCUMENTATION &amp; SBOM","text":"Target Description <code>make docs</code> Generate project documentation and SBOM using <code>handsdown</code>. <code>make sbom</code> Create a software bill of materials (SBOM) and scan dependencies."},{"location":"best-practices/mcp-best-practices/#linting-static-analysis","title":"\ud83d\udd0d LINTING &amp; STATIC ANALYSIS","text":"Target Description <code>make lint</code> Run all linters (e.g., <code>ruff check</code>, <code>ruff format</code>)."},{"location":"best-practices/mcp-best-practices/#container-build-run","title":"\ud83d\udc33 CONTAINER BUILD &amp; RUN","text":"Target Description <code>make podman</code> Build a production-ready container image with Podman. <code>make podman-run</code> Run the container locally and expose it on port 8080. <code>make podman-stop</code> Stop and remove the running container. <code>make podman-test</code> Test the container with a <code>curl</code> script."},{"location":"best-practices/mcp-best-practices/#security-package-scanning","title":"\ud83d\udee1\ufe0f SECURITY &amp; PACKAGE SCANNING","text":"Target Description <code>make trivy</code> Scan the container image for vulnerabilities using Trivy. <p>Tip: These commands should work out-of-the-box after cloning a repo and running <code>make venv install serve</code>.</p>"},{"location":"best-practices/mcp-best-practices/#containerfile","title":"\ud83d\udc33 Containerfile","text":"<p>Each repo must include a <code>Containerfile</code> (Podman-compatible, Docker-compatible) to support containerized execution.</p>"},{"location":"best-practices/mcp-best-practices/#containerfile-requirements","title":"Containerfile Requirements:","text":"<ul> <li>Must start from a secure base (e.g., latest Red Hat UBI9 minimal image <code>registry.access.redhat.com/ubi9-minimal:9.5-1741850109</code>)</li> <li>Should use <code>uv</code> or <code>pdm</code> to install dependencies via <code>pyproject.toml</code></li> <li>Must run the server using the same entry point as <code>make serve</code></li> <li>Should expose relevant ports (<code>EXPOSE 8080</code>)</li> <li>Should define a non-root user for runtime</li> </ul>"},{"location":"best-practices/mcp-best-practices/#dependency-management","title":"\ud83d\udcda Dependency Management","text":"<ul> <li>All Python projects must use <code>pyproject.toml</code> and follow PEP standards.</li> <li>Dependencies must either be:</li> <li>Included in the repo</li> <li>Pulled from PyPI (no external links)</li> </ul>"},{"location":"best-practices/mcp-best-practices/#clear-role-definition","title":"\ud83c\udfaf Clear Role Definition","text":"<ul> <li>State the specific role of the server (e.g., GitHub tools).</li> <li>Group related tools together.</li> <li>Do not mix roles (e.g., GitHub \u2260 Jira \u2260 GitLab).</li> </ul>"},{"location":"best-practices/mcp-best-practices/#standardized-tools","title":"\ud83e\uddf0 Standardized Tools","text":"<p>Each MCP server should expose tools that follow the MCP conventions, e.g.:</p> <ul> <li><code>create_ticket</code></li> <li><code>create_pr</code></li> <li><code>read_file</code></li> </ul>"},{"location":"best-practices/mcp-best-practices/#consistent-structure","title":"\ud83d\udcc1 Consistent Structure","text":"<p>Repos must follow a common structure. For example, from the time_server</p> <pre><code>time_server/\n\u251c\u2500\u2500 Containerfile                  # Container build definition (Podman/Docker compatible)\n\u251c\u2500\u2500 Makefile                       # Build, run, test, and container automation targets\n\u251c\u2500\u2500 pyproject.toml                 # Python project and dependency configuration (PEP 621)\n\u251c\u2500\u2500 README.md                      # Main documentation: overview, setup, usage, env vars\n\u251c\u2500\u2500 CONTRIBUTING.md                # Guidelines for contributing, PRs, and issue management\n\u251c\u2500\u2500 .gitignore                     # Exclude venvs, artifacts, and secrets from Git\n\u251c\u2500\u2500 docs/                          # (Optional) Diagrams, specs, and additional documentation\n\u251c\u2500\u2500 tests/                         # Unit and integration tests\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_main.py               # Tests for main entrypoint behavior\n\u2502   \u2514\u2500\u2500 test_tools.py              # Tests for core tool functionality\n\u2514\u2500\u2500 src/                           # Application source code\n    \u2514\u2500\u2500 mcp_time_server/           # Main package named after your server\n        \u251c\u2500\u2500 __init__.py            # Marks this directory as a Python package\n        \u251c\u2500\u2500 main.py                # Entrypoint that wires everything together\n        \u251c\u2500\u2500 mcp_server_base.py     # Optional base class for shared server behavior\n        \u251c\u2500\u2500 server.py              # Server logic (e.g., tool registration, lifecycle hooks)\n        \u2514\u2500\u2500 tools/                 # Directory for all MCP tool implementations\n            \u251c\u2500\u2500 __init__.py\n            \u251c\u2500\u2500 tools.py           # Tool business logic (e.g., `get_time`, `format_time`)\n            \u2514\u2500\u2500 tools_registration.py # Registers tools into the MCP framework\n</code></pre>"},{"location":"best-practices/mcp-best-practices/#documentation","title":"\ud83d\udcdd Documentation","text":"<p>Each repo must include:</p> <ul> <li>A comprehensive <code>README.md</code></li> <li>Setup and usage instructions</li> <li>Environment variable documentation</li> </ul>"},{"location":"best-practices/mcp-best-practices/#modular-design","title":"\ud83e\udde9 Modular Design","text":"<p>Code should be cleanly separated into modules for easier maintenance and scaling.</p>"},{"location":"best-practices/mcp-best-practices/#testing","title":"\u2705 Testing","text":"<p>Include unit and integration tests to validate functionality.</p>"},{"location":"best-practices/mcp-best-practices/#contribution-guidelines","title":"\ud83e\udd1d Contribution Guidelines","text":"<p>Add a <code>CONTRIBUTING.md</code> with:</p> <ul> <li>How to file issues</li> <li>How to submit pull requests</li> <li>Review and merge process</li> </ul>"},{"location":"best-practices/mcp-best-practices/#versioning-and-releases","title":"\ud83c\udff7 Versioning and Releases","text":"<p>Use semantic versioning. Include release notes for all changes.</p>"},{"location":"best-practices/mcp-best-practices/#pull-request-process","title":"\ud83d\udd04 Pull Request Process","text":"<p>Submit new MCP servers via pull request to the org's main repo. PR must:</p> <ul> <li>Follow all standards</li> <li>Include all documentation</li> </ul>"},{"location":"best-practices/mcp-best-practices/#environment-variables-and-secrets","title":"\ud83d\udd10 Environment Variables and Secrets","text":"<ul> <li>Use environment variables for secrets</li> <li>Use a clear, role-based prefix (e.g., <code>MCP_GITHUB_</code>)</li> </ul> <p>Example:</p> <pre><code>MCP_GITHUB_ACCESS_TOKEN=...\nMCP_GITHUB_BASE_URL=...\n</code></pre>"},{"location":"best-practices/mcp-best-practices/#required-capabilities-readme-metadata-tags","title":"\ud83c\udff7 Required Capabilities (README Metadata Tags)","text":"<p>Add tags at the top of <code>README.md</code> between YAML markers to declare your server's required capabilities.</p>"},{"location":"best-practices/mcp-best-practices/#available-tags","title":"Available Tags:","text":"<ul> <li> <p><code>needs_filesystem_access</code>   Indicates the server requires access to the local filesystem (e.g., for reading/writing files).</p> </li> <li> <p><code>needs_api_key_user</code>   Requires a user-specific API key to interact with external services on behalf of the user.</p> </li> <li> <p><code>needs_api_key_central</code>   Requires a centrally managed API key, typically provisioned and stored by the platform.</p> </li> <li> <p><code>needs_database</code>   The server interacts with a persistent database (e.g., PostgreSQL, MongoDB).</p> </li> <li> <p><code>needs_network_access_inbound</code>   The server expects to receive inbound network requests (e.g., runs a web server or webhook listener).</p> </li> <li> <p><code>needs_network_access_outbound</code>   The server needs to make outbound network requests (e.g., calling external APIs or services).</p> </li> </ul>"},{"location":"best-practices/mcp-best-practices/#example","title":"Example:","text":"<pre><code>---\ntags:\n  - needs_filesystem_access\n  - needs_api_key_user\n---\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"deployment/","title":"Deployment Overview","text":"<p>This section explains how to deploy MCP Gateway in various environments - from local development to cloud-native platforms like Kubernetes, IBM Code Engine, AWS, and Azure.</p>"},{"location":"deployment/#security-first","title":"\ud83d\udd10 Security First","text":"<p>Before deploying to production, review our Security Guide for:</p> <ul> <li>Critical security configurations</li> <li>Production hardening checklist</li> <li>Authentication and authorization setup</li> <li>Network security best practices</li> <li>Container security requirements</li> </ul>"},{"location":"deployment/#deployment-options","title":"\ud83d\uddfa Deployment Options","text":"<p>MCP Gateway supports multiple deployment strategies:</p> Method Description Local Run directly on your dev machine using <code>make</code>, <code>uvicorn</code>, or a virtual-env Container Package and run as a single container image using Podman or Docker Compose Stack Bring up Gateway + Postgres + Redis (and optional MPC servers) with Podman/Docker Compose Minikube Launch a local single-node Kubernetes cluster and deploy the Gateway stack Kubernetes Generic manifests or Helm chart for any K8s-compliant platform OpenShift OpenShift-specific deployment using Routes, SCCs, and Operator-managed back-ends IBM Code Engine Serverless container build &amp; run on IBM Cloud AWS Deploy on ECS Fargate, EKS, or EC2-hosted containers Azure Run on Azure Container Apps, App Service, or AKS Security Guide Essential security configurations and best practices for production deployments"},{"location":"deployment/#runtime-configuration","title":"\ud83d\udee0 Runtime Configuration","text":"<p>MCP Gateway loads configuration from:</p> <ul> <li><code>.env</code> file (in project root or mounted at <code>/app/.env</code>)</li> <li>Environment variables (overrides <code>.env</code>)</li> <li>CLI flags (e.g., via <code>run.sh</code>)</li> </ul> <p>\u26a0\ufe0f Security Note: Never store sensitive credentials directly in environment variables. Use a secrets management system in production. See the Security Guide for details.</p>"},{"location":"deployment/#health-checks","title":"\ud83e\uddea Health Checks","text":"<p>All deployments should expose:</p> <pre><code>GET /health\n</code></pre> <p>This returns basic system latency metrics and can be used with cloud provider readiness probes.</p>"},{"location":"deployment/#container-basics","title":"\ud83d\udce6 Container Basics","text":"<p>The default container image:</p> <ul> <li>Uses the Red Hat Universal Base image running as a non-root user</li> <li>Exposes port <code>4444</code></li> <li>Runs <code>gunicorn</code> with Uvicorn workers</li> <li>Uses <code>.env</code> for all settings</li> </ul> <p>For Kubernetes, you can mount a ConfigMap or Secret as <code>.env</code>.</p> <p>Important: For production deployments, ensure you follow the container hardening guidelines in our Security Guide.</p>"},{"location":"deployment/argocd/","title":"\ud83d\udea2 Deploying the MCP Gateway Stack with Argo CD","text":"<p>This guide shows how to operate the MCP Gateway Stack with a Git-Ops workflow powered by Argo CD. Once wired up, every commit to the repository becomes an automatic deployment (or rollback) to your Kubernetes cluster.</p> <p>\ud83c\udf33 Git source of truth: <code>https://github.com/IBM/mcp-context-forge</code></p> <ul> <li>App manifests: <code>deployment/k8s/</code> (Kustomize-ready)</li> <li>Helm chart (optional): <code>charts/mcp-stack</code></li> </ul>"},{"location":"deployment/argocd/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"Requirement Notes Kubernetes \u2265 1.23 Local (Minikube/kind) or managed (EKS, AKS, GKE, etc.) Argo CD \u2265 2.7 Server &amp; CLI (this guide installs server into the cluster) kubectl Configured to talk to the target cluster Git access The cluster must be able to pull the repo (public or deploy-key)"},{"location":"deployment/argocd/#step-1-install-argo-cd-once-per-cluster","title":"\ud83d\udee0 Step 1 - Install Argo CD (once per cluster)","text":"<pre><code># Namespace + core components\nkubectl create namespace argocd\nkubectl apply -n argocd \\\n  -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Wait for the server component\nkubectl -n argocd rollout status deploy/argocd-server\n</code></pre>"},{"location":"deployment/argocd/#install-the-cli","title":"Install the CLI","text":"<pre><code># macOS\nbrew install argocd\n\n# Linux (single-binary)\ncurl -sSL -o /tmp/argocd \\\n  https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64\nsudo install -m 555 /tmp/argocd /usr/local/bin/argocd\n</code></pre> <p>Verify:</p> <pre><code>argocd version --client\n</code></pre>"},{"location":"deployment/argocd/#step-2-initial-login","title":"\ud83d\udd10 Step 2 - Initial Login","text":"<p>Forward the API/UI to your workstation (leave running):</p> <pre><code>kubectl -n argocd port-forward svc/argocd-server 8083:443\n</code></pre> <p>Fetch the one-time admin password and log in:</p> <pre><code>PASS=\"$(kubectl -n argocd get secret argocd-initial-admin-secret \\\n          -o jsonpath='{.data.password}' | base64 -d)\"\nargocd login localhost:8083 \\\n  --username admin --password \"$PASS\" --insecure\n</code></pre> <p>Open the web UI \u2192 http://localhost:8083 (credentials above).</p>"},{"location":"deployment/argocd/#step-3-bootstrap-the-application","title":"\ud83d\ude80 Step 3 - Bootstrap the Application","text":"<p>Create an Argo CD Application that tracks the <code>deployment/k8s/</code> folder from the main branch:</p> <pre><code>APP=mcp-gateway\nREPO=https://github.com/IBM/mcp-context-forge.git\n\nargocd app create \"$APP\" \\\n  --repo \"$REPO\" \\\n  --path k8s \\\n  --dest-server https://kubernetes.default.svc \\\n  --dest-namespace default \\\n  --sync-policy automated \\\n  --revision main\n</code></pre> <p>Trigger the first sync:</p> <pre><code>argocd app sync \"$APP\"\n</code></pre> <p>Argo CD will apply all manifests and keep them in the Synced \ud83c\udf3f / Healthy \ud83d\udc9a state.</p>"},{"location":"deployment/argocd/#step-4-verify-deployment","title":"\u2705 Step 4 - Verify Deployment","text":"<pre><code>kubectl get pods,svc,ingress\nargocd app list\nargocd app get mcp-gateway\n</code></pre> <p>If using the sample Ingress:</p> <pre><code>curl http://gateway.local/health\n</code></pre> <p>Otherwise, port-forward:</p> <pre><code>kubectl port-forward svc/mcp-context-forge 8080:80 &amp;\ncurl http://localhost:8080/health\n</code></pre>"},{"location":"deployment/argocd/#day-2-operations","title":"\ud83d\udd04 Day-2 Operations","text":""},{"location":"deployment/argocd/#sync-after-a-new-commit","title":"Sync after a new commit","text":"<pre><code>argocd app sync mcp-gateway\n</code></pre>"},{"location":"deployment/argocd/#view-diff-before-syncing","title":"View diff before syncing","text":"<pre><code>argocd app diff mcp-gateway\n</code></pre>"},{"location":"deployment/argocd/#roll-back-to-a-previous-revision","title":"Roll back to a previous revision","text":"<pre><code>argocd app history mcp-gateway\nargocd app rollback mcp-gateway &lt;REVISION&gt;\n</code></pre>"},{"location":"deployment/argocd/#disable-enable-auto-sync","title":"Disable / enable auto-sync","text":"<pre><code># Pause auto-sync\na rgocd app set mcp-gateway --sync-policy none\n# Re-enable\nargocd app set mcp-gateway --sync-policy automated\n</code></pre>"},{"location":"deployment/argocd/#uninstall","title":"\ud83e\uddf9 Uninstall","text":"<pre><code># Delete the application (leaves cluster objects intact)\nargocd app delete mcp-gateway --yes\n\n# Remove Argo CD completely\\ nkubectl delete ns argocd\n</code></pre>"},{"location":"deployment/argocd/#makefile-shortcuts","title":"\ud83e\uddf0 Makefile Shortcuts","text":"<p>The repository ships with ready-made targets:</p> Target Action <code>make argocd-install</code> Installs Argo CD server into the current cluster <code>make argocd-forward</code> Port-forwards UI/API on http://localhost:8083 <code>make argocd-app-bootstrap</code> Creates &amp; auto-syncs the mcp-gateway application <code>make argocd-app-sync</code> Forces a manual sync <p>Run <code>make help</code> to list them all.</p>"},{"location":"deployment/argocd/#troubleshooting","title":"\ud83e\uddef Troubleshooting","text":"Symptom Fix <code>ImagePullBackOff</code> Check image name / pull secret &amp; that the repo is public or credentials are configured in Argo CD <code>SyncFailed</code> <code>argocd app logs mcp-gateway</code> for details; often due to immutable fields Web UI 404 Ensure <code>argocd-forward</code> is still running, or expose via Ingress/LoadBalancer RBAC denied Argo CD needs ClusterRoleBinding for non-default namespaces - see docs"},{"location":"deployment/argocd/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Argo CD Docs - https://argo-cd.readthedocs.io</li> <li>GitOps Pattern - https://www.weave.works/technologies/gitops/</li> <li>Kustomize - https://kubectl.docs.kubernetes.io/references/kustomize/</li> <li>Helm + Argo CD - https://argo-cd.readthedocs.io/en/stable/user-guide/helm/</li> </ul>"},{"location":"deployment/aws/","title":"\ud83d\udfe7 AWS","text":"<p>MCP Gateway can be deployed to AWS using multiple container-based services:</p> <ul> <li>ECS (Fargate or EC2-backed)</li> <li>EKS (Elastic Kubernetes Service)</li> <li>EC2 (direct VM hosting with Docker)</li> </ul>"},{"location":"deployment/aws/#option-1-ecs-fargate","title":"\ud83d\ude80 Option 1: ECS (Fargate)","text":"<p>ECS is a fully managed container orchestration service. Use it to deploy MCP Gateway without managing servers.</p>"},{"location":"deployment/aws/#steps","title":"Steps","text":"<ol> <li>Build and push your image:</li> </ol> <pre><code>docker build -t YOUR_ECR_URI/mcpgateway .\naws ecr get-login-password | docker login --username AWS --password-stdin YOUR_ECR_URI\ndocker push YOUR_ECR_URI/mcpgateway\n</code></pre> <ol> <li> <p>Create an ECS Task Definition:</p> </li> <li> <p>Use port <code>4444</code></p> </li> <li> <p>Mount a secret or config for your <code>.env</code> (or set environment variables manually)</p> </li> <li> <p>Create a Service:</p> </li> <li> <p>Use a Load Balancer (Application LB)</p> </li> <li>Map <code>/</code> or <code>/admin</code> to port <code>4444</code></li> </ol>"},{"location":"deployment/aws/#option-2-eks","title":"\ud83d\ude80 Option 2: EKS","text":"<p>Use the same Kubernetes deployment guide and run on Amazon EKS.</p> <p>You can:</p> <ul> <li>Use <code>kubectl</code> + <code>eksctl</code></li> <li>Store <code>.env</code> as a Secret or ConfigMap</li> <li>Use AWS Load Balancer Controller or NGINX Ingress</li> </ul>"},{"location":"deployment/aws/#option-3-ec2-docker","title":"\ud83d\ude80 Option 3: EC2 (Docker)","text":"<ol> <li>Launch a VM (e.g., Ubuntu)</li> <li>Install Docker</li> <li>Copy your <code>.env</code> file and build the container:</li> </ol> <pre><code>scp .env ec2-user@host:/home/ec2-user\nssh ec2-user@host\ndocker build -t mcpgateway .\ndocker run -p 80:4444 --env-file .env mcpgateway\n</code></pre>"},{"location":"deployment/aws/#security-tips","title":"\ud83d\udee1\ufe0f Security Tips","text":"<ul> <li>Set <code>AUTH_REQUIRED=true</code> in production</li> <li>Use <code>JWT_SECRET_KEY</code> and <code>AUTH_ENCRYPTION_SECRET</code></li> <li>Terminate TLS at the ELB level, or use Caddy/Nginx in-container if needed</li> </ul>"},{"location":"deployment/aws/#dns-access","title":"\ud83d\udce1 DNS &amp; Access","text":"<p>You can point Route53 or your DNS provider to the Load Balancer hostname.</p> <p>Example:</p> <pre><code>gateway.example.com -&gt; my-elb-1234.us-west-2.elb.amazonaws.com\n</code></pre>"},{"location":"deployment/azure/","title":"\ud83d\udd37 Azure","text":"<p>MCP Gateway can be deployed on Azure in multiple ways:</p> <ul> <li>Azure Container Apps (serverless)</li> <li>Azure App Service (PaaS for containers)</li> <li>Azure Kubernetes Service (AKS) (fully managed K8s)</li> </ul>"},{"location":"deployment/azure/#option-1-azure-container-apps-recommended","title":"\ud83d\ude80 Option 1: Azure Container Apps (Recommended)","text":"<p>Azure Container Apps is ideal for lightweight container-based workloads.</p>"},{"location":"deployment/azure/#steps","title":"Steps","text":"<ol> <li>Build and push your image to Azure Container Registry (ACR):</li> </ol> <pre><code>az acr login --name yourregistry\ndocker tag mcpgateway yourregistry.azurecr.io/mcpgateway\ndocker push yourregistry.azurecr.io/mcpgateway\n</code></pre> <ol> <li>Create the container app:</li> </ol> <pre><code>az containerapp create \\\n  --name mcpgateway \\\n  --resource-group my-rg \\\n  --image yourregistry.azurecr.io/mcpgateway \\\n  --target-port 4444 \\\n  --environment my-container-env \\\n  --registry-server yourregistry.azurecr.io \\\n  --env-vars-from-secrets .env\n</code></pre> <p>You can mount <code>.env</code> via Key Vault or inject environment variables directly.</p>"},{"location":"deployment/azure/#option-2-azure-app-service","title":"\ud83d\ude80 Option 2: Azure App Service","text":"<ol> <li>Push your image to ACR</li> <li>Create an App Service plan and container-based Web App</li> <li>Set <code>PORT=4444</code> and other env vars in Configuration \u2192 Application settings</li> <li>Map your custom domain (optional)</li> </ol>"},{"location":"deployment/azure/#option-3-azure-kubernetes-service-aks","title":"\ud83d\ude80 Option 3: Azure Kubernetes Service (AKS)","text":"<p>Use your existing Kubernetes deployment instructions, but deploy to AKS.</p> <ul> <li>Deploy with Helm or <code>kubectl</code></li> <li>Use Azure Load Balancer or Application Gateway</li> <li>Store secrets in Azure Key Vault (optional)</li> </ul>"},{"location":"deployment/azure/#secrets-config","title":"\ud83d\udd10 Secrets &amp; Config","text":"<p>Use Azure CLI to upload your <code>.env</code> values to App Config or Key Vault:</p> <pre><code>az keyvault secret set --vault-name my-kv --name JWT-SECRET --value \"super-secret\"\n</code></pre> <p>Then reference in App Service / Container App using environment variables.</p>"},{"location":"deployment/azure/#dns-tls","title":"\ud83d\udce1 DNS &amp; TLS","text":"<ul> <li>Use Azure Front Door or Application Gateway to handle TLS</li> <li>Point your domain to the public IP or hostname of the service</li> </ul> <p>Example:</p> <pre><code>gateway.example.com \u2192 mygateway.eastus.azurecontainerapps.io\n</code></pre>"},{"location":"deployment/compose/","title":"\ud83e\udde9 Docker Compose","text":"<p>Running MCP Gateway with Compose spins up a full stack (Gateway, Postgres, Redis, optional MPC servers) behind a single YAML file. The Makefile detects Podman or Docker automatically, and you can override it with <code>COMPOSE_CMD=</code>. Health-checks (<code>service_healthy</code>) gate the Gateway until the database is ready, preventing race conditions.</p>"},{"location":"deployment/compose/#configure-the-compose-command-to-use","title":"Configure the compose command to use","text":"<p>For example, install and use Docker Compose v2:</p> <pre><code>sudo apt install docker-buildx docker-compose-v2\nexport COMPOSE_CMD=\"docker compose\"\n</code></pre>"},{"location":"deployment/compose/#build-the-images","title":"\ud83d\udc33/\ud83e\uddad Build the images","text":"<pre><code>docker pull ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre>"},{"location":"deployment/compose/#build-the-images-when-doing-local-development","title":"\ud83d\udc33/\ud83e\uddad Build the images (when doing local development)","text":""},{"location":"deployment/compose/#using-make-preferred","title":"Using Make (preferred)","text":"Target Image Dockerfile Notes <code>make podman</code> <code>mcpgateway:latest</code> Containerfile Rootless Podman, dev-oriented <code>make podman-prod</code> <code>mcpgateway:latest</code> Containerfile.lite Ultra-slim UBI 9-micro build <code>make docker</code> <code>mcpgateway:latest</code> Containerfile Docker Desktop / CI runners <code>make docker-prod</code> <code>mcpgateway:latest</code> Containerfile.lite Same multi-stage \"lite\" build <p>Remember to tag the image or configure the correct image in <code>docker-compose.yml</code></p>"},{"location":"deployment/compose/#manual-equivalents","title":"Manual equivalents","text":"<pre><code># Podman (dev image)\npodman build -t mcpgateway-dev:latest -f Containerfile .\n\n# Podman (prod image, AMD64, squash layers)\npodman build --platform=linux/amd64 --squash \\\n  -t mcpgateway:latest -f Containerfile.lite .\n\n# Docker (dev image)\ndocker build -t mcpgateway-dev:latest -f Containerfile .\n\n# Docker (prod image)\ndocker build -t mcpgateway:latest -f Containerfile.lite .\n</code></pre> <p>Apple Silicon caveat <code>Containerfile.lite</code> derives from ubi9-micro. Running it via QEMU emulation on M-series Macs often fails with a <code>glibc x86-64-v2</code> error. Use the regular image or build a native <code>linux/arm64</code> variant on Mac.</p>"},{"location":"deployment/compose/#start-the-compose-stack","title":"\ud83c\udfc3 Start the Compose stack","text":""},{"location":"deployment/compose/#with-make","title":"With Make","text":"<pre><code>make compose-up                   # auto-detects engine\nCOMPOSE_ENGINE=docker make compose-up   # force Docker\nCOMPOSE_ENGINE=podman make compose-up   # force Podman\n</code></pre>"},{"location":"deployment/compose/#without-make","title":"Without Make","text":"Make target Docker CLI Podman built-in podman-compose <code>compose-up</code> <code>docker compose -f docker-compose.yml up -d</code> <code>podman compose -f docker-compose.yml up -d</code> <code>podman-compose -f docker-compose.yml up -d</code> <code>compose-restart</code> <code>docker compose up -d --pull=missing --build</code> idem idem <code>compose-logs</code> <code>docker compose logs -f</code> <code>podman compose logs -f</code> <code>podman-compose logs -f</code> <code>compose-ps</code> <code>docker compose ps</code> <code>podman compose ps</code> <code>podman-compose ps</code> <code>compose-stop</code> <code>docker compose stop</code> <code>podman compose stop</code> <code>podman-compose stop</code> <code>compose-down</code> <code>docker compose down</code> <code>podman compose down</code> <code>podman-compose down</code> <code>compose-clean</code> <code>docker compose down -v</code> (removes volumes) <code>podman compose down -v</code> <code>podman-compose down -v</code>"},{"location":"deployment/compose/#access-and-verify","title":"\ud83c\udf10 Access and verify","text":"<ul> <li>Gateway URL: http://localhost:4444   (Bound to <code>0.0.0.0</code> inside the container so port-forwarding works.)</li> </ul> <pre><code>curl http://localhost:4444/health    # {\"status\":\"ok\"}\n</code></pre> <ul> <li>Logs: <code>make compose-logs</code> or raw <code>docker compose logs -f gateway</code>.</li> </ul>"},{"location":"deployment/compose/#selecting-a-database","title":"\ud83d\uddc4 Selecting a database","text":"<p>Uncomment one service block in <code>docker-compose.yml</code> and align <code>DATABASE_URL</code>:</p> Service block Connection string <code>postgres:</code> (default) <code>postgresql://postgres:...@postgres:5432/mcp</code> <code>mariadb:</code> <code>mysql+pymysql://admin:...@mariadb:3306/mcp</code> <code>mysql:</code> <code>mysql+pymysql://mysql:...@mysql:3306/mcp</code> <code>mongodb:</code> <code>mongodb://admin:...@mongodb:27017/mcp</code> <p>Named volumes (<code>pgdata</code>, <code>mariadbdata</code>, <code>mysqldata</code>, <code>mongodata</code>) isolate persistent data.</p>"},{"location":"deployment/compose/#lifecycle-cheatsheet","title":"\ud83d\udd04 Lifecycle cheatsheet","text":"Task Make Manual (engine-agnostic) Start / create <code>make compose-up</code> <code>&lt;engine&gt; compose up -d</code> Re-create changed <code>make compose-restart</code> <code>&lt;engine&gt; compose up -d --pull=missing --build</code> Tail logs <code>make compose-logs</code> <code>&lt;engine&gt; compose logs -f</code> Shell into gateway <code>make compose-shell</code> <code>&lt;engine&gt; compose exec gateway /bin/sh</code> Stop <code>make compose-stop</code> <code>&lt;engine&gt; compose stop</code> Remove containers <code>make compose-down</code> <code>&lt;engine&gt; compose down</code> Nuke volumes <code>make compose-clean</code> <code>&lt;engine&gt; compose down -v</code> <p><code>&lt;engine&gt;</code> = <code>docker</code>, <code>podman</code>, or <code>podman-compose</code> as shown earlier.</p>"},{"location":"deployment/compose/#troubleshooting-port-publishing-on-wsl2-rootless-podman","title":"\ud83d\udd0d Troubleshooting port publishing on WSL2 (rootless Podman)","text":"<pre><code># Verify the port is listening (dual-stack)\nss -tlnp | grep 4444        # modern tool\nnetstat -anp | grep 4444    # legacy fallback\n</code></pre> <p>A line like <code>LISTEN rootlessport</code> is normal - the IPv6 wildcard socket (<code>::</code>) also accepts IPv4 when <code>net.ipv6.bindv6only=0</code> (the default on Linux).</p> <p>WSL2 quirk</p> <p>WSL's NAT maps only the IPv6 side, so <code>http://127.0.0.1:4444</code> fails from Windows. Tell Podman you are inside WSL and restart your containers:</p> <pre><code># inside the WSL distro\necho \"wsl\" | sudo tee /etc/containers/podman-machine\n</code></pre> <p><code>ss</code> should now show an explicit <code>0.0.0.0:4444</code> listener, making the service reachable from Windows and the LAN.</p>"},{"location":"deployment/compose/#references","title":"\ud83d\udcda References","text":"<ul> <li>Docker Compose CLI (<code>up</code>, <code>logs</code>, <code>down</code>) - official docs</li> <li>Podman's integrated compose wrapper - man page</li> <li><code>podman-compose</code> rootless implementation - GitHub project</li> <li>Health-check gating with <code>depends_on: condition: service_healthy</code></li> <li>UBI9 runtime on Apple Silicon limitations (<code>x86_64-v2</code> glibc)</li> <li>General Containerfile build guidance (Fedora/Red Hat)</li> </ul>"},{"location":"deployment/container/","title":"\ud83d\udce6 Container Deployment","text":"<p>You can run MCP Gateway as a fully self-contained container. This is the recommended method for production or platform-agnostic deployments. You can use any container engine (ex: Docker or Podman).</p>"},{"location":"deployment/container/#quick-start-pre-built-container-image","title":"Quick Start (Pre-built Container Image)","text":"<p>If you just want to run the gateway using the official OCI container image from GitHub Container Registry:</p> <pre><code>docker run -d --name mcpgateway \\\n  -p 4444:4444 \\\n  -e HOST=0.0.0.0 \\\n  -e JWT_SECRET_KEY=my-test-key \\\n  -e BASIC_AUTH_USER=admin \\\n  -e BASIC_AUTH_PASSWORD=changeme \\\n  -e AUTH_REQUIRED=true \\\n  -e DATABASE_URL=sqlite:///./mcp.db \\\n  --network=host \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n\ndocker logs mcpgateway\n</code></pre> <p>You can now access the UI at http://localhost:4444/admin</p>"},{"location":"deployment/container/#build-the-container","title":"\ud83d\udc33 Build the Container","text":""},{"location":"deployment/container/#using-podman-recommended","title":"Using Podman (recommended)","text":"<pre><code>make podman\n</code></pre>"},{"location":"deployment/container/#using-docker-manual-alternative","title":"Using Docker (manual alternative)","text":"<pre><code>docker build -t mcpgateway:latest -f Containerfile .\n</code></pre> <p>The base image uses <code>python:3.11-slim</code> with Gunicorn and Uvicorn workers.</p>"},{"location":"deployment/container/#run-the-container","title":"\ud83c\udfc3 Run the Container","text":""},{"location":"deployment/container/#with-http-no-tls","title":"With HTTP (no TLS)","text":"<pre><code>make podman-run\n</code></pre> <p>This starts the app at <code>http://localhost:4444</code>.</p>"},{"location":"deployment/container/#with-self-signed-tls-https","title":"With Self-Signed TLS (HTTPS)","text":"<pre><code>make podman-run-ssl\n</code></pre> <p>Runs the gateway using certs from <code>./certs/</code>, available at:</p> <pre><code>https://localhost:4444\n</code></pre>"},{"location":"deployment/container/#runtime-configuration","title":"\u2699 Runtime Configuration","text":"<p>All environment variables can be passed via:</p> <ul> <li><code>docker run -e KEY=value</code></li> <li>A mounted <code>.env</code> file (<code>--env-file .env</code>)</li> </ul>"},{"location":"deployment/container/#test-the-running-container","title":"\ud83e\uddea Test the Running Container","text":"<pre><code>curl http://localhost:4444/health\ncurl http://localhost:4444/tools\n</code></pre> <p>Use <code>curl -k</code> if running with self-signed TLS</p>"},{"location":"deployment/container/#stop-clean-up","title":"\ud83e\uddfc Stop &amp; Clean Up","text":"<pre><code>podman stop mcpgateway\npodman rm mcpgateway\n</code></pre> <p>Or with Docker:</p> <pre><code>docker stop mcpgateway\ndocker rm mcpgateway\n</code></pre>"},{"location":"deployment/fly-io/","title":"\u2699\ufe0f Fly.io Deployment Guide for MCP Gateway","text":"<p>This guide covers the complete deployment workflow for the MCP Gateway on Fly.io, including common troubleshooting steps.</p>"},{"location":"deployment/fly-io/#overview","title":"Overview","text":"<p>Fly.io is a global app platform for running containers close to your users, with built-in TLS, persistent volumes, and managed Postgres support. It offers a generous free tier and automatic HTTPS with fly.dev subdomains.</p>"},{"location":"deployment/fly-io/#1-prerequisites","title":"1 - Prerequisites","text":"Requirement Details Fly.io account Sign up Fly CLI Install via Homebrew: <code>brew install flyctl</code> or see Fly docs Docker or Podman For local image builds (optional) Containerfile The included Containerfile with psycopg2-binary support"},{"location":"deployment/fly-io/#2-quick-start-recommended","title":"2 - Quick Start (Recommended)","text":""},{"location":"deployment/fly-io/#21-initialize-fly-project","title":"2.1 Initialize Fly project","text":"<p><pre><code>fly launch --name your-app-name --no-deploy\n</code></pre> This creates a new Fly app without deploying immediately.</p>"},{"location":"deployment/fly-io/#22-create-and-attach-fly-postgres","title":"2.2 Create and attach Fly Postgres","text":"<pre><code># Create postgres (choose Development configuration for testing)\nfly postgres create --name your-app-db --region yyz\n\n# Note the connection details from the output, you'll need the password\n</code></pre>"},{"location":"deployment/fly-io/#23-set-secrets","title":"2.3 Set secrets","text":"<pre><code># Set authentication secrets\nfly secrets set JWT_SECRET_KEY=$(openssl rand -hex 32)\nfly secrets set BASIC_AUTH_USER=admin BASIC_AUTH_PASSWORD=your-secure-password\n\n# Set database URL (CRITICAL: use postgresql:// not postgres://)\nfly secrets set DATABASE_URL=\"postgresql://postgres:YOUR_PASSWORD@your-app-db.flycast:5432/postgres\"\n</code></pre> <p>\u26a0\ufe0f Important: Always use <code>postgresql://</code> scheme, not <code>postgres://</code>. The latter causes SQLAlchemy dialect loading errors.</p>"},{"location":"deployment/fly-io/#24-deploy-the-app","title":"2.4 Deploy the app","text":"<pre><code>fly deploy\n</code></pre>"},{"location":"deployment/fly-io/#3-containerfile-requirements","title":"3 - Containerfile Requirements","text":"<p>Ensure your Containerfile explicitly installs PostgreSQL dependencies:</p> <pre><code># Create virtual environment, upgrade pip and install dependencies\nRUN python3 -m venv /app/.venv &amp;&amp; \\\n/app/.venv/bin/python3 -m pip install --upgrade pip setuptools pdm uv &amp;&amp; \\\n/app/.venv/bin/python3 -m pip install psycopg2-binary &amp;&amp; \\\n/app/.venv/bin/python3 -m uv pip install \".[redis]\"\n</code></pre> <p>The explicit <code>psycopg2-binary</code> installation is required because uv may not properly install optional dependencies.</p>"},{"location":"deployment/fly-io/#4-flytoml-configuration","title":"4 - fly.toml Configuration","text":"<p>Your <code>fly.toml</code> should look like this:</p> <pre><code>app = \"your-app-name\"\nprimary_region = \"yyz\"\n\n[build]\ndockerfile = \"Containerfile\"\n\n[env]\nHOST = \"0.0.0.0\"\nPORT = \"4444\"\n\n[http_service]\ninternal_port = 4444\nforce_https = true\nauto_stop_machines = \"stop\"\nauto_start_machines = true\nmin_machines_running = 0\nprocesses = [\"app\"]\n\n[[vm]]\nmemory = \"1gb\"\ncpu_kind = \"shared\"\ncpus = 1\n</code></pre> <p>Note: Don't put secrets like <code>DATABASE_URL</code> in <code>fly.toml</code> - use <code>fly secrets set</code> instead.</p>"},{"location":"deployment/fly-io/#5-testing-your-deployment","title":"5 - Testing Your Deployment","text":""},{"location":"deployment/fly-io/#51-check-app-status","title":"5.1 Check app status","text":"<pre><code>fly status\nfly logs\n</code></pre>"},{"location":"deployment/fly-io/#52-test-endpoints","title":"5.2 Test endpoints","text":"<pre><code># Health check (no auth required)\ncurl https://your-app-name.fly.dev/health\n\n# Protected endpoints (require auth)\ncurl -u admin:your-password https://your-app-name.fly.dev/docs\ncurl -u admin:your-password https://your-app-name.fly.dev/tools\n</code></pre>"},{"location":"deployment/fly-io/#53-expected-responses","title":"5.3 Expected responses","text":"<ul> <li>Health: <code>{\"status\":\"healthy\"}</code></li> <li>Protected endpoints without auth: <code>{\"detail\":\"Not authenticated\"}</code></li> <li>Protected endpoints with auth: JSON response with data</li> </ul>"},{"location":"deployment/fly-io/#6-troubleshooting","title":"6 - Troubleshooting","text":""},{"location":"deployment/fly-io/#common-issue-1-sqlalchemy-postgres-dialect-error","title":"Common Issue 1: SQLAlchemy postgres dialect error","text":"<pre><code>sqlalchemy.exc.NoSuchModuleError: Can't load plugin: sqlalchemy.dialects:postgres\n</code></pre> <p>Solutions: 1. Ensure <code>psycopg2-binary</code> is explicitly installed in Containerfile 2. Use <code>postgresql://</code> not <code>postgres://</code> in DATABASE_URL 3. Rebuild with <code>fly deploy --no-cache</code></p>"},{"location":"deployment/fly-io/#common-issue-2-database-connection-refused","title":"Common Issue 2: Database connection refused","text":"<p>Solutions: 1. Verify DATABASE_URL format: <code>postgresql://postgres:PASSWORD@your-db.flycast:5432/postgres</code> 2. Check postgres app is running: <code>fly status -a your-app-db</code> 3. Verify password matches postgres creation output</p>"},{"location":"deployment/fly-io/#common-issue-3-machines-not-updating","title":"Common Issue 3: Machines not updating","text":"<p>Solutions: <pre><code># Force machine updates\nfly machine list\nfly machine update MACHINE_ID --image your-new-image\n\n# Or restart all machines\nfly scale count 0\nfly scale count 1\n</code></pre></p>"},{"location":"deployment/fly-io/#7-production-considerations","title":"7 - Production Considerations","text":""},{"location":"deployment/fly-io/#security","title":"Security","text":"<ul> <li>Change default <code>BASIC_AUTH_PASSWORD</code> to a strong password</li> <li>Consider using JWT tokens for API access</li> <li>Enable Fly's private networking for database connections</li> </ul>"},{"location":"deployment/fly-io/#scaling","title":"Scaling","text":"<pre><code># Scale to multiple machines for HA\nfly scale count 2\n\n# Scale machine resources\nfly scale memory 2gb\n</code></pre>"},{"location":"deployment/fly-io/#monitoring","title":"Monitoring","text":"<pre><code># View real-time logs\nfly logs -f\n\n# Check machine metrics\nfly machine status MACHINE_ID\n</code></pre>"},{"location":"deployment/fly-io/#8-clean-deployment-script","title":"8 - Clean Deployment Script","text":"<p>For a completely fresh deployment:</p> <pre><code>#!/bin/bash\nset -e\n\nAPP_NAME=\"your-app-name\"\nDB_NAME=\"${APP_NAME}-db\"\nREGION=\"yyz\"\nPASSWORD=$(openssl rand -base64 32)\n\necho \"\ud83d\ude80 Deploying MCP Gateway to Fly.io...\"\n\n# Create app\nfly launch --name $APP_NAME --no-deploy --region $REGION\n\n# Create postgres\nfly postgres create --name $DB_NAME --region $REGION\n\n# Set secrets\nfly secrets set JWT_SECRET_KEY=$(openssl rand -hex 32)\nfly secrets set BASIC_AUTH_USER=admin\nfly secrets set BASIC_AUTH_PASSWORD=$PASSWORD\n\n# Get postgres password and set DATABASE_URL\necho \"\u26a0\ufe0f  Set your DATABASE_URL manually with the postgres password:\"\necho \"fly secrets set DATABASE_URL=\\\"postgresql://postgres:YOUR_PG_PASSWORD@${DB_NAME}.flycast:5432/postgres\\\"\"\n\n# Deploy\necho \"\ud83c\udfd7\ufe0f  Ready to deploy. Run: fly deploy\"\n</code></pre>"},{"location":"deployment/fly-io/#9-additional-resources","title":"9 - Additional Resources","text":"<ul> <li>Fly.io Documentation</li> <li>Fly Postgres Guide</li> <li>Fly Secrets Management</li> </ul> <p>Success indicators: - \u2705 <code>fly status</code> shows machines as \"started\" - \u2705 <code>/health</code> endpoint returns <code>{\"status\":\"healthy\"}</code> - \u2705 Protected endpoints require authentication - \u2705 No SQLAlchemy errors in logs</p>"},{"location":"deployment/google-cloud-run/","title":"\u2601\ufe0f Deploying MCP Gateway on Google Cloud Run","text":"<p>MCP Gateway can be deployed to Google Cloud Run, a fully managed, autoscaling platform for containerized applications. This guide provides step-by-step instructions to provision PostgreSQL and Redis backends, deploy the container, configure environment variables, authenticate using JWT, and monitor logs-all optimized for cost-efficiency.</p>"},{"location":"deployment/google-cloud-run/#overview","title":"\u2705 Overview","text":"<p>Google Cloud Run is an ideal platform for MCP Gateway due to its:</p> <ul> <li>Serverless and cost-efficient model with scale-to-zero capability.</li> <li>Public HTTPS endpoints with automatic TLS configuration.</li> <li>Seamless integration with Cloud SQL (PostgreSQL) and Memorystore (Redis).</li> <li>Compatibility with public container registries like GitHub's <code>ghcr.io</code>.</li> </ul> <p>You can deploy the public image directly:</p> <pre><code>ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre>"},{"location":"deployment/google-cloud-run/#prerequisites","title":"\ud83d\udee0 Prerequisites","text":""},{"location":"deployment/google-cloud-run/#1-install-and-initialize-google-cloud-cli-gcloud","title":"1. Install and Initialize Google Cloud CLI (<code>gcloud</code>)","text":"<p>Install the Google Cloud SDK:</p> <ul> <li>macOS (Homebrew):</li> </ul> <pre><code>brew install --cask google-cloud-sdk\n</code></pre> <ul> <li>Debian/Ubuntu:</li> </ul> <p>These steps also apply to WSL2 running Ubuntu.</p> <pre><code># Update package lists and install necessary utilities\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates gnupg curl\n\n# Import the Google Cloud public key securely\n# This is for newer distributions (Debian 9+ or Ubuntu 18.04+).\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg\n\n# Add the Google Cloud SDK distribution URI as a package source\n# This is for newer distributions, ensuring packages are signed by the key we just added.\necho \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\n\n# Update your package lists again to recognize the new repository\nsudo apt-get update\n\n# Install the Google Cloud CLI\nsudo apt-get install -y google-cloud-cli\n</code></pre> <ul> <li>Windows (PowerShell):</li> </ul> <pre><code>winget install --id Google.CloudSDK\n</code></pre> <p>After installation, initialize the CLI:</p> <pre><code>gcloud init\n</code></pre> <p>Authenticate with your Google Cloud account:</p> <pre><code>gcloud auth login\n</code></pre> <p>Set a project ID:</p> <pre><code>gcloud config set project PROJECT_ID\n</code></pre>"},{"location":"deployment/google-cloud-run/#2-enable-required-apis","title":"2. Enable Required APIs","text":"<p>Enable the necessary Google Cloud APIs:</p> <pre><code># This might take a minute..\ngcloud services enable \\\n  run.googleapis.com \\\n  sqladmin.googleapis.com \\\n  redis.googleapis.com\n</code></pre>"},{"location":"deployment/google-cloud-run/#3-install-docker","title":"3. Install Docker","text":"<p>Ensure Docker is installed for local testing and JWT token generation. Visit Docker's official website for installation instructions.</p>"},{"location":"deployment/google-cloud-run/#4-set-environment-variables","title":"4. Set Environment Variables","text":"<p>Prepare the following environment variables:</p> Variable Description <code>JWT_SECRET_KEY</code> Secret key for signing JWT tokens <code>BASIC_AUTH_USER</code> Username for HTTP Basic Authentication <code>BASIC_AUTH_PASSWORD</code> Password for HTTP Basic Authentication <code>AUTH_REQUIRED</code> Set to <code>true</code> to enforce authentication <code>DATABASE_URL</code> PostgreSQL connection string <code>REDIS_URL</code> Redis connection string <code>CACHE_TYPE</code> Set to <code>redis</code> for production environments <code>PORT</code> Port number the application listens on (e.g., <code>4444</code>) <p>Consider creating a <code>.env.gcr</code> file where you will record the various settings used during deployment.</p> <pre><code># \u2500\u2500\u2500 Google Cloud project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nPROJECT_ID=\nREGION=us-central1\nSERVICE_NAME=mcpgateway\n\n# \u2500\u2500\u2500 Authentication \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nJWT_SECRET_KEY=\nBASIC_AUTH_USER=\nBASIC_AUTH_PASSWORD=\nAUTH_REQUIRED=true\n\n# \u2500\u2500\u2500 Cloud SQL (PostgreSQL) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nSQL_INSTANCE=mcpgw-db\nSQL_REGION=us-central1\nDATABASE_URL=postgresql://postgres:&lt;PASSWORD&gt;@&lt;SQL_IP&gt;:5432/mcpgw\n\n# \u2500\u2500\u2500 Memorystore (Redis) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nREDIS_INSTANCE=mcpgw-redis\nREDIS_REGION=us-central1\nREDIS_URL=redis://&lt;REDIS_IP&gt;:6379/0\nCACHE_TYPE=redis\n\n# \u2500\u2500\u2500 Application \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nPORT=4444\n</code></pre>"},{"location":"deployment/google-cloud-run/#setup-steps","title":"\u2699\ufe0f Setup Steps","text":""},{"location":"deployment/google-cloud-run/#1-provision-cloud-sql-postgresql","title":"1. Provision Cloud SQL (PostgreSQL)","text":"<p>Create a PostgreSQL instance using the <code>db-f1-micro</code> tier for cost efficiency:</p> <pre><code># POSTGRES_16 and POSTGRES_17 default to Enterprise Plus; adding --edition=ENTERPRISE lets you pick db-f1-micro\ngcloud sql instances create mcpgw-db \\\n  --database-version=POSTGRES_17 \\\n  --edition=ENTERPRISE \\\n  --tier=db-f1-micro \\\n  --region=us-central1\n</code></pre> <p>Set the password for the <code>postgres</code> user:</p> <pre><code>gcloud sql users set-password postgres \\\n  --instance=mcpgw-db \\\n  --password=mysecretpassword\n</code></pre> <p>Create the <code>mcpgw</code> database:</p> <pre><code>gcloud sql databases create mcpgw --instance=mcpgw-db\n</code></pre> <p>Retrieve the IP address of the instance:</p> <pre><code>gcloud sql instances describe mcpgw-db \\\n  --format=\"value(ipAddresses.ipAddress)\"\n</code></pre> <p>Note: The <code>db-f1-micro</code> tier is a shared-core instance designed for low-cost development and testing environments. It is not covered by the Cloud SQL SLA.</p>"},{"location":"deployment/google-cloud-run/#2-provision-memorystore-redis","title":"2. Provision Memorystore (Redis)","text":"<p>Create a Redis instance using the Basic Tier with 1 GiB capacity:</p> <pre><code>gcloud redis instances create mcpgw-redis \\\n  --region=us-central1 \\\n  --tier=BASIC \\\n  --size=1\n</code></pre> <p>Retrieve the host IP address:</p> <pre><code>gcloud redis instances describe mcpgw-redis \\\n  --region=us-central1 \\\n  --format=\"value(host)\"\n</code></pre> <p>Note: The Basic Tier provides a standalone Redis instance suitable for applications that can tolerate potential data loss during failures.</p>"},{"location":"deployment/google-cloud-run/#3-deploy-to-google-cloud-run","title":"3. Deploy to Google Cloud Run","text":"<p>Cloud Run only accepts container images that live in Artifact Registry or the older Container Registry endpoints; anything pulled from the public internet (for example ghcr.io) must first be proxied or copied into Artifact Registry.</p>"},{"location":"deployment/google-cloud-run/#set-your-project-id","title":"Set Your Project ID","text":"<p>Begin by setting your Google Cloud project ID as an environment variable:</p> <pre><code>export PROJECT_ID=\"your-project-id\"\n</code></pre> <p>Replace <code>\"your-project-id\"</code> with your actual Google Cloud project ID.</p>"},{"location":"deployment/google-cloud-run/#enable-required-apis","title":"Enable Required APIs","text":"<p>Ensure that the necessary Google Cloud APIs are enabled:</p> <pre><code>gcloud services enable artifactregistry.googleapis.com\n</code></pre>"},{"location":"deployment/google-cloud-run/#create-a-remote-repository","title":"Create a Remote Repository","text":"<p>Set up a remote repository in Artifact Registry that proxies GitHub Container Registry (GHCR):</p> <pre><code>gcloud artifacts repositories create ghcr-remote \\\n  --project=$PROJECT_ID \\\n  --repository-format=docker \\\n  --location=us-central1 \\\n  --description=\"Proxy for GitHub Container Registry\" \\\n  --mode=remote-repository \\\n  --remote-docker-repo=https://ghcr.io\n</code></pre>"},{"location":"deployment/google-cloud-run/#retrieve-cloud-sql-instance-connection-name","title":"Retrieve Cloud SQL Instance Connection Name","text":"<pre><code>gcloud sql instances describe mcpgw-db \\\n  --format=\"value(connectionName)\"\n</code></pre> <p>It will output something like this:</p> <pre><code>your-project-id:us-central1:mcpgw-db\n</code></pre>"},{"location":"deployment/google-cloud-run/#allow-ingress-to-your-database","title":"Allow ingress to your database.","text":"<p>Consider only allowing the Cloud Run IP range.</p> <pre><code>gcloud sql instances patch mcpgw-db \\\n  --authorized-networks=0.0.0.0/0\n</code></pre>"},{"location":"deployment/google-cloud-run/#deploy-the-mcp-gateway-container-with-minimal-resource-allocation","title":"Deploy the MCP Gateway container with minimal resource allocation:","text":"<pre><code>gcloud run deploy mcpgateway \\\n  --image=us-central1-docker.pkg.dev/$PROJECT_ID/ghcr-remote/ibm/mcp-context-forge:latest\n  --region=us-central1 \\\n  --platform=managed \\\n  --allow-unauthenticated \\\n  --port=4444 \\\n  --cpu=1 \\\n  --memory=512i \\\n  --max-instances=1 \\\n  --set-env-vars=\\\nJWT_SECRET_KEY=jwt-secret-key,\\\nBASIC_AUTH_USER=admin,\\\nBASIC_AUTH_PASSWORD=changeme,\\\nAUTH_REQUIRED=true,\\\nDATABASE_URL=postgresql://postgres:mysecretpassword@&lt;SQL_IP&gt;:5432/mcpgw,\\\nREDIS_URL=redis://&lt;REDIS_IP&gt;:6379/0,\\\nCACHE_TYPE=redis,\\\nHOST=0.0.0.0,\\\nGUNICORN_WORKERS=1\n</code></pre> <p>Replace <code>&lt;SQL_IP&gt;</code> and <code>&lt;REDIS_IP&gt;</code> with the actual IP addresses obtained from the previous steps. Do not leave out the HOST=0.0.0.0 to ensure the container listens on all ports, or the container engine won't be able to reach the container. Setting the number of GUNICORN_WORKERS lets you control how much memory the service consumes.</p>"},{"location":"deployment/google-cloud-run/#check-the-logs","title":"Check the logs","text":""},{"location":"deployment/google-cloud-run/#gcloud-run-services-logs-read-mcpgateway-regionus-central1","title":"<pre><code>gcloud run services logs read mcpgateway --region=us-central1\n</code></pre>","text":""},{"location":"deployment/google-cloud-run/#check-that-the-database-is-created","title":"Check that the database is created:","text":"<p>You can use any PostgreSQL client, such as <code>psql</code>. You should see the list of tables when using <code>dt;</code></p> <pre><code>psql postgresql://postgres:mysecretpassword@&lt;SQL_IP&gt;:5432/mcpgw\n\nmcpgw=&gt; \\dt;\n                    List of relations\n Schema |             Name             | Type  |  Owner\n--------+------------------------------+-------+----------\n public | gateways                     | table | postgres\n public | mcp_messages                 | table | postgres\n public | mcp_sessions                 | table | postgres\n public | prompt_gateway_association   | table | postgres\n public | prompt_metrics               | table | postgres\n public | prompts                      | table | postgres\n public | resource_gateway_association | table | postgres\n public | resource_metrics             | table | postgres\n public | resource_subscriptions       | table | postgres\n public | resources                    | table | postgres\n public | server_metrics               | table | postgres\n public | server_prompt_association    | table | postgres\n public | server_resource_association  | table | postgres\n public | server_tool_association      | table | postgres\n public | servers                      | table | postgres\n public | tool_gateway_association     | table | postgres\n public | tool_metrics                 | table | postgres\n public | tools                        | table | postgres\n(18 rows)\n</code></pre>"},{"location":"deployment/google-cloud-run/#authentication-and-access","title":"\ud83d\udd12 Authentication and Access","text":""},{"location":"deployment/google-cloud-run/#generate-a-jwt-bearer-token","title":"Generate a JWT Bearer Token","text":"<p>Use the MCP Gateway container to generate a JWT token:</p> <pre><code>docker run -it --rm ghcr.io/ibm/mcp-context-forge:0.6.0 \\\n  python3 -m mcpgateway.utils.create_jwt_token -u admin --secret jwt-secret-key\n</code></pre> <p>Export the token as an environment variable:</p> <pre><code>export MCPGATEWAY_BEARER_TOKEN=&lt;paste-token-here&gt;\n</code></pre>"},{"location":"deployment/google-cloud-run/#perform-smoke-tests","title":"Perform Smoke Tests","text":"<p>Test the <code>/health</code>, <code>/version</code>, and <code>/tools</code> endpoints:</p> <pre><code># Check that the service is healthy\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     https://&lt;your-cloud-run-url&gt;/health\n\n# Check that version reports the version and show Postgres/Redis as connected\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     https://&lt;your-cloud-run-url&gt;/health\n\n# Check that tools return an empty list []\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     https://&lt;your-cloud-run-url&gt;/tools\n</code></pre> <p>Replace <code>&lt;your-cloud-run-url&gt;</code> with the URL provided after deploying the service.</p>"},{"location":"deployment/google-cloud-run/#logs-and-monitoring","title":"\ud83d\udcca Logs and Monitoring","text":""},{"location":"deployment/google-cloud-run/#view-logs-via-cli","title":"View Logs via CLI","text":"<p>Tailing real-time logs requires <code>google-cloud-cli-log-streaming</code>. Ex: <code>sudo apt-get install google-cloud-cli-log-streaming</code>:</p> <pre><code>gcloud beta run services logs tail mcpgateway --region=us-central1\n</code></pre>"},{"location":"deployment/google-cloud-run/#access-logs-via-console","title":"Access Logs via Console","text":"<p>Navigate to the Cloud Run Console and select your service to view logs and metrics.</p>"},{"location":"deployment/google-cloud-run/#github-actions-deployment-optional","title":"\ud83d\udce6 GitHub Actions Deployment (Optional)","text":"<p>Automate builds and deployments using GitHub Actions. Refer to the workflow file:</p> <pre><code>.github/workflows/google-cloud-run.yml\n</code></pre> <p>This workflow:</p> <ul> <li>Restores and updates a local BuildKit layer cache.</li> <li>Builds the Docker image from <code>Containerfile.lite</code>.</li> <li>Pushes the image to Google Artifact Registry.</li> <li>Deploys to Google Cloud Run with <code>--max-instances=1</code>.</li> </ul>"},{"location":"deployment/google-cloud-run/#setting-up-permissions-for-google-cloud-run-deployment","title":"Setting up permissions for Google Cloud Run deployment","text":"<p>Instead of project-wide permissions, grant permissions on specific resources:</p> <pre><code># Create service account\ngcloud iam service-accounts create github-mcpgateway \\\n  --display-name=\"GitHub MCP Gateway Deploy\"\n\n# Grant permission ONLY on the specific Cloud Run service\ngcloud run services add-iam-policy-binding mcpgateway \\\n  --region=us-central1 \\\n  --member=\"serviceAccount:github-mcpgateway@YOUR-PROJECT-ID.iam.gserviceaccount.com\" \\\n  --role=\"roles/run.developer\"\n\n# Grant permission ONLY on the specific Artifact Registry repository\ngcloud artifacts repositories add-iam-policy-binding mcpgateway \\\n  --location=us-central1 \\\n  --member=\"serviceAccount:github-mcpgateway@YOUR-PROJECT-ID.iam.gserviceaccount.com\" \\\n  --role=\"roles/artifactregistry.writer\"\n\n# Create the key\ngcloud iam service-accounts keys create restricted-key.json \\\n  --iam-account=github-mcpgateway@YOUR-PROJECT-ID.iam.gserviceaccount.com\n</code></pre>"},{"location":"deployment/google-cloud-run/#notes-and-tips","title":"\ud83d\udcd8 Notes and Tips","text":"<ul> <li> <p>HTTPS by Default: Cloud Run services are accessible over HTTPS without additional configuration.</p> </li> <li> <p>Custom Domains: You can map custom domains via the Cloud Run settings.</p> </li> <li> <p>Secret Management: Consider using Secret Manager for managing sensitive environment variables.</p> </li> <li> <p>Cold Starts: To reduce cold start latency, set a minimum number of instances:</p> </li> </ul> <pre><code>--min-instances=1\n</code></pre> <ul> <li>Monitoring: Utilize Cloud Monitoring for detailed metrics and alerts.</li> </ul>"},{"location":"deployment/google-cloud-run/#feature-summary","title":"\ud83e\udde9 Feature Summary","text":"Feature Supported HTTPS (built-in) \u2705 Custom domains \u2705 PostgreSQL (Cloud SQL) \u2705 Redis (Memorystore) \u2705 Auto-scaling \u2705 Scale-to-zero \u2705 Max instance limit \u2705"},{"location":"deployment/google-cloud-run/#additional-resources","title":"\ud83e\udde0 Additional Resources","text":"<ul> <li>Cloud Run Documentation</li> <li>Cloud SQL for PostgreSQL Documentation</li> <li>Memorystore for Redis Documentation</li> <li>Google Cloud SDK Installation Guide</li> <li>Cloud Run Pricing</li> <li>Cloud SQL Pricing</li> <li>Memorystore Pricing</li> </ul> <p>By following this guide, you can deploy MCP Gateway on Google Cloud Run using the most cost-effective configurations, ensuring efficient resource utilization and seamless scalability.</p>"},{"location":"deployment/helm/","title":"\ud83d\ude80 Deploying the MCP Gateway Stack with Helm","text":"<p>This guide walks you through installing, upgrading, and removing the full MCP Gateway Stack using Helm. The stack includes:</p> <ul> <li>\ud83e\udde0 MCP Context Forge (the gateway)</li> <li>\ud83d\uddc4 PostgreSQL database</li> <li>\u26a1 Redis cache</li> <li>\ud83e\uddd1\ud83d\udcbb PgAdmin UI (optional)</li> <li>\ud83e\uddf0 Redis Commander UI (optional)</li> </ul> <p>Everything is deployable via Helm on any Kubernetes cluster (Minikube, kind, EKS, AKS, GKE, OpenShift, etc.).</p> <p>\ud83d\udce6 Helm chart location: https://github.com/IBM/mcp-context-forge/tree/main/charts/mcp-stack</p>"},{"location":"deployment/helm/#architecture","title":"\ud83e\udded Architecture","text":"<pre><code>flowchart TD\n    subgraph Ingress Layer\n        ingress[NGINX Ingress Controller]\n    end\n\n    subgraph Application Layer\n        mcp[MCP Context Forge]\n        pgadmin[PgAdmin UI&lt;br/&gt;optional]\n        rediscommander[Redis Commander UI&lt;br/&gt;optional]\n    end\n\n    subgraph Data Layer\n        postgres[(PostgreSQL)]\n        redis[(Redis)]\n    end\n\n    ingress --&gt; mcp\n    ingress --&gt; pgadmin\n    ingress --&gt; rediscommander\n\n    mcp --&gt; postgres\n    mcp --&gt; redis\n\n    pgadmin --&gt; postgres\n    rediscommander --&gt; redis</code></pre>"},{"location":"deployment/helm/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"Requirement Notes Kubernetes \u2265 1.23 Local (Minikube/kind) or managed (EKS, AKS, GKE, etc.) Helm 3 Used for installing and managing releases kubectl Configured to talk to your target cluster Ingress Controller NGINX, Traefik, or cloud-native (or disable via values.yaml) StorageClass (RWX) Required for PostgreSQL PVC unless persistence is disabled \u2705 Pre-flight Checklist (Run Before Deploying) <p>Ensure these checks pass before installing the stack.</p> What cluster am I connected to?Do I have the right permissions?Is my Kubernetes version compatible?Is a StorageClass with RWX access available?Is an Ingress controller installed? <pre><code>kubectl config current-context\nkubectl cluster-info\n</code></pre> <p>Verify you're pointing to the intended cluster context.</p> <pre><code>kubectl auth can-i create namespace\nkubectl auth can-i create deployment -n default\nkubectl auth can-i create clusterrolebinding\n</code></pre> <p>Confirm you have adequate access (or switch to a namespace where you do).</p> <pre><code>kubectl version -o json | jq -r '.serverVersion.gitVersion'\n</code></pre> <p>Must be <code>v1.23</code> or higher. Some Helm charts and features depend on it.</p> <pre><code>kubectl get sc\n</code></pre> <p>Required for persistent volumes (e.g., PostgreSQL).</p> <pre><code>kubectl get pods -A | grep -E 'ingress|traefik|nginx' || echo \"No ingress controller found\"\n</code></pre> <p>If not, deploy one or disable ingress in <code>values.yaml</code>.</p> \ud83d\udee0 Install Helm &amp; kubectl <p>You'll need both Helm and kubectl installed to deploy the stack.</p> macOSLinuxWindows (PowerShell)Verify installation <pre><code>brew install helm kubernetes-cli\n</code></pre> <p>Uses Homebrew to install both tools in one step.</p> <pre><code># Helm\ncurl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n\n# kubectl\ncurl -LO \"https://dl.k8s.io/release/$(curl -sSL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin\n</code></pre> <p>Installs latest stable versions directly from official sources.</p> <pre><code>choco install -y kubernetes-helm kubernetes-cli\n</code></pre> <p>Requires Chocolatey to be installed first.</p> <pre><code>helm version\nkubectl version\nkubectl config get-contexts\n</code></pre> <p>Confirm both tools are installed and kubectl is configured for your cluster.</p> \ud83d\udce6 Clone and inspect the chart <pre><code>git clone https://github.com/IBM/mcp-context-forge.git\ncd mcp-context-forge/charts/mcp-stack\nhelm lint .\n</code></pre> \u2705 RBAC test (if enabled) <p>Confirm the service account created by the chart can access resources as expected.</p> Test using impersonationIf denied, check RBAC status <pre><code>kubectl auth can-i list pods \\\n  --as=system:serviceaccount:mcp-private:mcp-stack-sa \\\n  -n mcp-private\n</code></pre> <pre><code>kubectl get role,rolebinding -n mcp-private\nkubectl describe role mcp-stack-role -n mcp-private\n</code></pre> \ud83d\udd10 Prepare the Namespace (Recommended) <p>It's best practice to isolate the stack in its own namespace, with labels and policies for security and clarity.</p> Create the namespaceAdd environment labels and annotationsOptional: Apply default-deny NetworkPolicyVerify the namespace is ready <pre><code>kubectl create namespace mcp-private --dry-run=client -o yaml | kubectl apply -f -\n</code></pre> <p>You can use a different name (e.g. <code>mcp</code>, <code>prod-gateway</code>) as long as you reference it consistently in your Helm commands.</p> <pre><code>kubectl label namespace mcp-private environment=prod --overwrite\nkubectl annotate namespace mcp-private \"config.kubernetes.io/owner=mcp\" --overwrite\n</code></pre> <p>Labels and annotations can help with GitOps sync, audit, and tracking tools.</p> <pre><code>cat &lt;&lt;'EOF' | kubectl apply -n mcp-private -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-by-default\nspec:\n  podSelector: {}\n  policyTypes: [Ingress, Egress]\nEOF\n</code></pre> <p>This restricts all traffic by default. You'll need to define allowed communication between components separately, or use service mesh policies.</p> <pre><code>kubectl get ns mcp-private\nkubectl get networkpolicy -n mcp-private\nkubectl get sa default -n mcp-private -o yaml\n</code></pre> <p>Confirm that the namespace exists and basic policies are in place.</p>"},{"location":"deployment/helm/#customize-values","title":"\ud83e\uddfe Customize values","text":"\ud83e\uddfe Customize values.yaml <p>Copy and edit the default values file to tailor the deployment to your environment.</p> Clone and copy the values fileEdit values for your environmentValidate the chart after customizing <pre><code>cp values.yaml my-values.yaml\n</code></pre> <p>This gives you a working copy of the Helm chart and lets you customize settings safely.</p> <pre><code>mcpContextForge:\n  image:\n    repository: ghcr.io/ibm/mcp-context-forge\n    tag: v1.0.0\n  ingress:\n    enabled: true\n    host: gateway.local        # Change this to your actual DNS\n    className: nginx\n\n  envFrom:\n    - secretRef:\n        name: mcp-gateway-secret\n    - configMapRef:\n        name: mcp-gateway-config\n\npostgres:\n  credentials:\n    user: admin\n    password: S3cuReP@ss       # Avoid hardcoding in production\n  persistence:\n    size: 10Gi\n\npgadmin:\n  enabled: false\n\nredisCommander:\n  enabled: false\n\nrbac:\n  create: true\n</code></pre> <p>This configures image version, ingress host, secrets, storage, and RBAC. In production, prefer secrets over inline passwords.</p> <pre><code>helm lint .\n</code></pre> <p>Ensures the chart is valid and ready to install.</p>"},{"location":"deployment/helm/#install-upgrade-the-stack","title":"\ud83d\ude80 Install / Upgrade the stack","text":"\ud83d\ude80 Install or Upgrade the Stack <p>Install the MCP Gateway Stack into your Kubernetes cluster using Helm. This will deploy all components defined in your <code>my-values.yaml</code>.</p> Install for the first timeWhat does this deploy?Need to re-run install? <pre><code>helm upgrade --install mcp-stack . \\\n  --namespace mcp-private \\\n  --create-namespace=false \\\n  -f my-values.yaml \\\n  --wait --timeout 30m --debug\n</code></pre> <p>This installs or upgrades the stack in the <code>mcp-private</code> namespace, using your custom values file. Set <code>--create-namespace=true</code> if the namespace hasn't been created yet.</p> <ul> <li>MCP Context Forge (API Gateway)</li> <li>PostgreSQL with optional persistence</li> <li>Redis cache</li> <li>(Optional) PgAdmin &amp; Redis Commander</li> <li>Ingress configuration (if enabled)</li> <li>NetworkPolicy and RBAC (if configured)</li> </ul> <p>Helm upgrades are idempotent. You can run the same command again safely after making changes to <code>my-values.yaml</code>.</p>"},{"location":"deployment/helm/#verify-deployment","title":"\u2705 Verify deployment","text":"\u2705 Verify Deployment <p>After installation completes, confirm that all resources are running and healthy.</p> Check all resources in the namespaceVerify Ingress (if enabled)If not using Ingress: port forwardCheck logs and pod status (optional) <pre><code>kubectl get all -n mcp-private\nhelm status mcp-stack -n mcp-private\n</code></pre> <p>This should show running pods, services, deployments, and Helm release status.</p> <pre><code>kubectl get ingress -n mcp-private\ncurl http://gateway.local/health\n</code></pre> <p>You should see a <code>200 OK</code> response or similar from the health endpoint.</p> <pre><code>kubectl port-forward svc/mcp-stack-app 8080:80 -n mcp-private\ncurl http://localhost:8080/health\n</code></pre> <p>Port-forwarding gives you local access to the service when Ingress is disabled or not ready.</p> <pre><code>kubectl logs -n mcp-private deploy/mcp-stack-app --tail=50\nkubectl describe pod -l app.kubernetes.io/instance=mcp-stack -n mcp-private\n</code></pre> <p>Useful for debugging if components are not responding or entering <code>CrashLoopBackOff</code>.</p>"},{"location":"deployment/helm/#upgrade-rollback","title":"\ud83d\udd04 Upgrade &amp; Rollback","text":"\ud83d\udd04 Upgrade &amp; Rollback <p>You can upgrade to a new image version, preview changes before applying, or roll back to a previous release.</p> Upgrade to a new image versionPreview changes before upgradingRoll back to a previous revision <pre><code>helm upgrade mcp-stack . -n mcp-private \\\n  --set mcpContextForge.image.tag=v1.2.3 \\\n  --wait\n</code></pre> <p>Updates only the image tag (or any specific value you override) while preserving existing resources.</p> <pre><code>helm plugin install https://github.com/databus23/helm-diff\nhelm diff upgrade mcp-stack . -n mcp-private -f my-values.yaml\n</code></pre> <p>Shows what will change without applying anything. Requires the helm-diff plugin.</p> <pre><code>helm rollback mcp-stack 1 -n mcp-private\n</code></pre> <p>Use <code>helm history mcp-stack -n mcp-private</code> to list available revisions before rolling back.</p>"},{"location":"deployment/helm/#uninstall","title":"\ud83e\uddf9 Uninstall","text":"\ud83e\uddf9 Uninstall the Stack <p>This removes all components deployed by the Helm chart.</p> Basic uninstallDelete the namespace (optional)Full reset workflow <pre><code>helm uninstall mcp-stack -n mcp-private\n</code></pre> <p>Removes deployments, services, and related resources created by the chart.</p> <pre><code>kubectl delete namespace mcp-private\n</code></pre> <p>Use this if you want to fully clean up everything, including secrets, configmaps, and PVCs.</p> <pre><code># Uninstall the Helm release\nhelm uninstall mcp-stack -n mcp-private\n\n# Delete PVCs if you're not keeping data\nkubectl delete pvc --all -n mcp-private\n\n# Delete the namespace\nkubectl delete namespace mcp-private\n\n# Reinstall from scratch (if desired)\nhelm upgrade --install mcp-stack . \\\n  --namespace mcp-private \\\n  -f my-values.yaml \\\n  --wait --timeout 15m --debug\n</code></pre> <p>Use this flow when you need to wipe the environment and redeploy fresh.</p>"},{"location":"deployment/helm/#cicd-packaging-oci-push","title":"\ud83e\uddea CI/CD: Packaging &amp; OCI Push","text":"\ud83e\uddea CI/CD: Packaging &amp; OCI Push <p>Package your Helm chart and push it to an OCI-compliant registry for use in GitOps workflows (e.g., Argo CD, Flux).</p> Lint and package the chartPush to OCI registryWhy use OCI?Example: using in GitOps <pre><code>helm lint .\nhelm package . -d dist/\n</code></pre> <p>This validates your chart and creates a <code>.tgz</code> package in the <code>dist/</code> directory.</p> <pre><code>helm push dist/mcp-stack-*.tgz oci://ghcr.io/&lt;your-org&gt;/charts\n</code></pre> <p>Replace <code>&lt;your-org&gt;</code> with your GitHub container registry org. Make sure <code>HELM_EXPERIMENTAL_OCI=1</code> is set if using older Helm versions.</p> <ul> <li>Works with private registries</li> <li>Easily versioned and managed</li> <li>Supported by Argo CD and Flux natively</li> </ul> <p>Reference the chart by OCI URL in your GitOps tool:</p> <pre><code>oci://ghcr.io/your-org/charts/mcp-stack\n</code></pre> <p>Then sync as usual using your preferred tool.</p>"},{"location":"deployment/helm/#troubleshooting","title":"\ud83e\uddef Troubleshooting","text":"\ud83e\uddef Troubleshooting Common Issues <p>Quick fixes and diagnostic tips for common deployment problems.</p> <code>ImagePullBackOff</code><code>Ingress returns 404</code> or no external IP<code>CrashLoopBackOff</code> on a pod<code>Env vars missing</code> (e.g., BASIC_AUTH_USER)<code>RBAC access denied</code> <ul> <li>Cause: Image not found or access denied</li> <li>Fix:   <pre><code>kubectl describe pod -n mcp-private\n</code></pre></li> <li>Check <code>image:</code> field in <code>values.yaml</code></li> <li>Ensure the image tag exists and is publicly accessible (or add a pull secret)</li> </ul> <ul> <li>Cause: Ingress host mismatch or controller not ready</li> <li>Fix:   <pre><code>kubectl get ingress -n mcp-private\nkubectl get svc -A | grep ingress\n</code></pre></li> <li>Make sure the ingress hostname matches DNS or <code>/etc/hosts</code></li> <li>Confirm an Ingress Controller is deployed and available</li> </ul> <ul> <li>Fix:   <pre><code>kubectl logs -n mcp-private &lt;pod-name&gt;\nkubectl describe pod &lt;pod-name&gt; -n mcp-private\n</code></pre></li> </ul> <p>Check logs for configuration or secret injection issues.</p> <ul> <li>Cause: Secret or ConfigMap not mounted</li> <li>Fix: Confirm <code>envFrom</code> is configured in your <code>my-values.yaml</code> and the resources exist:</li> </ul> <pre><code>kubectl get secret mcp-gateway-secret -n mcp-private\nkubectl get configmap mcp-gateway-config -n mcp-private\n</code></pre> <ul> <li>Fix: Ensure RBAC roles are created properly:   <pre><code>kubectl get role,rolebinding -n mcp-private\n</code></pre></li> </ul> <p>You can also enable auto-RBAC creation with:</p> <pre><code>rbac:\n  create: true\n</code></pre>"},{"location":"deployment/helm/#valuesyaml-common-keys","title":"\ud83e\uddfe values.yaml - Common Keys","text":"\ud83e\uddfe values.yaml - Common Keys Reference <p>Most frequently used keys in <code>values.yaml</code> and what they control.</p> Key Default Description <code>mcpContextForge.image.tag</code> <code>latest</code> Image version for MCP Context Forge <code>mcpContextForge.ingress.enabled</code> <code>true</code> Enables ingress resource creation <code>mcpContextForge.ingress.host</code> <code>gateway.local</code> Hostname used in Ingress (change in production) <code>mcpContextForge.service.type</code> <code>ClusterIP</code> Use <code>LoadBalancer</code> if running in cloud <code>mcpContextForge.envFrom</code> <code>[]</code> Allows mounting Secrets/ConfigMaps as env vars <code>postgres.credentials.user</code> <code>admin</code> Default DB username (use secret in prod) <code>postgres.credentials.password</code> <code>test123</code> Default DB password (avoid hardcoding) <code>postgres.persistence.enabled</code> <code>true</code> Enables persistent volume claim for PostgreSQL <code>postgres.persistence.size</code> <code>10Gi</code> Size of the PostgreSQL volume <code>pgadmin.enabled</code> <code>false</code> Enable PgAdmin for DB UI <code>redisCommander.enabled</code> <code>false</code> Enable Redis Commander for Redis UI <code>rbac.create</code> <code>true</code> Automatically create Role/RoleBinding <p>\ud83d\udcdd For all possible options, see the full <code>values.yaml</code> file in the chart repository.</p> <p>See full annotations in <code>values.yaml</code>.</p>"},{"location":"deployment/helm/#further-reading","title":"\ud83d\udcda Further Reading","text":"\ud83d\udcda Further Reading &amp; References <p>Useful links to understand Helm, Kubernetes, and GitOps tools used with the MCP stack.</p> HelmKubernetesGitOps Tools <ul> <li>\ud83d\udcd8 Helm Documentation</li> <li>\ud83d\udd27 Helm Diff Plugin</li> <li>\ud83d\udce6 Helm OCI Registry Docs</li> </ul> <ul> <li>\ud83d\udcd8 Kubernetes Ingress</li> <li>\ud83d\udcbe Persistent Volumes</li> <li>\ud83d\udd10 Kubernetes Secrets</li> <li>\ud83d\udd12 Network Policies</li> </ul> <ul> <li>\ud83d\ude80 Argo CD</li> <li>\ud83d\udd01 Flux</li> </ul> <p>\u2705 You now have a production-ready Helm workflow for MCP Context Forge. It's CI-friendly, customizable, and tested across Kubernetes distributions.</p>"},{"location":"deployment/ibm-code-engine/","title":"\u2699\ufe0f IBM Code Engine","text":"<p>This guide covers two supported deployment paths for the MCP Gateway:</p> <ol> <li>Makefile automation - a single-command workflow that wraps <code>ibmcloud</code> CLI.</li> <li>Manual IBM Cloud CLI - the raw commands the Makefile executes, for fine-grained control.</li> </ol>"},{"location":"deployment/ibm-code-engine/#1-prerequisites","title":"1 - Prerequisites","text":"Requirement Details IBM Cloud account Create one if needed Docker or Podman Builds the production container image locally IBM Cloud CLI \u2265 2.16 Installed automatically with <code>make ibmcloud-cli-install</code> Code Engine project Create or select one in the IBM Cloud console <code>.env</code> file Runtime secrets &amp; config for the gateway <code>.env.ce</code> file Deployment credentials &amp; metadata for Code Engine / Container Reg."},{"location":"deployment/ibm-code-engine/#2-environment-files","title":"2 - Environment files","text":"<p>Both files are already in <code>.gitignore</code>. Template named <code>.env.example</code> <code>.env.ce.example</code> and are included; copy them:</p> <pre><code>cp .env.example .env         # runtime settings (inside the container)\ncp .env.ce.example .env.ce   # deployment credentials (CLI only)\n</code></pre>"},{"location":"deployment/ibm-code-engine/#env-runtime-settings","title":"<code>.env</code> - runtime settings","text":"<p>This file is mounted into the container (via <code>--env-file=.env</code>), so its keys live inside Code Engine at runtime. Treat it as an application secret store.</p> <pre><code># \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n#  Core gateway settings\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nAUTH_REQUIRED=true\n# Generate once:  openssl rand -hex 32\nJWT_SECRET_KEY=eef5e9f70ca7fe6f9677ad2acaf4d32c55e9d98e9cb74299b33f5c5d1a3c8ef\n\nHOST=0.0.0.0\nPORT=4444\n\n\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n#  Database configuration  - choose ONE block\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n## (A) Local SQLite  (good for smoke-tests / CI only)\n## --------------------------------------------------\n## - SQLite lives on the container's ephemeral file system.\n## - On Code Engine every new instance starts fresh; scale-out, restarts or\n##   deploys will wipe data.  **Not suitable for production.**\n## - If you still need file persistence, attach Code Engine's file-system\n##   mount or an external filesystem / COS bucket.\n#CACHE_TYPE=database\n#DATABASE_URL=sqlite:////tmp/mcp.db\n\n\n## (B) Managed PostgreSQL on IBM Cloud  (recommended for staging/production)\n## --------------------------------------------------------------------------\n## - Provision an IBM Cloud Databases for PostgreSQL instance (see below).\n## - Use the service credentials to build the URL.\n## - sslmode=require is mandatory for IBM Cloud databases.\nCACHE_TYPE=database\nDATABASE_URL=postgresql://pguser:pgpass@my-pg-host.databases.appdomain.cloud:32727/mcpgwdb?sslmode=require\n#            \u2502 \u2502      \u2502                                   \u2502           \u2502\n#            \u2502 \u2502      \u2502                                   \u2502           \u2514\u2500 database name\n#            \u2502 \u2502      \u2502                                   \u2514\u2500 hostname:port\n#            \u2502 \u2502      \u2514\u2500 password\n#            \u2502 \u2514\u2500 username\n#            \u2514\u2500 scheme\n</code></pre> <p>The <code>JWT_SECRET_KEY</code> variable is used to generate a Bearer token used to access the APIs. To access the APIs you need to generate your JWT token using the same <code>JWT_SECRET_KEY</code>, for example:</p> <pre><code># Generate a one-off token for the default admin user\nexport MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token -u admin)\necho ${MCPGATEWAY_BEARER_TOKEN} # Check that the key was generated\n</code></pre>"},{"location":"deployment/ibm-code-engine/#envce-code-engine-deployment-settings","title":"<code>.env.ce</code> - Code Engine deployment settings","text":"<p>These keys are only consumed by Makefile / CLI. They never reach the running container.</p> <pre><code># \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n#  IBM Cloud / Code Engine deployment variables\n# \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nIBMCLOUD_REGION=us-south\nIBMCLOUD_RESOURCE_GROUP=default\nIBMCLOUD_PROJECT=my-codeengine-project\nIBMCLOUD_CODE_ENGINE_APP=mcpgateway\n\n# Image details\nIBMCLOUD_IMAGE_NAME=us.icr.io/myspace/mcpgateway:latest  # target in IBM Container Registry\nIBMCLOUD_IMG_PROD=mcpgateway/mcpgateway                  # local tag produced by Make\n\n# Authentication\nIBMCLOUD_API_KEY=***your-api-key***    # leave blank to use SSO flow at login\n\n# Resource combo - see https://cloud.ibm.com/docs/codeengine?topic=codeengine-mem-cpu-combo\nIBMCLOUD_CPU=1                         # vCPU for the container\nIBMCLOUD_MEMORY=4G                     # Memory (must match a valid CPU/MEM pair)\n\n# Registry secret in Code Engine (first-time creation is automated)\nIBMCLOUD_REGISTRY_SECRET=my-regcred\n</code></pre> <p>Tip: run <code>make ibmcloud-check-env</code> to verify every required <code>IBMCLOUD_*</code> key is present in <code>.env.ce</code>.</p>"},{"location":"deployment/ibm-code-engine/#3-workflow-a-makefile-targets","title":"3 - Workflow A - Makefile targets","text":"Target Action it performs <code>podman</code> / <code>docker</code> Build the production image (<code>$IBMCLOUD_IMG_PROD</code>). <code>ibmcloud-cli-install</code> Install IBM Cloud CLI + container-registry and code-engine plugins. <code>ibmcloud-check-env</code> Ensure all <code>IBMCLOUD_*</code> vars exist in <code>.env.ce</code>; abort if any are missing. <code>ibmcloud-login</code> <code>ibmcloud login</code> - uses API key or interactive SSO. <code>ibmcloud-ce-login</code> <code>ibmcloud ce project select --name $IBMCLOUD_PROJECT</code>. <code>ibmcloud-list-containers</code> Show ICR images and existing Code Engine apps. <code>ibmcloud-tag</code> <code>podman tag $IBMCLOUD_IMG_PROD $IBMCLOUD_IMAGE_NAME</code>. <code>ibmcloud-push</code> <code>ibmcloud cr login</code> + <code>podman push</code> to ICR. <code>ibmcloud-deploy</code> Create or update the app, set CPU/MEM, attach registry secret, expose port 4444. <code>ibmcloud-ce-status</code> <code>ibmcloud ce application get</code> - see route URL, revisions, health. <code>ibmcloud-ce-logs</code> <code>ibmcloud ce application logs --follow</code> - live log stream. <code>ibmcloud-ce-rm</code> Delete the application entirely. <p>Typical first deploy</p> <pre><code>make ibmcloud-check-env\nmake ibmcloud-cli-install\nmake ibmcloud-login\nmake ibmcloud-ce-login\nmake podman            # or: make docker\nmake ibmcloud-tag\nmake ibmcloud-push\nmake ibmcloud-deploy\n</code></pre> <p>Redeploy after code changes</p> <pre><code>make podman ibmcloud-tag ibmcloud-push ibmcloud-deploy\n</code></pre>"},{"location":"deployment/ibm-code-engine/#4-workflow-b-manual-ibm-cloud-cli","title":"4 - Workflow B - Manual IBM Cloud CLI","text":"<pre><code># 1 - Install CLI + plugins\ncurl -fsSL https://clis.cloud.ibm.com/install/linux | sh\nibmcloud plugin install container-registry -f\nibmcloud plugin install code-engine      -f\n\n# 2 - Login\nibmcloud login --apikey \"$IBMCLOUD_API_KEY\" -r \"$IBMCLOUD_REGION\" -g \"$IBMCLOUD_RESOURCE_GROUP\"\nibmcloud resource groups # list resource groups\n\n# 3 - Target Code Engine project\nibmcloud ce project list # list current projects\nibmcloud ce project select --name \"$IBMCLOUD_PROJECT\"\n\n# 4 - Build + tag image\npodman build -t \"$IBMCLOUD_IMG_PROD\" .\npodman tag \"$IBMCLOUD_IMG_PROD\" \"$IBMCLOUD_IMAGE_NAME\"\n\n# 5 - Push image to ICR\nibmcloud cr login\nibmcloud cr namespaces       # Ensure your namespace exists\npodman push \"$IBMCLOUD_IMAGE_NAME\"\nibmcloud cr images # list images\n\n# 6 - Create registry secret (first time)\nibmcloud ce registry create-secret --name \"$IBMCLOUD_REGISTRY_SECRET\" \\\n    --server \"$(echo \"$IBMCLOUD_IMAGE_NAME\" | cut -d/ -f1)\" \\\n    --username iamapikey --password \"$IBMCLOUD_API_KEY\"\nibmcloud ce secret list # list every secret (generic, registry, SSH, TLS, etc.)\nibmcloud ce secret get --name \"$IBMCLOUD_REGISTRY_SECRET\"         # add --decode to see clear-text values\n\n# 7 - Deploy / update\nif ibmcloud ce application get --name \"$IBMCLOUD_CODE_ENGINE_APP\" &gt;/dev/null 2&gt;&amp;1; then\n  ibmcloud ce application update --name \"$IBMCLOUD_CODE_ENGINE_APP\" \\\n      --image \"$IBMCLOUD_IMAGE_NAME\" \\\n      --cpu \"$IBMCLOUD_CPU\" --memory \"$IBMCLOUD_MEMORY\" \\\n      --registry-secret \"$IBMCLOUD_REGISTRY_SECRET\"\nelse\n  ibmcloud ce application create --name \"$IBMCLOUD_CODE_ENGINE_APP\" \\\n      --image \"$IBMCLOUD_IMAGE_NAME\" \\\n      --cpu \"$IBMCLOUD_CPU\" --memory \"$IBMCLOUD_MEMORY\" \\\n      --port 4444 \\\n      --registry-secret \"$IBMCLOUD_REGISTRY_SECRET\"\nfi\n\n# 8 - Status &amp; logs\nibmcloud ce application get --name \"$IBMCLOUD_CODE_ENGINE_APP\"\nibmcloud ce application events --name \"$IBMCLOUD_CODE_ENGINE_APP\"\nibmcloud ce application get   --name \"$IBMCLOUD_CODE_ENGINE_APP\"\nibmcloud ce application logs  --name \"$IBMCLOUD_CODE_ENGINE_APP\" --follow\n</code></pre>"},{"location":"deployment/ibm-code-engine/#5-accessing-the-gateway","title":"5 - Accessing the gateway","text":"<pre><code>ibmcloud ce application get --name \"$IBMCLOUD_CODE_ENGINE_APP\" --output url\n</code></pre> <p>Open the returned URL (e.g. <code>https://mcpgateway.us-south.codeengine.appdomain.cloud/admin</code>) and log in with the basic-auth credentials from <code>.env</code>.</p> <p>Test the API endpoints with the generated <code>MCPGATEWAY_BEARER_TOKEN</code>:</p> <pre><code># Generate a one-off token for the default admin user\nexport MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token -u admin)\n\n# Call a protected endpoint. Since there are not tools, initially this just returns `[]`\ncurl -H \"Authorization: Bearer ${MCPGATEWAY_BEARER_TOKEN}\" \\\n     https://mcpgateway.us-south.codeengine.appdomain.cloud/tools\n\n# Check the logs\nmake ibmcloud-ce-logs\n</code></pre>"},{"location":"deployment/ibm-code-engine/#6-cleanup","title":"6 - Cleanup","text":"<pre><code># via Makefile\nmake ibmcloud-ce-rm\n\n# or directly\nibmcloud ce application delete --name \"$IBMCLOUD_CODE_ENGINE_APP\" -f\n</code></pre>"},{"location":"deployment/ibm-code-engine/#7-using-ibm-cloud-databases-for-postgresql","title":"7 - Using IBM Cloud Databases for PostgreSQL","text":"<p>Need durable data, high availability, and automated backups? Provision IBM Cloud Databases for PostgreSQL and connect MCP Gateway to it.</p> <pre><code>###############################################################################\n# 1 - Provision PostgreSQL\n###############################################################################\n# Choose a plan:  standard (shared) or enterprise (dedicated). For small\n# workloads start with: standard / 1 member / 4 GB RAM.\nibmcloud resource service-instance-create mcpgw-db \\\n    databases-for-postgresql standard $IBMCLOUD_REGION\n\n###############################################################################\n# 2 - Create service credentials\n###############################################################################\nibmcloud resource service-key-create mcpgw-db-creds Administrator \\\n    --instance-name mcpgw-db\n\n###############################################################################\n# 3 - Retrieve credentials &amp; craft DATABASE_URL\n###############################################################################\ncreds_json=$(ibmcloud resource service-key mcpgw-db-creds --output json)\nhost=$(echo \"$creds_json\" | jq -r '.[0].credentials.connection.postgres.hosts[0].hostname')\nport=$(echo \"$creds_json\" | jq -r '.[0].credentials.connection.postgres.hosts[0].port')\nuser=$(echo \"$creds_json\" | jq -r '.[0].credentials.connection.postgres.authentication.username')\npass=$(echo \"$creds_json\" | jq -r '.[0].credentials.connection.postgres.authentication.password')\ndb=$(echo \"$creds_json\"   | jq -r '.[0].credentials.connection.postgres.database')\n\nDATABASE_URL=\"postgresql://${user}:${pass}@${host}:${port}/${db}?sslmode=require\"\n\n###############################################################################\n# 4 - Store DATABASE_URL as a Code Engine secret\n###############################################################################\nibmcloud ce secret create --name mcpgw-db-url \\\n    --from-literal DATABASE_URL=\"$DATABASE_URL\"\n\n###############################################################################\n# 5 - Mount the secret into the application\n###############################################################################\nibmcloud ce application update --name \"$IBMCLOUD_CODE_ENGINE_APP\" \\\n    --env-from-secret mcpgw-db-url\n</code></pre>"},{"location":"deployment/ibm-code-engine/#choosing-the-right-postgresql-size","title":"Choosing the right PostgreSQL size","text":"Workload profile Suggested plan Members \u00d7 RAM Notes Dev / PoC <code>standard</code> 1 \u00d7 4 GB Cheapest; no HA; easy to scale later Prod small <code>standard</code> 2 \u00d7 8 GB Two members enable HA &amp; automatic fail-over Prod heavy <code>enterprise</code> 3 \u00d7 16 GB Dedicated bare-metal; highest performance &amp; isolation <p>Scale up at any time with:</p> <pre><code>ibmcloud cdb deployment-scaling-set mcpgw-db \\\n    --members 3 --memory-gb 16\n\n# Update the number of maximum connections:\nibmcloud cdb deployment-configuration YOUR_DB_CRN '{\"configuration\":{\"max_connections\":215}}'\n\n# show max_connections;\n</code></pre> <p>The gateway will reconnect transparently because the host name remains stable. See the documentation for more details.</p>"},{"location":"deployment/ibm-code-engine/#local-sqlite-vs-managed-postgresql","title":"Local SQLite vs. Managed PostgreSQL","text":"Aspect Local SQLite (<code>sqlite:////tmp/mcp.db</code>) Managed PostgreSQL Persistence None - lost on restarts / scale-out Durable &amp; backed-up Concurrency Single-writer lock Multiple writers Scale-out ready No - state is per-pod Yes Best for Unit tests, CI pipelines Staging &amp; production <p>For production workloads you must switch to a managed database or mount a persistent file system.</p>"},{"location":"deployment/ibm-code-engine/#8-adding-ibm-cloud-databases-for-redis-optional-cache-layer","title":"8 - Adding IBM Cloud Databases for Redis (optional cache layer)","text":"<p>Need a high-performance shared cache? Provision IBM Cloud Databases for Redis and point MCP Gateway at it.</p> <pre><code>###############################################################################\n# 1 - Provision Redis\n###############################################################################\n# Choose a plan: standard (shared) or enterprise (dedicated).\nibmcloud resource service-instance-create mcpgw-redis \\\n    databases-for-redis standard $IBMCLOUD_REGION\n\n###############################################################################\n# 2 - Create service credentials\n###############################################################################\nibmcloud resource service-key-create mcpgw-redis-creds Administrator \\\n    --instance-name mcpgw-redis\n\n###############################################################################\n# 3 - Retrieve credentials &amp; craft REDIS_URL\n###############################################################################\ncreds_json=$(ibmcloud resource service-key mcpgw-redis-creds --output json)\nhost=$(echo \"$creds_json\" | jq -r '.[0].credentials.connection.rediss.hosts[0].hostname')\nport=$(echo \"$creds_json\" | jq -r '.[0].credentials.connection.rediss.hosts[0].port')\npass=$(echo \"$creds_json\" | jq -r '.[0].credentials.connection.rediss.authentication.password')\n\nREDIS_URL=\"rediss://:${pass}@${host}:${port}/0\"   # rediss = TLS-secured Redis\n\n###############################################################################\n# 4 - Store REDIS_URL as a Code Engine secret\n###############################################################################\nibmcloud ce secret create --name mcpgw-redis-url \\\n    --from-literal REDIS_URL=\"$REDIS_URL\"\n\n###############################################################################\n# 5 - Mount the secret and switch cache backend\n###############################################################################\nibmcloud ce application update --name \"$IBMCLOUD_CODE_ENGINE_APP\" \\\n    --env-from-secret mcpgw-redis-url \\\n    --env CACHE_TYPE=redis\n</code></pre>"},{"location":"deployment/ibm-code-engine/#choosing-the-right-redis-size","title":"Choosing the right Redis size","text":"Use-case Plan Memory Notes Dev / CI <code>standard</code> 256 MB Minimum footprint, single member Small production <code>standard</code> 1 GB Two-member HA cluster High-throughput <code>enterprise</code> \u22654 GB Dedicated nodes, persistence, AOF <p>Scale later with:</p> <pre><code>ibmcloud cdb deployment-scaling-set mcpgw-redis --memory-gb 4\n</code></pre> <p>Once redeployed, the gateway will use Redis for request-level caching, reducing latency and database load.</p>"},{"location":"deployment/ibm-code-engine/#9-gunicorn-configuration-optional-tuning","title":"9. Gunicorn configuration (optional tuning)","text":"<p>The container starts <code>gunicorn</code> with the settings defined in <code>gunicorn.conf.py</code> found at the project root. If you need to change worker counts, ports, or time-outs, edit this file before you build the image (<code>make podman</code> or <code>make docker</code>). The settings are baked into the container at build time.</p> <pre><code># -*- coding: utf-8 -*-\n\"\"\"\nGunicorn configuration\nDocs: https://docs.gunicorn.org/en/stable/settings.html\n\"\"\"\n\n# Network interface / port \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nbind = \"0.0.0.0:4444\"        # Listen on all interfaces, port 4444\n\n# Worker processes \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nworkers = 8                  # Rule of thumb: 2-4 \u00d7 NUM_CPU_CORES\n\n# Request/worker life-cycle \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ntimeout = 600                # Kill a worker after 600 s of no response\nmax_requests = 10000         # Restart worker after N requests\nmax_requests_jitter = 100    # Add randomness to avoid synchronized restarts\n\n# Logging &amp; verbosity \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nloglevel = \"info\"            # \"debug\", \"info\", \"warning\", \"error\", \"critical\"\n\n# Optimisations \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\npreload_app = True           # Load app code once in parent, fork workers (saves RAM)\nreuse_port  = True           # SO_REUSEPORT for quicker restarts\n\n# Alternative worker models (uncomment ONE and install extras) ----------\n# worker_class = \"gevent\"     # pip install \"gunicorn[gevent]\"\n# worker_class = \"eventlet\"   # pip install \"gunicorn[eventlet]\"\n# worker_class = \"tornado\"    # pip install \"gunicorn[tornado]\"\n# threads = 2                 # If using the 'sync' worker with threads\n\n# TLS certificates (if you terminate HTTPS inside the container)\n# certfile = 'certs/cert.pem'\n# keyfile  = 'certs/key.pem'\n\n# Server hooks (logging examples) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ndef when_ready(server):\n    server.log.info(\"Server is ready. Spawning workers\")\n\ndef post_fork(server, worker):\n    server.log.info(\"Worker spawned (pid: %s)\", worker.pid)\n\ndef worker_exit(server, worker):\n    server.log.info(\"Worker exit (pid: %s)\", worker.pid)\n</code></pre> <p>Typical tweaks</p> Scenario Setting(s) to adjust High-latency model calls \u2192 time-outs <code>timeout</code> (e.g. 1200 s) CPU-bound workload on 4-core instance <code>workers = 8</code> \u2192 <code>workers = 16</code> Memory-limited instance Reduce <code>workers</code> or disable <code>preload_app</code> Websocket / async traffic Switch <code>worker_class</code> to <code>gevent</code> or <code>eventlet</code> <p>After changing the file, rebuild and redeploy:</p> <pre><code>make podman ibmcloud-tag ibmcloud-push ibmcloud-deploy\n</code></pre>"},{"location":"deployment/kubernetes/","title":"\u2638\ufe0f Kubernetes / OpenShift Deployment","text":"<p>You can deploy MCP Gateway to any K8s-compliant platform - including vanilla Kubernetes, OpenShift, and managed clouds like GKE, AKS, and EKS.</p>"},{"location":"deployment/kubernetes/#quick-start-with-manifest-yaml","title":"\ud83d\ude80 Quick Start with Manifest (YAML)","text":"<p>A basic Kubernetes deployment might look like:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcpgateway\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mcpgateway\n  template:\n    metadata:\n      labels:\n        app: mcpgateway\n    spec:\n      containers:\n        - name: gateway\n          image: ghcr.io/YOUR_ORG/mcpgateway:latest\n          ports:\n            - containerPort: 4444\n          envFrom:\n            - configMapRef:\n                name: mcpgateway-env\n          volumeMounts:\n            - mountPath: /app/.env\n              name: env-volume\n              subPath: .env\n      volumes:\n        - name: env-volume\n          configMap:\n            name: mcpgateway-env\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mcpgateway\nspec:\n  selector:\n    app: mcpgateway\n  ports:\n    - port: 80\n      targetPort: 4444\n</code></pre> <p>Replace <code>ghcr.io/YOUR_ORG/mcpgateway</code> with your built image.</p>"},{"location":"deployment/kubernetes/#tls-ingress","title":"\ud83d\udd10 TLS &amp; Ingress","text":"<p>You can add:</p> <ul> <li>Cert-manager with TLS secrets</li> <li>An Ingress resource that routes to <code>/admin</code>, <code>/tools</code>, etc.</li> </ul> <p>Example Ingress snippet:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: mcpgateway\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\nspec:\n  rules:\n    - host: gateway.example.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: mcpgateway\n                port:\n                  number: 80\n  tls:\n    - hosts:\n        - gateway.example.com\n      secretName: mcpgateway-tls\n</code></pre>"},{"location":"deployment/kubernetes/#configuration-via-configmap","title":"\ud83d\udce6 Configuration via ConfigMap","text":"<p>You can load your <code>.env</code> as a ConfigMap:</p> <pre><code>kubectl create configmap mcpgateway-env --from-env-file=.env\n</code></pre> <p>Make sure it includes <code>JWT_SECRET_KEY</code>, <code>AUTH_REQUIRED</code>, etc.</p>"},{"location":"deployment/kubernetes/#openshift-considerations","title":"\ud83d\udca1 OpenShift Considerations","text":"<ul> <li>Use <code>Route</code> instead of Ingress</li> <li>You may need to run the container as an unprivileged user</li> <li>Set <code>SECURITY_CONTEXT_RUNASUSER</code> if needed</li> </ul>"},{"location":"deployment/kubernetes/#health-check-probes","title":"\ud83e\uddea Health Check Probes","text":"<pre><code>livenessProbe:\n  httpGet:\n    path: /health\n    port: 4444\n  initialDelaySeconds: 10\n  periodSeconds: 15\n</code></pre>"},{"location":"deployment/local/","title":"\ud83d\udc0d Local Deployment","text":"<p>This guide walks you through running MCP Gateway on your local machine using a virtual environment or directly via Python.</p>"},{"location":"deployment/local/#one-liner-setup","title":"\ud83d\ude80 One-Liner Setup","text":"<p>The easiest way to start the server in development mode:</p> <pre><code>make venv install-dev serve\n</code></pre> <p>This does the following:</p> <ol> <li>Creates a <code>.venv/</code> virtual environment</li> <li>Installs all dependencies (including dev tools)</li> <li>Launches Gunicorn on <code>http://localhost:4444</code></li> </ol>"},{"location":"deployment/local/#development-mode-with-live-reload","title":"\ud83e\uddea Development Mode with Live Reload","text":"<p>If you want auto-reload on code changes:</p> <pre><code>make dev        # hot-reload (Uvicorn) on :8000\n# or:\n./run.sh --reload --log debug\n</code></pre> <p>Ensure your <code>.env</code> file includes:</p> <pre><code>DEV_MODE=true\nRELOAD=true\nDEBUG=true\n</code></pre>"},{"location":"deployment/local/#health-test","title":"\ud83e\uddea Health Test","text":"<pre><code>curl http://localhost:4444/health\n</code></pre> <p>Expected output:</p> <pre><code>{\"status\": \"healthy\"}\n</code></pre>"},{"location":"deployment/local/#admin-ui","title":"\ud83d\udd10 Admin UI","text":"<p>Visit http://localhost:4444/admin and login using your <code>BASIC_AUTH_USER</code> and <code>BASIC_AUTH_PASSWORD</code> from <code>.env</code>.</p>"},{"location":"deployment/local/#quick-jwt-setup","title":"\ud83d\udd01 Quick JWT Setup","text":"<pre><code>export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token -u admin)\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/tools\n</code></pre>"},{"location":"deployment/minikube/","title":"\u26a1\ufe0f Minikube","text":"<ol> <li>Install Minikube and kubectl (Docker or Podman driver required).</li> <li>Start a local cluster with Ingress and DNS addons.</li> <li>Load the <code>ghcr.io/ibm/mcp-context-forge:0.6.0</code> image into Minikube.</li> <li>Apply your Kubernetes manifests.</li> <li>Access the Gateway at http://gateway.local or <code>127.0.0.1:80</code> via NGINX Ingress.</li> </ol> <p>Minikube provides a self-contained environment, enabling you to replicate production features like persistent volumes and TLS on your local machine.</p>"},{"location":"deployment/minikube/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"Requirement Notes CPU / RAM Minimum 2 vCPU + 2 GiB; recommended 4 vCPU / 6 GiB for smoother operation. Disk At least 20 GiB of free space. Container driver Docker 20.10+ or Podman 4.7+; Docker is the simplest choice on macOS and Windows. kubectl Automatically configured by <code>minikube start</code>; alternatively, use <code>minikube kubectl -- ...</code> if not installed."},{"location":"deployment/minikube/#architecture","title":"Architecture","text":"<pre><code>          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502      NGINX Ingress          \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502/          \u2502/\n      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2502  MCP Context Forge \u2502 \u2502 PgAdmin (opt.) \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502                 \u2502\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502    PostgreSQL     \u2502 \u2502 Redis Commander(opt)\u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502                     \u2502\n      \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510\n      \u2502   PV     \u2502          \u2502  Redis   \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"deployment/minikube/#step-1-install-minikube-and-kubectl","title":"\ud83d\ude80 Step 1 - Install Minikube and kubectl","text":"<p>Make target</p> <pre><code>make minikube-install\n</code></pre> <p>This target checks for existing installations of <code>minikube</code> and <code>kubectl</code>. If missing, it installs them using:</p> <ul> <li>Homebrew on macOS</li> <li>The official binary on Linux</li> <li>Chocolatey on Windows</li> </ul> Manual installation (optional)  ### macOS (Homebrew)  <pre><code>brew install minikube kubernetes-cli\n</code></pre>  ### Linux (Generic binary)  <pre><code># Minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube &amp;&amp; rm minikube-linux-amd64\n\n# kubectl (latest stable)\ncurl -LO \"https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x kubectl &amp;&amp; sudo mv kubectl /usr/local/bin/\n</code></pre>  ### Windows (PowerShell + Chocolatey)  <pre><code>choco install -y minikube kubernetes-cli\n</code></pre>"},{"location":"deployment/minikube/#step-2-start-the-cluster","title":"\u2699\ufe0f Step 2 - Start the cluster","text":"<p>Make target</p> <pre><code>make minikube-start\n</code></pre> Equivalent manual command <pre><code>minikube start \\\n  --driver=docker \\\n  --cpus=4 --memory=6g \\\n  --addons=ingress,ingress-dns \\\n  --profile=mcpgw\n</code></pre> <ul> <li><code>--driver=docker</code> avoids nested virtualization on macOS and Windows Home.</li> <li><code>ingress</code> provides an NGINX LoadBalancer on localhost.</li> <li><code>ingress-dns</code> resolves <code>*.local</code> domains when you add the Minikube IP to your OS DNS list.</li> <li><code>--cpus</code> and <code>--memory</code> can be set to <code>max</code> to utilize all available resources.</li> </ul> <p>Check cluster status:</p> <pre><code>make minikube-status\n# or:\nminikube status -p mcpgw\nkubectl get pods -n ingress-nginx\n</code></pre>"},{"location":"deployment/minikube/#step-3-load-the-gateway-image","title":"\ud83c\udfd7 Step 3 - Load the Gateway image","text":"<p>Make target</p> <pre><code>make minikube-image-load\n</code></pre> <p>This target builds the <code>ghcr.io/ibm/mcp-context-forge:0.6.0</code> image and loads it into Minikube.</p>"},{"location":"deployment/minikube/#alternative-methods","title":"Alternative methods","text":"<ul> <li>Pre-cache a remote image:</li> </ul> <pre><code>minikube cache add ghcr.io/ibm/mcp-context-forge:0.6.0\nminikube cache reload\n</code></pre> <ul> <li>Load a local tarball:</li> </ul> <pre><code>docker save ghcr.io/ibm/mcp-context-forge:0.6.0 | minikube image load -\n</code></pre>"},{"location":"deployment/minikube/#step-4-apply-kubernetes-manifests","title":"\ud83d\udcc4 Step 4 - Apply Kubernetes manifests","text":"<p>Make target</p> <pre><code>make minikube-k8s-apply\n</code></pre> <p>This applies the Kubernetes manifests. Alternative manual step:</p> <pre><code># PostgreSQL\nkubectl apply -f deployment/k8s/postgres-config.yaml\nkubectl apply -f deployment/k8s/postgres-pv.yaml\nkubectl apply -f deployment/k8s/postgres-pvc.yaml\nkubectl apply -f deployment/k8s/postgres-deployment.yaml\nkubectl apply -f deployment/k8s/postgres-service.yaml\n\n# Redis\nkubectl apply -f deployment/k8s/redis-deployment.yaml\nkubectl apply -f deployment/k8s/redis-service.yaml\n\n# MCP Gateway\nkubectl apply -f deployment/k8s/mcp-context-forge-deployment.yaml\nkubectl apply -f deployment/k8s/mcp-context-forge-service.yaml\nkubectl apply -f deployment/k8s/mcp-context-forge-ingress.yaml\n</code></pre> <p>If you've enabled <code>ingress-dns</code>, set the Ingress <code>host:</code> to <code>gateway.local</code>. Otherwise, omit the <code>host:</code> and access via NodePort.</p> <p>Note: Minikube automatically configures the <code>kubectl</code> context upon cluster creation. If not, set it manually:</p> <pre><code>kubectl config use-context minikube\n# or:\nminikube kubectl -- apply -f ...\n</code></pre>"},{"location":"deployment/minikube/#step-5-verify-deployment-status","title":"\ud83e\uddea Step 5 - Verify deployment status","text":"<p>Before hitting your endpoint, confirm the application is up and healthy.</p>"},{"location":"deployment/minikube/#check-pod-status","title":"\ud83d\udd0d Check pod status","text":"<pre><code>kubectl get pods\n</code></pre> <p>Expect output like:</p> <pre><code>NAME                                      READY   STATUS    RESTARTS   AGE\npostgres-5b66bdf445-rp8kl                 1/1     Running   0          15s\nredis-668976c4f9-2hljd                    1/1     Running   0          15s\nmcp-context-forge-6d87f8c5d8-nnmgx        1/1     Running   0          10s\n</code></pre>"},{"location":"deployment/minikube/#check-logs-optional","title":"\ud83d\udcdc Check logs (optional)","text":"<pre><code>kubectl logs deploy/mcp-context-forge\n</code></pre> <p>This can help diagnose startup errors or missing dependencies (e.g. bad env vars, Postgres connection issues).</p>"},{"location":"deployment/minikube/#wait-for-rollout-optional","title":"\ud83d\udea5 Wait for rollout (optional)","text":"<pre><code>kubectl rollout status deploy/mcp-context-forge\n</code></pre> <p>If the pod gets stuck in <code>CrashLoopBackOff</code>, run:</p> <pre><code>kubectl describe pod &lt;pod-name&gt;\n</code></pre> <p>And:</p> <pre><code>kubectl logs &lt;pod-name&gt;\n</code></pre>"},{"location":"deployment/minikube/#confirm-ingress-is-live","title":"\u2705 Confirm Ingress is live","text":"<pre><code>kubectl get ingress\n</code></pre> <p>Should show something like:</p> <pre><code>NAME                        CLASS    HOSTS           ADDRESS        PORTS   AGE\nmcp-context-forge-ingress   nginx    gateway.local   192.168.49.2   80      1m\n</code></pre> <p>If <code>ADDRESS</code> is empty, the ingress controller may still be warming up.</p> <p>You may want to add this to <code>/etc/hosts</code>. Ex:</p> <pre><code>192.168.49.2 gateway.local\n</code></pre>"},{"location":"deployment/minikube/#step-6-test-access","title":"\ud83c\udf10 Step 6 - Test access","text":"<pre><code># Via NodePort:\ncurl $(minikube service mcp-context-forge --url)/health\n\n# Via DNS:\ncurl http://gateway.local/health\n</code></pre>"},{"location":"deployment/minikube/#cleaning-up","title":"\ud83e\uddf9 Cleaning up","text":"Action Make target Manual command Pause cluster <code>make minikube-stop</code> <code>minikube stop -p mcpgw</code> Delete cluster <code>make minikube-delete</code> <code>minikube delete -p mcpgw</code> Remove cached image - <code>minikube cache delete ghcr.io/ibm/mcp-context-forge:0.6.0</code>"},{"location":"deployment/minikube/#non-make-cheatsheet","title":"\ud83d\udee0 Non-Make cheatsheet","text":"Task Command Start with Podman driver <code>minikube start --driver=podman --network-plugin=cni</code> Open dashboard <code>minikube dashboard</code> SSH into node <code>minikube ssh</code> Enable metrics-server <code>minikube addons enable metrics-server</code> Upgrade Minikube (macOS) <code>minikube delete &amp;&amp; brew upgrade minikube</code>"},{"location":"deployment/minikube/#further-reading","title":"\ud83d\udcda Further reading","text":"<ol> <li> <p>Minikube Quick Start guide (official)    https://minikube.sigs.k8s.io/docs/start/</p> </li> <li> <p>Minikube Docker driver docs    https://minikube.sigs.k8s.io/docs/drivers/docker/</p> </li> <li> <p>Enable NGINX Ingress in Minikube    https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/</p> </li> <li> <p>Load / cache images inside Minikube    https://minikube.sigs.k8s.io/docs/handbook/pushing/</p> </li> <li> <p>Using Minikube's built-in kubectl    https://minikube.sigs.k8s.io/docs/handbook/kubectl/</p> </li> <li> <p>Allocate max CPU/RAM flags    https://minikube.sigs.k8s.io/docs/faq/#how-can-i-allocate-maximum-resources-to-minikube</p> </li> <li> <p>Ingress-DNS addon overview    https://minikube.sigs.k8s.io/docs/handbook/addons/ingress-dns/</p> </li> <li> <p>Stack Overflow: loading local images into Minikube    https://stackoverflow.com/questions/42564058/how-can-i-use-local-docker-images-with-minikube</p> </li> </ol> <p>Minikube gives you the fastest, vendor-neutral sandbox for experimenting with MCP Gateway-and everything above doubles as CI instructions for self-hosted GitHub runners or ephemeral integration tests.</p>"},{"location":"deployment/openshift/","title":"\u2728 Red Hat OpenShift","text":"<p>OpenShift (both OKD and Red Hat OpenShift Container Platform) adds opinionated security (SCC), integrated routing, and optional build pipelines on top of Kubernetes.  Deploying MCP Gateway therefore means (1) building or pulling a compatible image, (2) wiring database + cache back-ends, (3) obeying the default restricted-v2 SCC, and (4) exposing the service through a Route instead of an Ingress.  This guide walks through each step, offers ready-made YAML snippets, and explains the differences from the vanilla Kubernetes.</p>"},{"location":"deployment/openshift/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li><code>oc</code> CLI - log in as a developer to a project/namespace you can create objects in.</li> <li>A storage class for PVCs (or local PVs) to back the Postgres template.</li> <li>Either Podman or Docker on your workstation if you build locally.</li> <li>Access to an image registry that your cluster can pull from (e.g. <code>quay.io</code>).</li> </ul>"},{"location":"deployment/openshift/#build-push-images","title":"\ud83d\udee0\ufe0f Build &amp; push images","text":""},{"location":"deployment/openshift/#option-a-use-make","title":"Option A - Use Make","text":"Target Builds Dockerfile Notes <code>make podman</code> <code>mcpgateway-dev:latest</code> Containerfile Rootless Podman build <code>make podman-prod</code> <code>mcpgateway:latest</code> Containerfile.lite UBI 9-micro, multi-stage <code>make docker</code> <code>mcpgateway-dev:latest</code> Containerfile Docker Desktop <code>make docker-prod</code> <code>mcpgateway:latest</code> Containerfile.lite Same slim image <p>Push afterwards, for example:</p> <pre><code>podman tag mcpgateway:latest quay.io/YOUR_NS/mcpgateway:latest\npodman push quay.io/YOUR_NS/mcpgateway:latest\n</code></pre> <p>Apple-silicon note - <code>Containerfile.lite</code> uses <code>ubi9-micro</code> (x86_64). Buildx/QEMU works, but the image will run under emulation on macOS. If you need native arm64 choose the dev image or add <code>--platform linux/arm64</code>.</p>"},{"location":"deployment/openshift/#option-b-raw-cli-equivalents","title":"Option B - Raw CLI equivalents","text":"<pre><code># Dev (Containerfile)\npodman build -t mcpgateway-dev:latest -f Containerfile .\n\n# Prod (UBI micro, AMD64, squashed layers)\ndocker build --platform=linux/amd64 --squash \\\n  -t mcpgateway:latest -f Containerfile.lite .\n</code></pre>"},{"location":"deployment/openshift/#secrets-configmaps","title":"\ud83d\udd11 Secrets &amp; ConfigMaps","text":"<p>Create a ConfigMap from your <code>.env</code> file:</p> <pre><code>oc create configmap mcpgateway-env --from-env-file=.env   # Populates envFrom\n</code></pre> <p>OpenShift lets you inject all keys via <code>envFrom:</code> in the pod template.</p> <p>If you keep sensitive values (e.g. <code>JWT_SECRET_KEY</code>) separate, store them in a Secret and reference both resources under <code>envFrom:</code>.</p>"},{"location":"deployment/openshift/#postgresql-redis-back-ends","title":"\ud83d\uddc4 PostgreSQL &amp; Redis back-ends","text":""},{"location":"deployment/openshift/#postgresql-persistent-template","title":"PostgreSQL (persistent template)","text":"<pre><code>oc new-app -f https://raw.githubusercontent.com/openshift/origin/master/examples/db-templates/postgresql-persistent-template.json \\\n  -p POSTGRESQL_USER=postgres,POSTGRESQL_PASSWORD=secret,POSTGRESQL_DATABASE=mcp\n</code></pre> <p>The template creates a DeploymentConfig, Service and a 1 Gi PVC bound to the cluster's default storage class.</p>"},{"location":"deployment/openshift/#redis","title":"Redis","text":"<p>On OpenShift 4.x use the Redis Enterprise Operator from OperatorHub (UI or CLI) then create a RedisEnterpriseCluster CR; it provisions StatefulSets plus PVCs out-of-the-box.</p>"},{"location":"deployment/openshift/#deployment-service-gateway","title":"\ud83d\udce6 Deployment &amp; Service (gateway)","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcpgateway\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mcpgateway\n  template:\n    metadata:\n      labels:\n        app: mcpgateway\n    spec:\n      securityContext:            # Must satisfy restricted-v2 SCC\n        runAsNonRoot: true\n      containers:\n      - name: gateway\n        image: quay.io/YOUR_NS/mcpgateway:latest\n        ports:\n        - containerPort: 4444\n        envFrom:\n        - configMapRef:\n            name: mcpgateway-env\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 4444\n          initialDelaySeconds: 5\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 4444\n          initialDelaySeconds: 15\n          periodSeconds: 20\n        securityContext:\n          allowPrivilegeEscalation: false\n          runAsUser: 1001        # UBI non-root UID works with restricted SCC\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mcpgateway\nspec:\n  selector:\n    app: mcpgateway\n  ports:\n  - port: 80\n    targetPort: 4444\n</code></pre> <p>The readiness/liveness probes follow OpenShift's health-check guidance.</p>"},{"location":"deployment/openshift/#route-public-url","title":"\ud83c\udf0d Route (public URL)","text":"<pre><code>apiVersion: route.openshift.io/v1\nkind: Route\nmetadata:\n  name: mcpgateway\nspec:\n  to:\n    kind: Service\n    name: mcpgateway\n  port:\n    targetPort: 80\n  tls:\n    termination: edge\n</code></pre> <p>Routes are OpenShift's native form of ingress; the router automatically provisions a hostname such as <code>mcpgateway-myproj.apps.cluster.example.com</code>.</p>"},{"location":"deployment/openshift/#putting-it-together","title":"\ud83d\udcd1 Putting it together","text":"<pre><code># Apply manifests\noc apply -f postgres-template.yaml        # or Operator YAML\noc apply -f redis-operator.yaml           # if using Redis Operator\noc apply -f mcpgateway-deployment.yaml\noc apply -f mcpgateway-route.yaml\n</code></pre> <p>Verify:</p> <pre><code>oc get pods\noc get route mcpgateway -o jsonpath='{.spec.host}{\"\\n\"}'\ncurl https://$(oc get route mcpgateway -o jsonpath='{.spec.host}')/health\n</code></pre>"},{"location":"deployment/openshift/#openshift-buildconfig-optional","title":"\ud83d\udd04 OpenShift BuildConfig (optional)","text":"<p>If you prefer in-cluster builds, create a <code>BuildConfig</code> with the docker strategy. You can override the Dockerfile path via <code>spec.strategy.dockerStrategy.dockerfilePath</code>. Then trigger:</p> <pre><code>oc start-build mcpgateway --from-dir=.\n</code></pre> <p>The resulting image lands in an internal ImageStream, and the Deployment can auto-deploy the new tag.</p>"},{"location":"deployment/openshift/#persistence-pvcs","title":"\ud83d\uddc3 Persistence &amp; PVCs","text":"<p>The Postgres template already generates a PVC; you can create extra PVCs manually or via the web console. A general PVC manifest is shown in OpenShift Storage docs.</p>"},{"location":"deployment/openshift/#non-make-cheat-sheet","title":"\ud83d\udea6 Non-Make cheat-sheet","text":"Action Command Build dev image (local) <code>podman build -t mcpgateway-dev -f Containerfile .</code> Build prod (UBI lite) <code>docker build -t mcpgateway -f Containerfile.lite .</code> Push to Quay <code>podman push mcpgateway quay.io/NS/mcpgateway</code> Create project <code>oc new-project mcp-demo</code> Load .env <code>oc create configmap mcpgateway-env --from-env-file=.env</code> Deploy <code>oc apply -f mcpgateway-deployment.yaml</code> Expose <code>oc apply -f mcpgateway-route.yaml</code> Tail logs <code>oc logs -f deployment/mcpgateway</code>"},{"location":"deployment/openshift/#troubleshooting","title":"\ud83d\udee0 Troubleshooting","text":"Issue Fix <code>Error: container has runAsNonRoot and image has non-numeric user</code> Add <code>runAsUser: 1001</code> or pick <code>nonroot-v2</code> SCC. PVC stuck in <code>Pending</code> Check storage class or request size &gt; quota. Route returns 503 Verify pod readiness probe passes and the Service targets port 80 -&gt; 4444."},{"location":"deployment/openshift/#further-reading","title":"\ud83d\udcda Further reading","text":"<ol> <li>OpenShift Route documentation - creation &amp; TLS</li> <li>SCC and restricted-v2 / nonroot-v2 behaviour</li> <li>ConfigMap envFrom patterns</li> <li>Postgres persistent template example</li> <li>Redis Enterprise Operator on OCP (OperatorHub)</li> <li>Health-check probes in OpenShift</li> <li>BuildConfig Docker strategy &amp; <code>dockerfilePath</code></li> </ol>"},{"location":"deployment/proxy-auth/","title":"Proxy Authentication","text":"<p>This guide explains how to configure MCP Gateway to work with authentication proxies like OAuth2 Proxy, Authelia, Cloudflare Access, or enterprise API gateways.</p>"},{"location":"deployment/proxy-auth/#overview","title":"Overview","text":"<p>When MCP Gateway is deployed behind an authentication proxy, you can disable its built-in JWT authentication and trust the proxy to handle user authentication. This is common in enterprise environments where authentication is centralized.</p>"},{"location":"deployment/proxy-auth/#architecture","title":"Architecture","text":"<pre><code>User \u2192 Auth Proxy (OAuth/SAML) \u2192 MCP Gateway \u2192 MCP Servers\n         \u2193\n    Identity Provider\n    (Okta, Auth0, Azure AD)\n</code></pre>"},{"location":"deployment/proxy-auth/#configuration","title":"Configuration","text":""},{"location":"deployment/proxy-auth/#environment-variables","title":"Environment Variables","text":"<p>To enable proxy authentication, configure these environment variables:</p> <pre><code># Disable JWT authentication for MCP operations\nMCP_CLIENT_AUTH_ENABLED=false\n\n# REQUIRED: Explicitly trust proxy authentication\n# Only set this when MCP Gateway is behind a trusted proxy!\nTRUST_PROXY_AUTH=true\n\n# Header containing the authenticated username from proxy\n# Default: X-Authenticated-User\nPROXY_USER_HEADER=X-Authenticated-User\n\n# Keep admin UI authentication enabled (optional)\nAUTH_REQUIRED=true\n</code></pre>"},{"location":"deployment/proxy-auth/#security-warning","title":"Security Warning","text":"<p>\u26a0\ufe0f IMPORTANT: Only disable MCP client authentication when MCP Gateway is deployed behind a trusted authentication proxy. Setting <code>MCP_CLIENT_AUTH_ENABLED=false</code> without <code>TRUST_PROXY_AUTH=true</code> will log a warning, as this removes a critical security layer.</p>"},{"location":"deployment/proxy-auth/#common-proxy-configurations","title":"Common Proxy Configurations","text":""},{"location":"deployment/proxy-auth/#oauth2-proxy","title":"OAuth2 Proxy","text":"<p>OAuth2 Proxy is a popular reverse proxy that provides authentication using OAuth2 providers.</p> <pre><code># docker-compose.yml\nservices:\n  oauth2-proxy:\n    image: quay.io/oauth2-proxy/oauth2-proxy:latest\n    ports:\n      - \"4180:4180\"\n    environment:\n      OAUTH2_PROXY_CLIENT_ID: your-client-id\n      OAUTH2_PROXY_CLIENT_SECRET: your-client-secret\n      OAUTH2_PROXY_COOKIE_SECRET: your-cookie-secret\n      OAUTH2_PROXY_UPSTREAMS: http://mcp-gateway:4444\n      OAUTH2_PROXY_PASS_USER_HEADERS: true\n      OAUTH2_PROXY_SET_XAUTHREQUEST: true\n\n  mcp-gateway:\n    image: ghcr.io/contingentai/mcp-gateway:latest\n    environment:\n      MCP_CLIENT_AUTH_ENABLED: false\n      TRUST_PROXY_AUTH: true\n      PROXY_USER_HEADER: X-Auth-Request-User\n</code></pre>"},{"location":"deployment/proxy-auth/#authelia","title":"Authelia","text":"<p>Authelia is a complete authentication and authorization server.</p> <pre><code># Example Authelia forward auth configuration\nservices:\n  authelia:\n    image: authelia/authelia\n    volumes:\n      - ./authelia:/config\n    environment:\n      TZ: America/New_York\n\n  mcp-gateway:\n    image: ghcr.io/contingentai/mcp-gateway:latest\n    environment:\n      MCP_CLIENT_AUTH_ENABLED: false\n      TRUST_PROXY_AUTH: true\n      PROXY_USER_HEADER: Remote-User\n    labels:\n      - \"traefik.http.routers.mcp.middlewares=authelia@docker\"\n</code></pre>"},{"location":"deployment/proxy-auth/#cloudflare-access","title":"Cloudflare Access","text":"<p>For Cloudflare Access, configure the gateway to read the authenticated user from Cloudflare's headers:</p> <pre><code>MCP_CLIENT_AUTH_ENABLED=false\nTRUST_PROXY_AUTH=true\nPROXY_USER_HEADER=Cf-Access-Authenticated-User-Email\n</code></pre>"},{"location":"deployment/proxy-auth/#aws-api-gateway","title":"AWS API Gateway","text":"<p>When using AWS API Gateway with Lambda authorizers:</p> <pre><code>MCP_CLIENT_AUTH_ENABLED=false\nTRUST_PROXY_AUTH=true\nPROXY_USER_HEADER=X-Authenticated-User\n</code></pre> <p>Configure your Lambda authorizer to add the authenticated username to the context:</p> <pre><code># Lambda authorizer example\ndef lambda_handler(event, context):\n    # Validate token...\n    return {\n        'principalId': user_id,\n        'context': {\n            'authenticatedUser': user_email\n        }\n    }\n</code></pre>"},{"location":"deployment/proxy-auth/#header-passthrough","title":"Header Passthrough","text":"<p>When using proxy authentication, you may want to pass additional headers to downstream MCP servers:</p> <pre><code># Enable header passthrough\nENABLE_HEADER_PASSTHROUGH=true\n\n# Headers to pass through (JSON array)\nDEFAULT_PASSTHROUGH_HEADERS='[\"X-Tenant-Id\", \"X-Request-Id\", \"X-Authenticated-User\"]'\n</code></pre>"},{"location":"deployment/proxy-auth/#kubernetes-with-istio","title":"Kubernetes with Istio","text":"<p>In a service mesh with Istio, you can use JWT validation at the mesh level:</p> <pre><code>apiVersion: security.istio.io/v1beta1\nkind: RequestAuthentication\nmetadata:\n  name: mcp-gateway-auth\nspec:\n  selector:\n    matchLabels:\n      app: mcp-gateway\n  jwtRules:\n  - issuer: \"https://your-issuer.com\"\n    jwksUri: \"https://your-issuer.com/.well-known/jwks.json\"\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mcp-gateway-config\ndata:\n  MCP_CLIENT_AUTH_ENABLED: \"false\"\n  TRUST_PROXY_AUTH: \"true\"\n  PROXY_USER_HEADER: \"X-User-Id\"\n</code></pre>"},{"location":"deployment/proxy-auth/#testing-proxy-authentication","title":"Testing Proxy Authentication","text":"<p>To test your proxy authentication setup:</p> <ol> <li> <p>Without proxy headers (should fail or return anonymous): <pre><code>curl http://localhost:4444/tools\n# Returns 401 or anonymous access depending on AUTH_REQUIRED\n</code></pre></p> </li> <li> <p>With proxy headers: <pre><code>curl -H \"X-Authenticated-User: john.doe@example.com\" \\\n     http://localhost:4444/tools\n# Should return tools list for authenticated user\n</code></pre></p> </li> <li> <p>WebSocket with proxy auth: <pre><code>const ws = new WebSocket('ws://localhost:4444/ws', {\n  headers: {\n    'X-Authenticated-User': 'john.doe@example.com'\n  }\n});\n</code></pre></p> </li> </ol>"},{"location":"deployment/proxy-auth/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/proxy-auth/#warning-mcp-auth-disabled-without-trust","title":"Warning: MCP auth disabled without trust","text":"<p>If you see this warning in logs: <pre><code>WARNING - MCP client authentication is disabled but trust_proxy_auth is not set\n</code></pre></p> <p>Solution: Set <code>TRUST_PROXY_AUTH=true</code> to acknowledge you're using proxy authentication.</p>"},{"location":"deployment/proxy-auth/#authentication-still-required","title":"Authentication still required","text":"<p>Problem: Getting 401 errors even with proxy headers.</p> <p>Check: 1. Verify <code>MCP_CLIENT_AUTH_ENABLED=false</code> 2. Ensure <code>TRUST_PROXY_AUTH=true</code> 3. Confirm header name matches <code>PROXY_USER_HEADER</code> 4. Check proxy is actually sending the header</p>"},{"location":"deployment/proxy-auth/#websocket-connections-fail","title":"WebSocket connections fail","text":"<p>Problem: WebSocket connections are rejected.</p> <p>Solution: Ensure your proxy passes headers to WebSocket upgrade requests. Some proxies require special configuration for WebSocket support.</p>"},{"location":"deployment/proxy-auth/#migration-from-jwt-authentication","title":"Migration from JWT Authentication","text":"<p>To migrate from JWT to proxy authentication:</p> <ol> <li>Deploy proxy alongside existing setup</li> <li>Test proxy authentication with a subset of users</li> <li>Update environment:    <pre><code>MCP_CLIENT_AUTH_ENABLED=false\nTRUST_PROXY_AUTH=true\nPROXY_USER_HEADER=X-Authenticated-User\n</code></pre></li> <li>Monitor logs for authentication issues</li> <li>Remove JWT token generation once stable</li> </ol>"},{"location":"deployment/proxy-auth/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never expose MCP Gateway directly when proxy auth is enabled</li> <li>Use TLS between proxy and gateway</li> <li>Validate proxy certificates in production</li> <li>Monitor authentication logs for anomalies</li> <li>Implement rate limiting at the proxy level</li> <li>Use network policies to ensure only the proxy can reach the gateway</li> </ol>"},{"location":"deployment/proxy-auth/#example-complete-setup-with-traefik","title":"Example: Complete Setup with Traefik","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  traefik:\n    image: traefik:v2.10\n    command:\n      - \"--providers.docker=true\"\n      - \"--entrypoints.web.address=:80\"\n    ports:\n      - \"80:80\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n\n  oauth2-proxy:\n    image: quay.io/oauth2-proxy/oauth2-proxy:latest\n    environment:\n      OAUTH2_PROXY_CLIENT_ID: ${CLIENT_ID}\n      OAUTH2_PROXY_CLIENT_SECRET: ${CLIENT_SECRET}\n      OAUTH2_PROXY_COOKIE_SECRET: ${COOKIE_SECRET}\n      OAUTH2_PROXY_PROVIDER: google\n      OAUTH2_PROXY_EMAIL_DOMAINS: \"*\"\n      OAUTH2_PROXY_UPSTREAMS: \"http://mcp-gateway:4444/\"\n      OAUTH2_PROXY_HTTP_ADDRESS: \"0.0.0.0:4180\"\n      OAUTH2_PROXY_PASS_USER_HEADERS: \"true\"\n      OAUTH2_PROXY_SET_XAUTHREQUEST: \"true\"\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.oauth2-proxy.rule=Host(`mcp.example.com`)\"\n      - \"traefik.http.services.oauth2-proxy.loadbalancer.server.port=4180\"\n\n  mcp-gateway:\n    image: ghcr.io/contingentai/mcp-gateway:latest\n    environment:\n      MCP_CLIENT_AUTH_ENABLED: \"false\"\n      TRUST_PROXY_AUTH: \"true\"\n      PROXY_USER_HEADER: \"X-Auth-Request-Email\"\n      AUTH_REQUIRED: \"true\"  # Keep admin UI protected\n      BASIC_AUTH_USER: ${ADMIN_USER}\n      BASIC_AUTH_PASSWORD: ${ADMIN_PASSWORD}\n    volumes:\n      - ./data:/data\n</code></pre> <p>This configuration provides Google OAuth authentication for all MCP Gateway endpoints while maintaining separate admin UI authentication.</p>"},{"location":"development/","title":"Development","text":"<p>Welcome! This guide is for developers contributing to MCP Gateway. Whether you're fixing bugs, adding features, or extending federation or protocol support, this doc will help you get up and running quickly and consistently.</p>"},{"location":"development/#what-youll-find-here","title":"\ud83e\uddf0 What You'll Find Here","text":"Page Description Building Locally How to install dependencies, set up a virtual environment, and run the gateway Packaging How to build a release, container image, or prebuilt binary Doctest Coverage Comprehensive doctest coverage implementation and guidelines DEVELOPING.md Coding standards, commit conventions, and review workflow"},{"location":"development/#developer-environment","title":"\ud83d\udee0 Developer Environment","text":"<p>MCP Gateway is built with:</p> <ul> <li>Python 3.10+</li> <li>FastAPI + SQLAlchemy (async) + Pydantic Settings</li> <li>HTMX, Alpine.js, TailwindCSS for the Admin UI</li> </ul> <p>Development tools:</p> <ul> <li>Linters: <code>ruff</code>, <code>mypy</code>, <code>black</code>, <code>isort</code></li> <li>Testing: <code>pytest</code>, <code>httpx</code></li> <li>Serving: <code>uvicorn</code>, <code>gunicorn</code></li> </ul> <p>Code style and consistency is enforced via:</p> <pre><code>make lint          # runs ruff, mypy, black, isort\nmake pre-commit    # runs pre-commit hooks on staged files\n</code></pre> <p>As well as GitHub Actions code scanning.</p>"},{"location":"development/#testing","title":"\ud83e\uddea Testing","text":"<p>Test coverage includes:</p> <ul> <li>Unit tests under <code>tests/unit/</code></li> <li>Integration tests under <code>tests/integration/</code></li> <li>End-to-end tests under <code>tests/e2e/</code></li> <li>Example payload performance testing under <code>tests/hey/</code></li> </ul> <p>Use:</p> <pre><code>make test          # run all tests\nmake test-unit     # run only unit tests\nmake test-e2e      # run end-to-end\n</code></pre>"},{"location":"development/#linting-and-hooks","title":"\ud83d\udd0d Linting and Hooks","text":"<p>CI will fail your PR if code does not pass lint checks.</p> <p>You should manually run:</p> <pre><code>make lint\nmake pre-commit\n</code></pre> <p>Enable hooks with:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"development/#containers","title":"\ud83d\udc33 Containers","text":"<p>Build and run with Podman or Docker:</p> <pre><code>make podman            # build production image\nmake podman-run-ssl    # run with self-signed TLS at https://localhost:4444\n</code></pre>"},{"location":"development/#authentication","title":"\ud83d\udd10 Authentication","text":"<p>Admin UI and API are protected by Basic Auth or JWT.</p> <p>To generate a JWT token:</p> <pre><code>export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 0 --secret my-test-key)\necho $MCPGATEWAY_BEARER_TOKEN\n</code></pre> <p>Then test:</p> <pre><code>curl -k -sX GET \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  https://localhost:4444/tools | jq\n</code></pre>"},{"location":"development/#configuration","title":"\ud83d\udce6 Configuration","text":"<p>Edit <code>.env</code> or set environment variables. A complete list is documented in the README.</p> <p>Use:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Key configs include:</p> Variable Purpose <code>DATABASE_URL</code> Database connection <code>JWT_SECRET_KEY</code> Signing key for JWTs <code>DEV_MODE=true</code> Enables hot reload and debug <code>CACHE_TYPE=memory</code> Options: memory, redis, none"},{"location":"development/#contribution-tips","title":"\ud83d\udea7 Contribution Tips","text":"<ul> <li>Pick a <code>good first issue</code></li> <li>Read the <code>CONTRIBUTING.md</code></li> <li>Fork, branch, commit with purpose</li> <li>Submit PRs against <code>main</code> with clear titles and linked issues</li> </ul>"},{"location":"development/#cicd","title":"\u2705 CI/CD","text":"<p>GitHub Actions enforce:</p> <ul> <li>CodeQL security scanning</li> <li>Pre-commit linting</li> <li>Dependency audits</li> <li>Docker image builds</li> </ul> <p>CI configs live in <code>.github/workflows/</code>.</p>"},{"location":"development/building/","title":"Building Locally","text":"<p>Follow these instructions to set up your development environment, build the gateway from source, and run it interactively.</p>"},{"location":"development/building/#prerequisites","title":"\ud83e\udde9 Prerequisites","text":"<ul> <li>Python \u2265 3.11</li> <li><code>make</code></li> <li>(Optional) Docker or Podman for container builds</li> </ul>"},{"location":"development/building/#one-liner-setup-recommended","title":"\ud83d\udd27 One-Liner Setup (Recommended)","text":"<pre><code>make venv install-dev serve\n</code></pre> <p>This will:</p> <ol> <li>Create a virtual environment in <code>.venv/</code></li> <li>Install Python dependencies (including dev extras)</li> <li>Run the gateway using Gunicorn</li> </ol>"},{"location":"development/building/#manual-python-setup","title":"\ud83d\udc0d Manual Python Setup","text":"<pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install -e \".[dev]\"\n</code></pre> <p>This installs:</p> <ul> <li>Core app dependencies</li> <li>Dev tools (<code>ruff</code>, <code>black</code>, <code>mypy</code>, etc.)</li> <li>Test runners (<code>pytest</code>, <code>coverage</code>)</li> </ul>"},{"location":"development/building/#running-the-app","title":"\ud83d\ude80 Running the App","text":"<p>You can run the gateway with:</p> <pre><code>make serve         # production-mode (Gunicorn) on http://localhost:4444\nmake dev           # hot-reload (Uvicorn) on http://localhost:8000\nmake run           # wrapper over uvicorn; pass --reload to enable auto-reload\n./run.sh --reload  # equivalent of 'make run' with explicit flags\n</code></pre> <p>Use <code>make dev</code> during development for auto-reload on port 8000.</p>"},{"location":"development/building/#live-reload-tips","title":"\ud83d\udd04 Live Reload Tips","text":"<p>Ensure <code>RELOAD=true</code> and <code>DEV_MODE=true</code> are set in your <code>.env</code> during development.</p> <p>Also set:</p> <pre><code>DEBUG=true\nLOG_LEVEL=debug\n</code></pre>"},{"location":"development/building/#test-it","title":"\ud83e\uddea Test It","text":"<pre><code>curl http://localhost:4444/health\ncurl http://localhost:4444/tools\n</code></pre> <p>You should see <code>[]</code> or registered tools (once added).</p>"},{"location":"development/developer-onboarding/","title":"\u2705 Developer Onboarding Checklist","text":"<p>Follow this checklist to set up your development environment, verify all features, and ensure consistent onboarding across the MCP Gateway project.</p>"},{"location":"development/developer-onboarding/#environment-setup","title":"\ud83d\udee0 Environment Setup","text":"System prerequisites <ul> <li> Python \u2265 3.11</li> <li> Node.js and npm, npx (used for testing with <code>supergateway</code> and the HTML/JS Admin UI)</li> <li> Docker, Docker Compose, and Podman</li> <li> Make, GitHub CLI (<code>gh</code>), <code>curl</code>, <code>jq</code>, <code>openssl</code></li> <li> Optional: Visual Studio Code + Dev Containers extension (or WSL2 if on Windows) + Pyrefly</li> <li> Optional: On Windows, install the WSL and Remote Development extensions</li> </ul> Python tooling <ul> <li> <code>pip install --upgrade pip</code></li> <li> <code>uv</code> and <code>uvx</code> installed - install uv</li> <li> <code>.venv</code> created with <code>make venv install install-dev</code></li> </ul> Additional tools <ul> <li> <code>helm</code> installed for Kubernetes deployments (Helm install docs)</li> <li> Security tools in <code>$PATH</code>: <code>hadolint</code>, <code>dockle</code>, <code>trivy</code>, <code>osv-scanner</code></li> </ul> Useful VS Code extensions <ul> <li> Python, Pylance</li> <li> YAML, Even Better TOML</li> <li> Docker, Dev Containers (useful on Windows)</li> </ul> GitHub setup <ul> <li> GitHub email configured in <code>git config</code></li> <li> See GitHub config guide</li> </ul> .env configuration <ul> <li> Copy <code>.env.example</code> to <code>.env</code></li> <li> Set various env variables, such as:<ul> <li><code>JWT_SECRET_KEY</code></li> <li><code>BASIC_AUTH_PASSWORD</code></li> </ul> </li> </ul>"},{"location":"development/developer-onboarding/#makefile-targets","title":"\ud83d\udd27 Makefile Targets","text":"Local setup <ul> <li> <code>make check-env</code> (validates .env is complete)</li> <li> <code>make venv install install-dev serve</code></li> <li> <code>make smoketest</code> runs and passes</li> </ul> Container builds <ul> <li> Docker: <code>make docker-prod docker-run-ssl-host compose-up</code></li> <li> Podman: <code>make podman podman-prod podman-run-ssl-host</code></li> </ul> Packaging <ul> <li> <code>make dist verify</code> builds packages</li> <li> <code>make devpi-install devpi-init devpi-start devpi-setup-user devpi-upload devpi-test</code></li> <li> Install and test <code>mcpgateway</code> CLI locally</li> </ul> Minikube &amp; Helm <ul> <li> <code>make helm-install minikube-install minikube-start minikube-k8s-apply helm-package helm-deploy</code></li> <li> See minikube deployment</li> </ul>"},{"location":"development/developer-onboarding/#testing","title":"\ud83e\uddea Testing","text":"Code quality <ul> <li> <code>make lint</code>, <code>make lint-web</code></li> <li> <code>make shell-linters-install</code>, <code>make shell-lint</code></li> <li> <code>make hadolint</code> (Dockerfile linting)</li> </ul> Unit tests <ul> <li> <code>make test</code> passes all cases</li> </ul>"},{"location":"development/developer-onboarding/#security","title":"\ud83d\udd10 Security","text":"Vulnerability scans <ul> <li> Run:     <pre><code>make hadolint dockle osv-scan trivy pip-audit\n</code></pre></li> </ul> SonarQube analysis <ul> <li> <code>make sonar-up-docker</code></li> <li> <code>make sonar-submit-docker</code> - ensure no critical violations</li> </ul>"},{"location":"development/developer-onboarding/#jwt-authentication","title":"\ud83d\udd11 JWT Authentication","text":"Generate and use a Bearer token <ul> <li> <p> Export a token with:     <pre><code>export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 0 --secret my-test-key)\n</code></pre></p> </li> <li> <p> Verify authenticated API access:     <pre><code>curl -k -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" https://localhost:4444/version | jq\n</code></pre></p> </li> </ul>"},{"location":"development/developer-onboarding/#client-integration","title":"\ud83e\udd16 Client Integration","text":"Run wrapper and test transports <ul> <li> Run: <code>python3 -m mcpgateway.wrapper</code> (stdio support)</li> <li> Test transports:<ul> <li>Streamable HTTP</li> <li>Server-Sent Events (SSE)</li> </ul> </li> <li> Optional: Integrate with Claude, Copilot, Continue (usage guide)</li> </ul>"},{"location":"development/developer-onboarding/#api-testing","title":"\ud83e\udded API Testing","text":"Authentication required <ul> <li> Unauthenticated:     <pre><code>curl http://localhost:4444/tools\n# -&gt; should return 401 Unauthorized\n</code></pre></li> <li> Authenticated:     <pre><code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/version | jq\n</code></pre></li> </ul> Endpoint coverage <ul> <li> Confirm key routes:<ul> <li><code>/version</code></li> <li><code>/health</code></li> <li><code>/tools</code></li> <li><code>/servers</code></li> <li><code>/resources</code></li> <li><code>/prompts</code></li> <li><code>/gateways</code></li> </ul> </li> <li> Browse Redoc docs</li> </ul>"},{"location":"development/developer-onboarding/#admin-ui","title":"\ud83d\udda5 Admin UI","text":"Login and diagnostics <ul> <li> Navigate to <code>/admin</code></li> <li> Log in with Basic Auth credentials from <code>.env</code></li> <li> <code>/version</code> shows healthy DB and Redis</li> </ul> CRUD verification <ul> <li> Create / edit / delete:<ul> <li>Servers</li> <li>Tools</li> <li>Resources</li> <li>Prompts</li> <li>Gateways</li> </ul> </li> <li> Toggle active/inactive switches</li> <li> JWT stored in <code>HttpOnly</code> cookie, no errors in DevTools Console</li> </ul> Metrics <ul> <li> Confirm latency and error rate display under load</li> </ul>"},{"location":"development/developer-onboarding/#documentation","title":"\ud83d\udcda Documentation","text":"Build and inspect docs <ul> <li> <code>cd docs &amp;&amp; make venv serve</code></li> <li> Open http://localhost:8000</li> <li> Confirm:<ul> <li><code>.pages</code> ordering</li> <li>nav structure</li> <li>working images</li> <li>Mermaid diagrams</li> </ul> </li> </ul> Read and understand <ul> <li> <code>README.md</code> in root</li> <li> Official docs site</li> <li> MkDocs Admonitions guide</li> </ul>"},{"location":"development/developer-onboarding/#final-review","title":"\u2705 Final Review","text":"Ready to contribute <ul> <li> All items checked</li> <li> PR description links to this checklist</li> <li> Stuck? Open a discussion or issue</li> </ul>"},{"location":"development/developer-workstation/","title":"Developer Workstation","text":"<p>This guide helps you to set up your local environment for contributing to the Model Context Protocol (MCP) Gateway. It provides detailed instructions for tooling requirements, OS-specific notes, common pitfalls, and commit signing practices.</p>"},{"location":"development/developer-workstation/#tooling-requirements","title":"Tooling Requirements","text":"<ul> <li>Python (&gt;= 3.10)<ul> <li>Download from python.org or use your package manager (e.g., <code>brew install python</code> on macOS, <code>sudo apt-get install python3</code> on Ubuntu).</li> <li>Verify: <code>python3 --version</code>.</li> </ul> </li> <li>Docker or Podman<ul> <li>Docker: Install <code>docker.io</code>, <code>buildx</code>, and <code>docker-compose v2</code>.<ul> <li>Docker Desktop for macOS/Windows.</li> <li>Linux: <code>sudo apt-get install docker.io docker-buildx-plugin docker-compose-plugin</code> (Debian/Ubuntu) or <code>sudo dnf install docker docker-buildx docker-compose</code> (Fedora).</li> </ul> </li> <li>Podman: Install Podman Desktop for a rootless alternative.</li> <li>Verify: <code>docker --version</code> or <code>podman --version</code>.</li> </ul> </li> <li>Permissions Setup<ul> <li>Docker: Add your user to the <code>docker</code> group: <code>sudo usermod -aG docker $USER</code>, then log out and back in (Linux). Restart Docker Desktop (Windows/macOS).</li> <li>Podman: Configure rootless mode with <code>podman system service</code>.</li> </ul> </li> <li>Docker Compose or Compatible Wrapper<ul> <li>Included with Docker Desktop or as <code>docker-compose-plugin</code>.</li> <li>For Podman: <code>pip install podman-compose</code>.</li> <li>Verify: <code>docker compose version</code> or <code>podman-compose --version</code>.</li> </ul> </li> <li>GNU Make<ul> <li>macOS: <code>brew install make</code>.</li> <li>Linux: <code>sudo apt-get install make</code> or <code>sudo dnf install make</code>.</li> <li>Windows: Install via Chocolatey (<code>choco install make</code>) or use WSL2.</li> <li>Verify: <code>make --version</code>.</li> </ul> </li> <li>(Optional) uv, ruff, mypy, isort<ul> <li>Install: <code>pip install uv ruff mypy isort</code>.</li> <li>Usage: Run <code>ruff check .</code> or <code>mypy .</code> for linting/type checking.</li> </ul> </li> <li>Node.js and npm (for UI linters)<ul> <li>Install from nodejs.org.</li> <li>Verify: <code>node --version</code> and <code>npm --version</code>.</li> <li>Install linters: <code>npm install -g eslint stylelint</code>.</li> </ul> </li> <li>(Optional)Visual Studio Code and useful plugins<ul> <li>Download from code.visualstudio.com.</li> </ul> </li> </ul>"},{"location":"development/developer-workstation/#os-specific-setup","title":"OS-Specific Setup","text":""},{"location":"development/developer-workstation/#macos","title":"macOS","text":"<ul> <li>Installation:<ul> <li>Install Homebrew: <code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</code>.</li> <li>Run: <code>brew install python docker make node</code>.</li> </ul> </li> <li>Apple Silicon: Use Docker Desktop with ARM64 support. Homebrew handles architecture natively.</li> <li>Troubleshooting: Ensure Rosetta 2 is installed for Intel-based tools if needed (<code>softwareupdate --install-rosetta</code>).</li> </ul>"},{"location":"development/developer-workstation/#linux","title":"Linux","text":"<ul> <li>Installation:<ul> <li>Debian/Ubuntu: <code>sudo apt-get update &amp;&amp; sudo apt-get install python3 docker.io docker-buildx-plugin docker-compose-plugin make nodejs npm</code>.</li> <li>Fedora: <code>sudo dnf install python3 docker docker-buildx docker-compose make nodejs npm</code>.</li> </ul> </li> <li>Permissions: Add user to <code>docker</code> group: <code>sudo usermod -aG docker $USER</code>, then reboot.</li> <li>Troubleshooting: Use <code>systemctl start docker</code> if the service isn't running.</li> </ul>"},{"location":"development/developer-workstation/#windows","title":"Windows","text":"<ul> <li>Recommended: WSL2<ul> <li>Install WSL2 and Ubuntu: <code>wsl --install</code>.</li> <li>Install Docker Desktop with WSL2 integration.</li> </ul> </li> <li>File Paths and Volume Mounting<ul> <li>Use forward slashes (e.g., <code>/f/All/ibm/mcp-forge/mcp-context-forge</code>).</li> <li>Avoid spaces/special characters; use absolute paths in <code>docker run -v</code>.</li> </ul> </li> <li>Podman in WSL2<ul> <li>Install: <code>sudo apt-get install podman</code> in WSL2.</li> <li>Port exposure: Use <code>podman system service</code> and configure firewall (<code>sudo ufw allow 4444</code>).</li> </ul> </li> <li>Windows Terminal<ul> <li>Install from Microsoft Store. set WSL2 as default profile.</li> </ul> </li> <li>Make Alternatives<ul> <li>Use WSL2's <code>make</code> or install via Chocolatey (<code>choco install make</code>).</li> </ul> </li> </ul>"},{"location":"development/developer-workstation/#common-gotchas","title":"Common Gotchas","text":""},{"location":"development/developer-workstation/#docker-socket-permissions","title":"Docker Socket Permissions","text":"<ul> <li>Problem: You may encounter \"permission denied while connecting to the Docker daemon\" if your user lacks access to the Docker socket.</li> <li>Fix:<ul> <li>Linux: Add your user to the <code>docker</code> group with <code>sudo usermod -aG docker $USER</code>, then log out and log back in. Verify with <code>docker ps</code>.</li> <li>Windows/macOS: Restart Docker Desktop from the system tray or settings menu.</li> </ul> </li> <li>Troubleshooting: If the issue persists, ensure the Docker service is running (<code>systemctl status docker</code> on Linux) or reinstall Docker Desktop.</li> </ul>"},{"location":"development/developer-workstation/#venv-activation-across-shells","title":".venv Activation Across Shells","text":"<ul> <li>Problem: The virtual environment (<code>.venv</code>) may not activate automatically when opening new terminal sessions.</li> <li>Fix:<ul> <li>Activate: Use <code>source .venv/bin/activate</code> (Linux/macOS) or <code>.venv\\Scripts\\activate</code> (Windows) for each session.</li> <li>Persist: Add to your shell profile (e.g., <code>echo \"source ./.venv/bin/activate\" &gt;&gt; ~/.bashrc</code> for Bash on Linux). Replace <code>.</code> with the relative path to your <code>.venv</code> if different.</li> </ul> </li> <li>Troubleshooting: Verify activation with <code>which python</code> (should point to <code>.venv/bin/python</code>); deactivate with <code>deactivate</code> if needed.</li> </ul>"},{"location":"development/developer-workstation/#port-4444-already-in-use","title":"Port 4444 Already in Use","text":"<ul> <li>Problem: Port 4444, used by the MCP Gateway and MkDocs, may be occupied by another process, causing conflicts.</li> <li>Fix:<ul> <li>Check: Run <code>netstat -aon | findstr :4444</code> (Windows) or <code>ss -tuln | grep 4444</code> (Linux) to identify the process ID (PID).</li> <li>Resolve: Use a different port for MkDocs with <code>mkdocs serve --dev-addr=127.0.0.1:8001</code>, or stop the conflicting process (e.g., <code>taskkill /PID &lt;PID&gt;</code> on Windows or <code>kill &lt;PID&gt;</code> on Linux).</li> </ul> </li> <li>Troubleshooting: If unsure which process to stop, check with <code>docker ps</code> (if a container) or review running services.</li> </ul>"},{"location":"development/developer-workstation/#snippet-examples","title":"Snippet Examples","text":""},{"location":"development/developer-workstation/#set-up-and-serve-documentation","title":"Set Up and Serve Documentation","text":"<pre><code># Create and activate virtual environment\nmake venv\nsource .venv/bin/activate  # Linux/macOS\n.venv\\Scripts\\activate     # Windows\n\n# Install dependencies\nmake install\n\n# Serve documentation locally\nmake serve\n</code></pre>"},{"location":"development/developer-workstation/#signing-commits","title":"Signing commits","text":"<p>To ensure commit integrity and comply with the DCO, sign your commits with a <code>Signed-off-by</code> trailer. Configure your Git settings:</p> <pre><code># ~/.gitconfig\n[user]\n    name = Your Name\n    email = your-exail@example.com\n\n[init]\n    defaultBranch = main  # Use 'main' instead of 'master' when creating new repos\n\n[core]\n    autocrlf = input       # On commit: convert CRLF to LF (Windows \u2192 Linux)\n                           # On checkout: leave LF alone (no conversion)\n    eol = lf               # Ensure all files in the repo use LF internally\n\n[alias]\n    cm = commit -s -m      # Short alias: 'git cm \"message\"' creates signed-off commit\n    ca = commit --amend -s # Amend last commit and ensure it has a Signed-off-by trailer\n\n[commit]\n    template = ~/.git-commit-template\n</code></pre> <ul> <li>Setup: Replace Your Name and your-exail@example.com with your details.</li> <li>Signing: Use git cm \"Your message\" to create signed commits automatically with the configured alias.</li> <li>Sign-off: Use git commit -s -m \"Your message\" for manual signed commits without the alias.</li> </ul>"},{"location":"development/doctest-coverage/","title":"Doctest Coverage","text":"<p>This page documents the comprehensive doctest coverage implementation in MCP Context Forge, which ensures that all code examples in documentation are tested and verified automatically.</p>"},{"location":"development/doctest-coverage/#overview","title":"Overview","text":"<p>MCP Context Forge implements comprehensive doctest coverage across all modules to ensure:</p> <ul> <li>Code Quality: All documented examples are tested and verified</li> <li>Documentation Accuracy: Examples in docstrings are always up-to-date with actual code behavior</li> <li>Developer Experience: Developers can run examples directly from documentation</li> <li>Regression Prevention: Changes that break documented behavior are caught early</li> </ul>"},{"location":"development/doctest-coverage/#what-is-doctest","title":"What is Doctest?","text":"<p>Doctest is a Python testing framework that extracts interactive examples from docstrings and runs them as tests. It's built into Python's standard library and provides:</p> <ul> <li>Inline Testing: Examples in docstrings are automatically tested</li> <li>Documentation Verification: Ensures examples match actual code behavior</li> <li>Google Style Support: Works seamlessly with Google-style docstrings</li> <li>CI/CD Integration: Can be integrated into automated testing pipelines</li> </ul>"},{"location":"development/doctest-coverage/#coverage-status","title":"Coverage Status","text":""},{"location":"development/doctest-coverage/#current-coverage","title":"Current Coverage","text":"Module Category Status Coverage Transport Modules \u2705 Complete 100% Utility Functions \u2705 Complete 100% Validation Modules \u2705 Complete 100% Configuration \u2705 Complete 100% Service Classes \ud83d\udd04 In Progress ~60% Complex Classes \ud83d\udd04 In Progress ~40%"},{"location":"development/doctest-coverage/#modules-with-full-coverage","title":"Modules with Full Coverage","text":"<ul> <li><code>mcpgateway/transports/base.py</code> - Base transport interface</li> <li><code>mcpgateway/transports/stdio_transport.py</code> - Standard I/O transport</li> <li><code>mcpgateway/transports/sse_transport.py</code> - Server-Sent Events transport</li> <li><code>mcpgateway/transports/websocket_transport.py</code> - WebSocket transport</li> <li><code>mcpgateway/transports/streamablehttp_transport.py</code> - Streamable HTTP transport</li> <li><code>mcpgateway/transports/__init__.py</code> - Transport module exports</li> <li><code>mcpgateway/utils/create_slug.py</code> - Slug generation utilities</li> <li><code>mcpgateway/validation/jsonrpc.py</code> - JSON-RPC validation</li> <li><code>mcpgateway/config.py</code> - Configuration management</li> </ul>"},{"location":"development/doctest-coverage/#running-doctests","title":"Running Doctests","text":""},{"location":"development/doctest-coverage/#local-development","title":"Local Development","text":"<pre><code># Run all doctests\nmake doctest\n\n# Run with verbose output\nmake doctest-verbose\n\n# Generate coverage report\nmake doctest-coverage\n\n# Check coverage percentage (fails if &lt; 100%)\nmake doctest-check\n</code></pre>"},{"location":"development/doctest-coverage/#individual-modules","title":"Individual Modules","text":"<pre><code># Test a specific module\npython -m doctest mcpgateway/transports/base.py -v\n\n# Test with programmatic approach\npython -c \"import doctest; doctest.testmod(mcpgateway.transports.base)\"\n</code></pre>"},{"location":"development/doctest-coverage/#cicd-integration","title":"CI/CD Integration","text":"<p>Doctests are automatically run in the GitHub Actions pipeline:</p> <pre><code># .github/workflows/pytest.yml\n- name: Run doctests\n  run: |\n    pytest --doctest-modules mcpgateway/ -v\n</code></pre>"},{"location":"development/doctest-coverage/#doctest-standards","title":"Doctest Standards","text":""},{"location":"development/doctest-coverage/#google-docstring-format","title":"Google Docstring Format","text":"<p>All doctests follow the Google docstring format with an \"Examples:\" section:</p> <pre><code>def create_slug(text: str) -&gt; str:\n    \"\"\"Convert text to URL-friendly slug.\n\n    Args:\n        text: Input text to convert\n\n    Returns:\n        URL-friendly slug string\n\n    Examples:\n        &gt;&gt;&gt; create_slug(\"Hello World!\")\n        'hello-world'\n\n        &gt;&gt;&gt; create_slug(\"Special@#$Characters\")\n        'special-characters'\n\n        &gt;&gt;&gt; create_slug(\"  Multiple   Spaces  \")\n        'multiple-spaces'\n    \"\"\"\n    # Implementation here\n</code></pre>"},{"location":"development/doctest-coverage/#best-practices","title":"Best Practices","text":"<ol> <li>Comprehensive Examples: Cover normal cases, edge cases, and error conditions</li> <li>Async Support: Use <code>asyncio.run()</code> for async function examples</li> <li>Mock Objects: Use <code>unittest.mock</code> for external dependencies</li> <li>Clear Expectations: Make expected output obvious and unambiguous</li> <li>Error Testing: Include examples that demonstrate error handling</li> </ol>"},{"location":"development/doctest-coverage/#async-function-examples","title":"Async Function Examples","text":"<pre><code>async def connect(self) -&gt; None:\n    \"\"\"Set up transport connection.\n\n    Examples:\n        &gt;&gt;&gt; transport = MyTransport()\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; asyncio.run(transport.connect())\n        &gt;&gt;&gt; transport.is_connected()\n        True\n    \"\"\"\n</code></pre>"},{"location":"development/doctest-coverage/#mock-usage-examples","title":"Mock Usage Examples","text":"<pre><code>def send_message(self, message: Dict[str, Any]) -&gt; None:\n    \"\"\"Send message over transport.\n\n    Examples:\n        &gt;&gt;&gt; from unittest.mock import Mock, AsyncMock\n        &gt;&gt;&gt; mock_transport = Mock()\n        &gt;&gt;&gt; mock_transport.send = AsyncMock()\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; asyncio.run(mock_transport.send({\"test\": \"data\"}))\n        &gt;&gt;&gt; mock_transport.send.called\n        True\n    \"\"\"\n</code></pre>"},{"location":"development/doctest-coverage/#pre-commit-integration","title":"Pre-commit Integration","text":"<p>Doctests are integrated into the pre-commit workflow:</p> <pre><code># .pre-commit-config.yaml\n- repo: local\n  hooks:\n    - id: doctest\n      name: Doctest\n      entry: pytest --doctest-modules mcpgateway/\n      language: system\n      types: [python]\n</code></pre> <p>This ensures that: - All doctests pass before commits are allowed - Documentation examples are always verified - Code quality is maintained automatically</p>"},{"location":"development/doctest-coverage/#coverage-metrics","title":"Coverage Metrics","text":""},{"location":"development/doctest-coverage/#current-statistics","title":"Current Statistics","text":"<ul> <li>Total Functions/Methods: ~200</li> <li>Functions with Doctests: ~150</li> <li>Coverage Percentage: ~75%</li> <li>Test Examples: ~500+</li> </ul>"},{"location":"development/doctest-coverage/#coverage-goals","title":"Coverage Goals","text":"<ul> <li>Phase 1: \u2705 Infrastructure setup (100%)</li> <li>Phase 2: \u2705 Utility modules (100%)</li> <li>Phase 3: \u2705 Configuration and schemas (100%)</li> <li>Phase 4: \u2705 Service classes (100%)</li> <li>Phase 5: \u2705 Transport modules (100%)</li> <li>Phase 6: \ud83d\udd04 Documentation integration (100%)</li> </ul>"},{"location":"development/doctest-coverage/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"development/doctest-coverage/#adding-doctests","title":"Adding Doctests","text":"<p>When adding new functions or methods:</p> <ol> <li>Include Examples: Always add an \"Examples:\" section to docstrings</li> <li>Test Edge Cases: Cover normal usage, edge cases, and error conditions</li> <li>Use Google Format: Follow the established Google docstring format</li> <li>Async Support: Use <code>asyncio.run()</code> for async functions</li> <li>Mock Dependencies: Use mocks for external dependencies</li> </ol>"},{"location":"development/doctest-coverage/#example-template","title":"Example Template","text":"<pre><code>def new_function(param1: str, param2: int) -&gt; bool:\n    \"\"\"Brief description of what the function does.\n\n    Longer description explaining the function's purpose, behavior,\n    and any important implementation details.\n\n    Args:\n        param1: Description of first parameter\n        param2: Description of second parameter\n\n    Returns:\n        Description of return value\n\n    Raises:\n        ValueError: When parameters are invalid\n\n    Examples:\n        &gt;&gt;&gt; # Normal usage\n        &gt;&gt;&gt; new_function(\"test\", 42)\n        True\n\n        &gt;&gt;&gt; # Edge case\n        &gt;&gt;&gt; new_function(\"\", 0)\n        False\n\n        &gt;&gt;&gt; # Error condition\n        &gt;&gt;&gt; try:\n        ...     new_function(\"test\", -1)\n        ... except ValueError as e:\n        ...     print(\"Expected error:\", str(e))\n        Expected error: Invalid parameter\n    \"\"\"\n</code></pre>"},{"location":"development/doctest-coverage/#running-tests","title":"Running Tests","text":"<p>Before submitting a PR:</p> <pre><code># Run all tests including doctests\nmake test\n\n# Run only doctests\nmake doctest\n\n# Check linting\nmake flake8\n\n# Run pre-commit hooks\nmake pre-commit\n</code></pre>"},{"location":"development/doctest-coverage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/doctest-coverage/#common-issues","title":"Common Issues","text":"<ol> <li>Async Functions: Remember to use <code>asyncio.run()</code> in examples</li> <li>Mock Objects: Use appropriate mocks for external dependencies</li> <li>Import Issues: Ensure all imports are available in doctest context</li> <li>Whitespace: Be careful with trailing whitespace in expected output</li> </ol>"},{"location":"development/doctest-coverage/#debugging-doctests","title":"Debugging Doctests","text":"<pre><code># Run with maximum verbosity\npython -m doctest module.py -v\n\n# Run specific function\npython -c \"import doctest; doctest.run_docstring_examples(function, globals())\"\n\n# Check for syntax errors\npython -m py_compile module.py\n</code></pre>"},{"location":"development/doctest-coverage/#benefits","title":"Benefits","text":""},{"location":"development/doctest-coverage/#for-developers","title":"For Developers","text":"<ul> <li>Self-Documenting Code: Examples show exactly how to use functions</li> <li>Regression Testing: Changes that break documented behavior are caught</li> <li>Learning Tool: New developers can run examples to understand code</li> <li>Quality Assurance: Ensures documentation stays accurate</li> </ul>"},{"location":"development/doctest-coverage/#for-users","title":"For Users","text":"<ul> <li>Reliable Examples: All examples in documentation are tested</li> <li>Up-to-Date Documentation: Examples reflect actual code behavior</li> <li>Interactive Learning: Can copy-paste examples and run them</li> <li>Confidence: Know that documented behavior is verified</li> </ul>"},{"location":"development/doctest-coverage/#for-maintainers","title":"For Maintainers","text":"<ul> <li>Automated Testing: Doctests run automatically in CI/CD</li> <li>Quality Gates: Pre-commit hooks prevent broken examples</li> <li>Coverage Tracking: Clear metrics on documentation quality</li> <li>Maintenance: Easier to keep documentation in sync with code</li> </ul>"},{"location":"development/doctest-coverage/#future-enhancements","title":"Future Enhancements","text":""},{"location":"development/doctest-coverage/#planned-improvements","title":"Planned Improvements","text":"<ol> <li>Coverage Reporting: Generate detailed coverage reports</li> <li>Performance Testing: Add performance benchmarks to examples</li> <li>Integration Testing: More complex multi-module examples</li> <li>Visual Documentation: Generate visual documentation from doctests</li> </ol>"},{"location":"development/doctest-coverage/#tools-and-integration","title":"Tools and Integration","text":"<ul> <li>Coverage.py: Track doctest coverage metrics</li> <li>pytest-doctestplus: Enhanced doctest features</li> <li>sphinx-doctest: Integration with Sphinx documentation</li> <li>doctest-ellipsis: Support for ellipsis in expected output</li> </ul>"},{"location":"development/doctest-coverage/#related-documentation","title":"Related Documentation","text":"<ul> <li>Development Guide - General development information</li> <li>Testing Guide - Testing strategies and tools</li> <li>Contributing Guidelines - How to contribute to the project</li> <li>Makefile Targets - Available make targets including doctest commands</li> </ul>"},{"location":"development/documentation/","title":"Writing &amp; Publishing Documentation","text":"<p>Follow this guide when you need to add or update markdown pages under <code>docs/</code> and preview the documentation locally.</p>"},{"location":"development/documentation/#prerequisites","title":"\ud83e\udde9 Prerequisites","text":"<ul> <li>Python \u2265 3.11 (only for the initial virtual env - not required if you already have one)</li> <li><code>make</code> (GNU Make 4+)</li> <li>(First-time only) <code>mkdocs-material</code> and plugins are installed automatically by the docs <code>Makefile</code>.</li> <li>One-time GitHub setup, e.g. gitconfig setup</li> </ul>"},{"location":"development/documentation/#one-liner-for-a-live-preview","title":"\u26a1 One-liner for a live preview","text":"<pre><code>cd docs\nmake venv     # First-time only, installs dependencies into a venv under `~/.venv/mcpgateway-docs`\nmake serve    # http://localhost:8000 (auto-reload on save)\n</code></pre> <p>The <code>serve</code> target automatically creates a project-local virtual environment (under <code>~/.venv/mcpgateway-docs</code>) the first time you run it and installs all doc dependencies before starting MkDocs in live-reload mode.</p>"},{"location":"development/documentation/#folder-layout","title":"\ud83d\udcc2 Folder layout","text":"<pre><code>repo-root/\n\u251c\u2500 docs/              # MkDocs project (DO NOT put .md files here!)\n\u2502  \u251c\u2500 docs/           # &lt;-- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6  place Markdown pages here\n\u2502  \u2502  \u2514\u2500 ...\n\u2502  \u251c\u2500 mkdocs.yml      # MkDocs config &amp; navigation\n\u2502  \u2514\u2500 Makefile        # build / serve / clean targets\n\u2514\u2500 Makefile           # repo-wide helper targets (lint, spellcheck, ...)\n</code></pre> <ul> <li>Add new pages inside <code>docs/docs/</code> - organise them in folders that make sense for navigation.</li> <li>Update navigation: edit <code>.pages</code> for your section so your page shows up in the left-hand nav.</li> </ul> <p>Tip: MkDocs Material auto-generates \"Edit this page\" links - keep file names lowercase-hyphen-case.</p>"},{"location":"development/documentation/#editing-tips","title":"\u270f\ufe0f Editing tips","text":"<ol> <li>Write in standard Markdown; we also support admonitions, call-outs, and Mermaid diagrams.</li> <li>Use relative links between pages: <code>[Gateway API](../api/index.md)</code>.</li> <li>For local images place them under <code>docs/docs/images/</code> and reference with <code>![](../images/example.png)</code>.</li> <li>Never edit <code>mkdocs.yml</code> - all nav structure is defined in <code>.pages</code> files (one per directory).</li> </ol>"},{"location":"development/documentation/#writing-docs","title":"\u270f\ufe0f Writing docs","text":"<p>Start each new Markdown file with a clear <code># Heading 1</code> title - this becomes the visible page title and is required for proper rendering in MkDocs.</p> <p>Follow the conventions and layout guidelines from the official MkDocs Material reference for callouts, tables, code blocks, and more. This ensures consistent formatting across the docs.</p> <p>Keep file names in <code>lowercase-hyphen-case.md</code> and use relative links when referencing other docs or images.</p>"},{"location":"development/documentation/#ordering-pages-with-pages","title":"\ud83d\uddc2\ufe0f Ordering pages with <code>.pages</code>","text":"<p>For directories that contain multiple Markdown files, we rely on the awesome-pages MkDocs plugin.</p> <p>Creating a <code>.pages</code> file inside a folder lets you:</p> <ul> <li>Set the section title (different from the folder name).</li> <li>Control the left-nav order without touching the root <code>mkdocs.yml</code>.</li> <li>Hide specific files from the navigation.</li> </ul> <p>We do not auto-generate the <code>nav:</code> structure - you must create <code>.pages</code> manually.</p> <p>Example - docs for the development section:</p> <pre><code># docs/docs/development/.pages\n# This file affects ONLY this folder and its sub-folders\n\n# Optional: override the title shown in the nav\n# title: Development Guide\n\nnav:\n  - index.md        # \u279f /development/ (landing page)\n  - github.md       # contribution workflow\n  - building.md     # local build guide\n  - packaging.md    # release packaging steps\n</code></pre> <p>Guidelines:</p> <ol> <li>Always include <code>index.md</code> first so the folder has a clean landing URL.</li> <li>List files in the exact order you want them to appear; anything omitted is still built but won't show in the nav.</li> <li>You can nest <code>.pages</code> files in deeper folders - rules apply hierarchically.</li> <li>Avoid circular references: do not include files from other directories.</li> </ol> <p>After saving a <code>.pages</code> file, simply refresh the browser running <code>make serve</code>; MkDocs will hot-reload and the navigation tree will update instantly.</p>"},{"location":"development/documentation/#pre-commit-checklist","title":"\u2705 Pre-commit checklist","text":"<p>From the repository root run all lint &amp; QA checks before pushing:</p> <pre><code>make spellcheck           # Spell-check the codebase\nmake spellcheck-sort      # Sort local spellcheck dictionary\nmake markdownlint         # Lint Markdown files with markdownlint (requires markdownlint-cli)\nmake pre-commit           # Run all configured pre-commit hooks\n</code></pre> <p>These targets are defined in the top-level <code>Makefile</code>. Make sure you're in the repository root when running these targets.</p>"},{"location":"development/documentation/#cleaning-up","title":"\ud83e\uddf9 Cleaning up","text":"<pre><code>cd docs\nmake clean       # remove generated site/\nmake git-clean   # remove ignored files per .gitignore\nmake git-scrub   # blow away *all* untracked files - use with care!\n</code></pre>"},{"location":"development/documentation/#rebuilding-the-static-site","title":"\ud83d\udd04 Rebuilding the static site","text":"<p>This is not necessary, as this will be done automatically when publishing.</p> <pre><code>cd docs\nmake build    # outputs HTML into docs/site/\n</code></pre> <p>The <code>build</code> target produces a fully-static site (used by CI for docs previews and by GitHub Pages).</p>"},{"location":"development/documentation/#publishing-ci","title":"\ud83d\udce4 Publishing (CI)","text":"<p>Docs are tested, but not deployed automatically by GitHub Actions on every push to <code>main</code>. The workflow runs <code>cd docs &amp;&amp; make build</code>.</p> <p>Publishing is done manually by repo maintainers with <code>make deploy</code> which publishes the generated site to GitHub Pages.</p>"},{"location":"development/documentation/#related-reading","title":"\ud83d\udd17 Related reading","text":"<ul> <li>Building Locally - how to run the gateway itself</li> </ul>"},{"location":"development/github/","title":"GitHub Workflow Guide","text":"<p>This mini-handbook covers the daily Git tasks we use on mcp-context-forge - from the first clone to the last merge.</p>"},{"location":"development/github/#1-one-time-setup","title":"1. One-Time Setup","text":"<pre><code># Fork on GitHub from https://github.com/IBM/mcp-context-forge.git first, then:\ngit clone https://github.com/&lt;your-user&gt;/mcp-context-forge.git\ncd mcp-context-forge\n\n# Add the canonical repo so you can pull upstream changes\ngit remote add upstream https://github.com/IBM/mcp-context-forge.git\ngit remote -v   # sanity-check remotes\n</code></pre>"},{"location":"development/github/#15-installing-github-cli-gh","title":"1.5 Installing GitHub CLI (<code>gh</code>)","text":""},{"location":"development/github/#macos-homebrew","title":"macOS (Homebrew)","text":"<pre><code>brew install gh\n</code></pre>"},{"location":"development/github/#windows-winget","title":"Windows (winget)","text":"<p>While you can run all this through Powershell, the recommended way to develop on Windows is through WSL2 and Visual Studio Code. The same steps as Ubuntu/Debian apply.</p> <pre><code>winget install GitHub.cli\n</code></pre>"},{"location":"development/github/#ubuntu-debian","title":"Ubuntu / Debian","text":"<pre><code>curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | \\\n  sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\nsudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg\n\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | \\\n  sudo tee /etc/apt/sources.list.d/github-cli.list\n\nsudo apt update\nsudo apt install gh\n</code></pre>"},{"location":"development/github/#fedora-rhel","title":"Fedora / RHEL","text":"<pre><code>sudo dnf install 'https://github.com/cli/cli/releases/download/v2.74.0/gh_2.74.0_linux_amd64.rpm'\n</code></pre> <p>Tip: Replace the version number (<code>2.74.0</code>) with the latest release from https://github.com/cli/cli/releases.</p>"},{"location":"development/github/#first-time-authentication","title":"First-time authentication","text":"<pre><code>gh auth login             # follow the interactive prompts\n</code></pre> <p>Choose:</p> <ol> <li>GitHub.com</li> <li>HTTPS</li> <li>Either Paste an authentication token or Authorize in browser.</li> </ol>"},{"location":"development/github/#verify-configuration","title":"Verify configuration","text":"<pre><code>gh auth status            # should say \"Logged in to github.com as &lt;your-user&gt;\"\ngh repo view              # shows repo info if run inside a clone\n</code></pre>"},{"location":"development/github/#everyday-commands","title":"Everyday commands","text":"Command Purpose <code>gh pr checkout &lt;id&gt;</code> Fetch &amp; switch to a PR locally (used in \u00a74). <code>gh pr create -w</code> Create a PR and open it in the browser. <code>gh pr status</code> Show which PR is checked out and any requested reviews. <code>gh pr merge &lt;id&gt;</code> Squash / rebase / merge the PR from the terminal."},{"location":"development/github/#16-personal-git-configuration-recommended","title":"1.6 Personal Git Configuration (Recommended)","text":"<p>Setting a few global Git options makes everyday work friction-free and guarantees that every commit passes DCO checks.</p>"},{"location":"development/github/#161-commit-template","title":"1.6.1 Commit template","text":"<p>Create a single-line template that Git pre-pends to every commit message so you never forget the sign-off:</p> <pre><code>echo 'Signed-off-by: &lt;Your Name&gt; &lt;you@example.com&gt;' &gt; ~/.git-commit-template\n</code></pre>"},{"location":"development/github/#162-gitconfig-example","title":"1.6.2 <code>~/.gitconfig</code> example","text":"<p>Put this in <code>~/.gitconfig</code> (or append the bits you're missing):</p> <pre><code># ~/.gitconfig\n[user]\n    name = &lt;Your Name&gt;\n    email = &lt;you@example.com&gt;\n\n[init]\n    defaultBranch = main  # Use 'main' instead of 'master' when creating new repos\n\n[core]\n    autocrlf = input       # On commit: convert CRLF to LF (Windows \u2192 Linux)\n    eol = lf               # Ensure all files in the repo use LF internally\n\n[alias]\n    cm = commit -s -m      # `git cm \"message\"` \u2192 signed commit\n    ca = commit --amend -s # `git ca` \u2192 amend + sign-off\n\n[commit]\n    template = ~/.git-commit-template\n</code></pre> <p>Or run the one-liners:</p> <pre><code>git config --global user.name  \"Your Name\"\ngit config --global user.email \"you@example.com\"\ngit config --global alias.cm   \"commit -s -m\"\ngit config --global alias.ca   \"commit --amend -s\"\ngit config --global commit.template ~/.git-commit-template\n</code></pre> <p>Replace placeholders with your real details, and you're good to go.</p>"},{"location":"development/github/#2-staying-in-sync-with-upstream","title":"2. Staying in Sync with Upstream","text":"<pre><code># From any branch:\ngit fetch upstream\ngit switch main                 # or master, depending on the project\ngit merge --ff-only upstream/main\n\ngit push origin main             # keep your fork up to date\n</code></pre>"},{"location":"development/github/#3-creating-your-own-work-branch","title":"3. Creating Your Own Work Branch","text":"<pre><code>git switch -c feat/my-great-idea\n# ...hack away...\ngit add .\n# Always sign your commits for DCO compliance:\ngit commit -s -m \"feat: explain context-merging algorithm\"\n\ngit push -u origin HEAD          # publishes the branch\n# Then open a Pull Request (PR) on GitHub.\n</code></pre> <p>Why <code>-s</code>? The <code>-s / --signoff</code> flag appends a <code>Signed-off-by: Your Name &lt;email&gt;</code> trailer that lets CI verify Developer Certificate of Origin (DCO) compliance.</p>"},{"location":"development/github/#4-fetching-reviewing-an-existing-pr","title":"4. Fetching &amp; Reviewing an Existing PR","text":""},{"location":"development/github/#41-with-plain-git-works-everywhere","title":"4.1 With Plain Git (works everywhere)","text":"<pre><code>git fetch upstream pull/29/head:pr-29   # Pull Request #29\ngit switch pr-29\n</code></pre>"},{"location":"development/github/#42-with-github-cli-fastest-if-installed","title":"4.2 With GitHub CLI (fastest if installed)","text":"<pre><code>gh pr checkout 29\n</code></pre>"},{"location":"development/github/#5-smoke-testing-every-pr-before-you-comment","title":"5. Smoke-Testing Every PR Before You Comment \ud83c\udf0b","text":"<p>Hard rule: No PR gets a \"Looks good to me\" without passing both the local and container builds below.</p>"},{"location":"development/github/#51-local-build-sqlite-self-signed-https","title":"5.1 Local build (SQLite + self-signed HTTPS)","text":"<pre><code>make venv install install-dev serve-ssl\n</code></pre> <ul> <li>Sets up a Python virtualenv</li> <li>Installs runtime + dev dependencies</li> <li>Runs the HTTPS dev server against SQLite</li> </ul>"},{"location":"development/github/#52-container-build-postgresql-redis","title":"5.2 Container build (PostgreSQL + Redis)","text":"<pre><code>make compose-up\n</code></pre> <ul> <li>Spins up the full Docker Compose stack</li> <li>Uses PostgreSQL for persistence and Redis for queueing</li> <li>Rebuilds images so you catch Docker-specific issues</li> </ul>"},{"location":"development/github/#53-gateway-jwt-local-api-access","title":"5.3 Gateway JWT (local API access)","text":"<p>Quickly confirm that authentication works and the gateway is healthy:</p> <pre><code>export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token -u admin --secret my-test-key)\ncurl -s -k -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" https://localhost:4444/health\n</code></pre> <p>Expected output:</p> <pre><code>{\"status\": \"ok\"}\n</code></pre> <p>If you see anything other than <code>{\"status\":\"ok\"}</code>, investigate before approving the PR.</p> <p>Quickly confirm that the MCP Gateway is configured with the correct database, and it is reachable:</p> <pre><code>curl -s -k -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" https://localhost:4444/version | jq\n</code></pre> <p>Then proceed to register an MCP Server under Gateways using the UI, ensuring that Tools work, creating a Virtual Server and testing that from UI, API and a MCP Client.</p> <p>These steps are described in Basic Testing.</p>"},{"location":"development/github/#54-run-the-automated-test-suite","title":"5.4 Run the automated test suite","text":"<pre><code>make test         # or `pytest` directly\n</code></pre> <p>All tests must pass locally. If you add or modify functionality, ensure new tests cover the change.</p>"},{"location":"development/github/#55-lint-static-analysis","title":"5.5 Lint &amp; static analysis","text":"<pre><code>make lint         # runs ruff, mypy, black --check, etc.\n</code></pre> <p>Code should come back clean. Fix any warnings before pushing.</p> <p>If any of the above steps fail, leave a review requesting fixes and paste the relevant logs inline or as a gist.</p>"},{"location":"development/github/#6-squashing-commits","title":"6. Squashing Commits \ud83e\udd5e","text":"<p>Keeping a clean, single-commit history per PR makes <code>git bisect</code> and blame easier.</p>"},{"location":"development/github/#61-squash-interactively-local-recommended","title":"6.1 Squash interactively (local, recommended)","text":"<pre><code># In your feature branch, before pushing OR after addressing review feedback:\n\ngit fetch upstream  # make sure refs are fresh\ngit rebase -i upstream/main\n</code></pre> <p>In the interactive list, mark the first commit as <code>pick</code> and every subsequent one as <code>squash</code> (or <code>fixup</code> for no extra message). Save &amp; quit; Git opens an editor so you can craft the final commit message-remember to keep the <code>Signed-off-by</code> line!</p> <p>If the branch is already on GitHub and you've squashed locally, force-push the updated, single-commit branch:</p> <pre><code>git push --force-with-lease\n</code></pre>"},{"location":"development/github/#62-squash-via-github-ui-simple-but-last-minute","title":"6.2 Squash via GitHub UI (simple, but last-minute)","text":"<ol> <li>In the PR, click \"Merge\" \u2192 \"Squash and merge.\"</li> <li>Tweak the commit title/description as needed.</li> <li>Ensure the <code>Signed-off-by:</code> trailer is present (GitHub adds it automatically if you enabled DCO in the repo).</li> </ol> <p>Use the UI method only if reviewers are done-every push re-triggers CI.</p>"},{"location":"development/github/#7-functional-code-review-checklist","title":"7. Functional &amp; Code Review Checklist","text":"Check Why it matters Does it build locally? Fastest signal that the code even compiles. Does it build in Docker? Catches missing OS packages or env-var mishaps. Unit tests green? Ensures regressions are caught immediately. No new lint errors? Keeps the CI pipeline and codebase clean. Commits squashed &amp; signed? One commit history + DCO compliance. Docs / comments updated? Future devs will thank you."},{"location":"development/github/#8-merging-the-pr","title":"8. Merging the PR","text":"<ul> <li>Squash-and-merge is the default merge strategy.</li> <li>Confirm the final commit message follows Conventional Commits and retains a <code>Signed-off-by:</code> trailer.</li> <li>GitHub automatically deletes the source branch after a successful merge-no manual cleanup required.</li> </ul> <p>Verify GitHub CI status checks</p> <p>Before requesting review, confirm that all required status checks on the PR page are green \u2705 (\"All checks have passed\"). You should now see something like:</p> <pre><code>Bandit / bandit (pull_request)                  \u2705  Successful in 21s\nBuild Python Package / build-package (3.10)     \u2705  Successful in 12s\nCode scanning results / Bandit                  \u2705  No new alerts in code changed by this pull request\nCode scanning results / Dockle                  \u2705  No new alerts in code changed by this pull request\nCode scanning results / Hadolint                \u2705  No new alerts in code changed by this pull request\nCode scanning results / Trivy                   \u2705  No new alerts in code changed by this pull request\nCodeQL Advanced / CodeQL (javascript-typescript)\u2705  Successful in 1m\nCodeQL Advanced / CodeQL (python)               \u2705  Successful in 1m\nDCO                                             \u2705  Passed\nDependency Review / dependency-review           \u2705  Successful in 4s\nSecure Docker Build / build-scan-sign           \u2705  Successful in 4m\nTravis CI - Branch                              \u2705  Build Passed\nTravis CI - Pull Request                        \u2705  Build Passed\n</code></pre> <p>If anything is red or still running, wait or push a fix in the same PR until every line is green. Ensure that a CODEOWNER is assigned to review the PR.</p> <p>Once the PR is merged, double-check that the CI/CD pipeline deploys the change to all environments without errors.</p> <p>If any of the above steps fail after the PR is merged or cannot deploy, leave a review requesting fixes and paste the relevant logs inline or as a gist.</p>"},{"location":"development/github/#9-cleaning-up-locally","title":"9. Cleaning Up Locally","text":"<p>After the PR is merged: * Switch back to the main branch * Delete the local feature branch * Prune deleted remote branches <pre><code>git switch main\ngit branch -D pr-29                # or the feature branch name (replace pr-29 with your branch name)\ngit fetch -p                       # prune remotes that GitHub deleted\n</code></pre> This removes references to remote branches that GitHub deleted after the merge. This keeps your local environment clean and up to date.</p>"},{"location":"development/github/#10-handy-git-aliases-optional","title":"10. Handy Git Aliases (Optional)","text":"<p><pre><code>git config --global alias.co checkout\ngit config --global alias.cm 'commit -s -m'\ngit config --global alias.ca 'commit --amend -s'\ngit config --global alias.rb \"rebase -i --autosquash\"\ngit config --global alias.pr '!f() { git fetch upstream pull/$1/head:pr-$1 &amp;&amp; git switch pr-$1; }; f'\n</code></pre> Now you can run <code>git pr 42</code> to fetch-and-switch to PR #42 in one go. These aliases are optional, but they save time and make Git commands easier to type.</p>"},{"location":"development/github/#11-troubleshooting-faq","title":"11. Troubleshooting FAQ","text":"Symptom Fix <code>error: cannot lock ref</code> Run <code>git gc --prune=now</code> and retry. <code>docker: no space left</code> <code>docker system prune -af &amp;&amp; docker volume prune</code> Unit tests hang on macOS Ensure you aren't on an Apple-Silicon image that needs platform flags."},{"location":"development/github/#happy-hacking","title":"Happy hacking! \ud83d\udee0\ufe0f","text":"<p>Submit improvements to this doc via another signed, squashed PR so everyone benefits.</p>"},{"location":"development/mcp-developer-guide-json-rpc/","title":"MCP JSON RPC Guide","text":"<p>This comprehensive guide demonstrates how to interact with MCP (Model Context Protocol) servers using raw JSON-RPC commands via <code>curl</code> or through STDIO. This is essential for developers who want to understand the MCP protocol at a low level, integrate MCP into custom applications, or debug MCP implementations.</p>"},{"location":"development/mcp-developer-guide-json-rpc/#overview","title":"Overview","text":"<p>The Model Context Protocol (MCP) is a standardized protocol for connecting language models to various data sources and tools. MCP Gateway acts as a federation layer that aggregates multiple MCP servers and provides unified access through various transport mechanisms.</p>"},{"location":"development/mcp-developer-guide-json-rpc/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have:</p> <ul> <li>MCP Gateway server running (typically on <code>http://localhost:4444</code>)</li> <li><code>curl</code> command-line tool installed</li> <li><code>jq</code> for JSON formatting (optional but recommended)</li> <li>Basic understanding of JSON-RPC 2.0 protocol</li> </ul>"},{"location":"development/mcp-developer-guide-json-rpc/#authentication-setup","title":"Authentication Setup","text":"<p>MCP Gateway uses JWT Bearer tokens for authentication. Generate a token before making any requests:</p> <pre><code># Generate authentication token\nexport MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\\n    --username admin --exp 10080 --secret my-test-key)\n\n# Verify the token was generated\necho \"Token: ${MCPGATEWAY_BEARER_TOKEN}\"\n\n# Test connectivity\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/health | jq\n</code></pre> <p>Expected health response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-01-15T10:30:00Z\",\n  \"version\": \"0.6.0\"\n}\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#understanding-mcp-protocol-flow","title":"Understanding MCP Protocol Flow","text":"<p>MCP follows a specific initialization sequence that must be followed for proper communication:</p> <ol> <li>Initialize - Establish protocol version and capabilities</li> <li>Initialized Notification - Confirm initialization completion</li> <li>Protocol Operations - List and call tools, read resources, get prompts</li> </ol>"},{"location":"development/mcp-developer-guide-json-rpc/#transport-methods","title":"Transport Methods","text":"<p>MCP Gateway supports multiple transport methods:</p> <ul> <li>HTTP JSON-RPC (<code>/rpc</code>) - Standard JSON-RPC 2.0 over HTTP</li> <li>Server-Sent Events (<code>/sse</code>) - Real-time streaming communication</li> <li>Protocol Endpoints (<code>/protocol/*</code>) - Specialized endpoints for specific operations</li> </ul>"},{"location":"development/mcp-developer-guide-json-rpc/#mcp-protocol-implementation","title":"MCP Protocol Implementation","text":""},{"location":"development/mcp-developer-guide-json-rpc/#1-initialize-the-connection","title":"1. Initialize the Connection","text":"<p>Every MCP session must begin with proper initialization:</p>"},{"location":"development/mcp-developer-guide-json-rpc/#method-1-using-protocol-endpoint-recommended","title":"Method 1: Using Protocol Endpoint (Recommended)","text":"<pre><code># Initialize using dedicated protocol endpoint\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"protocol_version\": \"2025-03-26\",\n           \"capabilities\": {\n             \"tools\": {},\n             \"resources\": {},\n             \"prompts\": {}\n           },\n           \"client_info\": {\n             \"name\": \"cli-developer\",\n             \"version\": \"1.0.0\"\n           }\n         }' \\\n     http://localhost:4444/protocol/initialize | jq\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#method-2-using-json-rpc-endpoint","title":"Method 2: Using JSON-RPC Endpoint","text":"<pre><code># Initialize using JSON-RPC endpoint\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 1,\n           \"method\": \"initialize\",\n           \"params\": {\n             \"protocolVersion\": \"2025-03-26\",\n             \"capabilities\": {\n               \"tools\": {},\n               \"resources\": {},\n               \"prompts\": {}\n             },\n             \"clientInfo\": {\n               \"name\": \"cli-developer\",\n               \"version\": \"1.0.0\"\n             }\n           }\n         }' \\\n     http://localhost:4444/rpc | jq\n</code></pre> <p>Expected Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"protocolVersion\": \"2025-03-26\",\n    \"capabilities\": {\n      \"experimental\": {},\n      \"prompts\": {\n        \"listChanged\": false\n      },\n      \"resources\": {\n        \"subscribe\": false,\n        \"listChanged\": false\n      },\n      \"tools\": {\n        \"listChanged\": false\n      }\n    },\n    \"serverInfo\": {\n      \"name\": \"mcpgateway\",\n      \"version\": \"0.6.0\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#2-send-initialized-notification","title":"2. Send Initialized Notification","text":"<p>After successful initialization, send the initialized notification:</p> <pre><code># Send initialized notification\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"method\": \"notifications/initialized\",\n           \"params\": {}\n         }' \\\n     http://localhost:4444/rpc\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#working-with-tools","title":"Working with Tools","text":""},{"location":"development/mcp-developer-guide-json-rpc/#list-available-tools","title":"List Available Tools","text":"<pre><code># List all available tools\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 2,\n           \"method\": \"tools/list\",\n           \"params\": {}\n         }' \\\n     http://localhost:4444/rpc | jq\n</code></pre> <p>Response with no tools: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"tools\": []\n  }\n}\n</code></pre></p> <p>Response with tools available: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"tools\": [\n      {\n        \"name\": \"get_system_time\",\n        \"description\": \"Get current system time in specified timezone\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"timezone\": {\n              \"type\": \"string\",\n              \"description\": \"IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Defaults to UTC if not specified.\"\n            }\n          }\n        }\n      },\n      {\n        \"name\": \"convert_time\",\n        \"description\": \"Convert time between different timezones\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"time\": {\n              \"type\": \"string\",\n              \"description\": \"Time to convert in RFC3339 format\"\n            },\n            \"source_timezone\": {\n              \"type\": \"string\",\n              \"description\": \"Source IANA timezone name\"\n            },\n            \"target_timezone\": {\n              \"type\": \"string\",\n              \"description\": \"Target IANA timezone name\"\n            }\n          },\n          \"required\": [\"time\", \"source_timezone\", \"target_timezone\"]\n        }\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#call-a-tool","title":"Call a Tool","text":"<pre><code># Call a tool with arguments\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 3,\n           \"method\": \"tools/call\",\n           \"params\": {\n             \"name\": \"get_system_time\",\n             \"arguments\": {\n               \"timezone\": \"Europe/Dublin\"\n             }\n           }\n         }' \\\n     http://localhost:4444/rpc | jq\n</code></pre> <p>Expected Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"{\\n  \\\"timezone\\\": \\\"Europe/Dublin\\\",\\n  \\\"datetime\\\": \\\"2025-01-15T16:30:45+00:00\\\",\\n  \\\"is_dst\\\": false\\n}\"\n      }\n    ],\n    \"isError\": false\n  }\n}\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#tool-call-examples","title":"Tool Call Examples","text":"<p>Convert Time Between Timezones: <pre><code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 4,\n           \"method\": \"tools/call\",\n           \"params\": {\n             \"name\": \"convert_time\",\n             \"arguments\": {\n               \"time\": \"2025-01-15T10:00:00Z\",\n               \"source_timezone\": \"UTC\",\n               \"target_timezone\": \"America/New_York\"\n             }\n           }\n         }' \\\n     http://localhost:4444/rpc | jq\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#working-with-resources","title":"Working with Resources","text":""},{"location":"development/mcp-developer-guide-json-rpc/#list-available-resources","title":"List Available Resources","text":"<pre><code># List all available resources\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 5,\n           \"method\": \"resources/list\",\n           \"params\": {}\n         }' \\\n     http://localhost:4444/rpc | jq\n</code></pre> <p>Expected Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"result\": {\n    \"resources\": [\n      {\n        \"uri\": \"timezone://info\",\n        \"name\": \"Timezone Information\",\n        \"description\": \"Comprehensive timezone information including offsets, DST status, and major cities\",\n        \"mimeType\": \"application/json\"\n      },\n      {\n        \"uri\": \"time://current/world\",\n        \"name\": \"World Clock\",\n        \"description\": \"Current time in major cities around the world\",\n        \"mimeType\": \"application/json\"\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#read-a-specific-resource","title":"Read a Specific Resource","text":"<pre><code># Read a specific resource\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 6,\n           \"method\": \"resources/read\",\n           \"params\": {\n             \"uri\": \"timezone://info\"\n           }\n         }' \\\n     http://localhost:4444/rpc | jq\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#working-with-prompts","title":"Working with Prompts","text":""},{"location":"development/mcp-developer-guide-json-rpc/#list-available-prompts","title":"List Available Prompts","text":"<pre><code># List all available prompts\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 7,\n           \"method\": \"prompts/list\",\n           \"params\": {}\n         }' \\\n     http://localhost:4444/rpc | jq\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#get-a-specific-prompt","title":"Get a Specific Prompt","text":"<pre><code># Get a prompt with arguments\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 8,\n           \"method\": \"prompts/get\",\n           \"params\": {\n             \"name\": \"compare_timezones\",\n             \"arguments\": {\n               \"timezones\": \"UTC,America/New_York,Europe/London\",\n               \"reference_time\": \"2025-01-15T12:00:00Z\"\n             }\n           }\n         }' \\\n     http://localhost:4444/rpc | jq\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#server-sent-events-sse-transport","title":"Server-Sent Events (SSE) Transport","text":"<p>For real-time communication and better handling of long-running operations, use the SSE transport:</p>"},{"location":"development/mcp-developer-guide-json-rpc/#establishing-sse-connection","title":"Establishing SSE Connection","text":"<pre><code># Terminal 1: Start SSE connection (keeps connection open)\ncurl -N -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/sse\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#sending-messages-via-sse","title":"Sending Messages via SSE","text":"<p>In a separate terminal, send JSON-RPC messages:</p> <pre><code># Initialize via SSE\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 1,\n           \"method\": \"initialize\",\n           \"params\": {\n             \"protocolVersion\": \"2025-03-26\",\n             \"capabilities\": {},\n             \"clientInfo\": {\"name\": \"sse-client\", \"version\": \"1.0\"}\n           }\n         }' \\\n     http://localhost:4444/message\n\n# List tools via SSE\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 2,\n           \"method\": \"tools/list\"\n         }' \\\n     http://localhost:4444/message\n\n# Call a tool via SSE\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 3,\n           \"method\": \"tools/call\",\n           \"params\": {\n             \"name\": \"get_system_time\",\n             \"arguments\": {\"timezone\": \"Asia/Tokyo\"}\n           }\n         }' \\\n     http://localhost:4444/message\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#utility-operations","title":"Utility Operations","text":""},{"location":"development/mcp-developer-guide-json-rpc/#ping-the-server","title":"Ping the Server","text":"<pre><code># Test server responsiveness\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"jsonrpc\": \"2.0\",\n           \"id\": 9,\n           \"method\": \"ping\"\n         }' \\\n     http://localhost:4444/rpc | jq\n</code></pre> <p>Expected Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 9,\n  \"result\": {}\n}\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#stdio-transport","title":"STDIO Transport","text":"<p>For command-line integration and desktop client compatibility, use the STDIO wrapper:</p>"},{"location":"development/mcp-developer-guide-json-rpc/#setting-up-stdio-environment","title":"Setting Up STDIO Environment","text":"<pre><code># Configure environment variables\nexport MCP_AUTH_TOKEN=${MCPGATEWAY_BEARER_TOKEN}\nexport MCP_SERVER_CATALOG_URLS=\"http://localhost:4444/servers/your-server-id\"\nexport MCP_TOOL_CALL_TIMEOUT=120\nexport MCP_WRAPPER_LOG_LEVEL=INFO\n\n# Run the wrapper\npython3 -m mcpgateway.wrapper\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#stdio-communication","title":"STDIO Communication","text":"<p>Send JSON-RPC commands directly to stdin:</p> <pre><code># Send commands to stdin (each on a single line)\necho '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2025-03-26\",\"capabilities\":{},\"clientInfo\":{\"name\":\"stdio-client\",\"version\":\"1.0\"}}}' | python3 -m mcpgateway.wrapper\n\necho '{\"jsonrpc\":\"2.0\",\"method\":\"notifications/initialized\",\"params\":{}}' | python3 -m mcpgateway.wrapper\n\necho '{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/list\"}' | python3 -m mcpgateway.wrapper\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#complete-session-examples","title":"Complete Session Examples","text":""},{"location":"development/mcp-developer-guide-json-rpc/#http-json-rpc-complete-session","title":"HTTP JSON-RPC Complete Session","text":"<pre><code>#!/bin/bash\n# Complete MCP Gateway session via HTTP JSON-RPC\n\n# Setup\nexport MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\\n    --username admin --exp 10080 --secret my-test-key)\n\n# Function to make authenticated JSON-RPC calls\nmake_call() {\n    curl -s -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n         -H \"Content-Type: application/json\" \\\n         -d \"$1\" \\\n         http://localhost:4444/rpc | jq\n}\n\n# Function for protocol-specific calls\nmake_protocol_call() {\n    curl -s -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n         -H \"Content-Type: application/json\" \\\n         -d \"$1\" \\\n         http://localhost:4444/protocol/initialize | jq\n}\n\necho \"=== MCP Gateway Complete Session ===\"\n\n# 1. Test connectivity\necho \"=== Testing Connectivity ===\"\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/health | jq\n\n# 2. Initialize (using protocol endpoint for reliability)\necho \"=== Initializing Session ===\"\nmake_protocol_call '{\n  \"protocol_version\": \"2025-03-26\",\n  \"capabilities\": {\n    \"tools\": {},\n    \"resources\": {},\n    \"prompts\": {}\n  },\n  \"client_info\": {\n    \"name\": \"complete-session-demo\",\n    \"version\": \"1.0\"\n  }\n}'\n\n# 3. Send initialized notification\necho \"=== Sending Initialized Notification ===\"\nmake_call '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/initialized\",\n  \"params\": {}\n}'\n\n# 4. List available tools\necho \"=== Listing Available Tools ===\"\nmake_call '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/list\",\n  \"params\": {}\n}'\n\n# 5. List available resources\necho \"=== Listing Available Resources ===\"\nmake_call '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"resources/list\",\n  \"params\": {}\n}'\n\n# 6. List available prompts\necho \"=== Listing Available Prompts ===\"\nmake_call '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"method\": \"prompts/list\",\n  \"params\": {}\n}'\n\n# 7. Call a tool (if available)\necho \"=== Calling Tool (get_system_time) ===\"\nmake_call '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_system_time\",\n    \"arguments\": {\n      \"timezone\": \"UTC\"\n    }\n  }\n}'\n\n# 8. Read a resource (if available)\necho \"=== Reading Resource ===\"\nmake_call '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 6,\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"timezone://info\"\n  }\n}'\n\n# 9. Test ping\necho \"=== Testing Ping ===\"\nmake_call '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 7,\n  \"method\": \"ping\"\n}'\n\necho \"=== Session Complete ===\"\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#sse-complete-session","title":"SSE Complete Session","text":"<pre><code>#!/bin/bash\n# Complete MCP Gateway session via Server-Sent Events\n\n# Setup\nexport MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\\n    --username admin --exp 10080 --secret my-test-key)\n\necho \"=== Starting SSE Session ===\"\n\n# Start SSE connection in background\ncurl -N -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/sse &amp;\nSSE_PID=$!\n\n# Give SSE time to connect\nsleep 2\n\n# Function to send messages via SSE\nsend_sse_message() {\n    curl -s -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n         -H \"Content-Type: application/json\" \\\n         -d \"$1\" \\\n         http://localhost:4444/message\n    sleep 1  # Allow time for response\n}\n\necho \"=== Sending Initialize Message ===\"\nsend_sse_message '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2025-03-26\",\n    \"capabilities\": {},\n    \"clientInfo\": {\n      \"name\": \"sse-session-demo\",\n      \"version\": \"1.0\"\n    }\n  }\n}'\n\necho \"=== Sending Initialized Notification ===\"\nsend_sse_message '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/initialized\",\n  \"params\": {}\n}'\n\necho \"=== Listing Tools ===\"\nsend_sse_message '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/list\"\n}'\n\necho \"=== Calling Tool ===\"\nsend_sse_message '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_system_time\",\n    \"arguments\": {\n      \"timezone\": \"Europe/Dublin\"\n    }\n  }\n}'\n\necho \"=== Testing Ping ===\"\nsend_sse_message '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"method\": \"ping\"\n}'\n\n# Allow time for final responses\nsleep 3\n\n# Clean up\nkill $SSE_PID 2&gt;/dev/null\necho \"=== SSE Session Complete ===\"\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#error-handling-and-troubleshooting","title":"Error Handling and Troubleshooting","text":""},{"location":"development/mcp-developer-guide-json-rpc/#common-error-responses","title":"Common Error Responses","text":"<p>MCP follows JSON-RPC 2.0 error handling standards:</p> <p>Authentication Error: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -32000,\n    \"message\": \"Authentication required\",\n    \"data\": \"Missing or invalid authorization header\"\n  }\n}\n</code></pre></p> <p>Invalid Parameters: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"Invalid params\",\n    \"data\": \"Missing required parameter: name\"\n  }\n}\n</code></pre></p> <p>Method Not Found: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"error\": {\n    \"code\": -32601,\n    \"message\": \"Method not found\",\n    \"data\": \"Unknown method: invalid_method\"\n  }\n}\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#standard-json-rpc-error-codes","title":"Standard JSON-RPC Error Codes","text":"Code Meaning Description -32700 Parse error Invalid JSON was received -32600 Invalid Request The JSON sent is not a valid Request object -32601 Method not found The method does not exist / is not available -32602 Invalid params Invalid method parameter(s) -32603 Internal error Internal JSON-RPC error -32000 to -32099 Server error Reserved for implementation-defined server-errors"},{"location":"development/mcp-developer-guide-json-rpc/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"development/mcp-developer-guide-json-rpc/#1-authentication-problems","title":"1. Authentication Problems","text":"<p>Symptoms: - 401 Unauthorized responses - \"Authentication required\" errors</p> <p>Solutions: <pre><code># Verify token generation\nexport MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\\n    --username admin --exp 10080 --secret my-test-key)\n\n# Test token validity\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/health\n\n# Check token expiration\necho $MCPGATEWAY_BEARER_TOKEN | cut -d'.' -f2 | base64 -d | jq .exp\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#2-connection-issues","title":"2. Connection Issues","text":"<p>Symptoms: - Connection refused errors - Timeout errors</p> <p>Solutions: <pre><code># Check if MCP Gateway is running\ncurl -f http://localhost:4444/health || echo \"Gateway not running\"\n\n# Check port availability\nlsof -i :4444\n\n# Verify network connectivity\nping localhost\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#3-initialize-method-errors","title":"3. Initialize Method Errors","text":"<p>Known Issue: <code>'coroutine' object has no attribute 'model_dump'</code></p> <p>Workaround: <pre><code># Use protocol endpoint instead of /rpc for initialization\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"protocol_version\": \"2025-03-26\",\n           \"capabilities\": {},\n           \"client_info\": {\"name\": \"workaround\", \"version\": \"1.0\"}\n         }' \\\n     http://localhost:4444/protocol/initialize\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#4-empty-toolresource-lists","title":"4. Empty Tool/Resource Lists","text":"<p>Symptoms: - <code>tools/list</code> returns empty array - <code>resources/list</code> returns empty array</p> <p>Solutions: <pre><code># Check if MCP servers are registered\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/gateways | jq\n\n# Verify virtual servers are configured\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/servers | jq\n\n# Check individual server status\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/servers/{server-id} | jq\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#5-tool-call-failures","title":"5. Tool Call Failures","text":"<p>Symptoms: - Tool calls return <code>isError: true</code> - Timeout errors</p> <p>Solutions: <pre><code># Check tool schema and required parameters\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\"}' \\\n     http://localhost:4444/rpc | jq '.result.tools[0].inputSchema'\n\n# Verify argument types match schema\n# Increase timeout for long-running tools\nexport MCP_TOOL_CALL_TIMEOUT=300\n</code></pre></p>"},{"location":"development/mcp-developer-guide-json-rpc/#integration-examples","title":"Integration Examples","text":""},{"location":"development/mcp-developer-guide-json-rpc/#python-client-implementation","title":"Python Client Implementation","text":"<pre><code>import json\nimport requests\nimport subprocess\nfrom typing import Dict, Any, Optional\n\nclass MCPGatewayClient:\n    def __init__(self, base_url: str = \"http://localhost:4444\", auth_token: Optional[str] = None):\n        self.base_url = base_url\n        self.session = requests.Session()\n        self.request_id = 0\n\n        if auth_token:\n            self.session.headers.update({\n                \"Authorization\": f\"Bearer {auth_token}\",\n                \"Content-Type\": \"application/json\"\n            })\n\n    def _make_request(self, method: str, params: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n        \"\"\"Make a JSON-RPC request to the gateway.\"\"\"\n        self.request_id += 1\n\n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": self.request_id,\n            \"method\": method\n        }\n\n        if params is not None:\n            payload[\"params\"] = params\n\n        response = self.session.post(f\"{self.base_url}/rpc\", json=payload)\n        response.raise_for_status()\n\n        return response.json()\n\n    def initialize(self) -&gt; Dict[str, Any]:\n        \"\"\"Initialize the MCP session.\"\"\"\n        # Use protocol endpoint for reliable initialization\n        payload = {\n            \"protocol_version\": \"2025-03-26\",\n            \"capabilities\": {\n                \"tools\": {},\n                \"resources\": {},\n                \"prompts\": {}\n            },\n            \"client_info\": {\n                \"name\": \"python-mcp-client\",\n                \"version\": \"1.0.0\"\n            }\n        }\n\n        response = self.session.post(f\"{self.base_url}/protocol/initialize\", json=payload)\n        response.raise_for_status()\n\n        # Send initialized notification\n        self._make_request(\"notifications/initialized\", {})\n\n        return response.json()\n\n    def list_tools(self) -&gt; Dict[str, Any]:\n        \"\"\"List available tools.\"\"\"\n        return self._make_request(\"tools/list\")\n\n    def call_tool(self, name: str, arguments: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Call a specific tool with arguments.\"\"\"\n        return self._make_request(\"tools/call\", {\n            \"name\": name,\n            \"arguments\": arguments\n        })\n\n    def list_resources(self) -&gt; Dict[str, Any]:\n        \"\"\"List available resources.\"\"\"\n        return self._make_request(\"resources/list\")\n\n    def read_resource(self, uri: str) -&gt; Dict[str, Any]:\n        \"\"\"Read a specific resource.\"\"\"\n        return self._make_request(\"resources/read\", {\"uri\": uri})\n\n    def list_prompts(self) -&gt; Dict[str, Any]:\n        \"\"\"List available prompts.\"\"\"\n        return self._make_request(\"prompts/list\")\n\n    def get_prompt(self, name: str, arguments: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Get a specific prompt with arguments.\"\"\"\n        return self._make_request(\"prompts/get\", {\n            \"name\": name,\n            \"arguments\": arguments\n        })\n\n    def ping(self) -&gt; Dict[str, Any]:\n        \"\"\"Test server connectivity.\"\"\"\n        return self._make_request(\"ping\")\n\n# Usage example\ndef main():\n    # Generate authentication token\n    result = subprocess.run([\n        \"python3\", \"-m\", \"mcpgateway.utils.create_jwt_token\",\n        \"--username\", \"admin\", \"--exp\", \"10080\", \"--secret\", \"my-test-key\"\n    ], capture_output=True, text=True)\n\n    if result.returncode != 0:\n        raise Exception(f\"Failed to generate token: {result.stderr}\")\n\n    auth_token = result.stdout.strip()\n\n    # Create client and initialize\n    client = MCPGatewayClient(auth_token=auth_token)\n\n    try:\n        # Initialize session\n        init_result = client.initialize()\n        print(\"Initialized:\", json.dumps(init_result, indent=2))\n\n        # List available tools\n        tools = client.list_tools()\n        print(\"Tools:\", json.dumps(tools, indent=2))\n\n        # Call a tool if available\n        if tools[\"result\"][\"tools\"]:\n            tool_name = tools[\"result\"][\"tools\"][0][\"name\"]\n            result = client.call_tool(tool_name, {\"timezone\": \"UTC\"})\n            print(f\"Tool result:\", json.dumps(result, indent=2))\n\n        # Test ping\n        ping_result = client.ping()\n        print(\"Ping:\", json.dumps(ping_result, indent=2))\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#nodejs-client-implementation","title":"Node.js Client Implementation","text":"<pre><code>const axios = require('axios');\nconst { execSync } = require('child_process');\n\nclass MCPGatewayClient {\n    constructor(baseUrl = 'http://localhost:4444', authToken = null) {\n        this.baseUrl = baseUrl;\n        this.requestId = 0;\n\n        this.axiosInstance = axios.create({\n            baseURL: baseUrl,\n            headers: {\n                'Content-Type': 'application/json',\n                ...(authToken &amp;&amp; { 'Authorization': `Bearer ${authToken}` })\n            }\n        });\n    }\n\n    async makeRequest(method, params = null) {\n        this.requestId++;\n\n        const payload = {\n            jsonrpc: '2.0',\n            id: this.requestId,\n            method\n        };\n\n        if (params !== null) {\n            payload.params = params;\n        }\n\n        const response = await this.axiosInstance.post('/rpc', payload);\n        return response.data;\n    }\n\n    async initialize() {\n        // Use protocol endpoint for reliable initialization\n        const payload = {\n            protocol_version: '2025-03-26',\n            capabilities: {\n                tools: {},\n                resources: {},\n                prompts: {}\n            },\n            client_info: {\n                name: 'nodejs-mcp-client',\n                version: '1.0.0'\n            }\n        };\n\n        const response = await this.axiosInstance.post('/protocol/initialize', payload);\n\n        // Send initialized notification\n        await this.makeRequest('notifications/initialized', {});\n\n        return response.data;\n    }\n\n    async listTools() {\n        return this.makeRequest('tools/list');\n    }\n\n    async callTool(name, arguments) {\n        return this.makeRequest('tools/call', { name, arguments });\n    }\n\n    async listResources() {\n        return this.makeRequest('resources/list');\n    }\n\n    async readResource(uri) {\n        return this.makeRequest('resources/read', { uri });\n    }\n\n    async listPrompts() {\n        return this.makeRequest('prompts/list');\n    }\n\n    async getPrompt(name, arguments) {\n        return this.makeRequest('prompts/get', { name, arguments });\n    }\n\n    async ping() {\n        return this.makeRequest('ping');\n    }\n}\n\n// Usage example\nasync function main() {\n    try {\n        // Generate authentication token\n        const authToken = execSync(\n            'python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 10080 --secret my-test-key',\n            { encoding: 'utf8' }\n        ).trim();\n\n        // Create client and initialize\n        const client = new MCPGatewayClient('http://localhost:4444', authToken);\n\n        // Initialize session\n        const initResult = await client.initialize();\n        console.log('Initialized:', JSON.stringify(initResult, null, 2));\n\n        // List available tools\n        const tools = await client.listTools();\n        console.log('Tools:', JSON.stringify(tools, null, 2));\n\n        // Call a tool if available\n        if (tools.result.tools.length &gt; 0) {\n            const toolName = tools.result.tools[0].name;\n            const result = await client.callTool(toolName, { timezone: 'UTC' });\n            console.log('Tool result:', JSON.stringify(result, null, 2));\n        }\n\n        // Test ping\n        const pingResult = await client.ping();\n        console.log('Ping:', JSON.stringify(pingResult, null, 2));\n\n    } catch (error) {\n        console.error('Error:', error.message);\n        if (error.response) {\n            console.error('Response:', error.response.data);\n        }\n    }\n}\n\nif (require.main === module) {\n    main();\n}\n\nmodule.exports = MCPGatewayClient;\n</code></pre>"},{"location":"development/mcp-developer-guide-json-rpc/#best-practices","title":"Best Practices","text":""},{"location":"development/mcp-developer-guide-json-rpc/#1-session-management","title":"1. Session Management","text":"<ul> <li>Always initialize before making other requests</li> <li>Send the initialized notification after successful initialization</li> <li>Use unique request IDs for correlation</li> <li>Handle errors gracefully and implement retry logic</li> </ul>"},{"location":"development/mcp-developer-guide-json-rpc/#2-authentication","title":"2. Authentication","text":"<ul> <li>Store tokens securely and refresh them before expiration</li> <li>Use environment variables for token management</li> <li>Implement proper token validation and error handling</li> </ul>"},{"location":"development/mcp-developer-guide-json-rpc/#3-transport-selection","title":"3. Transport Selection","text":"<ul> <li>Use HTTP JSON-RPC for simple request-response patterns</li> <li>Use SSE for real-time communication and long-running operations</li> <li>Use STDIO for desktop client integration</li> </ul>"},{"location":"development/mcp-developer-guide-json-rpc/#4-error-handling","title":"4. Error Handling","text":"<ul> <li>Check for JSON-RPC error objects in all responses</li> <li>Implement appropriate retry strategies for transient errors</li> <li>Log errors with sufficient context for debugging</li> </ul>"},{"location":"development/mcp-developer-guide-json-rpc/#5-performance-optimization","title":"5. Performance Optimization","text":"<ul> <li>Reuse HTTP connections when possible</li> <li>Implement proper timeout configurations</li> <li>Cache tool schemas and capabilities to reduce redundant calls</li> </ul>"},{"location":"development/mcp-developer-guide-json-rpc/#further-reading","title":"Further Reading","text":"<ul> <li>MCP Protocol Specification</li> <li>JSON-RPC 2.0 Specification</li> <li>MCP Gateway Documentation</li> <li>MCP Gateway Admin UI Guide</li> <li>MCP Gateway Wrapper Documentation</li> </ul>"},{"location":"development/module-documentation/","title":"Module documentation","text":""},{"location":"development/module-documentation/#file-header-management","title":"\u270d\ufe0f File Header Management","text":"<p>To ensure consistency, all Python source files must include a standardized header containing metadata like copyright, license, and authors. We use a script to automate the checking and fixing of these headers.</p> <p>By default, the script runs in check mode (dry run) and will NOT modify any files unless explicitly told to do so with fix flags.</p>"},{"location":"development/module-documentation/#checking-headers-no-modifications","title":"\ud83d\udd0d Checking Headers (No Modifications)","text":"<p>These commands only check files and report issues without making any changes:</p> <ul> <li> <p><code>make check-headers</code>:     Scans all Python files in <code>mcpgateway/</code> and <code>tests/</code> and reports any files with missing or incorrect headers. This is the default behavior.</p> <pre><code>make check-headers\n</code></pre> </li> <li> <p><code>make check-headers-diff</code>:     Same as <code>check-headers</code> but also shows a diff preview of what would be changed.</p> <pre><code>make check-headers-diff\n</code></pre> </li> <li> <p><code>make check-headers-debug</code>:     Checks headers with additional debug information (file permissions, shebang status, etc.).</p> <pre><code>make check-headers-debug\n</code></pre> </li> <li> <p><code>make check-header</code>:     Check a specific file or directory without modifying it.</p> <pre><code># Check a single file\nmake check-header path=\"mcpgateway/main.py\"\n\n# Check with debug info and diff preview\nmake check-header path=\"tests/\" debug=1 diff=1\n</code></pre> </li> </ul>"},{"location":"development/module-documentation/#fixing-headers-will-modify-files","title":"\ud83d\udd27 Fixing Headers (Will Modify Files)","text":"<p>\u26a0\ufe0f WARNING: These commands WILL modify your files. Always commit your changes before running fix commands.</p> <ul> <li> <p><code>make fix-all-headers</code>:     Automatically fixes all Python files with incorrect headers across the entire project.</p> <pre><code>make fix-all-headers\n</code></pre> </li> <li> <p><code>make fix-all-headers-no-encoding</code>:     Fix all headers but don't require the encoding line (<code># -*- coding: utf-8 -*-</code>).</p> <pre><code>make fix-all-headers-no-encoding\n</code></pre> </li> <li> <p><code>make fix-all-headers-custom</code>:     Fix all headers with custom configuration options.</p> <pre><code># Custom copyright year\nmake fix-all-headers-custom year=2024\n\n# Custom license\nmake fix-all-headers-custom license=MIT\n\n# Custom shebang requirement\nmake fix-all-headers-custom shebang=always\n\n# Combine multiple options\nmake fix-all-headers-custom year=2024 license=MIT shebang=never\n</code></pre> </li> <li> <p><code>make interactive-fix-headers</code>:     Scans all files and prompts for confirmation before applying each fix. This gives you full control over which files are modified.</p> <pre><code>make interactive-fix-headers\n</code></pre> </li> <li> <p><code>make fix-header</code>:     Fix headers for a specific file or directory with various options.</p> <pre><code># Fix a single file\nmake fix-header path=\"mcpgateway/main.py\"\n\n# Fix all files in a directory\nmake fix-header path=\"tests/unit/\"\n\n# Fix with specific authors\nmake fix-header path=\"mcpgateway/models.py\" authors=\"John Doe, Jane Smith\"\n\n# Fix with custom shebang requirement\nmake fix-header path=\"scripts/\" shebang=always\n\n# Fix without encoding line\nmake fix-header path=\"lib/helper.py\" encoding=no\n\n# Combine multiple options\nmake fix-header path=\"mcpgateway/\" authors=\"Team Alpha\" shebang=auto encoding=no\n</code></pre> </li> </ul>"},{"location":"development/module-documentation/#header-format","title":"\ud83d\udccb Header Format","text":"<p>The standardized header format is:</p> <pre><code>#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"Module Description.\nLocation: ./relative/path/to/file.py\nCopyright 2025\nSPDX-License-Identifier: Apache-2.0\nAuthors: Author Name(s)\n\nYour module documentation continues here...\n\"\"\"\n</code></pre>"},{"location":"development/module-documentation/#configuration-options","title":"\u2699\ufe0f Configuration Options","text":"<ul> <li><code>authors</code>: Specify author name(s) for the header</li> <li><code>shebang</code>: Control shebang requirement<ul> <li><code>auto</code> (default): Only required for executable files</li> <li><code>always</code>: Always require shebang line</li> <li><code>never</code>: Never require shebang line</li> </ul> </li> <li><code>encoding</code>: Set to <code>no</code> to skip encoding line requirement</li> <li><code>year</code>: Override copyright year (for <code>fix-all-headers-custom</code>)</li> <li><code>license</code>: Override license identifier (for <code>fix-all-headers-custom</code>)</li> <li><code>debug</code>: Set to <code>1</code> to show debug information (for check commands)</li> <li><code>diff</code>: Set to <code>1</code> to show diff preview (for check commands)</li> </ul>"},{"location":"development/module-documentation/#pre-commit-integration","title":"\ud83e\ude9d Pre-commit Integration","text":"<p>For use with pre-commit hooks:</p> <pre><code># Check only (recommended for pre-commit)\nmake pre-commit-check-headers\n\n# Fix mode (use with caution)\nmake pre-commit-fix-headers\n</code></pre>"},{"location":"development/module-documentation/#best-practices","title":"\ud83d\udca1 Best Practices","text":"<ol> <li>Always run <code>check-headers</code> first to see what needs to be fixed</li> <li>Commit your code before running fix commands to allow easy rollback</li> <li>Use <code>interactive-fix-headers</code> when you want to review each change</li> <li>Use <code>check-headers-diff</code> to preview changes before applying them</li> <li>Executable scripts should have shebang lines - the script detects this automatically in <code>auto</code> mode</li> </ol>"},{"location":"development/packaging/","title":"Packaging &amp; Distribution","text":"<p>This guide covers how to package MCP Gateway for deployment in various environments, including building production containers and generating releases.</p>"},{"location":"development/packaging/#production-container-podman-or-docker","title":"\ud83d\udce6 Production Container (Podman or Docker)","text":"<p>Build an OCI-compliant container image using:</p> <pre><code>make podman\npodman build -t mcpgateway:latest -f Containerfile .\n</code></pre> <p>Or with Docker (if Podman is not available):</p> <pre><code>make docker\n# or manually\ndocker build -t mcpgateway:latest -f Containerfile .\n</code></pre> <p>A lite image is also available for use in production, see <code>Containerfile.lite</code></p>"},{"location":"development/packaging/#run-with-tls-self-signed","title":"\ud83d\udd10 Run with TLS (self-signed)","text":"<pre><code>make podman-run-ssl\n</code></pre> <p>This uses self-signed certs from <code>./certs/</code> and runs HTTPS on port <code>4444</code>.</p>"},{"location":"development/packaging/#container-run-http","title":"\ud83d\udee0 Container Run (HTTP)","text":"<pre><code>make podman-run\n</code></pre> <p>This runs the container without TLS on port <code>4444</code>.</p>"},{"location":"development/packaging/#versioning","title":"\ud83d\udcdd Versioning","text":"<p>MCP Gateway uses semantic versioning (<code>MAJOR.MINOR.PATCH</code>) and the version is defined in:</p> <pre><code>mcpgateway/__init__.py\n</code></pre> <p>You can bump the version manually or automate it via Git tags or CI/CD.</p>"},{"location":"development/packaging/#release-artifacts","title":"\ud83d\udcc1 Release Artifacts","text":"<p>If you need to ship ZIPs, wheels, or a full binary:</p> <pre><code>python3 -m build\n</code></pre> <p>Outputs will be under <code>dist/</code>. You can then:</p> <ul> <li>Push to PyPI (internal or public)</li> <li>Upload to GitHub Releases</li> <li>Package in a <code>.deb</code>, <code>.rpm</code>, etc.</li> </ul>"},{"location":"development/packaging/#whats-in-the-container","title":"\ud83d\udcc2 What's in the Container?","text":"<p>A typical image includes:</p> <ul> <li>Gunicorn running with <code>mcpgateway.main:app</code></li> <li>All code, static files, and compiled assets</li> </ul> <p>You can override settings using environment variables at runtime.</p>"},{"location":"development/review/","title":"Reviewing a Pull Request","text":"<p>This guide explains the day-to-day steps for reviewing a PR on GitHub, using both Git and the GitHub CLI (<code>gh</code>). It assumes you have already completed the one-time setup from the main workflow guide.</p>"},{"location":"development/review/#1-prerequisites","title":"1. Prerequisites","text":"<p>You should already have:</p> <ul> <li>A local clone of the forked repository, with <code>origin</code> pointing to your fork and <code>upstream</code> pointing to the canonical repo.</li> <li>The GitHub CLI (<code>gh</code>) installed and authenticated.</li> <li>Your <code>main</code> branch up to date with upstream:</li> </ul> <pre><code>  git fetch upstream\n  git switch main\n  git merge --ff-only upstream/main\n</code></pre>"},{"location":"development/review/#2-fetching-checking-out-the-pr","title":"2. Fetching &amp; Checking Out the PR","text":""},{"location":"development/review/#21-using-github-cli","title":"2.1 Using GitHub CLI","text":"<pre><code>gh pr checkout &lt;PR-number&gt;\n</code></pre> <p>This automatically fetches the PR and switches to a branch named <code>pr-&lt;PR-number&gt;</code>.</p>"},{"location":"development/review/#22-using-plain-git","title":"2.2 Using Plain Git","text":"<pre><code>git fetch upstream pull/&lt;PR-number&gt;/head:pr-&lt;PR-number&gt;\ngit switch pr-&lt;PR-number&gt;\n</code></pre>"},{"location":"development/review/#3-smoke-testing-the-changes","title":"3. Smoke-Testing the Changes","text":"<p>Before you read code or leave comments, always verify the PR builds and tests cleanly.</p>"},{"location":"development/review/#31-local-build","title":"3.1 Local Build","text":"<pre><code>make venv install install-dev serve   # Install into a fresh venv, and test it runs locally\n</code></pre>"},{"location":"development/review/#32-container-build-and-testing-with-postgres-and-redis-compose","title":"3.2 Container Build and testing with Postgres and Redis (compose)","text":"<pre><code>make docker-prod    # Build a new image\n# Change: image: mcpgateway/mcpgateway:latest in docker-compose.yml to use the local image\nmake compose-up     # spins up the Docker Compose stack\n\n# Test the basics\ncurl -k https://localhost:4444/health` # {\"status\":\"healthy\"}\nexport MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 0 --secret my-test-key)\ncurl -sk -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/version  | jq -c '.database, .redis'\n\n# Add an MCP server to http://localhost:4444 then check logs:\nmake compose-logs\n</code></pre>"},{"location":"development/review/#33-automated-tests","title":"3.3 Automated Tests","text":"<pre><code>make test           # or `pytest`\n</code></pre>"},{"location":"development/review/#34-lint-static-analysis","title":"3.4 Lint &amp; Static Analysis","text":"<pre><code>make lint           # runs ruff, mypy, black --check, eslint, etc.\n</code></pre> <p>If any step fails, request changes and paste the relevant error logs.</p>"},{"location":"development/review/#4-functional-code-review-checklist","title":"4. Functional &amp; Code Review Checklist","text":"<p>Use this checklist as you browse the changes:</p> Check Why it matters Does it build locally? Ensures no missing dependencies or compile errors. Does it build in Docker? Catches environment-specific issues. Tests are green? Guards against regressions. No new lint errors? Maintains code quality and consistency. Commits are clean &amp; signed? One-commit history &amp; DCO compliance. Code follows style guidelines Consistency in formatting, naming, and patterns. Security checks passed No secrets leaked, inputs validated, etc. Docs / comments updated? Documentation stays in sync with code. Edge cases &amp; error handling Robustness against invalid inputs or failures."},{"location":"development/review/#5-leaving-feedback","title":"5. Leaving Feedback","text":""},{"location":"development/review/#51-inline-comments","title":"5.1 Inline Comments","text":"<p>Use <code>gh pr review</code> to leave comments:</p> <pre><code># To comment without approving\ngh pr review --comment --body \"Nit: rename this variable for clarity.\"\n\n# To request changes\ngh pr review --request-changes --body \"Tests are failing on CI, please fix.\"\n\n# To approve\ngh pr review --approve --body \"Looks good to me!\"\n</code></pre>"},{"location":"development/review/#52-approving-in-the-ui","title":"5.2 Approving in the UI","text":"<ol> <li>On the PR page, click \"Files changed\".</li> <li>Hover over a line and click the + to leave an inline comment.</li> <li>After addressing all comments, click Review changes \u2192 Approve.</li> </ol>"},{"location":"development/review/#6-merging-the-pr-as-a-maintainer","title":"6. Merging the PR (as a Maintainer)","text":"<p>Only merge once all approvals, status checks, and CI jobs are green.</p> <ol> <li>On GitHub, click Merge pull request.</li> <li>Choose Squash and merge (default) or Rebase and merge.</li> <li>Verify the commit title and body follow Conventional Commits.</li> <li>Confirm the Signed-off-by trailer is present.</li> <li>Click Confirm merge.</li> </ol> <p>GitHub will delete the <code>pr-&lt;number&gt;</code> branch automatically.</p>"},{"location":"development/review/#7-cleaning-up-locally","title":"7. Cleaning Up Locally","text":"<p>After the PR is merged: * Switch back to the main branch * Delete the local feature branch * Prune deleted remote branches <pre><code>git switch main\ngit branch -D pr-&lt;PR-number&gt;             # replace &lt;PR-number&gt; with your branch name\ngit fetch -p                             # prune deleted remotes\n</code></pre> This removes references to remote branches that GitHub deleted after the merge. This keeps your local environment clean and up to date.</p>"},{"location":"faq/","title":"ContextForge MCP Gateway - Frequently Asked Questions","text":""},{"location":"faq/#quickstart","title":"\u26a1 Quickstart","text":"\ud83d\ude80 How can I install and run MCP Gateway in one command? <p>PyPI (pipx / uvx makes an isolated venv):</p> <pre><code># Using pipx - pip install pipx\npipx run mcp-contextforge-gateway\n\n# Or uvx - pip install uv (default: admin/changeme)\nuvx mcp-contextforge-gateway --port 4444\n</code></pre> <p>OCI image (Docker/Podman) - shares host network so localhost works:</p> <pre><code>podman run --network=host -p 4444:4444 ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre> \ud83d\uddc2\ufe0f What URLs are available for the admin interface and API docs? <ul> <li>Admin UI \u2192 https://localhost:4444</li> <li>Swagger \u2192 https://localhost:4444/docs</li> <li>ReDoc \u2192 https://localhost:4444/redoc</li> </ul>"},{"location":"faq/#what-is-mcp-model-context-protocol","title":"\ud83e\udd14 What is MCP (Model Context Protocol)?","text":"\ud83d\udca1 What is MCP in a nutshell? <p>MCP is an open-source protocol released by Anthropic in Nov 2024 that lets language models invoke external tools via a typed JSON-RPC envelope. Community folks call it \"USB-C for AI\"-one connector for many models.</p> \ud83c\udf0d Who supports MCP and what's the ecosystem like? <ul> <li>Supported by GitHub &amp; Microsoft Copilot, AWS Bedrock, Google Cloud Vertex AI, IBM watsonx, AgentBee, LangChain, CrewAI and 15,000+ community servers.</li> <li>Contracts enforced via JSON Schema.</li> <li>Multiple transports (STDIO, SSE, HTTP) - still converging.</li> </ul>"},{"location":"faq/#media-kit","title":"\ud83e\uddf0 Media Kit","text":"\ud83d\uddbc\ufe0f I want to make a social media post, where can I find samples and logos? <p>See the provided media kit</p> \ud83d\udcc4 How do I describe the gateway in boilerplate copy? <p>\"ContextForge MCP Gateway is an open-source reverse-proxy that unifies MCP and REST tool servers under a single secure HTTPS endpoint with discovery, auth and observability baked in.\"</p>"},{"location":"faq/#installation-configuration","title":"\ud83d\udee0\ufe0f Installation &amp; Configuration","text":"\ud83d\udd27 What is the minimal .env setup required? <pre><code>cp .env.example .env\n</code></pre> <p>Then edit:</p> <pre><code>BASIC_AUTH_USER=admin\nBASIC_AUTH_PASSWORD=changeme\nJWT_SECRET_KEY=my-test-key\n</code></pre> \ud83e\ude9b What are some advanced environment variables I can configure? <ul> <li>Basic: <code>HOST</code>, <code>PORT</code>, <code>APP_ROOT_PATH</code></li> <li>Auth: <code>AUTH_REQUIRED</code>, <code>BASIC_AUTH_*</code>, <code>JWT_SECRET_KEY</code></li> <li>Logging: <code>LOG_LEVEL</code>, <code>LOG_FORMAT</code>, <code>LOG_TO_FILE</code>, <code>LOG_FILE</code>, <code>LOG_FOLDER</code>, <code>LOG_ROTATION_ENABLED</code>, <code>LOG_MAX_SIZE_MB</code>, <code>LOG_BACKUP_COUNT</code></li> <li>Transport: <code>TRANSPORT_TYPE</code>, <code>WEBSOCKET_PING_INTERVAL</code>, <code>SSE_RETRY_TIMEOUT</code></li> <li>Tools: <code>TOOL_TIMEOUT</code>, <code>MAX_TOOL_RETRIES</code>, <code>TOOL_RATE_LIMIT</code>, <code>TOOL_CONCURRENT_LIMIT</code></li> <li>Federation: <code>FEDERATION_ENABLED</code>, <code>FEDERATION_PEERS</code>, <code>FEDERATION_SYNC_INTERVAL</code></li> </ul>"},{"location":"faq/#running-deployment","title":"\ud83d\ude80 Running &amp; Deployment","text":"\ud83c\udfe0 How do I run MCP Gateway locally using PyPI? <pre><code>python3 -m venv .venv &amp;&amp; source .venv/bin/activate\npip install mcp-contextforge-gateway\nmcpgateway\n</code></pre> \ud83d\udc33 How do I use the provided Makefile and Docker/Podman setup? <pre><code>make podman # or make docker\nmake podman-run-ssl # or make docker-run-ssl\nmake podman-run-ssl-host # or make docker-run-ssl-host\n</code></pre> <p>Docker Compose is also available, ex: <code>make compose-up</code>.</p> \u2601\ufe0f How can I deploy MCP Gateway on Google Cloud Run, Code Engine, Kubernetes, AWS, etc? <p>See the Deployment Documentation for detailed deployment instructions across local, docker, podman, compose, AWS, Azure, GCP, IBM Cloud, Helm, Minikube, Kubernetes, OpenShift and more.</p>"},{"location":"faq/#databases-persistence","title":"\ud83d\udcbe Databases &amp; Persistence","text":"\ud83d\uddc4\ufe0f What databases are supported for persistence? <ul> <li>SQLite (default) - used for development / small deployments.</li> <li>PostgreSQL / MySQL / MariaDB via <code>DATABASE_URL</code></li> <li>Redis (optional) for high performance session management. Sessions can also be stored in the DB or memory.</li> <li>Other databases supported by SQLAlchemy.</li> </ul> \ud83d\udce6 How do I persist SQLite across container restarts? <p>Include a persistent volume with your container or Kubernetes deployment. Ex:</p> <pre><code>docker run -v $(pwd)/data:/app ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre> <p>For production use, we recommend PostgreSQL. A Docker Compose target with PostgreSQL and Redis is provided.</p>"},{"location":"faq/#security-auth","title":"\ud83d\udd10 Security &amp; Auth","text":"\ud83c\udd93 How do I disable authentication for development? <p>Set <code>AUTH_REQUIRED=false</code> - disables login for local testing.</p> \ud83d\udd11 How do I generate and use a JWT token? <pre><code>export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token -u admin -exp 0 --secret my-test-key)\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" https://localhost:4444/tools\n</code></pre> <p>The token is used for all API interactions and can be configured to expire using <code>-exp</code>.</p> \ud83d\udce5 How do I bulk import multiple tools at once? <p>Use the <code>/admin/tools/import</code> endpoint to import up to 200 tools in a single request:</p> <pre><code>curl -X POST http://localhost:4444/admin/tools/import \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  --data-binary @tools.json\n</code></pre> <p>See the Bulk Import guide for details on format and error handling.</p> \ud83d\udee1\ufe0f How do I enable TLS and configure CORS? <ul> <li>Use <code>make podman-run-ssl</code> for self-signed certs or drop your own certificate under <code>certs</code>.</li> <li>Set <code>ALLOWED_ORIGINS</code> or <code>CORS_ENABLED</code> for CORS headers.</li> </ul>"},{"location":"faq/#tools-servers-federation","title":"\ud83d\udce1 Tools, Servers &amp; Federation","text":"\u2795 How do I register a tool with the gateway? <pre><code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\\\n     -H \"Content-Type: application/json\" \\\\\n     -d '{\"name\":\"clock_tool\",\"url\":\"http://localhost:9000/rpc\",\"input_schema\":{\"type\":\"object\"}}' \\\\\n     http://localhost:4444/tools\n</code></pre> \ud83c\udf09 How do I add a peer MCP gateway? <p>A \"Gateway\" is another MCP Server. The MCP Gateway itself is an MCP Server. This means you can add any MCP Server under \"Gateways\" and it will retrieve Tools/Resources/Prompts.</p> <pre><code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\\\n     -d '{\"name\":\"peer\",\"url\":\"http://peer:4444\"}' \\\\\n     http://localhost:4444/gateways\n</code></pre> \ud83d\udd87\ufe0f What are virtual servers and how do I use them? <p>A Virtual Server is a MCP Server composed from Tools/Resources/Prompts from multiple servers. Add one or more MCP Servers under \"Gateways\", then select which Tools/Prompts/Resources to use to create your Virtual Server.</p>"},{"location":"faq/#performance-tuning-scaling","title":"\ud83c\udfce\ufe0f Performance Tuning &amp; Scaling","text":"\u2699\ufe0f What environment variables affect performance? <ul> <li><code>TOOL_CONCURRENT_LIMIT</code></li> <li><code>TOOL_RATE_LIMIT</code></li> <li><code>WEBSOCKET_PING_INTERVAL</code></li> <li><code>SSE_RETRY_TIMEOUT</code></li> </ul> \ud83e\uddf5 How do I scale the number of worker processes? <ul> <li><code>GUNICORN_WORKERS</code> (for Gunicorn)</li> <li><code>UVICORN_WORKERS</code> (for Uvicorn)</li> </ul> \ud83d\udcca How can I benchmark performance? <p>Use <code>ab</code> or <code>wrk</code> against <code>/health</code> to measure raw latency. Check out the detail performance testing harness under <code>tests/hey</code>.</p>"},{"location":"faq/#observability-logging","title":"\ud83d\udcc8 Observability &amp; Logging","text":"\ud83d\udd0d What metrics are available? <ul> <li>Prometheus-style <code>/metrics</code> endpoint</li> <li>Tool/server/prompt stats via Admin UI</li> </ul> \ud83d\udcdc What log formats are supported? <ul> <li><code>LOG_FORMAT=json</code> or <code>text</code></li> <li>Adjust with <code>LOG_LEVEL</code></li> </ul>"},{"location":"faq/#smoke-tests-troubleshooting","title":"\ud83e\uddea Smoke Tests &amp; Troubleshooting","text":"\ud83d\udeeb Is there a full test script I can run? <p>Yes - see <code>docs/basic.md</code>.</p> \ud83d\udea8 What common errors should I watch for? Symptom Resolution 401 Unauthorized Refresh token / check Authorization database is locked Use Postgres / increase DB_POOL_SIZE already exists errors Use Show inactive toggle in UI SSE drops every 30 s Raise <code>SSE_RETRY_TIMEOUT</code>"},{"location":"faq/#integration-recipes","title":"\ud83d\udcbb Integration Recipes","text":"\ud83e\udd9c How do I use MCP Gateway with LangChain? <pre><code>from langchain.tools import MCPTool\ntool = MCPTool(endpoint=\"https://localhost:4444/json-rpc\",\n               token=os.environ[\"MCPGATEWAY_BEARER_TOKEN\"])\n</code></pre> \ud83e\uddbe How do I connect GitHub's mcp-server-git via Translate Bridge? <pre><code>python3 -m mcpgateway.translate --stdio \"uvx mcp-server-git\" --expose-sse --port 9001\n</code></pre>"},{"location":"faq/#roadmap","title":"\ud83d\uddfa\ufe0f Roadmap","text":"\ud83e\udded What features are planned for future versions? <ul> <li>\ud83d\udd10 OAuth2 client-credentials upstream auth with full spec compliance</li> <li>\ud83c\udf19 Dark-mode UI</li> <li>\ud83e\uddfe Add \"Version and Environment Info\" tab to Admin UI</li> <li>\ud83d\udd12 Fine-grained role-based access control (RBAC) for Admin UI and API routes and per-virtual-server API keys</li> <li>\ud83d\udce6 Marketplace-style tool catalog with categories, tags, and search</li> <li>\ud83d\udd01 Support for long-running / async tool executions with polling endpoints</li> <li>\ud83d\udcc2 UI-driven prompt and resource file management (upload/edit from browser)</li> <li>\ud83d\udee0\ufe0f Visual \"tool builder\" UI to design new tools with schema and auth interactively</li> <li>\ud83e\uddea Auto-validation tests for registered tools (contract + mock invocation)</li> <li>\ud83d\udea8 Event subscription framework: trigger hooks or alerts on Gateway changes</li> <li>\ud83e\uddf5 Real-time tool logs and debug traces in Admin UI</li> <li>\ud83e\udde0 Adaptive routing based on tool health, model, or load</li> <li>\ud83d\udd0d Filterable tool invocation history with replay support</li> <li>\ud83d\udce1 Plugin-based architecture for custom transports or auth methods</li> </ul> <p>Check out the Feature issues tagged <code>enhancement</code> on GitHub for more upcoming features!</p>"},{"location":"faq/#rarely-asked-questions-raq","title":"\u2753 Rarely Asked Questions (RAQ)","text":"\ud83d\udc19 Does MCP Gateway work on a Raspberry Pi? <p>Yes - build as <code>arm64</code> and reduce RAM/workers.</p>"},{"location":"faq/#contributing-community","title":"\ud83e\udd1d Contributing &amp; Community","text":"\ud83d\udc69\ud83d\udcbb How can I file issues or contribute? <p>Use GitHub Issues and CONTRIBUTING.md.</p> \ud83e\uddd1\ud83c\udf93 What code style and CI tools are used? <ul> <li>Pre-commit: <code>ruff</code>, <code>black</code>, <code>mypy</code>, <code>isort</code></li> <li>Run <code>make lint</code> before PRs</li> </ul> \ud83d\udcac Where can I chat or ask questions? <p>Join the GitHub Discussions board.</p>"},{"location":"faq/#need-more-help","title":"\ud83d\ude4b Need more help?","text":"<p>Open an Issue or discussion on GitHub.</p>"},{"location":"manage/","title":"Management Overview","text":"<p>This section provides operational guidance for running and maintaining a production instance of MCP Gateway.</p> <p>Whether you're self-hosting, running in the cloud, or deploying to Kubernetes, this section helps you monitor, back up, and maintain the system.</p>"},{"location":"manage/#whats-covered","title":"\ud83e\udded What's Covered","text":"Page Description Backups How to persist and restore your database, configs, and resource state Export &amp; Import Complete configuration management with CLI, API, and Admin UI Export/Import Tutorial Step-by-step tutorial for getting started with export/import Export/Import Reference Quick reference guide for export/import commands and APIs Bulk Import Import multiple tools at once for migrations and team onboarding Metadata Tracking \ud83d\udcca NEW - Comprehensive audit trails and entity metadata tracking Well-Known URIs Configure robots.txt, security.txt, and custom well-known files Logging Configure structured logging, log destinations, and log rotation"},{"location":"manage/#runtime-config-via-env","title":"\ud83d\udd10 Runtime Config via <code>.env</code>","text":"<p>Most operational settings (logging level, database pool size, auth mode) are controlled through <code>.env</code> or environment variables.</p> <p>Update the file and restart the container or process to apply changes.</p>"},{"location":"manage/#health-readiness","title":"\ud83e\uddea Health &amp; Readiness","text":"<p>Expose the <code>/health</code> endpoint for use with:</p> <ul> <li>Cloud load balancer health checks</li> <li>Kubernetes probes</li> <li>CI/CD smoke tests</li> </ul> <p>Sample check:</p> <pre><code>curl http://localhost:4444/health\n</code></pre> <p>Expected response:</p> <pre><code>{ \"status\": \"healthy\"}\n</code></pre>"},{"location":"manage/#service-restart-commands","title":"\ud83d\udd01 Service Restart Commands","text":"<p>Depending on your environment:</p> <ul> <li><code>docker restart mcpgateway</code></li> <li><code>kubectl rollout restart deployment/mcpgateway</code></li> </ul>"},{"location":"manage/backup/","title":"Backups","text":"<p>MCP Gateway stores its runtime state in a SQL database and optionally in Redis (for sessions and caching). This guide explains how to persist and restore that state safely.</p>"},{"location":"manage/backup/#what-needs-to-be-backed-up","title":"\ud83d\udce6 What Needs to Be Backed Up","text":"Component What It Contains Database (<code>mcp.db</code> or PostgreSQL) All tools, prompts, resources, servers, metrics <code>.env</code> file Environment variables and secrets (e.g. JWT secret, DB URL) Volume-mounted uploads (if any) User-uploaded data or TLS certs Redis (optional) Session tokens, cached resources (only if using <code>CACHE_TYPE=redis</code>)"},{"location":"manage/backup/#backup-strategies","title":"\ud83d\udcbe Backup Strategies","text":""},{"location":"manage/backup/#for-sqlite-default","title":"For SQLite (default)","text":"<pre><code>cp mcp.db backups/mcp-$(date +%F).db\n</code></pre>"},{"location":"manage/backup/#for-postgresql","title":"For PostgreSQL","text":"<pre><code>pg_dump -U youruser -h yourhost -F c -f backups/mcp-$(date +%F).pgdump\n</code></pre> <p>You can also automate this via <code>cron</code> or a container sidecar.</p>"},{"location":"manage/backup/#restore-instructions","title":"\ud83d\udd01 Restore Instructions","text":""},{"location":"manage/backup/#sqlite","title":"SQLite","text":"<pre><code>cp backups/mcp-2024-05-10.db mcp.db\n</code></pre> <p>Restart the gateway afterward.</p>"},{"location":"manage/backup/#postgresql","title":"PostgreSQL","text":"<pre><code>pg_restore -U youruser -d mcp -h yourhost backups/mcp-2024-05-10.pgdump\n</code></pre>"},{"location":"manage/backup/#storing-secrets","title":"\ud83d\uddc3 Storing Secrets","text":"<p>Use a secrets manager (e.g., AWS Secrets Manager, Azure Key Vault, or Kubernetes Secrets) to manage <code>.env</code> contents securely in production.</p>"},{"location":"manage/backup/#verify-your-backup","title":"\ud83e\uddea Verify Your Backup","text":"<p>Run smoke tests:</p> <pre><code>curl -s -k -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/tools\ncurl -s -k -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/prompts\n</code></pre> <p>You should see previously registered tools and templates.</p>"},{"location":"manage/backup/#understanding-the-database-schema","title":"\ud83e\uddec Understanding the Database Schema","text":"<p>MCP Gateway uses a relational database (e.g. SQLite or PostgreSQL) to persist all registered entities and track tool/server usage. When session storage is configured as <code>CACHE_TYPE=database</code>, it also persists active user sessions and streamed message content.</p>"},{"location":"manage/backup/#key-tables","title":"Key Tables","text":"Table Purpose <code>tools</code> Stores registered tools, including schemas and auth configs <code>tool_metrics</code> Tracks execution stats per tool (latency, success/fail) <code>resources</code> Stores static or dynamic URI-based resources <code>resource_metrics</code> Logs usage of resources (access count, latency, etc.) <code>resource_subscriptions</code> Tracks SSE client subscriptions to resources <code>prompts</code> Jinja2 prompt templates with input arguments <code>prompt_metrics</code> Usage metrics for each prompt <code>servers</code> Virtual servers that group tools/resources under an SSE stream <code>server_metrics</code> Invocation stats per server <code>gateways</code> External federated MCP servers added by the admin <code>mcp_sessions</code> Persistent session registry when using <code>CACHE_TYPE=database</code> <code>mcp_messages</code> Persisted streamed content (text/image/etc.) tied to sessions <code>*_association</code> tables Many-to-many mapping between tools/resources/prompts and their servers/gateways"},{"location":"manage/backup/#session-and-message-tables","title":"Session and Message Tables","text":"<p>These only appear when session/messaging backend is set to <code>database</code>:</p> <ul> <li><code>mcp_sessions</code>: Each record is an open session ID (used for SSE streams and client context).</li> <li><code>mcp_messages</code>: Stores streamed messages (text, image, resource) linked to a session-useful for debugging or offline playback.</li> </ul> <p>You can query active sessions:</p> <pre><code>SELECT session_id, created_at FROM mcp_sessions ORDER BY created_at DESC;\n</code></pre> <p>Or inspect message content (JSON-encoded):</p> <pre><code>SELECT content FROM mcp_messages WHERE session_id = 'abc123';\n</code></pre> <p>These tables are cleaned automatically when session TTLs expire, but can also be purged manually if needed.</p>"},{"location":"manage/bulk-import/","title":"Bulk Import Tools","text":"<p>The MCP Gateway provides a bulk import endpoint for efficiently loading multiple tools in a single request, perfect for migrations, environment setup, and team onboarding.</p> <p>Configuration Options</p> <p>This feature is controlled by several environment variables:</p> <ul> <li><code>MCPGATEWAY_BULK_IMPORT_ENABLED=true</code> - Enable/disable the endpoint (default: true)</li> <li><code>MCPGATEWAY_BULK_IMPORT_MAX_TOOLS=200</code> - Maximum tools per batch (default: 200)</li> <li><code>MCPGATEWAY_BULK_IMPORT_RATE_LIMIT=10</code> - Requests per minute limit (default: 10)</li> </ul>"},{"location":"manage/bulk-import/#overview","title":"\ud83d\ude80 Overview","text":"<p>The bulk import feature allows you to register multiple tools at once through both the Admin UI and API, providing:</p> <ul> <li>Per-item validation - One invalid tool won't fail the entire batch</li> <li>Detailed reporting - Know exactly which tools succeeded or failed</li> <li>Rate limiting - Protected against abuse (10 requests/minute)</li> <li>Batch size limits - Maximum 200 tools per request</li> <li>Multiple input formats - JSON payload, form data, or file upload</li> <li>User-friendly UI - Modal dialog with drag-and-drop file support</li> </ul>"},{"location":"manage/bulk-import/#admin-ui-usage","title":"\ud83c\udfa8 Admin UI Usage","text":""},{"location":"manage/bulk-import/#accessing-the-bulk-import-modal","title":"Accessing the Bulk Import Modal","text":"<ol> <li>Navigate to Admin UI - Open your gateway's admin interface at <code>http://localhost:4444/admin</code></li> <li>Go to Tools Tab - Click on the \"Tools\" tab in the main navigation</li> <li>Open Bulk Import - Click the \"+ Bulk Import Tools\" button next to \"Add New Tool\"</li> </ol>"},{"location":"manage/bulk-import/#using-the-modal","title":"Using the Modal","text":"<p>The bulk import modal provides two ways to input tool data:</p>"},{"location":"manage/bulk-import/#option-1-json-textarea","title":"Option 1: JSON Textarea","text":"<ol> <li>Paste JSON directly into the text area</li> <li>Validate format - The modal will check JSON syntax before submission</li> <li>Click Import Tools to process</li> </ol>"},{"location":"manage/bulk-import/#option-2-file-upload","title":"Option 2: File Upload","text":"<ol> <li>Prepare a JSON file with your tools array</li> <li>Click \"Choose File\" and select your <code>.json</code> file</li> <li>Click Import Tools to process</li> </ol>"},{"location":"manage/bulk-import/#ui-features","title":"UI Features","text":"<ul> <li>Real-time validation - JSON syntax checking before submission</li> <li>Loading indicators - Progress spinner during import</li> <li>Detailed results - Success/failure counts with error details</li> <li>Auto-refresh - Page reloads automatically after successful import</li> <li>Modal controls - Close with button, backdrop click, or ESC key</li> </ul>"},{"location":"manage/bulk-import/#api-endpoint","title":"\ud83d\udce1 API Endpoint","text":""},{"location":"manage/bulk-import/#request-methods","title":"Request Methods","text":""},{"location":"manage/bulk-import/#method-1-json-body","title":"Method 1: JSON Body","text":"<pre><code>POST /admin/tools/import\nAuthorization: Bearer &lt;jwt_token&gt;\nContent-Type: application/json\n</code></pre>"},{"location":"manage/bulk-import/#method-2-form-data-json-string","title":"Method 2: Form Data (JSON String)","text":"<pre><code>POST /admin/tools/import\nAuthorization: Bearer &lt;jwt_token&gt;\nContent-Type: multipart/form-data\n\nForm field: tools_json=&lt;json_string&gt;\n</code></pre>"},{"location":"manage/bulk-import/#method-3-file-upload","title":"Method 3: File Upload","text":"<pre><code>POST /admin/tools/import\nAuthorization: Bearer &lt;jwt_token&gt;\nContent-Type: multipart/form-data\n\nForm field: tools_file=&lt;uploaded_json_file&gt;\n</code></pre>"},{"location":"manage/bulk-import/#payload-structure","title":"Payload Structure","text":"<pre><code>[\n  {\n    \"name\": \"tool_name\",\n    \"url\": \"https://api.example.com/endpoint\",\n    \"integration_type\": \"REST\",\n    \"request_type\": \"GET\",\n    \"description\": \"Optional description\",\n    \"headers\": {\n      \"X-API-Key\": \"optional-key\"\n    },\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"param\": {\"type\": \"string\"}\n      }\n    }\n  },\n  // ... more tools\n]\n</code></pre>"},{"location":"manage/bulk-import/#response","title":"Response","text":"<pre><code>{\n  \"success\": true,\n  \"created_count\": 2,\n  \"failed_count\": 1,\n  \"created\": [\n    {\"index\": 0, \"name\": \"tool1\"},\n    {\"index\": 1, \"name\": \"tool2\"}\n  ],\n  \"errors\": [\n    {\n      \"index\": 2,\n      \"name\": \"tool3\",\n      \"error\": {\n        \"message\": \"Validation failed: Invalid request_type\",\n        \"details\": [...]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"manage/bulk-import/#usage-examples","title":"\ud83d\udee0\ufe0f Usage Examples","text":""},{"location":"manage/bulk-import/#using-curl","title":"Using cURL","text":"<pre><code># Generate JWT token\nTOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\\n    --username admin --exp 60 --secret $JWT_SECRET_KEY)\n\n# Import tools from file\ncurl -X POST http://localhost:4444/admin/tools/import \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  --data-binary @tools.json\n</code></pre>"},{"location":"manage/bulk-import/#using-python","title":"Using Python","text":"<pre><code>import requests\nimport json\n\n# Your tools data\ntools = [\n    {\n        \"name\": \"list_users\",\n        \"url\": \"https://api.example.com/users\",\n        \"integration_type\": \"REST\",\n        \"request_type\": \"GET\"\n    },\n    {\n        \"name\": \"create_user\",\n        \"url\": \"https://api.example.com/users\",\n        \"integration_type\": \"REST\",\n        \"request_type\": \"POST\",\n        \"input_schema\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"body\": {\"type\": \"object\"}\n            },\n            \"required\": [\"body\"]\n        }\n    }\n]\n\n# Make the request\nresponse = requests.post(\n    \"http://localhost:4444/admin/tools/import\",\n    headers={\n        \"Authorization\": f\"Bearer {token}\",\n        \"Content-Type\": \"application/json\"\n    },\n    json=tools\n)\n\nresult = response.json()\nprint(f\"Created: {result['created_count']}, Failed: {result['failed_count']}\")\n</code></pre>"},{"location":"manage/bulk-import/#tool-schema-reference","title":"\ud83d\udccb Tool Schema Reference","text":"<p>Each tool in the array must follow this schema:</p> Field Type Required Description <code>name</code> string \u2705 Unique tool identifier <code>url</code> string \u2705 Tool endpoint URL <code>integration_type</code> string \u2705 Must be \"REST\" or \"MCP\" <code>request_type</code> string \u2705 HTTP method: GET, POST, PUT, DELETE, PATCH, SSE, STDIO, STREAMABLEHTTP <code>description</code> string \u274c Human-readable description <code>headers</code> object \u274c HTTP headers to include <code>input_schema</code> object \u274c JSON Schema for input validation <code>output_schema</code> object \u274c JSON Schema for output validation <code>tags</code> array \u274c List of tags for categorization <code>rate_limit</code> integer \u274c Max requests per minute <code>timeout</code> integer \u274c Request timeout in seconds <code>auth_type</code> string \u274c Authentication type: \"basic\", \"bearer\", \"api_key\" <code>auth_value</code> string \u274c Authentication credential"},{"location":"manage/bulk-import/#error-handling","title":"\u26a0\ufe0f Error Handling","text":"<p>The endpoint provides detailed error information for each failed tool:</p>"},{"location":"manage/bulk-import/#validation-errors","title":"Validation Errors","text":"<pre><code>{\n  \"index\": 1,\n  \"name\": \"invalid_tool\",\n  \"error\": {\n    \"message\": \"Validation failed: Invalid request_type\",\n    \"details\": [\n      {\n        \"field\": \"request_type\",\n        \"message\": \"Must be one of: GET, POST, PUT, DELETE, PATCH\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"manage/bulk-import/#duplicate-tools","title":"Duplicate Tools","text":"<pre><code>{\n  \"index\": 2,\n  \"name\": \"existing_tool\",\n  \"error\": {\n    \"message\": \"Tool already exists: existing_tool\"\n  }\n}\n</code></pre>"},{"location":"manage/bulk-import/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ol> <li>Validate locally first - Check your JSON schema before importing</li> <li>Use small batches - Start with 10-20 tools to test your format</li> <li>Handle partial success - Check both created and errors arrays</li> <li>Implement retry logic - For failed items, fix and retry separately</li> <li>Monitor rate limits - Stay under 10 requests per minute</li> </ol>"},{"location":"manage/bulk-import/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":"<ul> <li>Authentication required - All requests must include a valid JWT token</li> <li>Rate limited - 10 requests per minute per IP address</li> <li>Size limited - Maximum 200 tools per request</li> <li>Audit logged - All imports are logged with username and timestamp</li> </ul>"},{"location":"manage/bulk-import/#status-codes","title":"\ud83d\udea6 Status Codes","text":"Code Meaning <code>200</code> Request processed (check success field for results) <code>401</code> Authentication required or invalid token <code>403</code> Feature disabled (MCPGATEWAY_BULK_IMPORT_ENABLED=false) <code>413</code> Payload too large (&gt;200 tools) <code>422</code> Invalid request format <code>429</code> Rate limit exceeded <code>500</code> Internal server error"},{"location":"manage/bulk-import/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Use the bulk import for initial setup and migrations</li> <li>Export existing tools first to understand the schema</li> <li>Test with a small subset before importing hundreds of tools</li> <li>Keep your import files in version control for reproducibility</li> </ul>"},{"location":"manage/export-import-reference/","title":"Export/Import Quick Reference","text":"<p>Quick reference for MCP Gateway configuration export and import commands.</p>"},{"location":"manage/export-import-reference/#cli-commands","title":"\ud83d\ude80 CLI Commands","text":""},{"location":"manage/export-import-reference/#export-commands","title":"Export Commands","text":"<pre><code># Complete backup\nmcpgateway export --out backup.json\n\n# Production tools only\nmcpgateway export --types tools --tags production --out prod-tools.json\n\n# Everything except metrics\nmcpgateway export --exclude-types metrics --out config.json\n\n# Include inactive entities\nmcpgateway export --include-inactive --out complete.json\n\n# Minimal export (no dependencies)\nmcpgateway export --no-dependencies --out minimal.json\n</code></pre>"},{"location":"manage/export-import-reference/#import-commands","title":"Import Commands","text":"<pre><code># Standard import\nmcpgateway import backup.json\n\n# Dry-run validation\nmcpgateway import backup.json --dry-run\n\n# Skip conflicts\nmcpgateway import backup.json --conflict-strategy skip\n\n# Cross-environment with key rotation\nmcpgateway import backup.json --rekey-secret $NEW_SECRET\n\n# Selective import\nmcpgateway import backup.json --include \"tools:api_tool;servers:ai_server\"\n</code></pre>"},{"location":"manage/export-import-reference/#api-endpoints","title":"\ud83c\udf10 API Endpoints","text":""},{"location":"manage/export-import-reference/#export-apis","title":"Export APIs","text":"<pre><code># GET /export - Full export with filters\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/export?types=tools,gateways&amp;include_inactive=true\"\n\n# POST /export/selective - Export specific entities\ncurl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\"tools\": [\"tool1\"], \"servers\": [\"server1\"]}' \\\n  \"http://localhost:4444/export/selective\"\n</code></pre>"},{"location":"manage/export-import-reference/#import-apis","title":"Import APIs","text":"<pre><code># POST /import - Import configuration\ncurl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\"import_data\": {...}, \"conflict_strategy\": \"update\"}' \\\n  \"http://localhost:4444/import\"\n\n# GET /import/status/{id} - Check import progress\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/import/status/import-123\"\n\n# GET /import/status - List all imports\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/import/status\"\n</code></pre>"},{"location":"manage/export-import-reference/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"manage/export-import-reference/#required-environment-variables","title":"Required Environment Variables","text":"<pre><code># Authentication (choose one)\nMCPGATEWAY_BEARER_TOKEN=your-jwt-token\n# OR\nBASIC_AUTH_USER=admin\nBASIC_AUTH_PASSWORD=your-password\n\n# Encryption key for auth data\nAUTH_ENCRYPTION_SECRET=your-32-char-secret\n\n# Gateway connection\nHOST=localhost\nPORT=4444\n</code></pre>"},{"location":"manage/export-import-reference/#optional-settings","title":"Optional Settings","text":"<pre><code># Enable Admin UI for web-based export/import\nMCPGATEWAY_UI_ENABLED=true\nMCPGATEWAY_ADMIN_API_ENABLED=true\n\n# Import limits and timeouts\nMCPGATEWAY_BULK_IMPORT_MAX_TOOLS=200\nMCPGATEWAY_BULK_IMPORT_RATE_LIMIT=10\n</code></pre>"},{"location":"manage/export-import-reference/#conflict-resolution","title":"\ud83c\udfad Conflict Resolution","text":"Strategy Behavior Use Case <code>skip</code> Skip existing entities Additive imports <code>update</code> Overwrite existing entities Environment promotion <code>rename</code> Add timestamp suffix Preserve both versions <code>fail</code> Stop on conflicts Strict validation"},{"location":"manage/export-import-reference/#entity-types","title":"\ud83d\udcca Entity Types","text":"Type Identifier Description <code>tools</code> <code>name</code> REST API tools and MCP integrations <code>gateways</code> <code>name</code> Peer gateway connections <code>servers</code> <code>name</code> Virtual server compositions <code>prompts</code> <code>name</code> Template definitions with schemas <code>resources</code> <code>uri</code> Static and dynamic resources <code>roots</code> <code>uri</code> Filesystem and HTTP root paths"},{"location":"manage/export-import-reference/#filtering-examples","title":"\ud83d\udd0d Filtering Examples","text":""},{"location":"manage/export-import-reference/#by-entity-type","title":"By Entity Type","text":"<pre><code># Tools and gateways only\nmcpgateway export --types tools,gateways\n\n# Everything except servers\nmcpgateway export --exclude-types servers,metrics\n</code></pre>"},{"location":"manage/export-import-reference/#by-tags","title":"By Tags","text":"<pre><code># Production-tagged entities\nmcpgateway export --tags production\n\n# Multiple tags (OR condition)\nmcpgateway export --tags api,data,production\n</code></pre>"},{"location":"manage/export-import-reference/#by-status","title":"By Status","text":"<pre><code># Active entities only (default)\nmcpgateway export\n\n# Include inactive entities\nmcpgateway export --include-inactive\n</code></pre>"},{"location":"manage/export-import-reference/#selective-import","title":"Selective Import","text":"<pre><code># Specific tools and servers\nmcpgateway import backup.json --include \"tools:weather_api,translate;servers:ai_server\"\n\n# Single entity type\nmcpgateway import backup.json --include \"tools:*\"\n</code></pre>"},{"location":"manage/export-import-reference/#troubleshooting-quick-fixes","title":"\ud83d\udd27 Troubleshooting Quick Fixes","text":""},{"location":"manage/export-import-reference/#authentication-error","title":"\"Authentication Error\"","text":"<pre><code>export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 0 --secret my-test-key)\n</code></pre>"},{"location":"manage/export-import-reference/#gateway-connection-failed","title":"\"Gateway Connection Failed\"","text":"<pre><code># Check gateway is running\ncurl http://localhost:4444/health\n\n# Verify port and host\nnetstat -tlnp | grep 4444\n</code></pre>"},{"location":"manage/export-import-reference/#invalid-export-format","title":"\"Invalid Export Format\"","text":"<pre><code># Validate JSON structure\njq empty export.json\n\n# Check required fields\njq 'has(\"version\") and has(\"entities\")' export.json\n</code></pre>"},{"location":"manage/export-import-reference/#encryptiondecryption-failed","title":"\"Encryption/Decryption Failed\"","text":"<pre><code># Ensure consistent encryption key\necho $AUTH_ENCRYPTION_SECRET\n\n# Use same key for export and import environments\nmcpgateway import backup.json --rekey-secret $AUTH_ENCRYPTION_SECRET\n</code></pre>"},{"location":"manage/export-import-reference/#common-workflows","title":"\ud83d\udccb Common Workflows","text":""},{"location":"manage/export-import-reference/#daily-backup","title":"Daily Backup","text":"<pre><code>#!/bin/bash\nDATE=$(date +%F)\nmcpgateway export --out \"backup-$DATE.json\"\necho \"\u2705 Backup created: backup-$DATE.json\"\n</code></pre>"},{"location":"manage/export-import-reference/#environment-sync","title":"Environment Sync","text":"<pre><code>#!/bin/bash\n# Sync staging to production\nmcpgateway export --tags production --out staging-config.json\nmcpgateway import staging-config.json --rekey-secret $PROD_SECRET --dry-run\nmcpgateway import staging-config.json --rekey-secret $PROD_SECRET\n</code></pre>"},{"location":"manage/export-import-reference/#selective-migration","title":"Selective Migration","text":"<pre><code>#!/bin/bash\n# Migrate specific tools between environments\nmcpgateway export --types tools --tags migrate --out tools-migration.json\nmcpgateway import tools-migration.json --include \"tools:*\" --conflict-strategy update\n</code></pre>"},{"location":"manage/export-import-tutorial/","title":"Export/Import Tutorial","text":"<p>Step-by-step tutorial for using MCP Gateway's configuration export and import capabilities.</p>"},{"location":"manage/export-import-tutorial/#prerequisites","title":"\ud83c\udfaf Prerequisites","text":"<ol> <li>Running MCP Gateway: Ensure your gateway is running and accessible</li> <li>Authentication: Configure either JWT token or basic auth credentials</li> <li>Some Configuration: Have at least a few tools, gateways, or servers configured</li> </ol>"},{"location":"manage/export-import-tutorial/#setup-authentication","title":"Setup Authentication","text":"<p>Choose one authentication method:</p> JWT TokenBasic Auth <pre><code># Generate a JWT token\nexport MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\\n    --username admin --exp 0 --secret my-test-key)\n</code></pre> <pre><code># Using default credentials (change in production!)\nexport BASIC_AUTH_USER=admin\nexport BASIC_AUTH_PASSWORD=changeme\n</code></pre>"},{"location":"manage/export-import-tutorial/#tutorial-1-your-first-export","title":"\ud83d\udce4 Tutorial 1: Your First Export","text":"<p>Let's start by exporting your current configuration.</p>"},{"location":"manage/export-import-tutorial/#step-1-check-what-you-have","title":"Step 1: Check What You Have","text":"<pre><code># List your current tools\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/tools\n\n# List your gateways\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     http://localhost:4444/gateways\n</code></pre>"},{"location":"manage/export-import-tutorial/#step-2-export-everything","title":"Step 2: Export Everything","text":"<pre><code># Export complete configuration\nmcpgateway export --out my-first-export.json\n</code></pre> <p>Expected Output: <pre><code>Exporting configuration from gateway at http://127.0.0.1:4444\n\u2705 Export completed successfully!\n\ud83d\udcc1 Output file: my-first-export.json\n\ud83d\udcca Exported 15 total entities:\n   \u2022 tools: 8\n   \u2022 gateways: 2\n   \u2022 servers: 3\n   \u2022 prompts: 2\n</code></pre></p>"},{"location":"manage/export-import-tutorial/#step-3-examine-the-export","title":"Step 3: Examine the Export","text":"<pre><code># View the export structure\njq 'keys' my-first-export.json\n\n# Check entity counts\njq '.metadata.entity_counts' my-first-export.json\n\n# View a sample tool (without showing sensitive auth data)\njq '.entities.tools[0] | {name, url, integration_type}' my-first-export.json\n</code></pre>"},{"location":"manage/export-import-tutorial/#tutorial-2-test-import-with-dry-run","title":"\ud83d\udce5 Tutorial 2: Test Import with Dry Run","text":"<p>Before importing to another environment, let's test the import process.</p>"},{"location":"manage/export-import-tutorial/#step-1-validate-the-export","title":"Step 1: Validate the Export","text":"<pre><code># Run dry-run import to validate\nmcpgateway import my-first-export.json --dry-run\n</code></pre> <p>Expected Output: <pre><code>Importing configuration from my-first-export.json\n\ud83d\udd0d Dry-run validation completed!\n\ud83d\udcca Results:\n   \u2022 Total entities: 15\n   \u2022 Processed: 15\n   \u2022 Created: 0\n   \u2022 Updated: 15\n   \u2022 Skipped: 0\n   \u2022 Failed: 0\n\n\u26a0\ufe0f  Warnings (15):\n   \u2022 Would import tool: weather_api\n   \u2022 Would import gateway: external_service\n   \u2022 Would import server: ai_tools\n   ...\n</code></pre></p>"},{"location":"manage/export-import-tutorial/#step-2-test-different-conflict-strategies","title":"Step 2: Test Different Conflict Strategies","text":"<pre><code># Test skip strategy (won't modify existing entities)\nmcpgateway import my-first-export.json --conflict-strategy skip --dry-run\n\n# Test rename strategy (creates new entities with timestamp)\nmcpgateway import my-first-export.json --conflict-strategy rename --dry-run\n\n# Test fail strategy (stops on first conflict)\nmcpgateway import my-first-export.json --conflict-strategy fail --dry-run\n</code></pre>"},{"location":"manage/export-import-tutorial/#tutorial-3-selective-export-and-import","title":"\ud83c\udfa8 Tutorial 3: Selective Export and Import","text":"<p>Learn to work with specific subsets of your configuration.</p>"},{"location":"manage/export-import-tutorial/#step-1-export-only-tools","title":"Step 1: Export Only Tools","text":"<pre><code># Export just your REST API tools\nmcpgateway export --types tools --out tools-only.json --verbose\n</code></pre> <p>Verbose Output Shows: <pre><code>\ud83d\udd0d Export details:\n   \u2022 Version: 2025-03-26\n   \u2022 Exported at: 2025-01-15T10:30:00Z\n   \u2022 Exported by: admin\n   \u2022 Source: http://127.0.0.1:4444\n</code></pre></p>"},{"location":"manage/export-import-tutorial/#step-2-tagged-export","title":"Step 2: Tagged Export","text":"<pre><code># Export production-ready entities\nmcpgateway export --tags production --out production-config.json\n\n# Export development tools\nmcpgateway export --tags development,staging --out dev-config.json\n</code></pre>"},{"location":"manage/export-import-tutorial/#step-3-selective-import","title":"Step 3: Selective Import","text":"<pre><code># Import only specific tools\nmcpgateway import production-config.json --include \"tools:weather_api,translate_service\"\n\n# Import tools and their dependent servers\nmcpgateway import production-config.json --include \"tools:weather_api;servers:*\"\n</code></pre>"},{"location":"manage/export-import-tutorial/#tutorial-4-cross-environment-migration","title":"\ud83c\udf0d Tutorial 4: Cross-Environment Migration","text":"<p>Migrate configuration from staging to production with different encryption keys.</p>"},{"location":"manage/export-import-tutorial/#scenario-setup","title":"Scenario Setup","text":"<ul> <li>Staging: <code>AUTH_ENCRYPTION_SECRET=staging-secret-123</code></li> <li>Production: <code>AUTH_ENCRYPTION_SECRET=prod-secret-xyz</code></li> </ul>"},{"location":"manage/export-import-tutorial/#step-1-export-from-staging","title":"Step 1: Export from Staging","text":"<pre><code># On staging environment\nmcpgateway export --tags production-ready --out staging-to-prod.json\n</code></pre>"},{"location":"manage/export-import-tutorial/#step-2-import-to-production","title":"Step 2: Import to Production","text":"<pre><code># On production environment\n# First, validate with dry-run\nmcpgateway import staging-to-prod.json \\\n  --rekey-secret prod-secret-xyz \\\n  --conflict-strategy update \\\n  --dry-run\n\n# If validation passes, perform actual import\nmcpgateway import staging-to-prod.json \\\n  --rekey-secret prod-secret-xyz \\\n  --conflict-strategy update\n</code></pre> <p>Expected Output: <pre><code>Importing configuration from staging-to-prod.json\n\u2705 Import completed!\n\ud83d\udcca Results:\n   \u2022 Total entities: 12\n   \u2022 Processed: 12\n   \u2022 Created: 5\n   \u2022 Updated: 7\n   \u2022 Skipped: 0\n   \u2022 Failed: 0\n</code></pre></p>"},{"location":"manage/export-import-tutorial/#tutorial-5-admin-ui-workflow","title":"\ud83d\udda5 Tutorial 5: Admin UI Workflow","text":"<p>Use the web interface for visual export/import management.</p>"},{"location":"manage/export-import-tutorial/#step-1-access-admin-ui","title":"Step 1: Access Admin UI","text":"<ol> <li>Open your browser to <code>http://localhost:4444/admin</code></li> <li>Login with your credentials</li> <li>Navigate to the \"Export/Import\" section</li> </ol>"},{"location":"manage/export-import-tutorial/#step-2-visual-export","title":"Step 2: Visual Export","text":"<ol> <li>Select Entity Types: Check boxes for Tools, Gateways, Servers</li> <li>Apply Filters:</li> <li>Tags: <code>production, api</code></li> <li>Include Inactive: \u2705</li> <li>Export Options:</li> <li>Include Dependencies: \u2705</li> <li>Download: Click \"Export Configuration\"</li> </ol>"},{"location":"manage/export-import-tutorial/#step-3-import-with-preview","title":"Step 3: Import with Preview","text":"<ol> <li>Upload File: Drag-and-drop your export JSON file</li> <li>Preview: Review entity counts and potential conflicts</li> <li>Configure Options:</li> <li>Conflict Strategy: \"Update existing items\"</li> <li>Dry Run: \u2705 (for testing)</li> <li>Execute: Click \"Import Configuration\"</li> <li>Monitor: Watch real-time progress and results</li> </ol>"},{"location":"manage/export-import-tutorial/#tutorial-6-automation-scripts","title":"\ud83d\udd27 Tutorial 6: Automation Scripts","text":"<p>Create reusable scripts for common export/import operations.</p>"},{"location":"manage/export-import-tutorial/#daily-backup-script","title":"Daily Backup Script","text":"<pre><code>#!/bin/bash\n# daily-backup.sh\n\nset -e\n\nDATE=$(date +%F)\nBACKUP_DIR=\"/backups/mcpgateway\"\nBACKUP_FILE=\"$BACKUP_DIR/config-backup-$DATE.json\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Export configuration\necho \"\ud83d\udd04 Starting daily backup for $DATE\"\nmcpgateway export --out \"$BACKUP_FILE\" --verbose\n\n# Verify backup\nif [[ -f \"$BACKUP_FILE\" ]]; then\n    SIZE=$(stat -c%s \"$BACKUP_FILE\")\n    ENTITIES=$(jq '.metadata.entity_counts | add' \"$BACKUP_FILE\")\n    echo \"\u2705 Backup completed: $BACKUP_FILE ($SIZE bytes, $ENTITIES entities)\"\nelse\n    echo \"\u274c Backup failed: file not created\"\n    exit 1\nfi\n\n# Optional: Upload to cloud storage\n# aws s3 cp \"$BACKUP_FILE\" s3://backup-bucket/mcpgateway/\n# gsutil cp \"$BACKUP_FILE\" gs://backup-bucket/mcpgateway/\n</code></pre>"},{"location":"manage/export-import-tutorial/#environment-promotion-script","title":"Environment Promotion Script","text":"<pre><code>#!/bin/bash\n# promote-staging-to-prod.sh\n\nset -e\n\nSTAGING_CONFIG=\"staging-export.json\"\nPROD_SECRET=\"${PROD_ENCRYPTION_SECRET:-prod-secret-key}\"\n\necho \"\ud83d\ude80 Promoting staging configuration to production\"\n\n# Export from staging (assuming we're connected to staging)\necho \"\ud83d\udce4 Exporting staging configuration...\"\nmcpgateway export --tags production-ready --out \"$STAGING_CONFIG\"\n\n# Validate export\nENTITY_COUNT=$(jq '.metadata.entity_counts | add' \"$STAGING_CONFIG\")\necho \"\ud83d\udcca Exported $ENTITY_COUNT entities from staging\"\n\n# Dry run import to production\necho \"\ud83d\udd0d Validating import to production...\"\nmcpgateway import \"$STAGING_CONFIG\" \\\n  --rekey-secret \"$PROD_SECRET\" \\\n  --conflict-strategy update \\\n  --dry-run\n\n# Prompt for confirmation\nread -p \"Proceed with production import? (y/N): \" -n 1 -r\necho\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n    echo \"\ud83d\udce5 Importing to production...\"\n    mcpgateway import \"$STAGING_CONFIG\" \\\n      --rekey-secret \"$PROD_SECRET\" \\\n      --conflict-strategy update \\\n      --verbose\n    echo \"\u2705 Production promotion completed!\"\nelse\n    echo \"\u274c Import cancelled\"\n    exit 1\nfi\n</code></pre>"},{"location":"manage/export-import-tutorial/#selective-tool-migration","title":"Selective Tool Migration","text":"<pre><code>#!/bin/bash\n# migrate-tools.sh\n\nTOOLS_TO_MIGRATE=\"weather_api,translate_service,sentiment_analysis\"\nEXPORT_FILE=\"tool-migration.json\"\n\necho \"\ud83d\udd04 Migrating tools: $TOOLS_TO_MIGRATE\"\n\n# Export current config to find tool IDs\nmcpgateway export --types tools --out all-tools.json\n\n# Create selective export\nmcpgateway export --types tools --out \"$EXPORT_FILE\"\n\n# Import only specified tools\nmcpgateway import \"$EXPORT_FILE\" \\\n  --include \"tools:$TOOLS_TO_MIGRATE\" \\\n  --conflict-strategy update\n\necho \"\u2705 Tool migration completed\"\n</code></pre>"},{"location":"manage/export-import-tutorial/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>After completing these tutorials, you should be able to:</p> <ul> <li>\u2705 Export your complete gateway configuration</li> <li>\u2705 Import configurations with conflict resolution</li> <li>\u2705 Use selective export/import for specific entities</li> <li>\u2705 Migrate configurations between environments</li> <li>\u2705 Set up automated backup and promotion workflows</li> <li>\u2705 Use both CLI and Admin UI interfaces</li> </ul>"},{"location":"manage/export-import-tutorial/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Observability - Monitor export/import operations</li> <li>Securing - Advanced security practices for config management</li> <li>Tuning - Performance optimization for large configurations</li> </ul>"},{"location":"manage/export-import-tutorial/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ol> <li>Check the logs: Gateway logs show detailed export/import operations</li> <li>Validate data: Use <code>jq</code> to verify export file structure</li> <li>Test incrementally: Start with small subsets before full imports</li> <li>Use dry-run: Always validate imports before applying changes</li> <li>Check authentication: Verify tokens and encryption keys are correct</li> </ol> <p>For detailed troubleshooting, see the main Export &amp; Import Guide.</p>"},{"location":"manage/export-import/","title":"Configuration Export &amp; Import","text":"<p>MCP Gateway provides comprehensive configuration export and import capabilities for backup, disaster recovery, environment promotion, and configuration management workflows.</p>"},{"location":"manage/export-import/#overview","title":"\ud83c\udfaf Overview","text":"<p>The export/import system enables complete backup and restoration of your MCP Gateway configuration including:</p> <ul> <li>Tools (locally created REST API tools)</li> <li>Gateways (peer gateway connections)</li> <li>Virtual Servers (server compositions with tool associations)</li> <li>Prompts (template definitions with schemas)</li> <li>Resources (locally defined resources)</li> <li>Roots (filesystem and HTTP root paths)</li> </ul> <p>Note: Only locally configured entities are exported. Dynamic content from federated MCP servers is excluded to ensure exports contain only your gateway's configuration.</p>"},{"location":"manage/export-import/#security-features","title":"\ud83d\udd10 Security Features","text":"<ul> <li>Encrypted Authentication: All sensitive auth data (passwords, tokens, API keys) is encrypted using AES-256-GCM</li> <li>Cross-Environment Support: Key rotation capabilities for moving configs between environments</li> <li>Validation: Complete JSON schema validation for import data integrity</li> <li>Conflict Resolution: Multiple strategies for handling naming conflicts during import</li> </ul>"},{"location":"manage/export-import/#export-methods","title":"\ud83d\udcf1 Export Methods","text":""},{"location":"manage/export-import/#cli-export","title":"CLI Export","text":"<pre><code># Complete system backup\nmcpgateway export --out backup-$(date +%F).json\n\n# Export only production tools\nmcpgateway export --types tools --tags production --out prod-tools.json\n\n# Export specific entity types\nmcpgateway export --types tools,gateways --out core-config.json\n\n# Export with inactive entities included\nmcpgateway export --include-inactive --out complete-backup.json\n\n# Export excluding certain types\nmcpgateway export --exclude-types servers,resources --out minimal-config.json\n</code></pre>"},{"location":"manage/export-import/#cli-export-options","title":"CLI Export Options","text":"Option Description Example <code>--out, -o</code> Output file path <code>--out backup.json</code> <code>--types</code> Entity types to include <code>--types tools,gateways</code> <code>--exclude-types</code> Entity types to exclude <code>--exclude-types servers</code> <code>--tags</code> Filter by tags <code>--tags production,api</code> <code>--include-inactive</code> Include inactive entities <code>--include-inactive</code> <code>--no-dependencies</code> Don't include dependent entities <code>--no-dependencies</code> <code>--verbose, -v</code> Verbose output <code>--verbose</code>"},{"location":"manage/export-import/#rest-api-export","title":"REST API Export","text":"<pre><code># Basic export\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n     \"http://localhost:4444/export\" &gt; export.json\n\n# Export with filters\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n     \"http://localhost:4444/export?types=tools,servers&amp;tags=production\" \\\n     &gt; filtered-export.json\n\n# Selective export (POST with entity selections)\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"tools\": [\"tool1\", \"tool2\"], \"servers\": [\"server1\"]}' \\\n     \"http://localhost:4444/export/selective\" &gt; selective-export.json\n</code></pre>"},{"location":"manage/export-import/#admin-ui-export","title":"Admin UI Export","text":"<ol> <li>Navigate to <code>/admin</code> in your browser</li> <li>Go to the \"Export/Import\" section</li> <li>Select entity types and filters</li> <li>Click \"Export Configuration\"</li> <li>Download the generated JSON file</li> </ol>"},{"location":"manage/export-import/#import-methods","title":"\ud83d\udce5 Import Methods","text":""},{"location":"manage/export-import/#cli-import","title":"CLI Import","text":"<pre><code># Basic import with conflict resolution\nmcpgateway import backup.json --conflict-strategy update\n\n# Dry run to preview changes\nmcpgateway import backup.json --dry-run\n\n# Cross-environment import with key rotation\nmcpgateway import prod-export.json --rekey-secret $NEW_ENV_SECRET\n\n# Selective import of specific entities\nmcpgateway import backup.json --include \"tools:weather_api,translate;servers:ai-server\"\n\n# Import with different conflict strategies\nmcpgateway import backup.json --conflict-strategy skip    # Skip conflicts\nmcpgateway import backup.json --conflict-strategy rename  # Rename conflicting items\nmcpgateway import backup.json --conflict-strategy fail    # Fail on conflicts\n</code></pre>"},{"location":"manage/export-import/#cli-import-options","title":"CLI Import Options","text":"Option Description Values Default <code>--conflict-strategy</code> How to handle conflicts <code>skip</code>, <code>update</code>, <code>rename</code>, <code>fail</code> <code>update</code> <code>--dry-run</code> Validate without changes - <code>false</code> <code>--rekey-secret</code> New encryption secret String - <code>--include</code> Selective import filter <code>type:name1,name2;type2:name3</code> - <code>--verbose, -v</code> Verbose output - <code>false</code>"},{"location":"manage/export-import/#rest-api-import","title":"REST API Import","text":"<pre><code># Basic import\ncurl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d @export.json \\\n     \"http://localhost:4444/import\"\n\n# Import with options\ncurl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"import_data\": {...},\n       \"conflict_strategy\": \"update\",\n       \"dry_run\": false,\n       \"rekey_secret\": \"new-secret\"\n     }' \\\n     \"http://localhost:4444/import\"\n\n# Check import status\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n     \"http://localhost:4444/import/status/IMPORT_ID\"\n</code></pre>"},{"location":"manage/export-import/#admin-ui-import","title":"Admin UI Import","text":"<ol> <li>Navigate to <code>/admin</code> in your browser</li> <li>Go to the \"Export/Import\" section</li> <li>Upload or paste import data</li> <li>Configure conflict resolution strategy</li> <li>Choose entities to import (optional)</li> <li>Run import and monitor progress</li> </ol>"},{"location":"manage/export-import/#conflict-resolution-strategies","title":"\u26a1 Conflict Resolution Strategies","text":"<p>When importing entities that already exist, you can choose how to handle conflicts:</p>"},{"location":"manage/export-import/#skip-strategy","title":"Skip Strategy","text":"<p><pre><code>mcpgateway import backup.json --conflict-strategy skip\n</code></pre> - Behavior: Skip entities that already exist - Use Case: Adding new configs without modifying existing ones - Result: Existing entities remain unmodified</p>"},{"location":"manage/export-import/#update-strategy-default","title":"Update Strategy (Default)","text":"<p><pre><code>mcpgateway import backup.json --conflict-strategy update\n</code></pre> - Behavior: Update existing entities with imported data - Use Case: Environment promotion, configuration updates - Result: Existing entities are overwritten with import data</p>"},{"location":"manage/export-import/#rename-strategy","title":"Rename Strategy","text":"<p><pre><code>mcpgateway import backup.json --conflict-strategy rename\n</code></pre> - Behavior: Rename conflicting entities with timestamp suffix - Use Case: Preserving both old and new configurations - Result: Creates <code>entity_name_imported_1640995200</code></p>"},{"location":"manage/export-import/#fail-strategy","title":"Fail Strategy","text":"<p><pre><code>mcpgateway import backup.json --conflict-strategy fail\n</code></pre> - Behavior: Fail import on any naming conflict - Use Case: Strict imports where conflicts indicate errors - Result: Import stops on first conflict</p>"},{"location":"manage/export-import/#cross-environment-migration","title":"\ud83c\udf0d Cross-Environment Migration","text":""},{"location":"manage/export-import/#key-rotation","title":"Key Rotation","text":"<p>When moving configurations between environments with different encryption keys:</p> <pre><code># Export from source environment\nmcpgateway export --out staging-config.json\n\n# Import to target environment with new key\nmcpgateway import staging-config.json --rekey-secret $PROD_ENCRYPTION_SECRET\n</code></pre>"},{"location":"manage/export-import/#environment-variables","title":"Environment Variables","text":"<p>Ensure these are configured in the target environment:</p> <pre><code># Authentication\nAUTH_ENCRYPTION_SECRET=your-prod-secret\nJWT_SECRET_KEY=your-prod-jwt-secret\n\n# Database\nDATABASE_URL=postgresql://user:pass@prod-db:5432/mcpgateway\n\n# Gateway settings\nHOST=prod.mcpgateway.com\nPORT=443\n</code></pre>"},{"location":"manage/export-import/#export-format","title":"\ud83d\udccb Export Format","text":"<p>Exports follow a standardized JSON schema:</p> <pre><code>{\n  \"version\": \"2025-03-26\",\n  \"exported_at\": \"2025-01-15T10:30:00Z\",\n  \"exported_by\": \"admin\",\n  \"source_gateway\": \"https://gateway.example.com:4444\",\n  \"encryption_method\": \"AES-256-GCM\",\n  \"entities\": {\n    \"tools\": [\n      {\n        \"name\": \"weather_api\",\n        \"url\": \"https://api.weather.com/v1/current\",\n        \"integration_type\": \"REST\",\n        \"request_type\": \"GET\",\n        \"auth_type\": \"bearer\",\n        \"auth_value\": \"encrypted_token_here\",\n        \"tags\": [\"weather\", \"api\"]\n      }\n    ],\n    \"gateways\": [\n      {\n        \"name\": \"production-east\",\n        \"url\": \"https://prod-east.gateway.com:4444\",\n        \"auth_type\": \"basic\",\n        \"auth_value\": \"encrypted_credentials_here\",\n        \"transport\": \"SSE\"\n      }\n    ],\n    \"servers\": [\n      {\n        \"name\": \"ai-tools-server\",\n        \"description\": \"AI tools virtual server\",\n        \"tool_ids\": [\"weather_api\", \"translate_text\"],\n        \"capabilities\": {\"tools\": {\"list_changed\": true}}\n      }\n    ]\n  },\n  \"metadata\": {\n    \"entity_counts\": {\"tools\": 1, \"gateways\": 1, \"servers\": 1},\n    \"dependencies\": {\n      \"servers_to_tools\": {\n        \"ai-tools-server\": [\"weather_api\", \"translate_text\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"manage/export-import/#import-validation","title":"\ud83d\udd0d Import Validation","text":""},{"location":"manage/export-import/#dry-run","title":"Dry Run","text":"<p>Always validate imports before applying changes:</p> <pre><code>mcpgateway import backup.json --dry-run\n</code></pre> <p>Output: <pre><code>\ud83d\udd0d Dry-run validation completed!\n\ud83d\udcca Results:\n   \u2022 Total entities: 15\n   \u2022 Processed: 15\n   \u2022 Would create: 12\n   \u2022 Would update: 3\n   \u2022 Conflicts: 0\n\n\u26a0\ufe0f  Warnings (2):\n   \u2022 Would import tool: weather_api\n   \u2022 Would import gateway: prod-east\n</code></pre></p>"},{"location":"manage/export-import/#schema-validation","title":"Schema Validation","text":"<p>Import data is validated for: - Required Fields: Each entity type has mandatory fields - Data Types: Field types match expected schemas - Dependencies: Referenced entities exist or will be created - Security: Auth data is properly encrypted</p>"},{"location":"manage/export-import/#import-progress-tracking","title":"\ud83d\udcca Import Progress Tracking","text":""},{"location":"manage/export-import/#real-time-status","title":"Real-time Status","text":"<p>Monitor import progress via API:</p> <pre><code># Start import and get import ID\nIMPORT_ID=$(curl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n  -d @backup.json \"http://localhost:4444/import\" | jq -r .import_id)\n\n# Check progress\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/import/status/$IMPORT_ID\"\n</code></pre> <p>Response: <pre><code>{\n  \"import_id\": \"abc-123-def\",\n  \"status\": \"running\",\n  \"progress\": {\n    \"total\": 50,\n    \"processed\": 35,\n    \"created\": 20,\n    \"updated\": 10,\n    \"skipped\": 5,\n    \"failed\": 0\n  },\n  \"errors\": [],\n  \"warnings\": [\"Renamed tool 'duplicate_name' to 'duplicate_name_imported_1640995200'\"]\n}\n</code></pre></p>"},{"location":"manage/export-import/#admin-ui-features","title":"\ud83c\udf9b Admin UI Features","text":""},{"location":"manage/export-import/#export-interface","title":"Export Interface","text":"<ul> <li>Entity Selection: Checkboxes to select specific tools, gateways, servers</li> <li>Filter Options: Tag-based filtering and active/inactive inclusion</li> <li>Dependency Resolution: Automatic inclusion of dependent entities</li> <li>Download Progress: Real-time progress indication for large exports</li> </ul>"},{"location":"manage/export-import/#import-wizard","title":"Import Wizard","text":"<ul> <li>File Upload: Drag-and-drop import file support</li> <li>Conflict Preview: Shows potential naming conflicts before import</li> <li>Resolution Options: Visual selection of conflict resolution strategy</li> <li>Progress Tracking: Real-time import status with error/warning display</li> </ul>"},{"location":"manage/export-import/#automation-cicd","title":"\ud83d\ude80 Automation &amp; CI/CD","text":""},{"location":"manage/export-import/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Config Backup\non:\n  schedule:\n    - cron: '0 2 * * *'  # Daily at 2 AM\n\njobs:\n  backup:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Export Configuration\n        run: |\n          mcpgateway export --out backup-$(date +%F).json\n\n      - name: Upload to S3\n        env:\n          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        run: |\n          aws s3 cp backup-$(date +%F).json s3://backup-bucket/mcpgateway/\n</code></pre>"},{"location":"manage/export-import/#environment-promotion","title":"Environment Promotion","text":"<pre><code>#!/bin/bash\n# promote-to-prod.sh\n\n# Export from staging\nmcpgateway export --types tools,servers --tags production --out prod-config.json\n\n# Import to production with new encryption key\nmcpgateway import prod-config.json \\\n  --rekey-secret $PROD_ENCRYPTION_SECRET \\\n  --conflict-strategy update \\\n  --verbose\n</code></pre>"},{"location":"manage/export-import/#best-practices","title":"\ud83d\udee1 Best Practices","text":""},{"location":"manage/export-import/#security","title":"Security","text":"<ol> <li>Encryption Keys: Use different <code>AUTH_ENCRYPTION_SECRET</code> per environment</li> <li>Access Control: Limit export/import permissions to administrators only</li> <li>Audit Logging: Monitor all export/import operations</li> <li>Secure Storage: Store export files in encrypted storage (S3-SSE, Azure Storage encryption)</li> </ol>"},{"location":"manage/export-import/#operational","title":"Operational","text":"<ol> <li>Regular Backups: Schedule daily exports via cron or CI/CD</li> <li>Version Control: Store export files in Git for configuration versioning</li> <li>Testing: Always use <code>--dry-run</code> before production imports</li> <li>Monitoring: Set up alerts for failed import operations</li> </ol>"},{"location":"manage/export-import/#performance","title":"Performance","text":"<ol> <li>Selective Exports: Use filters to reduce export size</li> <li>Incremental Imports: Import only changed entities when possible</li> <li>Batch Processing: The import service processes entities in optimal dependency order</li> <li>Progress Tracking: Use status APIs for long-running imports</li> </ol>"},{"location":"manage/export-import/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"manage/export-import/#common-issues","title":"Common Issues","text":""},{"location":"manage/export-import/#export-fails-with-no-entities-found","title":"Export Fails with \"No entities found\"","text":"<pre><code># Check if entities exist\ncurl -H \"Authorization: Bearer $TOKEN\" http://localhost:4444/tools\ncurl -H \"Authorization: Bearer $TOKEN\" http://localhost:4444/gateways\n\n# Check entity status (may be inactive)\nmcpgateway export --include-inactive --types tools\n</code></pre>"},{"location":"manage/export-import/#import-fails-with-invalid-authentication-data","title":"Import Fails with \"Invalid authentication data\"","text":"<pre><code># Try re-keying with current environment's secret\nmcpgateway import backup.json --rekey-secret $AUTH_ENCRYPTION_SECRET\n\n# Or check the source environment's encryption key\necho \"Source AUTH_ENCRYPTION_SECRET may differ from target environment\"\n</code></pre>"},{"location":"manage/export-import/#import-conflicts-not-resolving","title":"Import Conflicts Not Resolving","text":"<pre><code># Use verbose mode to see detailed conflict resolution\nmcpgateway import backup.json --conflict-strategy update --verbose\n\n# Or use dry-run to preview conflicts\nmcpgateway import backup.json --dry-run\n</code></pre>"},{"location":"manage/export-import/#large-import-times-out","title":"Large Import Times Out","text":"<pre><code># Use selective import for large configurations\nmcpgateway import large-backup.json --include \"tools:tool1,tool2;servers:server1\"\n\n# Or import in batches by entity type\nmcpgateway import backup.json --types tools\nmcpgateway import backup.json --types gateways\nmcpgateway import backup.json --types servers\n</code></pre>"},{"location":"manage/export-import/#error-codes","title":"Error Codes","text":"HTTP Code Meaning Resolution 400 Bad Request - Invalid data Check export file format and required fields 401 Unauthorized Verify <code>MCPGATEWAY_BEARER_TOKEN</code> or basic auth credentials 409 Conflict Naming conflicts detected - choose resolution strategy 422 Validation Error Export data doesn't match expected schema 500 Internal Error Check server logs for detailed error information"},{"location":"manage/export-import/#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"manage/export-import/#export-endpoints","title":"Export Endpoints","text":"Method Endpoint Description <code>GET</code> <code>/export</code> Full configuration export with filters <code>POST</code> <code>/export/selective</code> Export specific entities by ID/name"},{"location":"manage/export-import/#import-endpoints","title":"Import Endpoints","text":"Method Endpoint Description <code>POST</code> <code>/import</code> Import configuration with conflict resolution <code>GET</code> <code>/import/status/{id}</code> Get import operation status <code>GET</code> <code>/import/status</code> List all import operations <code>POST</code> <code>/import/cleanup</code> Clean up completed import statuses"},{"location":"manage/export-import/#query-parameters","title":"Query Parameters","text":"<p>Export (<code>GET /export</code>): - <code>types</code> - Comma-separated entity types - <code>exclude_types</code> - Entity types to exclude - <code>tags</code> - Tag-based filtering - <code>include_inactive</code> - Include inactive entities - <code>include_dependencies</code> - Include dependent entities</p> <p>Import (<code>POST /import</code>): <pre><code>{\n  \"import_data\": { /* export data */ },\n  \"conflict_strategy\": \"update\",\n  \"dry_run\": false,\n  \"rekey_secret\": \"optional-new-secret\",\n  \"selected_entities\": {\n    \"tools\": [\"tool1\", \"tool2\"],\n    \"servers\": [\"server1\"]\n  }\n}\n</code></pre></p>"},{"location":"manage/export-import/#environment-variables_1","title":"\ud83c\udf9b Environment Variables","text":"<p>Configure export/import behavior:</p> <pre><code># Authentication (required for API access)\nMCPGATEWAY_BEARER_TOKEN=your-jwt-token\n# OR\nBASIC_AUTH_USER=admin\nBASIC_AUTH_PASSWORD=your-password\n\n# Encryption for auth data\nAUTH_ENCRYPTION_SECRET=your-encryption-key\n\n# Gateway connection\nHOST=localhost\nPORT=4444\n</code></pre>"},{"location":"manage/export-import/#use-cases","title":"\ud83d\udcc8 Use Cases","text":""},{"location":"manage/export-import/#disaster-recovery","title":"Disaster Recovery","text":"<pre><code># 1. Regular automated backups\n0 2 * * * /usr/local/bin/mcpgateway export --out /backups/daily-$(date +\\%F).json\n\n# 2. Restore from backup\nmcpgateway import /backups/daily-2025-01-15.json --conflict-strategy update\n</code></pre>"},{"location":"manage/export-import/#environment-promotion_1","title":"Environment Promotion","text":"<pre><code># 1. Export production-ready configs from staging\nmcpgateway export --tags production --out staging-to-prod.json\n\n# 2. Import to production\nmcpgateway import staging-to-prod.json --rekey-secret $PROD_SECRET --dry-run\nmcpgateway import staging-to-prod.json --rekey-secret $PROD_SECRET\n</code></pre>"},{"location":"manage/export-import/#configuration-versioning","title":"Configuration Versioning","text":"<pre><code># 1. Export current state\nmcpgateway export --out config-v1.2.3.json\n\n# 2. Commit to version control\ngit add config-v1.2.3.json\ngit commit -m \"Configuration snapshot v1.2.3\"\n\n# 3. Restore specific version later\nmcpgateway import config-v1.2.3.json --conflict-strategy update\n</code></pre>"},{"location":"manage/export-import/#multi-environment-setup","title":"Multi-Environment Setup","text":"<pre><code># Development \u2192 Staging \u2192 Production pipeline\n\n# Export from dev (filtered for staging)\nmcpgateway export --tags staging-ready --out dev-to-staging.json\n\n# Import to staging\nmcpgateway import dev-to-staging.json --rekey-secret $STAGING_SECRET\n\n# Export from staging (filtered for production)\nmcpgateway export --tags production-ready --out staging-to-prod.json\n\n# Import to production\nmcpgateway import staging-to-prod.json --rekey-secret $PROD_SECRET\n</code></pre>"},{"location":"manage/export-import/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>Backup &amp; Restore - Database-level backup strategies</li> <li>Bulk Import - Bulk tool import from external sources</li> <li>Securing - Security best practices and encryption</li> <li>Observability - Monitoring export/import operations</li> </ul>"},{"location":"manage/logging-examples/","title":"Logging Examples for MCP Gateway","text":"<p>This document provides practical examples of using the logging features in MCP Gateway.</p>"},{"location":"manage/logging-examples/#quick-start-examples","title":"Quick Start Examples","text":""},{"location":"manage/logging-examples/#1-default-setup-recommended","title":"1. Default Setup (Recommended)","text":"<pre><code># Default: logs only to stdout/stderr (great for containers)\nexport LOG_LEVEL=INFO\nmcpgateway --host 0.0.0.0 --port 4444\n# Logs appear in console only - no files created\n</code></pre>"},{"location":"manage/logging-examples/#2-development-with-file-logging-no-rotation","title":"2. Development with File Logging (No Rotation)","text":"<pre><code># Enable file logging for development without rotation\nexport LOG_TO_FILE=true\nexport LOG_LEVEL=DEBUG\nexport LOG_FOLDER=./dev-logs\nexport LOG_FILE=debug.log\nmcpgateway --host 0.0.0.0 --port 4444\n# Logs to both console (text format) AND ./dev-logs/debug.log (JSON format, grows indefinitely)\n</code></pre>"},{"location":"manage/logging-examples/#3-development-with-file-rotation","title":"3. Development with File Rotation","text":"<pre><code># Enable file logging with small rotation for development\nexport LOG_TO_FILE=true\nexport LOG_ROTATION_ENABLED=true\nexport LOG_MAX_SIZE_MB=1\nexport LOG_BACKUP_COUNT=3\nexport LOG_LEVEL=DEBUG\nexport LOG_FOLDER=./dev-logs\nexport LOG_FILE=debug.log\nmcpgateway --host 0.0.0.0 --port 4444\n# Logs rotate at 1MB with 3 backup files kept (console: text, files: JSON)\n</code></pre>"},{"location":"manage/logging-examples/#4-production-with-file-logging-no-rotation","title":"4. Production with File Logging (No Rotation)","text":"<pre><code># Production logging with JSON format, no rotation (managed externally)\nexport LOG_TO_FILE=true\nexport LOG_LEVEL=INFO\nexport LOG_FOLDER=/var/log/mcpgateway\nexport LOG_FILE=gateway.log\nexport LOG_FILEMODE=a+\nmcpgateway --host 0.0.0.0 --port 4444\n# Logs to both console AND /var/log/mcpgateway/gateway.log\n</code></pre>"},{"location":"manage/logging-examples/#5-production-with-file-rotation","title":"5. Production with File Rotation","text":"<pre><code># Production logging with automatic rotation\nexport LOG_TO_FILE=true\nexport LOG_ROTATION_ENABLED=true\nexport LOG_MAX_SIZE_MB=50\nexport LOG_BACKUP_COUNT=7\nexport LOG_LEVEL=INFO\nexport LOG_FOLDER=/var/log/mcpgateway\nexport LOG_FILE=gateway.log\nmcpgateway --host 0.0.0.0 --port 4444\n# Files rotate at 50MB with 7 backup files (weekly retention)\n</code></pre>"},{"location":"manage/logging-examples/#6-monitoring-specific-components-requires-file-logging","title":"6. Monitoring Specific Components (requires file logging)","text":"<pre><code># First enable file logging\nexport LOG_TO_FILE=true\nexport LOG_FILE=mcpgateway.log\nexport LOG_FOLDER=logs\n\n# Then monitor tool service activities\ntail -f logs/mcpgateway.log | grep \"tool_service\"\n\n# Watch for errors across all services\ntail -f logs/mcpgateway.log | grep \"ERROR\\|WARNING\"\n\n# Pretty-print JSON logs\ntail -f logs/mcpgateway.log | jq '.'\n</code></pre>"},{"location":"manage/logging-examples/#configuration-examples","title":"Configuration Examples","text":""},{"location":"manage/logging-examples/#env-file-configuration","title":".env File Configuration","text":"<pre><code># Default: stdout/stderr only\nLOG_LEVEL=INFO\nLOG_FORMAT=json\n\n# Optional: Enable file logging (no rotation)\nLOG_TO_FILE=true\nLOG_FILE=mcpgateway.log\nLOG_FOLDER=logs\nLOG_FILEMODE=a+\n\n# Optional: Enable file logging with rotation\nLOG_TO_FILE=true\nLOG_ROTATION_ENABLED=true\nLOG_MAX_SIZE_MB=10\nLOG_BACKUP_COUNT=5\nLOG_FILE=mcpgateway.log\nLOG_FOLDER=logs\n</code></pre>"},{"location":"manage/logging-examples/#dockercontainer-configuration","title":"Docker/Container Configuration","text":"<pre><code># docker-compose.yml\nservices:\n  mcpgateway:\n    image: ghcr.io/ibm/mcp-context-forge:0.6.0\n    environment:\n      - LOG_LEVEL=INFO\n      # Default: logs to stdout/stderr only (recommended for containers)\n      # Optional: Enable file logging (no rotation)\n      # - LOG_TO_FILE=true\n      # - LOG_FOLDER=/app/logs\n      # - LOG_FILE=gateway.log\n      # Optional: Enable file logging with rotation\n      # - LOG_TO_FILE=true\n      # - LOG_ROTATION_ENABLED=true\n      # - LOG_MAX_SIZE_MB=10\n      # - LOG_BACKUP_COUNT=3\n      # - LOG_FOLDER=/app/logs\n      # - LOG_FILE=gateway.log\n    # volumes:\n    #   - ./logs:/app/logs  # Only needed if LOG_TO_FILE=true\n</code></pre>"},{"location":"manage/logging-examples/#kubernetes-configuration","title":"Kubernetes Configuration","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcpgateway\nspec:\n  template:\n    spec:\n      containers:\n      - name: mcpgateway\n        env:\n        - name: LOG_LEVEL\n          value: \"INFO\"\n        # Default: logs to stdout/stderr (recommended for Kubernetes)\n        # Optional: Enable file logging (no rotation)\n        # - name: LOG_TO_FILE\n        #   value: \"true\"\n        # - name: LOG_FOLDER\n        #   value: \"/var/log/mcpgateway\"\n        # - name: LOG_FILE\n        #   value: \"gateway.log\"\n        # Optional: Enable file logging with rotation\n        # - name: LOG_TO_FILE\n        #   value: \"true\"\n        # - name: LOG_ROTATION_ENABLED\n        #   value: \"true\"\n        # - name: LOG_MAX_SIZE_MB\n        #   value: \"20\"\n        # - name: LOG_BACKUP_COUNT\n        #   value: \"5\"\n        # - name: LOG_FOLDER\n        #   value: \"/var/log/mcpgateway\"\n        # - name: LOG_FILE\n        #   value: \"gateway.log\"\n        # volumeMounts:  # Only needed if LOG_TO_FILE=true\n        # - name: log-storage\n        #   mountPath: /var/log/mcpgateway\n</code></pre>"},{"location":"manage/logging-examples/#log-analysis-examples","title":"Log Analysis Examples","text":"<p>Note: The following examples require file logging to be enabled with <code>LOG_TO_FILE=true</code>. For stdout/stderr logs, use standard shell redirection and pipes instead.</p>"},{"location":"manage/logging-examples/#1-finding-errors-and-issues","title":"1. Finding Errors and Issues","text":"<pre><code># Find all errors\ngrep \"ERROR\" logs/mcpgateway.log\n\n# Find warnings and errors\ngrep -E \"ERROR|WARNING\" logs/mcpgateway.log\n\n# Get context around errors (5 lines before and after)\ngrep -B5 -A5 \"ERROR\" logs/mcpgateway.log\n</code></pre>"},{"location":"manage/logging-examples/#2-monitoring-service-activity","title":"2. Monitoring Service Activity","text":"<pre><code># Gateway service activity\ngrep \"gateway_service\" logs/mcpgateway.log | tail -20\n\n# Tool invocations\ngrep \"tool_service.*invoke\" logs/mcpgateway.log\n\n# Federation activity\ngrep \"federation\" logs/mcpgateway.log\n</code></pre>"},{"location":"manage/logging-examples/#3-performance-analysis","title":"3. Performance Analysis","text":"<pre><code># Look for slow operations (if duration logging is enabled)\ngrep \"duration\" logs/mcpgateway.log | sort -k5 -nr\n\n# Database operations\ngrep \"database\" logs/mcpgateway.log\n\n# HTTP request/response logs\ngrep -E \"HTTP|request\" logs/mcpgateway.log\n</code></pre>"},{"location":"manage/logging-examples/#log-format-examples","title":"Log Format Examples","text":""},{"location":"manage/logging-examples/#json-format-file-output","title":"JSON Format (File Output)","text":"<pre><code>{\n  \"asctime\": \"2025-01-09 17:30:15,123\",\n  \"name\": \"mcpgateway.gateway_service\",\n  \"levelname\": \"INFO\",\n  \"message\": \"Gateway peer-gateway-1 registered successfully\",\n  \"funcName\": \"register_gateway\",\n  \"lineno\": 245,\n  \"module\": \"gateway_service\",\n  \"pathname\": \"/app/mcpgateway/services/gateway_service.py\"\n}\n</code></pre>"},{"location":"manage/logging-examples/#text-format-console-output","title":"Text Format (Console Output)","text":"<pre><code>2025-01-09 17:30:15,123 - mcpgateway.gateway_service - INFO - Gateway peer-gateway-1 registered successfully\n2025-01-09 17:30:16,456 - mcpgateway.tool_service - DEBUG - Tool 'get_weather' invoked with args: {'location': 'New York'}\n2025-01-09 17:30:17,789 - mcpgateway.admin - WARNING - Authentication failed for user: anonymous\n</code></pre>"},{"location":"manage/logging-examples/#integration-examples","title":"Integration Examples","text":""},{"location":"manage/logging-examples/#1-elk-stack-integration","title":"1. ELK Stack Integration","text":"<pre><code># Configure Filebeat to ship logs\n# filebeat.yml\nfilebeat.inputs:\n- type: log\n  paths:\n    - /var/log/mcpgateway/*.log\n  json.keys_under_root: true\n  json.add_error_key: true\n</code></pre>"},{"location":"manage/logging-examples/#2-datadog-integration","title":"2. Datadog Integration","text":"<pre><code># Configure Datadog agent\n# datadog.yaml\nlogs_config:\n  logs_dd_url: intake.logs.datadoghq.com:10516\n\nlogs:\n  - type: file\n    path: \"/var/log/mcpgateway/*.log\"\n    service: mcpgateway\n    source: python\n    sourcecategory: mcp\n</code></pre>"},{"location":"manage/logging-examples/#3-prometheusgrafana-monitoring","title":"3. Prometheus/Grafana Monitoring","text":"<pre><code># Use log-based metrics with promtail\n# promtail-config.yml\nscrape_configs:\n- job_name: mcpgateway\n  static_configs:\n  - targets:\n    - localhost\n    labels:\n      job: mcpgateway\n      __path__: /var/log/mcpgateway/*.log\n</code></pre>"},{"location":"manage/logging-examples/#troubleshooting-examples","title":"Troubleshooting Examples","text":""},{"location":"manage/logging-examples/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li> <p>Log files not rotating <pre><code># Check if rotation is enabled\necho \"LOG_ROTATION_ENABLED: $LOG_ROTATION_ENABLED\"\necho \"LOG_MAX_SIZE_MB: $LOG_MAX_SIZE_MB\"\necho \"LOG_BACKUP_COUNT: $LOG_BACKUP_COUNT\"\n\n# Check file permissions and available disk space\nls -la logs/\ndf -h\n\n# Check current file size (should be under LOG_MAX_SIZE_MB)\nls -lh logs/mcpgateway.log\n</code></pre></p> </li> <li> <p>Missing log directory <pre><code># The directory is created automatically, but check permissions\nmkdir -p logs\nchmod 755 logs\n</code></pre></p> </li> <li> <p>Too many log files (with rotation disabled) <pre><code># Clean up old rotated logs beyond LOG_BACKUP_COUNT\n# For LOG_BACKUP_COUNT=5, remove .log.6 and higher\nfind logs/ -name \"*.log.[6-9]\" -delete\nfind logs/ -name \"*.log.1[0-9]\" -delete\n</code></pre></p> </li> <li> <p>Files not rotating despite size limit <pre><code># Check if rotation is properly enabled\ngrep -i \"rotation\" logs/mcpgateway.log | tail -5\n\n# Force check file size vs limit\nactual_size=$(stat -c%s logs/mcpgateway.log)\nlimit_bytes=$((LOG_MAX_SIZE_MB * 1024 * 1024))\necho \"Actual: $actual_size bytes, Limit: $limit_bytes bytes\"\n</code></pre></p> </li> <li> <p>Rotation happening too frequently <pre><code># Increase LOG_MAX_SIZE_MB if files rotate too often\nexport LOG_MAX_SIZE_MB=50  # Increase from default 1MB to 50MB\n\n# Or disable rotation for external log management\nexport LOG_ROTATION_ENABLED=false\n</code></pre></p> </li> <li> <p>JSON parsing errors <pre><code># Validate JSON format\ncat logs/mcpgateway.log | jq empty\n\n# Show only invalid JSON lines\ncat logs/mcpgateway.log | while read line; do\n  echo \"$line\" | jq empty 2&gt;/dev/null || echo \"Invalid: $line\"\ndone\n</code></pre></p> </li> </ol>"},{"location":"manage/logging-examples/#best-practices","title":"Best Practices","text":"<ol> <li>Production Logging</li> <li>Use <code>INFO</code> level for production</li> <li>Enable JSON format for log aggregation</li> <li>Configure log rotation based on expected volume:<ul> <li>High traffic: <code>LOG_MAX_SIZE_MB=50</code>, <code>LOG_BACKUP_COUNT=7</code></li> <li>Medium traffic: <code>LOG_MAX_SIZE_MB=10</code>, <code>LOG_BACKUP_COUNT=5</code></li> <li>Low traffic: Consider disabling rotation</li> </ul> </li> <li> <p>Monitor disk space usage</p> </li> <li> <p>Development Logging</p> </li> <li>Use <code>DEBUG</code> level for detailed troubleshooting</li> <li>Use text format for human readability</li> <li>Enable rotation with small files: <code>LOG_MAX_SIZE_MB=1</code>, <code>LOG_BACKUP_COUNT=3</code></li> <li> <p>Keep log files local for quick access</p> </li> <li> <p>Security Considerations</p> </li> <li>Ensure log files don't contain sensitive data</li> <li>Protect log directories with proper permissions</li> <li> <p>Rotate logs regularly to prevent disk filling</p> </li> <li> <p>Performance Considerations</p> </li> <li>Avoid excessive DEBUG logging in production</li> <li>Monitor log I/O performance</li> <li>Use appropriate log levels for different components</li> </ol>"},{"location":"manage/logging/","title":"Logging","text":"<p>MCP Gateway provides comprehensive file-based logging with automatic rotation, dual-format output (JSON for files, text for console), and centralized logging service integration. This guide shows how to configure log levels, formats, destinations, and file management.</p>"},{"location":"manage/logging/#log-structure","title":"\ud83e\uddfe Log Structure","text":"<p>MCP Gateway uses dual-format logging:</p> <ul> <li>File logs: Structured JSON format for machine processing and log aggregation</li> <li>Console logs: Human-readable text format for development and debugging</li> </ul>"},{"location":"manage/logging/#json-format-file-output","title":"JSON Format (File Output)","text":"<pre><code>{\n  \"asctime\": \"2025-01-09 17:30:15,123\",\n  \"name\": \"mcpgateway.gateway_service\",\n  \"levelname\": \"INFO\",\n  \"message\": \"Registered gateway: peer-gateway-1\"\n}\n</code></pre>"},{"location":"manage/logging/#http-access-logs-json","title":"HTTP Access Logs (JSON)","text":"<pre><code>{\n  \"asctime\": \"2025-01-09 17:30:22,456\",\n  \"name\": \"uvicorn.access\",\n  \"levelname\": \"INFO\",\n  \"message\": \"127.0.0.1:43926 - \\\"GET /version HTTP/1.1\\\" 401\"\n}\n</code></pre>"},{"location":"manage/logging/#text-format-console-output","title":"Text Format (Console Output)","text":"<pre><code>2025-01-09 17:30:15,123 - mcpgateway.gateway_service - INFO - Registered gateway: peer-gateway-1\n</code></pre>"},{"location":"manage/logging/#configuring-logs","title":"\ud83d\udd27 Configuring Logs","text":"<p>MCP Gateway provides flexible logging with stdout/stderr by default and optional file logging. You can control logging behavior using <code>.env</code> settings or environment variables:</p> Variable Description Default Example <code>LOG_LEVEL</code> Minimum log level <code>INFO</code> <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code> <code>LOG_FORMAT</code> Console log format <code>json</code> <code>json</code> or <code>text</code> <code>LOG_TO_FILE</code> Enable file logging <code>false</code> <code>true</code>, <code>false</code> <code>LOG_FILE</code> Log filename (when enabled) <code>null</code> <code>gateway.log</code> <code>LOG_FOLDER</code> Directory for log files <code>null</code> <code>/var/log/mcpgateway</code> <code>LOG_FILEMODE</code> File write mode <code>a+</code> <code>a+</code> (append), <code>w</code> (overwrite) <code>LOG_ROTATION_ENABLED</code> Enable log file rotation <code>false</code> <code>true</code>, <code>false</code> <code>LOG_MAX_SIZE_MB</code> Max file size before rotation (MB) <code>1</code> <code>10</code>, <code>50</code>, <code>100</code> <code>LOG_BACKUP_COUNT</code> Number of backup files to keep <code>5</code> <code>3</code>, <code>10</code>, <code>0</code> (no backups)"},{"location":"manage/logging/#logging-behavior","title":"Logging Behavior","text":"<ul> <li>Default: Logs only to stdout/stderr with human-readable text format (recommended for containers)</li> <li>File Logging: When <code>LOG_TO_FILE=true</code>, logs to both file (JSON format) and console (text format)</li> <li>Log Rotation: When <code>LOG_ROTATION_ENABLED=true</code>, files rotate at <code>LOG_MAX_SIZE_MB</code> with <code>LOG_BACKUP_COUNT</code> backup files</li> <li>No Rotation: When <code>LOG_ROTATION_ENABLED=false</code>, files grow indefinitely (append mode)</li> <li>Directory Creation: Log folder is created automatically if it doesn't exist</li> <li>Dual Output: JSON logs to file, text logs to console simultaneously (when file logging enabled)</li> </ul>"},{"location":"manage/logging/#example-configurations","title":"Example Configurations","text":"<pre><code># Default: stdout/stderr only (recommended for containers)\nLOG_LEVEL=INFO\n# No additional config needed - logs to stdout/stderr only\n\n# Optional: Enable file logging (no rotation)\nLOG_TO_FILE=true\nLOG_FOLDER=/var/log/mcpgateway\nLOG_FILE=gateway.log\nLOG_FILEMODE=a+\n\n# Production with file rotation\nLOG_TO_FILE=true\nLOG_ROTATION_ENABLED=true\nLOG_MAX_SIZE_MB=10\nLOG_BACKUP_COUNT=7\nLOG_FOLDER=/var/log/mcpgateway\nLOG_FILE=gateway.log\n\n# Development with file logging and rotation\nLOG_TO_FILE=true\nLOG_ROTATION_ENABLED=true\nLOG_MAX_SIZE_MB=1\nLOG_BACKUP_COUNT=3\nLOG_LEVEL=DEBUG\nLOG_FOLDER=./logs\nLOG_FILE=debug.log\nLOG_FORMAT=text\n</code></pre>"},{"location":"manage/logging/#log-file-management","title":"\ud83d\udcc2 Log File Management","text":"<p>Note: This section applies only when file logging is enabled with <code>LOG_TO_FILE=true</code>. By default, MCP Gateway logs only to stdout/stderr.</p>"},{"location":"manage/logging/#viewing-log-files","title":"Viewing Log Files","text":"<pre><code># View current log file\ncat logs/mcpgateway.log\n\n# Follow log file in real-time\ntail -f logs/mcpgateway.log\n\n# View with JSON formatting (requires jq)\ntail -f logs/mcpgateway.log | jq '.'\n\n# Search logs for specific patterns\ngrep \"ERROR\" logs/mcpgateway.log\ngrep \"gateway_service\" logs/*.log\n</code></pre>"},{"location":"manage/logging/#log-rotation","title":"Log Rotation","text":"<p>Log rotation is optional and only applies when both file logging and rotation are enabled:</p> <ul> <li><code>LOG_TO_FILE=true</code> - Enable file logging</li> <li><code>LOG_ROTATION_ENABLED=true</code> - Enable rotation</li> </ul> <p>When enabled, files automatically rotate based on the configured size limit (<code>LOG_MAX_SIZE_MB</code>):</p> <pre><code>logs/\n\u251c\u2500\u2500 mcpgateway.log      (current, active log)\n\u251c\u2500\u2500 mcpgateway.log.1    (most recent backup)\n\u251c\u2500\u2500 mcpgateway.log.2    (second backup)\n\u251c\u2500\u2500 mcpgateway.log.3    (third backup)\n\u2514\u2500\u2500 ...                 (up to LOG_BACKUP_COUNT backups)\n</code></pre> <p>Configuration Options: - <code>LOG_MAX_SIZE_MB=10</code> - Rotate when file reaches 10MB - <code>LOG_BACKUP_COUNT=3</code> - Keep 3 backup files (plus current file = 4 total) - <code>LOG_BACKUP_COUNT=0</code> - No backup files (only current file kept)</p> <p>Without Rotation: - When <code>LOG_ROTATION_ENABLED=false</code>, files grow indefinitely - Use external log management tools for cleanup if needed</p>"},{"location":"manage/logging/#cleanup-and-maintenance","title":"Cleanup and Maintenance","text":"<pre><code># Archive old logs (optional)\ntar -czf mcpgateway-logs-$(date +%Y%m%d).tar.gz logs/mcpgateway.log.*\n\n# Clear all log files (be careful!)\nrm logs/mcpgateway.log*\n\n# Check log file sizes\ndu -sh logs/*\n</code></pre>"},{"location":"manage/logging/#admin-ui-log-viewer","title":"\ud83d\udda5\ufe0f Admin UI Log Viewer","text":"<p>MCP Gateway includes a built-in log viewer in the Admin UI that provides real-time monitoring, filtering, and export capabilities without requiring direct file access.</p>"},{"location":"manage/logging/#enabling-the-log-viewer","title":"Enabling the Log Viewer","text":"<p>The log viewer is automatically available when the Admin UI is enabled:</p> <pre><code># Enable Admin UI (includes log viewer)\nMCPGATEWAY_UI_ENABLED=true\n\n# Configure in-memory log buffer size (default: 1MB)\nLOG_BUFFER_SIZE_MB=2  # Increase for more log history\n</code></pre>"},{"location":"manage/logging/#features","title":"Features","text":""},{"location":"manage/logging/#real-time-monitoring","title":"Real-Time Monitoring","text":"<ul> <li>Live streaming via Server-Sent Events (SSE)</li> <li>Automatic updates as new logs are generated</li> <li>Visual indicators with pulse animation for new entries</li> <li>Color-coded severity levels:</li> <li>Debug: Gray</li> <li>Info: Blue</li> <li>Warning: Yellow</li> <li>Error: Red</li> <li>Critical: Purple</li> </ul>"},{"location":"manage/logging/#filtering-search","title":"Filtering &amp; Search","text":"<ul> <li>Filter by log level: Debug, Info, Warning, Error, Critical</li> <li>Filter by entity type: Tool, Resource, Server, Gateway</li> <li>Full-text search: Search within log messages</li> <li>Time range filtering: Filter by date/time range</li> <li>Request ID tracing: Track logs for specific requests</li> </ul>"},{"location":"manage/logging/#export-capabilities","title":"Export Capabilities","text":"<ul> <li>Export to JSON: Download filtered logs as JSON file</li> <li>Export to CSV: Download filtered logs as CSV file</li> <li>Download log files: Direct access to rotated log files (if file logging enabled)</li> </ul>"},{"location":"manage/logging/#accessing-the-log-viewer","title":"Accessing the Log Viewer","text":"<ol> <li>Navigate to the Admin UI: <code>http://localhost:4444/admin</code></li> <li>Click the \"Logs\" tab in the navigation</li> <li>Use the filter controls to refine your view:</li> <li>Select entity type from dropdown</li> <li>Choose minimum log level</li> <li>Enter search terms</li> <li>Set pagination options</li> </ol>"},{"location":"manage/logging/#api-endpoints","title":"API Endpoints","text":"<p>The log viewer also exposes REST API endpoints for programmatic access:</p> <pre><code># Get filtered logs\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/admin/logs?level=error&amp;limit=50\"\n\n# Stream logs in real-time (SSE)\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/admin/logs/stream\"\n\n# Export logs as JSON\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/admin/logs/export?format=json\" \\\n  -o logs.json\n\n# List available log files\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/admin/logs/file\"\n</code></pre>"},{"location":"manage/logging/#buffer-management","title":"Buffer Management","text":"<p>The log viewer uses an in-memory circular buffer with configurable size:</p> <ul> <li>Default size: 1MB (approximately 2000-5000 log entries)</li> <li>Size-based eviction: Oldest logs automatically removed when buffer is full</li> <li>No persistence: Buffer is cleared on server restart</li> <li>Performance: Minimal memory overhead with O(1) operations</li> </ul>"},{"location":"manage/logging/#configuration-options","title":"Configuration Options","text":"Variable Description Default Example <code>LOG_BUFFER_SIZE_MB</code> In-memory buffer size for UI viewer <code>1</code> <code>2</code>, <code>5</code>, <code>10</code>"},{"location":"manage/logging/#best-practices","title":"Best Practices","text":"<ol> <li>Adjust buffer size based on your monitoring needs:</li> <li>Development: 1-2MB is usually sufficient</li> <li> <p>Production: Consider 5-10MB for longer history</p> </li> <li> <p>Use filters to focus on relevant logs:</p> </li> <li>Filter by error level during troubleshooting</li> <li> <p>Filter by entity when debugging specific components</p> </li> <li> <p>Export regularly if you need to preserve logs:</p> </li> <li>The buffer is in-memory only and clears on restart</li> <li> <p>Export important logs to JSON/CSV for archival</p> </li> <li> <p>Combine with file logging for persistence:</p> </li> <li>UI viewer for real-time monitoring</li> <li>File logs for long-term storage and analysis</li> </ol>"},{"location":"manage/logging/#streaming-logs-containers","title":"\ud83d\udce1 Streaming Logs (Containers)","text":"<pre><code>docker logs -f mcpgateway\n# or with Podman\npodman logs -f mcpgateway\n</code></pre>"},{"location":"manage/logging/#shipping-logs-to-external-services","title":"\ud83d\udce4 Shipping Logs to External Services","text":"<p>MCP Gateway can write to stdout or a file. To forward logs to services like:</p> <ul> <li>ELK (Elastic Stack)</li> <li>LogDNA / IBM Log Analysis</li> <li>Datadog</li> <li>Fluentd / Loki</li> </ul> <p>You can:</p> <ul> <li>Mount log files to a sidecar container</li> <li>Use a logging agent (e.g., Filebeat)</li> <li>Pipe logs to syslog-compatible services</li> </ul>"},{"location":"manage/logging/#debug-mode","title":"\ud83e\uddea Debug Mode","text":"<p>For development and troubleshooting, enable verbose logging:</p> <pre><code># Enable debug logging\nLOG_LEVEL=DEBUG\nLOG_FORMAT=text\nLOG_FOLDER=./debug-logs\nLOG_FILE=debug.log\nDEBUG=true\n</code></pre>"},{"location":"manage/logging/#debug-features","title":"Debug Features","text":"<ul> <li>HTTP Access Logs: All HTTP requests with IP, method, path, status code (via <code>uvicorn.access</code>)</li> <li>HTTP Error Logs: Server errors, invalid requests (via <code>uvicorn.error</code>)</li> <li>Internal Service Logs: Database queries, cache operations, federation</li> <li>Transport Layer Logs: WebSocket, SSE, and stdio communication</li> <li>Plugin System Logs: Hook execution and plugin lifecycle events</li> </ul>"},{"location":"manage/logging/#useful-debug-commands","title":"Useful Debug Commands","text":"<pre><code># Start with debug logging\nLOG_LEVEL=DEBUG mcpgateway --host 0.0.0.0 --port 4444\n\n# Debug specific components\ngrep \"gateway_service\" logs/mcpgateway.log | tail -20\ngrep \"ERROR\\|WARNING\" logs/mcpgateway.log\n\n# Monitor in real-time during development\ntail -f logs/mcpgateway.log | grep \"tool_service\"\n</code></pre>"},{"location":"manage/metadata-tracking/","title":"\ud83d\udcca Metadata Tracking &amp; Audit Trails","text":"<p>MCP Gateway provides comprehensive metadata tracking for all entities (Tools, Resources, Prompts, Servers, Gateways) to enable enterprise-grade audit trails, compliance monitoring, and operational troubleshooting.</p>"},{"location":"manage/metadata-tracking/#overview","title":"\ud83c\udfaf Overview","text":"<p>Every entity in MCP Gateway now includes detailed metadata about: - Who created or modified the entity - When the operation occurred - From where (IP address, user agent) - How it was created (UI, API, bulk import, federation) - Source tracking for federated entities and bulk operations</p>"},{"location":"manage/metadata-tracking/#metadata-fields","title":"\ud83d\udcca Metadata Fields","text":"<p>All entities include the following metadata fields:</p> Category Field Description Example Values Creation <code>created_by</code> Username who created entity <code>\"admin\"</code>, <code>\"alice\"</code>, <code>\"anonymous\"</code> <code>created_at</code> Creation timestamp <code>\"2024-01-15T10:30:00Z\"</code> <code>created_from_ip</code> IP address of creator <code>\"192.168.1.100\"</code>, <code>\"10.0.0.1\"</code> <code>created_via</code> Creation method <code>\"ui\"</code>, <code>\"api\"</code>, <code>\"import\"</code>, <code>\"federation\"</code> <code>created_user_agent</code> Browser/client info <code>\"Mozilla/5.0\"</code>, <code>\"curl/7.68.0\"</code> Modification <code>modified_by</code> Last modifier username <code>\"bob\"</code>, <code>\"system\"</code>, <code>\"anonymous\"</code> <code>modified_at</code> Last modification timestamp <code>\"2024-01-16T14:22:00Z\"</code> <code>modified_from_ip</code> IP of last modifier <code>\"172.16.0.1\"</code> <code>modified_via</code> Modification method <code>\"ui\"</code>, <code>\"api\"</code> <code>modified_user_agent</code> Client of last change <code>\"HTTPie/2.4.0\"</code> Source <code>import_batch_id</code> Bulk import UUID <code>\"550e8400-e29b-41d4-a716-446655440000\"</code> <code>federation_source</code> Source gateway name <code>\"gateway-prod-east\"</code> <code>version</code> Change tracking version <code>1</code>, <code>2</code>, <code>3</code>\u2026"},{"location":"manage/metadata-tracking/#viewing-metadata","title":"\ud83d\udda5\ufe0f Viewing Metadata","text":""},{"location":"manage/metadata-tracking/#admin-ui","title":"Admin UI","text":"<p>Metadata is displayed in the detail view modals for all entity types:</p> <ol> <li>Navigate to any entity list (Tools, Resources, Prompts, Servers, Gateways)</li> <li>Click \"View\" on any entity</li> <li>Scroll down to the \"Metadata\" section</li> </ol> <p>Example metadata display: <pre><code>\u250c\u2500 Metadata \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Created By:      admin                           \u2502\n\u2502 Created At:      1/15/2024, 10:30:00 AM        \u2502\n\u2502 Created From:    192.168.1.100                  \u2502\n\u2502 Created Via:     ui                              \u2502\n\u2502 Last Modified By: alice                          \u2502\n\u2502 Last Modified At: 1/16/2024, 2:22:00 PM        \u2502\n\u2502 Version:         3                               \u2502\n\u2502 Import Batch:    N/A                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"manage/metadata-tracking/#api-responses","title":"API Responses","text":"<p>All entity read endpoints include metadata fields in JSON responses:</p> <pre><code># Get tool with metadata\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n     http://localhost:4444/tools/abc123\n\n{\n  \"id\": \"abc123\",\n  \"name\": \"example_tool\",\n  \"description\": \"Example tool\",\n  \"createdBy\": \"admin\",\n  \"createdAt\": \"2024-01-15T10:30:00Z\",\n  \"createdFromIp\": \"192.168.1.100\",\n  \"createdVia\": \"ui\",\n  \"createdUserAgent\": \"Mozilla/5.0...\",\n  \"modifiedBy\": \"alice\",\n  \"modifiedAt\": \"2024-01-16T14:22:00Z\",\n  \"version\": 3,\n  \"importBatchId\": null,\n  \"federationSource\": null,\n  ...\n}\n</code></pre>"},{"location":"manage/metadata-tracking/#metadata-by-source-type","title":"\ud83d\udd0d Metadata by Source Type","text":""},{"location":"manage/metadata-tracking/#manual-creation-uiapi","title":"Manual Creation (UI/API)","text":"<ul> <li><code>created_via</code>: <code>\"ui\"</code> or <code>\"api\"</code></li> <li><code>created_by</code>: Authenticated username</li> <li><code>created_from_ip</code>: Client IP address</li> <li><code>federation_source</code>: <code>null</code></li> <li><code>import_batch_id</code>: <code>null</code></li> </ul>"},{"location":"manage/metadata-tracking/#bulk-import-operations","title":"Bulk Import Operations","text":"<ul> <li><code>created_via</code>: <code>\"import\"</code></li> <li><code>import_batch_id</code>: UUID linking related imports</li> <li><code>created_by</code>: User who initiated import</li> <li><code>federation_source</code>: <code>null</code></li> </ul>"},{"location":"manage/metadata-tracking/#federation-mcp-server-discovery","title":"Federation (MCP Server Discovery)","text":"<ul> <li><code>created_via</code>: <code>\"federation\"</code></li> <li><code>federation_source</code>: Source gateway name</li> <li><code>created_by</code>: User who registered the gateway</li> <li><code>import_batch_id</code>: <code>null</code></li> </ul>"},{"location":"manage/metadata-tracking/#legacy-entities-pre-metadata","title":"Legacy Entities (Pre-Metadata)","text":"<ul> <li>All metadata fields: <code>null</code></li> <li>UI displays: <code>\"Legacy Entity\"</code>, <code>\"Pre-metadata\"</code></li> <li><code>version</code>: <code>1</code> (automatically assigned)</li> </ul>"},{"location":"manage/metadata-tracking/#authentication-compatibility","title":"\ud83d\udee1\ufe0f Authentication Compatibility","text":"<p>Metadata tracking works seamlessly across all authentication modes:</p>"},{"location":"manage/metadata-tracking/#with-authentication-auth_requiredtrue","title":"With Authentication (<code>AUTH_REQUIRED=true</code>)","text":"<pre><code># Example: User \"admin\" creates a tool\n{\n  \"createdBy\": \"admin\",\n  \"createdVia\": \"api\",\n  \"createdFromIp\": \"192.168.1.100\"\n}\n</code></pre>"},{"location":"manage/metadata-tracking/#without-authentication-auth_requiredfalse","title":"Without Authentication (<code>AUTH_REQUIRED=false</code>)","text":"<pre><code># Example: Anonymous creation\n{\n  \"createdBy\": \"anonymous\",\n  \"createdVia\": \"api\",\n  \"createdFromIp\": \"192.168.1.100\"\n}\n</code></pre>"},{"location":"manage/metadata-tracking/#jwt-vs-basic-authentication","title":"JWT vs Basic Authentication","text":"<ul> <li>JWT Authentication: Extracts username from token payload (<code>username</code> or <code>sub</code> field)</li> <li>Basic Authentication: Uses provided username directly</li> <li>Both formats handled gracefully by the <code>extract_username()</code> utility</li> </ul>"},{"location":"manage/metadata-tracking/#version-tracking","title":"\ud83d\udd04 Version Tracking","text":"<p>Each entity maintains a version number that increments on modifications:</p> <pre><code># Initial creation\nPOST /tools -&gt; version: 1\n\n# First update\nPUT /tools/123 -&gt; version: 2\n\n# Second update\nPUT /tools/123 -&gt; version: 3\n</code></pre> <p>Version tracking helps identify: - Configuration drift between environments - Change frequency for troubleshooting - Rollback points for recovery scenarios</p>"},{"location":"manage/metadata-tracking/#use-cases","title":"\ud83d\udcc8 Use Cases","text":""},{"location":"manage/metadata-tracking/#security-auditing","title":"Security Auditing","text":"<ul> <li>Track who created/modified sensitive configurations</li> <li>Identify unauthorized changes by IP address</li> <li>Monitor bulk import operations for compliance</li> </ul>"},{"location":"manage/metadata-tracking/#operational-troubleshooting","title":"Operational Troubleshooting","text":"<ul> <li>Trace entity origins during incident response</li> <li>Identify batch operations that may have caused issues</li> <li>Understand federation dependencies between gateways</li> </ul>"},{"location":"manage/metadata-tracking/#compliance-reporting","title":"Compliance Reporting","text":"<ul> <li>Generate audit reports for regulatory requirements</li> <li>Track change management processes</li> <li>Demonstrate access controls and change attribution</li> </ul>"},{"location":"manage/metadata-tracking/#development-testing","title":"Development &amp; Testing","text":"<ul> <li>Identify test vs production entities</li> <li>Track deployment-specific configurations</li> <li>Monitor cross-environment migrations</li> </ul>"},{"location":"manage/metadata-tracking/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"manage/metadata-tracking/#no-additional-setup-required","title":"No Additional Setup Required","text":"<p>Metadata tracking is automatically enabled for all new installations and upgrades:</p> <ul> <li>Database migration runs automatically on startup</li> <li>Existing entities show graceful fallbacks for missing metadata</li> <li>No environment variables needed - uses existing <code>AUTH_REQUIRED</code> setting</li> </ul>"},{"location":"manage/metadata-tracking/#proxy-support","title":"Proxy Support","text":"<p>Metadata capture automatically handles reverse proxy scenarios:</p> <pre><code># Respects X-Forwarded-For headers\nX-Forwarded-For: 203.0.113.1, 192.168.1.1, 127.0.0.1\n# Records: created_from_ip = \"203.0.113.1\" (original client)\n</code></pre>"},{"location":"manage/metadata-tracking/#privacy-considerations","title":"Privacy Considerations","text":"<p>The system captures IP addresses and user agents for audit purposes:</p> <ul> <li>IP addresses: Consider GDPR/privacy implications for EU deployments</li> <li>User agents: May contain personally identifiable information</li> <li>Data retention: Define policies for metadata archival</li> <li>Access control: Metadata follows same permissions as parent entity</li> </ul>"},{"location":"manage/metadata-tracking/#migration-guide","title":"\ud83d\ude80 Migration Guide","text":""},{"location":"manage/metadata-tracking/#upgrading-existing-deployments","title":"Upgrading Existing Deployments","text":"<ol> <li> <p>Automatic Migration <pre><code># Migration runs automatically on startup\n# Or run manually:\nalembic upgrade head\n</code></pre></p> </li> <li> <p>Verify Migration</p> </li> <li>Check admin UI - all entities show metadata sections</li> <li>API responses include new metadata fields</li> <li> <p>Legacy entities display gracefully</p> </li> <li> <p>No Downtime Required</p> </li> <li>All metadata columns are nullable</li> <li>Existing functionality unmodified</li> <li>Gradual adoption of metadata features</li> </ol>"},{"location":"manage/metadata-tracking/#metadata-backfill-optional","title":"Metadata Backfill (Optional)","text":"<p>For enhanced audit trails, optionally backfill known metadata:</p> <pre><code>-- Backfill system-created entities\nUPDATE tools SET\n    created_by = 'system',\n    created_via = 'migration',\n    version = 1\nWHERE created_by IS NULL;\n\n-- Similar for other entity tables\nUPDATE gateways SET created_by = 'system', created_via = 'migration', version = 1 WHERE created_by IS NULL;\nUPDATE servers SET created_by = 'system', created_via = 'migration', version = 1 WHERE created_by IS NULL;\nUPDATE prompts SET created_by = 'system', created_via = 'migration', version = 1 WHERE created_by IS NULL;\nUPDATE resources SET created_by = 'system', created_via = 'migration', version = 1 WHERE created_by IS NULL;\n</code></pre>"},{"location":"manage/metadata-tracking/#future-enhancements","title":"\ud83d\udd2e Future Enhancements","text":""},{"location":"manage/metadata-tracking/#enhanced-audit-features","title":"Enhanced Audit Features","text":"<ul> <li>Change history tracking - Before/after state comparison</li> <li>Metadata-based filtering - Search entities by creator, date, source</li> <li>Audit log export - Generate compliance reports</li> <li>Custom metadata fields - User-defined entity attributes</li> </ul>"},{"location":"manage/metadata-tracking/#cross-gateway-features","title":"Cross-Gateway Features","text":"<ul> <li>Metadata synchronization across federated gateways</li> <li>Trust scoring based on metadata quality</li> <li>Provenance tracking for complex federation scenarios</li> </ul>"},{"location":"manage/metadata-tracking/#analytics-integration","title":"Analytics Integration","text":"<ul> <li>Usage pattern analysis from metadata</li> <li>Creator activity dashboards</li> <li>Import/export trend monitoring</li> </ul>"},{"location":"manage/metadata-tracking/#api-examples","title":"\ud83d\udccb API Examples","text":""},{"location":"manage/metadata-tracking/#creating-entities-with-metadata","title":"Creating Entities with Metadata","text":"<p>Metadata is captured automatically - no additional parameters needed:</p> <pre><code># Create tool - metadata captured automatically\ncurl -X POST http://localhost:4444/tools \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"example_tool\",\n    \"url\": \"http://example.com/api\",\n    \"integration_type\": \"REST\",\n    \"request_type\": \"GET\"\n  }'\n\n# Response includes metadata\n{\n  \"id\": \"abc123\",\n  \"name\": \"example_tool\",\n  \"createdBy\": \"admin\",\n  \"createdAt\": \"2024-01-15T10:30:00Z\",\n  \"createdVia\": \"api\",\n  \"version\": 1,\n  ...\n}\n</code></pre>"},{"location":"manage/metadata-tracking/#filtering-by-metadata-future","title":"Filtering by Metadata (Future)","text":"<pre><code># Future enhancement - filter by creator\nGET /tools?created_by=admin\n\n# Filter by creation method\nGET /tools?created_via=federation\n\n# Filter by date range\nGET /tools?created_after=2024-01-01&amp;created_before=2024-01-31\n</code></pre>"},{"location":"manage/metadata-tracking/#faq","title":"\u2753 FAQ","text":""},{"location":"manage/metadata-tracking/#q-will-this-affect-existing-deployments","title":"Q: Will this affect existing deployments?","text":"<p>A: No breaking changes. Existing entities show graceful fallbacks, all APIs work unmodified.</p>"},{"location":"manage/metadata-tracking/#q-what-happens-if-authentication-is-disabled","title":"Q: What happens if authentication is disabled?","text":"<p>A: Metadata still works - <code>created_by</code> will be <code>\"anonymous\"</code> instead of a username.</p>"},{"location":"manage/metadata-tracking/#q-how-much-storage-does-metadata-require","title":"Q: How much storage does metadata require?","text":"<p>A: Minimal - approximately 13 additional nullable text columns per entity.</p>"},{"location":"manage/metadata-tracking/#q-can-i-disable-metadata-tracking","title":"Q: Can I disable metadata tracking?","text":"<p>A: Not currently - metadata is core to the audit system. All fields are optional and backwards compatible.</p>"},{"location":"manage/metadata-tracking/#q-how-do-i-export-metadata-for-compliance","title":"Q: How do I export metadata for compliance?","text":"<p>A: Use the standard export functionality - metadata is included in all entity exports.</p> <p>This comprehensive metadata system provides enterprise-grade audit capabilities while maintaining full backwards compatibility and operational simplicity.</p>"},{"location":"manage/oauth/","title":"OAuth 2.0 Integration","text":"<p>This guide explains how to configure and operate OAuth 2.0 authentication for MCP Gateway when connecting to MCP servers or downstream APIs on behalf of users or services.</p> <p>Related design docs: - Architecture: oauth-design.md - UI Flow: oauth-authorization-code-ui-design.md</p>"},{"location":"manage/oauth/#what-you-get","title":"What You Get","text":"<ul> <li>Client Credentials and Authorization Code flows</li> <li>Per-gateway OAuth configuration with encrypted client secrets</li> <li>Fresh tokens on demand (no caching by default)</li> <li>Optional token storage and refresh for user flows (per design)</li> <li>Admin UI support for configuring providers</li> </ul> <p>Tip</p> <p>OAuth is configured per Gateway. Tools that route through a gateway configured for OAuth inherit the token behavior.</p>"},{"location":"manage/oauth/#supported-flows","title":"Supported Flows","text":"<ul> <li>Client Credentials (machine-to-machine)</li> <li>Uses client ID/secret to fetch access tokens</li> <li>Best for service integrations without user consent</li> <li>Authorization Code (user delegation)</li> <li>Redirects the user to the provider for consent</li> <li>Exchanges code for access token, with optional refresh tokens</li> </ul> <p>See the flow details and security model in the architecture docs.</p>"},{"location":"manage/oauth/#prerequisites","title":"Prerequisites","text":"<ul> <li>An OAuth 2.0 provider (e.g., GitHub, Google, custom OIDC)</li> <li>A registered application with:</li> <li>Client ID and Client Secret</li> <li>Authorization URL and Token URL</li> <li>Redirect URI pointing to the gateway callback (for Authorization Code)</li> </ul>"},{"location":"manage/oauth/#environment-variables","title":"Environment Variables","text":"<pre><code># OAuth HTTP behavior\nOAUTH_REQUEST_TIMEOUT=30      # Seconds\nOAUTH_MAX_RETRIES=3           # Retries for transient failures\n\n# Secret encryption for stored OAuth client secrets (and tokens if enabled)\nAUTH_ENCRYPTION_SECRET=&lt;strong-random-key&gt;\n</code></pre> <p>Important</p> <p>Always run MCP Gateway over HTTPS when using OAuth. Never transmit client secrets or authorization codes over insecure channels.</p>"},{"location":"manage/oauth/#configure-a-gateway-admin-ui","title":"Configure a Gateway (Admin UI)","text":"<ol> <li>Open Admin UI \u2192 Gateways \u2192 New Gateway (or Edit).</li> <li>Set Authentication type = OAuth.</li> <li>Choose Grant Type:</li> <li>client_credentials</li> <li>authorization_code</li> <li>Fill fields:</li> <li>Client ID</li> <li>Client Secret (stored encrypted at rest)</li> <li>Token URL</li> <li>Scopes (space-separated)</li> <li>Authorization URL and Redirect URI (required for Authorization Code)</li> <li>Save.</li> </ol> <p>Field mapping follows the architecture proposal and is used by the OAuth Manager service to request tokens.</p>"},{"location":"manage/oauth/#configure-a-gateway-jsonapi","title":"Configure a Gateway (JSON/API)","text":"<p>Example OAuth-enabled gateway record:</p> <pre><code>{\n  \"name\": \"GitHub MCP\",\n  \"url\": \"https://github-mcp.example.com/sse\",\n  \"auth_type\": \"oauth\",\n  \"oauth_config\": {\n    \"grant_type\": \"authorization_code\",\n    \"client_id\": \"your_github_app_id\",\n    \"client_secret\": \"your_github_app_secret\",\n    \"authorization_url\": \"https://github.com/login/oauth/authorize\",\n    \"token_url\": \"https://github.com/login/oauth/access_token\",\n    \"redirect_uri\": \"https://gateway.example.com/oauth/callback\",\n    \"scopes\": [\"repo\", \"read:user\"]\n  }\n}\n</code></pre> <p>For Client Credentials, omit <code>authorization_url</code> and <code>redirect_uri</code> and set <code>grant_type</code> to <code>client_credentials</code>.</p>"},{"location":"manage/oauth/#redirect-uri-and-callback","title":"Redirect URI and Callback","text":"<ul> <li>Default callback path: <code>/oauth/callback</code></li> <li>Your provider must whitelist the full redirect URI, e.g. <code>https://gateway.example.com/oauth/callback</code></li> <li>The gateway handles exchanging the authorization code for an access token and applies it as <code>Authorization: Bearer &lt;token&gt;</code> when contacting the MCP server</li> </ul> <p>Sequence (Authorization Code):</p> <pre><code>sequenceDiagram\n    participant User\n    participant Gateway as MCP Gateway\n    participant OAuth as OAuth Provider\n    participant MCP as MCP Server\n\n    User-&gt;&gt;Gateway: Request OAuth-enabled operation\n    Gateway-&gt;&gt;Gateway: Generate authorization URL\n    Gateway--&gt;&gt;User: 302 Redirect to provider\n    User-&gt;&gt;OAuth: Login and consent\n    OAuth--&gt;&gt;Gateway: Redirect (code, state)\n    Gateway-&gt;&gt;OAuth: POST /token (code)\n    OAuth--&gt;&gt;Gateway: Access token (\u00b1refresh)\n    Gateway-&gt;&gt;MCP: Request with Bearer token\n    MCP--&gt;&gt;Gateway: Response\n    Gateway--&gt;&gt;User: Result</code></pre>"},{"location":"manage/oauth/#token-storage-and-refresh-optional","title":"Token Storage and Refresh (Optional)","text":"<p>By default, access tokens are fetched on-demand and not persisted. The Authorization Code UI design introduces optional storage and refresh:</p> <ul> <li>Store tokens per gateway + user</li> <li>Auto-refresh using refresh tokens when near expiry</li> <li>Encrypt tokens at rest using <code>AUTH_ENCRYPTION_SECRET</code></li> </ul> <p>If enabled in future releases, you will be able to toggle token storage and auto-refresh in the gateway's OAuth settings. See oauth-authorization-code-ui-design.md.</p>"},{"location":"manage/oauth/#provider-examples","title":"Provider Examples","text":""},{"location":"manage/oauth/#github-authorization-code","title":"GitHub (Authorization Code)","text":"<ul> <li>Authorization URL: <code>https://github.com/login/oauth/authorize</code></li> <li>Token URL: <code>https://github.com/login/oauth/access_token</code></li> <li>Scopes: <code>repo read:user</code></li> <li>Redirect URI: <code>https://&lt;your-domain&gt;/oauth/callback</code></li> </ul>"},{"location":"manage/oauth/#generic-oidc-client-credentials","title":"Generic OIDC (Client Credentials)","text":"<ul> <li>Token URL: <code>https://idp.example.com/oauth2/token</code></li> <li>Scopes: provider-specific</li> <li>No redirect required</li> </ul>"},{"location":"manage/oauth/#security-recommendations","title":"Security Recommendations","text":"<ul> <li>Use least-privilege scopes</li> <li>Run behind HTTPS only (including callback)</li> <li>Rotate client secrets and avoid plaintext storage</li> <li>Restrict who can create/modify OAuth-configured gateways</li> <li>Monitor token fetch errors and rate limits from providers</li> </ul> <p>See also: securing.md for general hardening guidance and proxy.md for fronting the gateway with an auth proxy.</p>"},{"location":"manage/oauth/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>401 from MCP after OAuth: verify scopes and that token is attached as <code>Authorization: Bearer</code> by the gateway</li> <li>Provider denies callback: check exact Redirect URI match and HTTPS</li> <li>Invalid client: confirm Client ID/Secret and application registration</li> <li>State mismatch: ensure a single round-trip and correct domain/cookies</li> <li>Timeouts: increase <code>OAUTH_REQUEST_TIMEOUT</code> or investigate provider availability</li> </ul>"},{"location":"manage/oauth/#faq","title":"FAQ","text":"<ul> <li>Can I use PKCE? Not yet; planned as a future enhancement.</li> <li>Can I configure per-tool OAuth? Roadmap considers multiple OAuth configs per tool; current design is per-gateway.</li> <li>Do you cache tokens? Default is no caching; tokens are fetched per operation. Optional storage/refresh is planned per the UI design.</li> </ul>"},{"location":"manage/observability/","title":"Observability","text":"<p>MCP Gateway includes production-grade OpenTelemetry instrumentation for distributed tracing, enabling you to monitor performance, debug issues, and understand request flows.</p>"},{"location":"manage/observability/#documentation","title":"Documentation","text":"<ul> <li>Observability Overview - Complete guide to configuring and using observability</li> <li>Phoenix Integration - AI/LLM-focused observability with Arize Phoenix</li> </ul>"},{"location":"manage/observability/#quick-start","title":"Quick Start","text":"<pre><code># Enable observability (enabled by default)\nexport OTEL_ENABLE_OBSERVABILITY=true\nexport OTEL_TRACES_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n\n# Start Phoenix for AI/LLM observability\ndocker run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest\n\n# Run MCP Gateway\nmcpgateway\n</code></pre> <p>View traces at http://localhost:6006</p>"},{"location":"manage/proxy/","title":"Proxy Authentication","text":"<p>Configure MCP Gateway to work with authentication proxies for enterprise deployments.</p>"},{"location":"manage/proxy/#overview","title":"Overview","text":"<p>MCP Gateway supports proxy authentication, allowing you to disable built-in JWT authentication and rely on an upstream authentication proxy. This is essential for enterprise deployments where authentication is centralized through OAuth2, SAML, or other identity providers.</p>"},{"location":"manage/proxy/#architecture","title":"Architecture","text":""},{"location":"manage/proxy/#standard-jwt-authentication-flow","title":"Standard JWT Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Gateway as MCP Gateway\n    participant MCP as MCP Server\n\n    Client-&gt;&gt;Client: Generate JWT Token\n    Client-&gt;&gt;Gateway: Request + Bearer Token\n    Gateway-&gt;&gt;Gateway: Validate JWT\n    alt Valid Token\n        Gateway-&gt;&gt;MCP: Forward Request\n        MCP--&gt;&gt;Gateway: Response\n        Gateway--&gt;&gt;Client: Response\n    else Invalid Token\n        Gateway--&gt;&gt;Client: 401 Unauthorized\n    end</code></pre>"},{"location":"manage/proxy/#proxy-authentication-flow","title":"Proxy Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Proxy as Auth Proxy\n    participant IDP as Identity Provider\n    participant Gateway as MCP Gateway\n    participant MCP as MCP Server\n\n    User-&gt;&gt;Proxy: Request\n    Proxy-&gt;&gt;IDP: Validate Session\n    IDP--&gt;&gt;Proxy: User Identity\n    Proxy-&gt;&gt;Gateway: Request + X-Authenticated-User\n    Gateway-&gt;&gt;Gateway: Extract User from Header\n    Gateway-&gt;&gt;MCP: Forward Request\n    MCP--&gt;&gt;Gateway: Response\n    Gateway--&gt;&gt;Proxy: Response\n    Proxy--&gt;&gt;User: Response</code></pre>"},{"location":"manage/proxy/#configuration","title":"Configuration","text":""},{"location":"manage/proxy/#environment-variables","title":"Environment Variables","text":"Variable Default Description <code>MCP_CLIENT_AUTH_ENABLED</code> <code>true</code> Enable/disable JWT authentication for MCP operations <code>TRUST_PROXY_AUTH</code> <code>false</code> Trust proxy authentication headers (required when <code>MCP_CLIENT_AUTH_ENABLED=false</code>) <code>PROXY_USER_HEADER</code> <code>X-Authenticated-User</code> Header containing authenticated username from proxy <code>AUTH_REQUIRED</code> <code>true</code> Controls admin UI authentication (independent of MCP auth) <p>Security Notice</p> <p>Only set <code>MCP_CLIENT_AUTH_ENABLED=false</code> when MCP Gateway is deployed behind a trusted authentication proxy. Setting <code>TRUST_PROXY_AUTH=true</code> explicitly acknowledges this security requirement.</p>"},{"location":"manage/proxy/#basic-configuration","title":"Basic Configuration","text":".env<pre><code># Disable MCP client JWT authentication\nMCP_CLIENT_AUTH_ENABLED=false\n\n# Trust proxy authentication headers\nTRUST_PROXY_AUTH=true\n\n# Header containing authenticated user\nPROXY_USER_HEADER=X-Authenticated-User\n\n# Keep admin UI protected\nAUTH_REQUIRED=true\nBASIC_AUTH_USER=admin\nBASIC_AUTH_PASSWORD=secure-password\n</code></pre>"},{"location":"manage/proxy/#deployment-patterns","title":"Deployment Patterns","text":""},{"location":"manage/proxy/#pattern-1-oauth2-proxy","title":"Pattern 1: OAuth2 Proxy","text":"<pre><code>graph LR\n    User[User] --&gt;|HTTPS| LB[Load Balancer]\n    LB --&gt; OAuth[OAuth2 Proxy]\n    OAuth --&gt;|X-Auth-Request-User| Gateway[MCP Gateway]\n    Gateway --&gt; MCP1[MCP Server 1]\n    Gateway --&gt; MCP2[MCP Server 2]\n\n    OAuth -.-&gt;|OAuth Flow| IDP[Google/GitHub/etc]\n\n    style OAuth fill:#f9f,stroke:#333,stroke-width:2px\n    style Gateway fill:#bbf,stroke:#333,stroke-width:2px</code></pre>"},{"location":"manage/proxy/#docker-compose-example","title":"Docker Compose Example","text":"docker-compose.yml<pre><code>version: '3.8'\n\nservices:\n  oauth2-proxy:\n    image: quay.io/oauth2-proxy/oauth2-proxy:v7.5.0\n    command:\n      - --http-address=0.0.0.0:4180\n      - --upstream=http://mcp-gateway:4444\n      - --email-domain=*\n      - --pass-user-headers=true\n      - --set-xauthrequest=true\n      - --skip-provider-button=true\n    environment:\n      OAUTH2_PROXY_CLIENT_ID: ${OAUTH_CLIENT_ID}\n      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}\n      OAUTH2_PROXY_COOKIE_SECRET: ${COOKIE_SECRET}\n      OAUTH2_PROXY_PROVIDER: google\n    ports:\n      - \"4180:4180\"\n    networks:\n      - mcp-network\n\n  mcp-gateway:\n    image: ghcr.io/contingentai/mcp-gateway:latest\n    environment:\n      MCP_CLIENT_AUTH_ENABLED: \"false\"\n      TRUST_PROXY_AUTH: \"true\"\n      PROXY_USER_HEADER: \"X-Auth-Request-Email\"\n      AUTH_REQUIRED: \"true\"\n      BASIC_AUTH_USER: ${ADMIN_USER}\n      BASIC_AUTH_PASSWORD: ${ADMIN_PASSWORD}\n      DATABASE_URL: postgresql://postgres:password@db:5432/mcp\n    depends_on:\n      - db\n    networks:\n      - mcp-network\n\n  db:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: mcp\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - mcp-network\n\nnetworks:\n  mcp-network:\n    driver: bridge\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"manage/proxy/#pattern-2-kubernetes-with-istio","title":"Pattern 2: Kubernetes with Istio","text":"<pre><code>graph TB\n    subgraph \"Kubernetes Cluster\"\n        subgraph \"Istio Service Mesh\"\n            IG[Istio Gateway] --&gt; VS[Virtual Service]\n            VS --&gt; AuthZ[Authorization Policy]\n            AuthZ --&gt; Gateway[MCP Gateway Pod]\n        end\n\n        Gateway --&gt; MCP1[MCP Server Pod 1]\n        Gateway --&gt; MCP2[MCP Server Pod 2]\n\n        OIDC[OIDC Provider] -.-&gt;|JWT Validation| AuthZ\n    end\n\n    User[User] --&gt;|HTTPS + JWT| IG\n\n    style AuthZ fill:#f96,stroke:#333,stroke-width:2px\n    style Gateway fill:#bbf,stroke:#333,stroke-width:2px</code></pre>"},{"location":"manage/proxy/#kubernetes-manifests","title":"Kubernetes Manifests","text":"mcp-gateway-deployment.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcp-gateway\n  namespace: mcp-system\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mcp-gateway\n  template:\n    metadata:\n      labels:\n        app: mcp-gateway\n        version: v1\n    spec:\n      containers:\n      - name: mcp-gateway\n        image: ghcr.io/contingentai/mcp-gateway:latest\n        env:\n        - name: MCP_CLIENT_AUTH_ENABLED\n          value: \"false\"\n        - name: TRUST_PROXY_AUTH\n          value: \"true\"\n        - name: PROXY_USER_HEADER\n          value: \"X-User-Id\"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: mcp-gateway-secrets\n              key: database-url\n        ports:\n        - containerPort: 4444\n          name: http\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: http\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: http\n          initialDelaySeconds: 5\n          periodSeconds: 5\n</code></pre> istio-authorization.yaml<pre><code>apiVersion: security.istio.io/v1beta1\nkind: RequestAuthentication\nmetadata:\n  name: mcp-gateway-jwt\n  namespace: mcp-system\nspec:\n  selector:\n    matchLabels:\n      app: mcp-gateway\n  jwtRules:\n  - issuer: \"https://accounts.google.com\"\n    jwksUri: \"https://www.googleapis.com/oauth2/v3/certs\"\n    outputPayloadToHeader: \"X-User-Id\"\n---\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: mcp-gateway-authz\n  namespace: mcp-system\nspec:\n  selector:\n    matchLabels:\n      app: mcp-gateway\n  action: ALLOW\n  rules:\n  - from:\n    - source:\n        requestPrincipals: [\"*\"]\n</code></pre>"},{"location":"manage/proxy/#pattern-3-api-gateway-kong","title":"Pattern 3: API Gateway (Kong)","text":"<pre><code>graph LR\n    subgraph \"Kong API Gateway\"\n        Plugin[OIDC Plugin] --&gt; Route[Route]\n        Route --&gt; Service[Service]\n    end\n\n    User[User] --&gt;|HTTPS| Plugin\n    Service --&gt;|X-Consumer-Username| Gateway[MCP Gateway]\n    Gateway --&gt; MCP[MCP Servers]\n\n    Plugin -.-&gt;|OIDC Flow| IDP[Keycloak/Auth0]\n\n    style Plugin fill:#f9f,stroke:#333,stroke-width:2px\n    style Gateway fill:#bbf,stroke:#333,stroke-width:2px</code></pre>"},{"location":"manage/proxy/#kong-configuration","title":"Kong Configuration","text":"kong-config.yaml<pre><code>services:\n  - name: mcp-gateway\n    url: http://mcp-gateway:4444\n    routes:\n      - name: mcp-route\n        paths:\n          - /mcp\n    plugins:\n      - name: oidc\n        config:\n          client_id: mcp-client\n          client_secret: ${OIDC_SECRET}\n          discovery: https://auth.example.com/.well-known/openid-configuration\n          introspection_endpoint: https://auth.example.com/introspect\n          bearer_only: \"yes\"\n          realm: mcp-gateway\n          header_names:\n            - X-Consumer-Username:preferred_username\n            - X-Consumer-Id:sub\n</code></pre>"},{"location":"manage/proxy/#common-proxy-configurations","title":"Common Proxy Configurations","text":""},{"location":"manage/proxy/#authelia","title":"Authelia","text":"authelia-config.yml<pre><code>authentication_backend:\n  ldap:\n    url: ldaps://ldap.example.com\n    base_dn: dc=example,dc=com\n\naccess_control:\n  default_policy: deny\n  rules:\n    - domain: mcp.example.com\n      policy: two_factor\n      subject:\n        - group:mcp-users\n\n# Headers forwarded to backend\nauthorization:\n  headers:\n    Remote-User: username\n    Remote-Email: email\n    Remote-Groups: groups\n</code></pre> <p>MCP Gateway configuration: <pre><code>MCP_CLIENT_AUTH_ENABLED=false\nTRUST_PROXY_AUTH=true\nPROXY_USER_HEADER=Remote-User\n</code></pre></p>"},{"location":"manage/proxy/#cloudflare-access","title":"Cloudflare Access","text":"<pre><code>graph LR\n    User[User] --&gt;|HTTPS| CF[Cloudflare Edge]\n    CF --&gt;|Cf-Access-Jwt-Assertion| Gateway[MCP Gateway]\n\n    CF -.-&gt;|SAML/OIDC| IDP[Identity Provider]\n\n    style CF fill:#f90,stroke:#333,stroke-width:2px\n    style Gateway fill:#bbf,stroke:#333,stroke-width:2px</code></pre> <p>Configuration: <pre><code>MCP_CLIENT_AUTH_ENABLED=false\nTRUST_PROXY_AUTH=true\nPROXY_USER_HEADER=Cf-Access-Authenticated-User-Email\n</code></pre></p>"},{"location":"manage/proxy/#aws-alb-with-cognito","title":"AWS ALB with Cognito","text":"<pre><code>MCP_CLIENT_AUTH_ENABLED=false\nTRUST_PROXY_AUTH=true\nPROXY_USER_HEADER=X-Amzn-Oidc-Identity\n</code></pre>"},{"location":"manage/proxy/#header-passthrough","title":"Header Passthrough","text":"<p>When using proxy authentication, you often need to pass additional headers to downstream MCP servers:</p> <pre><code># Enable header passthrough\nENABLE_HEADER_PASSTHROUGH=true\n\n# Headers to pass through (JSON array)\nDEFAULT_PASSTHROUGH_HEADERS='[\"X-Tenant-Id\", \"X-Request-Id\", \"X-Authenticated-User\", \"X-Groups\"]'\n</code></pre>"},{"location":"manage/proxy/#security-considerations","title":"Security Considerations","text":""},{"location":"manage/proxy/#network-isolation","title":"Network Isolation","text":"<pre><code>graph TB\n    subgraph \"DMZ\"\n        WAF[WAF] --&gt; LB[Load Balancer]\n        LB --&gt; Proxy[Auth Proxy]\n    end\n\n    subgraph \"Private Network\"\n        Proxy --&gt;|Internal Only| Gateway[MCP Gateway]\n        Gateway --&gt; MCP1[MCP Server 1]\n        Gateway --&gt; MCP2[MCP Server 2]\n    end\n\n    Internet[Internet] --&gt;|HTTPS| WAF\n\n    style Proxy fill:#f96,stroke:#333,stroke-width:2px\n    style Gateway fill:#bbf,stroke:#333,stroke-width:2px</code></pre> <p>Critical Security Requirements</p> <ol> <li>Never expose MCP Gateway directly to the internet when proxy auth is enabled</li> <li>Use TLS for all communication between proxy and gateway</li> <li>Implement network policies to ensure only the proxy can reach the gateway</li> <li>Validate proxy certificates in production environments</li> <li>Monitor authentication logs for suspicious activity</li> </ol>"},{"location":"manage/proxy/#recommended-security-headers","title":"Recommended Security Headers","text":"<p>Configure your proxy to add these security headers:</p> nginx.conf<pre><code># Security headers\nadd_header X-Frame-Options \"DENY\" always;\nadd_header X-Content-Type-Options \"nosniff\" always;\nadd_header X-XSS-Protection \"1; mode=block\" always;\nadd_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\nadd_header Content-Security-Policy \"default-src 'self'\" always;\n\n# Remove sensitive headers\nproxy_hide_header X-Powered-By;\nproxy_hide_header Server;\n\n# Pass authentication headers\nproxy_set_header X-Authenticated-User $remote_user;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $scheme;\n</code></pre>"},{"location":"manage/proxy/#testing","title":"Testing","text":""},{"location":"manage/proxy/#verify-configuration","title":"Verify Configuration","text":"<pre><code># Test without authentication (should fail or return anonymous)\ncurl -v http://localhost:4444/tools\n\n# Test with proxy header\ncurl -H \"X-Authenticated-User: john.doe@example.com\" \\\n     http://localhost:4444/tools\n\n# Test WebSocket with proxy header\nwscat -c ws://localhost:4444/ws \\\n      -H \"X-Authenticated-User: john.doe@example.com\"\n</code></pre>"},{"location":"manage/proxy/#health-checks","title":"Health Checks","text":"<p>Configure your load balancer to use these endpoints:</p> Endpoint Purpose Expected Response <code>/health</code> Liveness probe 200 OK <code>/ready</code> Readiness probe 200 OK when ready <code>/metrics</code> Prometheus metrics Metrics in text format"},{"location":"manage/proxy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"manage/proxy/#common-issues","title":"Common Issues","text":"Getting 401 Unauthorized with proxy headers <p>Check these settings:</p> <ol> <li>Verify <code>MCP_CLIENT_AUTH_ENABLED=false</code></li> <li>Ensure <code>TRUST_PROXY_AUTH=true</code></li> <li>Confirm header name matches <code>PROXY_USER_HEADER</code></li> <li>Check proxy is sending the header: <pre><code># Debug headers being received\ncurl -H \"X-Authenticated-User: test\" \\\n     http://localhost:4444/version -v\n</code></pre></li> </ol> Warning: MCP auth disabled without trust <p>You're seeing: <pre><code>WARNING - MCP client authentication is disabled but trust_proxy_auth is not set\n</code></pre></p> <p>Solution: Set <code>TRUST_PROXY_AUTH=true</code> to acknowledge proxy authentication.</p> WebSocket connections fail <p>Common causes:</p> <ol> <li>Proxy not passing headers on WebSocket upgrade</li> <li>Missing WebSocket support in proxy</li> </ol> <p>nginx fix: <pre><code>location /ws {\n    proxy_pass http://mcp-gateway:4444;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header X-Authenticated-User $remote_user;\n}\n</code></pre></p> How to handle multiple authentication methods? <p>Use virtual servers with different auth configs:</p> <pre><code># Server 1: Proxy auth\n- name: internal-server\n  auth_mode: proxy\n  proxy_header: X-Employee-Id\n\n# Server 2: JWT auth\n- name: external-server\n  auth_mode: jwt\n  jwt_audience: external-clients\n</code></pre>"},{"location":"manage/proxy/#migration-guide","title":"Migration Guide","text":""},{"location":"manage/proxy/#from-jwt-to-proxy-authentication","title":"From JWT to Proxy Authentication","text":"<pre><code>graph LR\n    subgraph \"Phase 1: Preparation\"\n        A1[Document Current Auth] --&gt; A2[Deploy Proxy]\n        A2 --&gt; A3[Test Proxy Auth]\n    end\n\n    subgraph \"Phase 2: Dual Mode\"\n        B1[Enable Both Auth] --&gt; B2[Migrate Clients]\n        B2 --&gt; B3[Monitor Logs]\n    end\n\n    subgraph \"Phase 3: Proxy Only\"\n        C1[Disable JWT Auth] --&gt; C2[Remove JWT Code]\n        C2 --&gt; C3[Document Change]\n    end\n\n    A3 --&gt; B1\n    B3 --&gt; C1</code></pre>"},{"location":"manage/proxy/#step-by-step-migration","title":"Step-by-Step Migration","text":"Step 1: Deploy ProxyStep 2: Enable Dual ModeStep 3: Test Both MethodsStep 4: Switch to Proxy Only <pre><code># Deploy auth proxy alongside existing setup\ndocker-compose up -d oauth2-proxy\n\n# Test proxy authentication\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n     http://localhost:4180/health\n</code></pre> <pre><code># Keep JWT auth but allow proxy headers\nMCP_CLIENT_AUTH_ENABLED=true\nTRUST_PROXY_AUTH=true\nPROXY_USER_HEADER=X-Auth-Request-Email\n</code></pre> <pre><code># Test JWT (existing)\ncurl -H \"Authorization: Bearer $JWT_TOKEN\" \\\n     http://localhost:4444/tools\n\n# Test proxy header (new)\ncurl -H \"X-Auth-Request-Email: user@example.com\" \\\n     http://localhost:4444/tools\n</code></pre> <pre><code># Disable JWT authentication\nMCP_CLIENT_AUTH_ENABLED=false\nTRUST_PROXY_AUTH=true\n\n# Restart gateway\ndocker-compose restart mcp-gateway\n</code></pre>"},{"location":"manage/proxy/#performance-considerations","title":"Performance Considerations","text":""},{"location":"manage/proxy/#caching-user-identity","title":"Caching User Identity","text":"<pre><code>graph LR\n    subgraph \"With Caching\"\n        Proxy1[Auth Proxy] --&gt; Cache{Redis Cache}\n        Cache --&gt;|Hit| Gateway1[MCP Gateway]\n        Cache --&gt;|Miss| IDP1[IDP]\n        IDP1 --&gt; Cache\n    end\n\n    subgraph \"Without Caching\"\n        Proxy2[Auth Proxy] --&gt; IDP2[IDP]\n        IDP2 --&gt; Gateway2[MCP Gateway]\n    end\n\n    style Cache fill:#9f9,stroke:#333,stroke-width:2px</code></pre> <p>Configure Redis caching for better performance:</p> <pre><code># Enable Redis cache\nCACHE_TYPE=redis\nREDIS_URL=redis://localhost:6379/0\n\n# Cache user sessions\nSESSION_TTL=3600  # 1 hour\n</code></pre>"},{"location":"manage/proxy/#monitoring","title":"Monitoring","text":""},{"location":"manage/proxy/#key-metrics","title":"Key Metrics","text":"Metric Description Alert Threshold <code>mcp_auth_failures_total</code> Failed authentication attempts &gt; 10/min <code>mcp_proxy_header_missing</code> Requests without proxy header &gt; 5/min <code>mcp_auth_latency_seconds</code> Authentication processing time &gt; 1s p99"},{"location":"manage/proxy/#grafana-dashboard","title":"Grafana Dashboard","text":"grafana-dashboard.json<pre><code>{\n  \"dashboard\": {\n    \"title\": \"MCP Gateway - Proxy Auth\",\n    \"panels\": [\n      {\n        \"title\": \"Auth Success Rate\",\n        \"targets\": [{\n          \"expr\": \"rate(mcp_auth_success_total[5m]) / rate(mcp_auth_attempts_total[5m])\"\n        }]\n      },\n      {\n        \"title\": \"Users by Proxy Header\",\n        \"targets\": [{\n          \"expr\": \"count by (user) (mcp_authenticated_requests_total)\"\n        }]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"manage/proxy/#best-practices","title":"Best Practices","text":"<p>Production Checklist</p> <ul> <li> Network isolation between proxy and gateway</li> <li> TLS encryption for all connections</li> <li> Rate limiting at proxy level</li> <li> Audit logging enabled</li> <li> Monitoring and alerting configured</li> <li> Backup authentication method available</li> <li> Documentation updated</li> <li> Security review completed</li> </ul>"},{"location":"manage/proxy/#related-documentation","title":"Related Documentation","text":"<ul> <li>Authentication Overview</li> <li>Security Best Practices</li> <li>Deployment Guide</li> <li>Federation Setup</li> </ul>"},{"location":"manage/securing/","title":"Securing MCP Gateway","text":"<p>This guide provides essential security configurations and best practices for deploying MCP Gateway in production environments.</p>"},{"location":"manage/securing/#critical-security-notice","title":"\u26a0\ufe0f Critical Security Notice","text":"<p>MCP Gateway is currently in early beta (v0.6.0) and requires careful security configuration for production use:</p> <ul> <li>The Admin UI is development-only and must be disabled in production</li> <li>MCP Gateway is not a standalone product - it's an open source component to integrate into your solution</li> <li>No official support is provided - security is your responsibility</li> <li>Expect breaking changes between versions until 1.0 release</li> <li>Do not use it with insecure MCP servers.</li> </ul>"},{"location":"manage/securing/#production-security-checklist","title":"\ud83d\udea8 Production Security Checklist","text":""},{"location":"manage/securing/#1-disable-development-features","title":"1. Disable Development Features","text":"<pre><code># Required for production - disable all admin interfaces\nMCPGATEWAY_UI_ENABLED=false\nMCPGATEWAY_ADMIN_API_ENABLED=false\n\n# Disable unused features\nMCPGATEWAY_ENABLE_ROOTS=false    # If not using roots\nMCPGATEWAY_ENABLE_PROMPTS=false  # If not using prompts\nMCPGATEWAY_ENABLE_RESOURCES=false # If not using resources\n</code></pre>"},{"location":"manage/securing/#2-enable-authentication-security","title":"2. Enable Authentication &amp; Security","text":"<pre><code># Configure strong authentication\nMCPGATEWAY_AUTH_ENABLED=true\nMCPGATEWAY_AUTH_USERNAME=custom-username  # Change from default\nMCPGATEWAY_AUTH_PASSWORD=strong-password-here  # Use secrets manager\n\n# Set environment for security defaults\nENVIRONMENT=production\n\n# Configure domain for CORS\nAPP_DOMAIN=yourdomain.com\n\n# Ensure secure cookies (automatic in production)\nSECURE_COOKIES=true\nCOOKIE_SAMESITE=strict\n\n# Configure CORS (auto-configured based on APP_DOMAIN in production)\nCORS_ALLOW_CREDENTIALS=true\n</code></pre>"},{"location":"manage/securing/#3-network-security","title":"3. Network Security","text":"<ul> <li> Configure TLS/HTTPS with valid certificates</li> <li> Implement firewall rules and network policies</li> <li> Use internal-only endpoints where possible</li> <li> Configure appropriate CORS policies (auto-configured by ENVIRONMENT setting)</li> <li> Set up rate limiting per endpoint/client</li> <li> Verify security headers are present (automatically added by SecurityHeadersMiddleware)</li> <li> Configure iframe embedding policy (X_FRAME_OPTIONS=DENY by default, change to SAMEORIGIN if needed)</li> </ul>"},{"location":"manage/securing/#4-container-security","title":"4. Container Security","text":"<pre><code># Run containers with security constraints\ndocker run \\\n  --read-only \\\n  --user 1001:1001 \\\n  --cap-drop ALL \\\n  --security-opt no-new-privileges \\\n  mcpgateway:latest\n</code></pre> <ul> <li> Use minimal base images (UBI Micro)</li> <li> Run as non-root user</li> <li> Enable read-only filesystem</li> <li> Set resource limits (CPU, memory)</li> <li> Scan images for vulnerabilities</li> </ul>"},{"location":"manage/securing/#5-secrets-management","title":"5. Secrets Management","text":"<ul> <li> Never store secrets in environment variables directly</li> <li> Use a secrets management system (Vault, AWS Secrets Manager, etc.)</li> <li> Rotate credentials regularly</li> <li> Restrict container access to secrets</li> <li> Never commit <code>.env</code> files to version control</li> </ul>"},{"location":"manage/securing/#6-mcp-server-validation","title":"6. MCP Server Validation","text":"<p>Before connecting any MCP server:</p> <ul> <li> Verify server authenticity and source code</li> <li> Review server permissions and data access</li> <li> Test in isolated environment first</li> <li> Monitor server behavior for anomalies</li> <li> Implement rate limiting for untrusted servers</li> </ul>"},{"location":"manage/securing/#7-database-security","title":"7. Database Security","text":"<ul> <li> Use TLS for database connections</li> <li> Configure strong passwords</li> <li> Restrict database access by IP/network</li> <li> Enable audit logging</li> <li> Regular backups with encryption</li> </ul>"},{"location":"manage/securing/#8-monitoring-logging","title":"8. Monitoring &amp; Logging","text":"<ul> <li> Set up structured logging without sensitive data</li> <li> Configure log rotation and secure storage</li> <li> Implement monitoring and alerting</li> <li> Set up anomaly detection</li> <li> Create incident response procedures</li> </ul>"},{"location":"manage/securing/#9-integration-security","title":"9. Integration Security","text":"<p>MCP Gateway should be integrated with:</p> <ul> <li> API Gateway for auth and rate limiting</li> <li> Web Application Firewall (WAF)</li> <li> Identity and Access Management (IAM)</li> <li> SIEM for security monitoring</li> <li> Load balancer with TLS termination</li> </ul>"},{"location":"manage/securing/#10-well-known-uri-security","title":"10. Well-Known URI Security","text":"<p>Configure well-known URIs appropriately for your deployment:</p> <pre><code># For private APIs (default) - blocks all crawlers\nWELL_KNOWN_ENABLED=true\nWELL_KNOWN_ROBOTS_TXT=\"User-agent: *\\nDisallow: /\"\n\n# For public APIs - allow health checks, block sensitive endpoints\n# WELL_KNOWN_ROBOTS_TXT=\"User-agent: *\\nAllow: /health\\nAllow: /docs\\nDisallow: /admin\\nDisallow: /tools\"\n\n# Security contact information (RFC 9116)\nWELL_KNOWN_SECURITY_TXT=\"Contact: mailto:security@example.com\\nExpires: 2025-12-31T23:59:59Z\\nPreferred-Languages: en\"\n</code></pre> <p>Security considerations: - [ ] Configure security.txt with current contact information - [ ] Review robots.txt to prevent unauthorized crawler access - [ ] Monitor well-known endpoint access in logs - [ ] Update security.txt Expires field before expiration - [ ] Consider custom well-known files only if necessary</p>"},{"location":"manage/securing/#11-downstream-application-security","title":"11. Downstream Application Security","text":"<p>Applications consuming MCP Gateway data must:</p> <ul> <li> Validate all inputs from the gateway</li> <li> Implement context-appropriate sanitization</li> <li> Use Content Security Policy (CSP) headers</li> <li> Escape data for output context (HTML, JS, SQL)</li> <li> Implement their own authentication/authorization</li> </ul>"},{"location":"manage/securing/#environment-variables-reference","title":"\ud83d\udd10 Environment Variables Reference","text":""},{"location":"manage/securing/#security-critical-settings","title":"Security-Critical Settings","text":"<pre><code># Core Security\nMCPGATEWAY_UI_ENABLED=false              # Must be false in production\nMCPGATEWAY_ADMIN_API_ENABLED=false       # Must be false in production\nMCPGATEWAY_AUTH_ENABLED=true             # Enable authentication\nMCPGATEWAY_AUTH_USERNAME=custom-user     # Change from default\nMCPGATEWAY_AUTH_PASSWORD=&lt;from-secrets&gt;  # Use secrets manager\n\n# Feature Flags (disable unused features)\nMCPGATEWAY_ENABLE_ROOTS=false\nMCPGATEWAY_ENABLE_PROMPTS=false\nMCPGATEWAY_ENABLE_RESOURCES=false\n\n# Network Security\nMCPGATEWAY_CORS_ALLOWED_ORIGINS=https://your-domain.com\nMCPGATEWAY_RATE_LIMIT_ENABLED=true\nMCPGATEWAY_RATE_LIMIT_PER_MINUTE=100\n\n# Logging (no sensitive data)\nMCPGATEWAY_LOG_LEVEL=INFO               # Not DEBUG in production\nMCPGATEWAY_LOG_SENSITIVE_DATA=false     # Never log sensitive data\n</code></pre>"},{"location":"manage/securing/#deployment-architecture","title":"\ud83d\ude80 Deployment Architecture","text":""},{"location":"manage/securing/#recommended-production-architecture","title":"Recommended Production Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 \u2502     \u2502                 \u2502     \u2502                 \u2502\n\u2502   WAF/CDN       \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Load Balancer \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   API Gateway   \u2502\n\u2502                 \u2502     \u2502   (TLS Term)    \u2502     \u2502  (Auth/Rate)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                          \u2502\n                                                          \u25bc\n                                                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                                 \u2502                 \u2502\n                                                 \u2502  MCP Gateway    \u2502\n                                                 \u2502  (Internal)     \u2502\n                                                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                          \u2502\n                              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                              \u2502                           \u2502                           \u2502\n                              \u25bc                           \u25bc                           \u25bc\n                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                     \u2502                 \u2502        \u2502                 \u2502        \u2502                 \u2502\n                     \u2502  Trusted MCP    \u2502        \u2502    Database     \u2502        \u2502     Redis       \u2502\n                     \u2502    Servers      \u2502        \u2502   (TLS/Auth)    \u2502        \u2502   (TLS/Auth)    \u2502\n                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"manage/securing/#security-validation","title":"\ud83d\udd0d Security Validation","text":""},{"location":"manage/securing/#pre-production-checklist","title":"Pre-Production Checklist","text":"<ol> <li> <p>Run Security Scans <pre><code>make security-all        # Run all security tools\nmake security-report     # Generate security report\nmake trivy              # Scan container vulnerabilities\n</code></pre></p> </li> <li> <p>Validate Configuration</p> </li> <li>Review all environment variables</li> <li>Confirm admin features disabled</li> <li>Verify authentication enabled</li> <li> <p>Check TLS configuration</p> </li> <li> <p>Test Security Controls</p> </li> <li>Attempt unauthorized access</li> <li>Verify rate limiting works</li> <li>Test input validation</li> <li> <p>Check error handling</p> </li> <li> <p>Review Dependencies <pre><code>make pip-audit          # Check Python dependencies\nmake sbom              # Generate software bill of materials\n</code></pre></p> </li> </ol>"},{"location":"manage/securing/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Security Policy - Full security documentation</li> <li>Deployment Options - Various deployment methods</li> <li>Environment Variables - Complete configuration reference</li> </ul>"},{"location":"manage/securing/#quick-start-security-commands","title":"\u26a1 Quick Start Security Commands","text":"<pre><code># Development (with security checks)\nmake security-all &amp;&amp; make test &amp;&amp; make run\n\n# Production build\nmake docker-prod\n\n# Security audit\nmake security-report\n</code></pre> <p>Remember: Security is a shared responsibility. MCP Gateway provides some security controls, but you must properly configure and integrate it within a comprehensive security architecture.</p>"},{"location":"manage/tuning/","title":"Gateway Tuning Guide","text":"<p>This page collects practical levers for squeezing the most performance, reliability, and observability out of MCP Gateway-no matter where you run the container (Code Engine, Kubernetes, Docker Compose, Nomad, etc.).</p> <p>TL;DR</p> <ol> <li>Tune the runtime environment via <code>.env</code> and configure mcpgateway to use PostgreSQL and Redis.</li> <li>Adjust Gunicorn workers &amp; time-outs in <code>gunicorn.conf.py</code>.</li> <li>Right-size CPU/RAM for the container or spin up more instances (with shared Redis state) and change the database settings (ex: connection limits).</li> <li>Benchmark with hey (or your favourite load-generator) before &amp; after. See also: performance testing guide</li> </ol>"},{"location":"manage/tuning/#1-environment-variables-env","title":"1 - Environment variables (<code>.env</code>)","text":"Variable Default Why you might change it <code>AUTH_REQUIRED</code> <code>true</code> Disable for internal/behind-VPN deployments to shave a few ms per request. <code>JWT_SECRET_KEY</code> random Longer key \u279c slower HMAC verify; still negligible-leave as is. <code>CACHE_TYPE</code> <code>database</code> Switch to <code>redis</code> or <code>memory</code> if your workload is read-heavy and latency-sensitive. <code>DATABASE_URL</code> SQLite Move to managed PostgreSQL + connection pooling for anything beyond dev tests. <code>HOST</code>/<code>PORT</code> <code>0.0.0.0:4444</code> Expose a different port or bind only to <code>127.0.0.1</code> behind a reverse-proxy. <p>Tip  Any change here requires rebuilding or restarting the container if you pass the file with <code>--env-file</code>.</p>"},{"location":"manage/tuning/#2-gunicorn-settings-gunicornconfpy","title":"2 - Gunicorn settings (<code>gunicorn.conf.py</code>)","text":"Knob Purpose Rule of thumb <code>workers</code> Parallel processes <code>2-4 \u00d7 vCPU</code> for CPU-bound work; fewer if memory-bound. <code>threads</code> Per-process threads Use only with <code>sync</code> worker; keeps memory low for I/O workloads. <code>timeout</code> Kill stuck worker Set \u2265 end-to-end model latency. E.g. 600 s for LLM calls. <code>preload_app</code> Load app once Saves RAM; safe for pure-Python apps. <code>worker_class</code> Async workers <code>gevent</code> or <code>eventlet</code> for many concurrent requests / websockets. <code>max_requests(+_jitter)</code> Self-healing Recycle workers to mitigate memory leaks. <p>Edit the file before building the image, then redeploy.</p>"},{"location":"manage/tuning/#3-container-resources","title":"3 - Container resources","text":"vCPU \u00d7 RAM Good for Notes <code>0.5 \u00d7 1 GB</code> Smoke tests / CI Smallest footprint; likely CPU-starved under load. <code>1 \u00d7 4 GB</code> Typical dev / staging Handles a few hundred RPS with default 8 workers. <code>2 \u00d7 8 GB</code> Small prod Allows ~16-20 workers; good concurrency. <code>4 \u00d7 16 GB</code>+ Heavy prod Combine with async workers or autoscaling. <p>Always test with your workload; JSON-RPC payload size and backend model latency change the equation.</p> <p>To change your database connection settings, see the respective documentation for your selected database or managed service. For example, when using IBM Cloud Databases for PostgreSQL - you can raise the maximum number of connections.</p>"},{"location":"manage/tuning/#4-performance-testing","title":"4 - Performance testing","text":""},{"location":"manage/tuning/#41-tooling-hey","title":"4.1 Tooling: hey","text":"<p>Install one of:</p> <pre><code>brew install hey            # macOS\nsudo apt install hey         # Debian/Ubuntu\n# or build from source\ngo install github.com/rakyll/hey@latest  # $GOPATH/bin must be in PATH\n</code></pre>"},{"location":"manage/tuning/#42-sample-load-test-script-testsheysh","title":"4.2 Sample load-test script (<code>tests/hey.sh</code>)","text":"<pre><code>#!/usr/bin/env bash\n# Run 10 000 requests with 200 concurrent workers.\nJWT=\"$(cat jwt.txt)\"   # &lt;- place a valid token here\nhey -n 10000 -c 200 \\\n    -m POST \\\n    -T application/json \\\n    -H \"Authorization: Bearer ${JWT}\" \\\n    -D tests/hey/payload.json \\\n    http://localhost:4444/rpc\n</code></pre> <p>Payload (<code>tests/hey/payload.json</code>)</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"convert_time\",\n  \"params\": {\n    \"source_timezone\": \"Europe/Berlin\",\n    \"target_timezone\": \"Europe/Dublin\",\n    \"time\": \"09:00\"\n  }\n}\n</code></pre>"},{"location":"manage/tuning/#43-reading-the-output","title":"4.3 Reading the output","text":"<p><code>hey</code> prints latency distribution, requests/second, and error counts. Focus on:</p> <ul> <li>99<sup>th</sup> percentile latency - adjust <code>timeout</code> if it clips.</li> <li>Errors - 5xx under load often mean too few workers or DB connections.</li> <li>Throughput (RPS) - compare before/after tuning.</li> </ul>"},{"location":"manage/tuning/#44-common-bottlenecks-fixes","title":"4.4 Common bottlenecks &amp; fixes","text":"Symptom Likely cause Mitigation High % of 5xx under load Gunicorn workers exhausted Increase <code>workers</code>, switch to async workers, raise CPU. Latency &gt; timeout Long model call / external API Increase <code>timeout</code>, add queueing, review upstream latency. Memory OOM Too many workers / large batch size Lower <code>workers</code>, disable <code>preload_app</code>, add RAM."},{"location":"manage/tuning/#5-logging-observability","title":"5 - Logging &amp; observability","text":"<ul> <li>Set <code>loglevel = \"debug\"</code> in <code>gunicorn.conf.py</code> during tests; revert to <code>info</code> in prod.</li> <li>Forward <code>stdout</code>/<code>stderr</code> from the container to your platform's log stack (e.g. <code>kubectl logs</code>, <code>docker logs</code>).</li> <li>Expose <code>/metrics</code> via Prometheus exporter (coming soon) for request timing &amp; queue depth.</li> </ul>"},{"location":"manage/tuning/#6-security-tips-while-tuning","title":"6 - Security tips while tuning","text":"<ul> <li>Never commit real <code>JWT_SECRET_KEY</code>, DB passwords, or tokens-use <code>.env.example</code> as a template.</li> <li>Prefer platform secrets (K8s Secrets, Code Engine secrets) over baking creds into the image.</li> <li>If you enable <code>gevent</code>/<code>eventlet</code>, pin their versions and run bandit or trivy scans.</li> </ul>"},{"location":"manage/ui-customization/","title":"Customizing the Admin UI","text":"<p>The MCP Gateway Admin UI provides extensive customization options to tailor the interface to your organization's needs and preferences. This guide covers theme customization, layout configuration, user preferences, and accessibility settings.</p>"},{"location":"manage/ui-customization/#overview","title":"Overview","text":"<p>The Admin UI is built with modern web technologies (HTMX, Alpine.js, and Tailwind CSS) that enable dynamic customization without page refreshes. All customization settings are persisted locally and can be exported for sharing across teams.</p>"},{"location":"manage/ui-customization/#theme-customization","title":"Theme Customization","text":""},{"location":"manage/ui-customization/#darklight-mode","title":"Dark/Light Mode","text":"<p>The Admin UI includes built-in support for dark and light themes that automatically persist your preference:</p> <pre><code>// Theme is automatically saved to localStorage\nlocalStorage.setItem('theme', 'dark');  // or 'light'\n</code></pre> <p>To toggle between themes programmatically:</p> <pre><code>&lt;!-- Theme toggle button in the UI --&gt;\n&lt;button @click=\"toggleTheme()\" class=\"theme-toggle\"&gt;\n    &lt;span x-show=\"theme === 'light'\"&gt;\ud83c\udf19&lt;/span&gt;\n    &lt;span x-show=\"theme === 'dark'\"&gt;\u2600\ufe0f&lt;/span&gt;\n&lt;/button&gt;\n</code></pre>"},{"location":"manage/ui-customization/#custom-color-schemes","title":"Custom Color Schemes","text":"<p>You can customize the color palette by modifying CSS variables in your custom stylesheet:</p> <pre><code>/* custom-theme.css */\n:root {\n    /* Light theme colors */\n    --color-primary: #3b82f6;\n    --color-secondary: #10b981;\n    --color-accent: #f59e0b;\n    --color-background: #ffffff;\n    --color-surface: #f3f4f6;\n    --color-text: #1f2937;\n    --color-text-muted: #6b7280;\n}\n\n[data-theme=\"dark\"] {\n    /* Dark theme colors */\n    --color-primary: #60a5fa;\n    --color-secondary: #34d399;\n    --color-accent: #fbbf24;\n    --color-background: #111827;\n    --color-surface: #1f2937;\n    --color-text: #f9fafb;\n    --color-text-muted: #9ca3af;\n}\n</code></pre> <p>To apply custom themes, add your stylesheet to the Admin UI configuration:</p> <pre><code># In your mcpgateway configuration\nMCPGATEWAY_ADMIN_CUSTOM_CSS = \"/static/custom-theme.css\"\n</code></pre>"},{"location":"manage/ui-customization/#brand-customization","title":"Brand Customization","text":""},{"location":"manage/ui-customization/#logo-and-icons","title":"Logo and Icons","text":"<p>Replace the default logo with your organization's branding:</p> <pre><code># Environment variables for branding\nMCPGATEWAY_ADMIN_LOGO_URL = \"/static/company-logo.svg\"\nMCPGATEWAY_ADMIN_FAVICON_URL = \"/static/favicon.ico\"\nMCPGATEWAY_ADMIN_TITLE = \"Your Company MCP Gateway\"\n</code></pre>"},{"location":"manage/ui-customization/#custom-icons-for-servers-and-tools","title":"Custom Icons for Servers and Tools","text":"<p>Define custom icons for different server types and tools:</p> <pre><code>{\n  \"server_icons\": {\n    \"database\": \"database-icon.svg\",\n    \"api\": \"api-icon.svg\",\n    \"file\": \"file-icon.svg\"\n  },\n  \"tool_icons\": {\n    \"search\": \"magnifying-glass.svg\",\n    \"create\": \"plus-circle.svg\",\n    \"delete\": \"trash.svg\"\n  }\n}\n</code></pre>"},{"location":"manage/ui-customization/#layout-configuration","title":"Layout Configuration","text":""},{"location":"manage/ui-customization/#panel-management","title":"Panel Management","text":"<p>The Admin UI supports flexible panel arrangements with drag-and-drop functionality:</p> <pre><code>// Enable panel customization\nconst panelConfig = {\n    virtualServers: {\n        visible: true,\n        order: 1,\n        width: 'full'\n    },\n    tools: {\n        visible: true,\n        order: 2,\n        width: 'half'\n    },\n    resources: {\n        visible: true,\n        order: 3,\n        width: 'half'\n    },\n    prompts: {\n        visible: false,\n        order: 4,\n        width: 'full'\n    }\n};\n\n// Save layout preferences\nlocalStorage.setItem('panel-layout', JSON.stringify(panelConfig));\n</code></pre>"},{"location":"manage/ui-customization/#section-visibility","title":"Section Visibility","text":"<p>Control which sections appear in the Admin UI:</p> <pre><code># Configure visible sections via environment variables\nMCPGATEWAY_ADMIN_SHOW_SERVERS = true\nMCPGATEWAY_ADMIN_SHOW_TOOLS = true\nMCPGATEWAY_ADMIN_SHOW_RESOURCES = true\nMCPGATEWAY_ADMIN_SHOW_PROMPTS = false\nMCPGATEWAY_ADMIN_SHOW_GATEWAYS = true\nMCPGATEWAY_ADMIN_SHOW_METRICS = true\n</code></pre>"},{"location":"manage/ui-customization/#widget-dashboard","title":"Widget Dashboard","text":"<p>Create custom dashboards with configurable widgets:</p> <pre><code>// Widget configuration example\nconst dashboardWidgets = [\n    {\n        id: 'server-status',\n        type: 'status-card',\n        position: { x: 0, y: 0, w: 4, h: 2 },\n        config: {\n            title: 'Server Status',\n            refreshInterval: 5000\n        }\n    },\n    {\n        id: 'recent-tools',\n        type: 'list',\n        position: { x: 4, y: 0, w: 4, h: 3 },\n        config: {\n            title: 'Recently Used Tools',\n            limit: 10\n        }\n    },\n    {\n        id: 'metrics-chart',\n        type: 'chart',\n        position: { x: 0, y: 2, w: 8, h: 4 },\n        config: {\n            title: 'Request Metrics',\n            chartType: 'line',\n            dataSource: '/api/metrics'\n        }\n    }\n];\n</code></pre>"},{"location":"manage/ui-customization/#user-preferences","title":"User Preferences","text":""},{"location":"manage/ui-customization/#profile-management","title":"Profile Management","text":"<p>User profiles store personal customization settings:</p> <pre><code>// User profile structure\nconst userProfile = {\n    username: 'admin',\n    preferences: {\n        theme: 'dark',\n        language: 'en',\n        fontSize: 'medium',\n        highContrast: false,\n        reducedMotion: false,\n        keyboardShortcuts: true\n    },\n    layout: {\n        // Panel configuration\n    },\n    quickActions: [\n        'create-server',\n        'refresh-tools',\n        'export-config'\n    ]\n};\n\n// Save profile\nlocalStorage.setItem('user-profile', JSON.stringify(userProfile));\n</code></pre>"},{"location":"manage/ui-customization/#importexport-settings","title":"Import/Export Settings","text":"<p>Export and share configuration across teams:</p> <pre><code>// Export current settings\nfunction exportSettings() {\n    const settings = {\n        profile: JSON.parse(localStorage.getItem('user-profile')),\n        theme: localStorage.getItem('theme'),\n        layout: JSON.parse(localStorage.getItem('panel-layout')),\n        widgets: JSON.parse(localStorage.getItem('dashboard-widgets'))\n    };\n\n    const blob = new Blob([JSON.stringify(settings, null, 2)],\n                          { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'mcpgateway-ui-settings.json';\n    a.click();\n}\n\n// Import settings\nfunction importSettings(file) {\n    const reader = new FileReader();\n    reader.onload = function(e) {\n        const settings = JSON.parse(e.target.result);\n\n        // Apply imported settings\n        if (settings.profile) {\n            localStorage.setItem('user-profile',\n                               JSON.stringify(settings.profile));\n        }\n        if (settings.theme) {\n            localStorage.setItem('theme', settings.theme);\n        }\n        if (settings.layout) {\n            localStorage.setItem('panel-layout',\n                               JSON.stringify(settings.layout));\n        }\n\n        // Reload UI to apply changes\n        location.reload();\n    };\n    reader.readAsText(file);\n}\n</code></pre>"},{"location":"manage/ui-customization/#quick-actions-and-shortcuts","title":"Quick Actions and Shortcuts","text":"<p>Configure frequently used actions for quick access:</p> <pre><code>// Define keyboard shortcuts\nconst keyboardShortcuts = {\n    'ctrl+n': 'createNewServer',\n    'ctrl+r': 'refreshAll',\n    'ctrl+/': 'toggleSearch',\n    'ctrl+d': 'toggleTheme',\n    'ctrl+,': 'openSettings',\n    'esc': 'closeModal'\n};\n\n// Quick action toolbar configuration\nconst quickActions = [\n    {\n        id: 'create-server',\n        label: 'New Server',\n        icon: 'plus',\n        action: () =&gt; openModal('create-server')\n    },\n    {\n        id: 'refresh-tools',\n        label: 'Refresh Tools',\n        icon: 'refresh',\n        action: () =&gt; refreshToolList()\n    }\n];\n</code></pre>"},{"location":"manage/ui-customization/#accessibility-options","title":"Accessibility Options","text":""},{"location":"manage/ui-customization/#high-contrast-mode","title":"High Contrast Mode","text":"<p>Enable high contrast for better visibility:</p> <pre><code>/* High contrast mode styles */\n[data-high-contrast=\"true\"] {\n    --color-contrast-ratio: 7:1;\n    --border-width: 2px;\n\n    /* Stronger colors for better contrast */\n    --color-primary: #0066cc;\n    --color-secondary: #008844;\n    --color-danger: #cc0000;\n    --color-warning: #ff6600;\n\n    /* Enhanced borders */\n    border-width: var(--border-width);\n    outline-width: 2px;\n}\n</code></pre>"},{"location":"manage/ui-customization/#font-size-adjustments","title":"Font Size Adjustments","text":"<p>Support dynamic font sizing:</p> <pre><code>// Font size preferences\nconst fontSizeOptions = {\n    small: '14px',\n    medium: '16px',\n    large: '18px',\n    xlarge: '20px'\n};\n\nfunction setFontSize(size) {\n    document.documentElement.style.setProperty('--base-font-size',\n                                               fontSizeOptions[size]);\n    localStorage.setItem('font-size', size);\n}\n</code></pre>"},{"location":"manage/ui-customization/#keyboard-navigation","title":"Keyboard Navigation","text":"<p>Full keyboard navigation support:</p> <pre><code>// Enhanced keyboard navigation\ndocument.addEventListener('keydown', (e) =&gt; {\n    // Tab navigation between sections\n    if (e.key === 'Tab') {\n        const focusableElements = document.querySelectorAll(\n            'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        );\n        // Handle focus management\n    }\n\n    // Arrow key navigation in lists\n    if (e.key.startsWith('Arrow')) {\n        const currentItem = document.activeElement;\n        const items = Array.from(currentItem.parentElement.children);\n        // Navigate through list items\n    }\n});\n</code></pre>"},{"location":"manage/ui-customization/#screen-reader-support","title":"Screen Reader Support","text":"<p>Ensure proper ARIA labels and descriptions:</p> <pre><code>&lt;!-- Properly labeled UI elements --&gt;\n&lt;section aria-label=\"Virtual Servers\" role=\"region\"&gt;\n    &lt;h2 id=\"servers-heading\"&gt;Virtual Servers&lt;/h2&gt;\n    &lt;div role=\"list\" aria-labelledby=\"servers-heading\"&gt;\n        &lt;div role=\"listitem\" aria-label=\"Server: API Gateway\"&gt;\n            &lt;!-- Server content --&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n\n&lt;!-- Status announcements --&gt;\n&lt;div role=\"status\" aria-live=\"polite\" aria-atomic=\"true\"&gt;\n    &lt;span id=\"status-message\"&gt;Server created successfully&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"manage/ui-customization/#mobile-and-responsive-design","title":"Mobile and Responsive Design","text":""},{"location":"manage/ui-customization/#touch-friendly-interface","title":"Touch-Friendly Interface","text":"<p>Optimize for touch interactions:</p> <pre><code>/* Touch-friendly buttons and controls */\n@media (pointer: coarse) {\n    button, .clickable {\n        min-height: 44px;\n        min-width: 44px;\n        padding: 12px;\n    }\n\n    /* Increased spacing for touch targets */\n    .tool-list &gt; * {\n        margin-bottom: 8px;\n    }\n}\n</code></pre>"},{"location":"manage/ui-customization/#mobile-specific-layouts","title":"Mobile-Specific Layouts","text":"<p>Responsive layout configurations:</p> <pre><code>/* Mobile layout adjustments */\n@media (max-width: 768px) {\n    /* Stack panels vertically on mobile */\n    .panel-container {\n        display: flex;\n        flex-direction: column;\n    }\n\n    /* Hide less critical sections */\n    .desktop-only {\n        display: none;\n    }\n\n    /* Collapsible navigation */\n    .nav-menu {\n        position: fixed;\n        transform: translateX(-100%);\n        transition: transform 0.3s;\n    }\n\n    .nav-menu.open {\n        transform: translateX(0);\n    }\n}\n</code></pre>"},{"location":"manage/ui-customization/#progressive-web-app-features","title":"Progressive Web App Features","text":"<p>Enable PWA capabilities for mobile users:</p> <pre><code>{\n  \"name\": \"MCP Gateway Admin\",\n  \"short_name\": \"MCP Admin\",\n  \"description\": \"Admin interface for MCP Gateway\",\n  \"start_url\": \"/admin\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#3b82f6\",\n  \"background_color\": \"#ffffff\",\n  \"icons\": [\n    {\n      \"src\": \"/static/icon-192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"/static/icon-512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ]\n}\n</code></pre>"},{"location":"manage/ui-customization/#localization-support","title":"Localization Support","text":""},{"location":"manage/ui-customization/#multi-language-configuration","title":"Multi-Language Configuration","text":"<p>Support multiple languages in the UI:</p> <pre><code>// Language configuration\nconst translations = {\n    en: {\n        'servers.title': 'Virtual Servers',\n        'servers.create': 'Create Server',\n        'servers.empty': 'No servers configured'\n    },\n    es: {\n        'servers.title': 'Servidores Virtuales',\n        'servers.create': 'Crear Servidor',\n        'servers.empty': 'No hay servidores configurados'\n    },\n    fr: {\n        'servers.title': 'Serveurs Virtuels',\n        'servers.create': 'Cr\u00e9er un Serveur',\n        'servers.empty': 'Aucun serveur configur\u00e9'\n    }\n};\n\n// Apply translations\nfunction setLanguage(lang) {\n    const t = translations[lang];\n    document.querySelectorAll('[data-i18n]').forEach(el =&gt; {\n        const key = el.dataset.i18n;\n        if (t[key]) {\n            el.textContent = t[key];\n        }\n    });\n    localStorage.setItem('language', lang);\n}\n</code></pre>"},{"location":"manage/ui-customization/#rtl-support","title":"RTL Support","text":"<p>Support for right-to-left languages:</p> <pre><code>/* RTL language support */\n[dir=\"rtl\"] {\n    /* Flip layout direction */\n    .panel-container {\n        flex-direction: row-reverse;\n    }\n\n    /* Adjust text alignment */\n    .text-left {\n        text-align: right;\n    }\n\n    /* Mirror icons */\n    .icon-arrow {\n        transform: scaleX(-1);\n    }\n}\n</code></pre>"},{"location":"manage/ui-customization/#advanced-customization","title":"Advanced Customization","text":""},{"location":"manage/ui-customization/#custom-plugins","title":"Custom Plugins","text":"<p>Extend the Admin UI with custom plugins:</p> <pre><code>// Plugin registration\nclass CustomPlugin {\n    constructor(config) {\n        this.name = config.name;\n        this.version = config.version;\n    }\n\n    init() {\n        // Add custom functionality\n        this.registerCustomPanel();\n        this.addCustomMenuItems();\n    }\n\n    registerCustomPanel() {\n        const panel = document.createElement('div');\n        panel.className = 'custom-panel';\n        panel.innerHTML = this.renderPanel();\n        document.querySelector('#panels').appendChild(panel);\n    }\n\n    renderPanel() {\n        return `\n            &lt;div class=\"panel\"&gt;\n                &lt;h3&gt;${this.name}&lt;/h3&gt;\n                &lt;!-- Custom content --&gt;\n            &lt;/div&gt;\n        `;\n    }\n}\n\n// Register plugin\nconst plugin = new CustomPlugin({\n    name: 'Custom Analytics',\n    version: '1.0.0'\n});\nplugin.init();\n</code></pre>"},{"location":"manage/ui-customization/#custom-css-framework-integration","title":"Custom CSS Framework Integration","text":"<p>Integrate alternative CSS frameworks:</p> <pre><code>&lt;!-- Replace Tailwind with Bootstrap --&gt;\n&lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\"\n      rel=\"stylesheet\"&gt;\n\n&lt;!-- Custom Bootstrap theme --&gt;\n&lt;style&gt;\n    :root {\n        --bs-primary: #3b82f6;\n        --bs-secondary: #10b981;\n        --bs-success: #10b981;\n        --bs-danger: #ef4444;\n    }\n&lt;/style&gt;\n</code></pre>"},{"location":"manage/ui-customization/#api-extensions","title":"API Extensions","text":"<p>Add custom API endpoints for UI features:</p> <pre><code># Custom API endpoint for UI preferences\nfrom fastapi import APIRouter, Depends\nfrom mcpgateway.auth import get_current_user\n\nui_router = APIRouter(prefix=\"/api/ui\")\n\n@ui_router.get(\"/preferences\")\nasync def get_preferences(user = Depends(get_current_user)):\n    \"\"\"Get user UI preferences\"\"\"\n    return {\n        \"theme\": user.preferences.get(\"theme\", \"light\"),\n        \"layout\": user.preferences.get(\"layout\", {}),\n        \"language\": user.preferences.get(\"language\", \"en\")\n    }\n\n@ui_router.post(\"/preferences\")\nasync def save_preferences(preferences: dict,\n                          user = Depends(get_current_user)):\n    \"\"\"Save user UI preferences\"\"\"\n    user.preferences.update(preferences)\n    # Save to database\n    return {\"status\": \"saved\"}\n</code></pre>"},{"location":"manage/ui-customization/#performance-optimization","title":"Performance Optimization","text":""},{"location":"manage/ui-customization/#lazy-loading","title":"Lazy Loading","text":"<p>Implement lazy loading for better performance:</p> <pre><code>// Lazy load panels\nconst observer = new IntersectionObserver((entries) =&gt; {\n    entries.forEach(entry =&gt; {\n        if (entry.isIntersecting) {\n            const panel = entry.target;\n            loadPanelContent(panel.dataset.panelId);\n            observer.unobserve(panel);\n        }\n    });\n});\n\ndocument.querySelectorAll('.lazy-panel').forEach(panel =&gt; {\n    observer.observe(panel);\n});\n</code></pre>"},{"location":"manage/ui-customization/#caching-strategies","title":"Caching Strategies","text":"<p>Cache UI preferences and data:</p> <pre><code>// Service Worker for offline support\nself.addEventListener('install', (event) =&gt; {\n    event.waitUntil(\n        caches.open('ui-v1').then((cache) =&gt; {\n            return cache.addAll([\n                '/admin',\n                '/static/admin.css',\n                '/static/admin.js',\n                '/static/icons/'\n            ]);\n        })\n    );\n});\n\n// Cache API responses\nconst cacheAPI = async (url, data) =&gt; {\n    const cache = await caches.open('api-cache');\n    const response = new Response(JSON.stringify(data));\n    await cache.put(url, response);\n};\n</code></pre>"},{"location":"manage/ui-customization/#container-css-overrides","title":"Container CSS Overrides","text":"<p>When running MCP Gateway in a Docker container, you can override the default CSS by mounting custom stylesheets. The Admin UI CSS is located at <code>/app/mcpgateway/static/admin.css</code> inside the container.</p>"},{"location":"manage/ui-customization/#mounting-custom-css","title":"Mounting Custom CSS","text":"<p>To override the default CSS when running the container:</p> <pre><code># Create a local directory for custom styles\nmkdir -p ./custom-ui\n\n# Create your custom CSS file\ncat &gt; ./custom-ui/admin.css &lt;&lt; 'EOF'\n/* Custom theme overrides */\n:root {\n    --color-primary: #your-brand-color;\n    --color-secondary: #your-secondary-color;\n}\n\n/* Additional custom styles */\n.admin-header {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\nEOF\n\n# Run container with custom CSS mounted\ndocker run -d --name mcpgateway \\\n  -p 4444:4444 \\\n  -v $(pwd)/custom-ui/admin.css:/app/mcpgateway/static/admin.css:ro \\\n  -v $(pwd)/data:/data \\\n  -e MCPGATEWAY_UI_ENABLED=true \\\n  -e MCPGATEWAY_ADMIN_API_ENABLED=true \\\n  -e HOST=0.0.0.0 \\\n  -e JWT_SECRET_KEY=my-test-key \\\n  ghcr.io/MCP-Mirror/mcpgateway:latest\n</code></pre>"},{"location":"manage/ui-customization/#mounting-multiple-static-assets","title":"Mounting Multiple Static Assets","text":"<p>To override multiple static files (CSS, JavaScript, images):</p> <pre><code># Create custom static directory structure\nmkdir -p ./custom-static\ncp -r /path/to/original/mcpgateway/static/* ./custom-static/\n\n# Modify files as needed\nvim ./custom-static/admin.css\nvim ./custom-static/admin.js\n\n# Mount entire static directory\ndocker run -d --name mcpgateway \\\n  -p 4444:4444 \\\n  -v $(pwd)/custom-static:/app/mcpgateway/static:ro \\\n  -v $(pwd)/data:/data \\\n  -e MCPGATEWAY_UI_ENABLED=true \\\n  -e MCPGATEWAY_ADMIN_API_ENABLED=true \\\n  -e HOST=0.0.0.0 \\\n  -e JWT_SECRET_KEY=my-test-key \\\n  ghcr.io/MCP-Mirror/mcpgateway:latest\n</code></pre>"},{"location":"manage/ui-customization/#docker-compose-with-custom-css","title":"Docker Compose with Custom CSS","text":"<p>Using Docker Compose for easier management:</p> <pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  mcpgateway:\n    image: ghcr.io/MCP-Mirror/mcpgateway:latest\n    container_name: mcpgateway\n    restart: unless-stopped\n    ports:\n      - \"4444:4444\"\n    volumes:\n      # Mount custom CSS file\n      - ./custom-ui/admin.css:/app/mcpgateway/static/admin.css:ro\n      # Or mount entire static directory\n      # - ./custom-static:/app/mcpgateway/static:ro\n\n      # Mount data directory for persistence\n      - ./data:/data\n\n      # Optional: Mount custom favicon and JavaScript\n      - ./custom-ui/favicon.ico:/app/mcpgateway/static/favicon.ico:ro\n      - ./custom-ui/admin.js:/app/mcpgateway/static/admin.js:ro\n    environment:\n      - MCPGATEWAY_UI_ENABLED=true\n      - MCPGATEWAY_ADMIN_API_ENABLED=true\n      - HOST=0.0.0.0\n      - PORT=4444\n      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-me-in-production}\n      - DATABASE_URL=sqlite:////data/mcp.db\n</code></pre>"},{"location":"manage/ui-customization/#css-file-locations","title":"CSS File Locations","text":"<p>The default static files in the container are located at:</p> <ul> <li>CSS: <code>/app/mcpgateway/static/admin.css</code></li> <li>JavaScript: <code>/app/mcpgateway/static/admin.js</code></li> <li>Favicon: <code>/app/mcpgateway/static/favicon.ico</code></li> </ul>"},{"location":"manage/ui-customization/#custom-css-best-practices","title":"Custom CSS Best Practices","text":"<p>When creating custom CSS overrides:</p> <ol> <li>Preserve Core Functionality: Don't remove critical styles that affect functionality</li> <li>Use CSS Variables: Override CSS custom properties for consistent theming</li> <li>Test Responsiveness: Ensure custom styles work on mobile devices</li> <li>Maintain Accessibility: Keep contrast ratios and focus indicators</li> </ol> <p>Example custom CSS file structure:</p> <pre><code>/* custom-ui/admin.css */\n\n/* Import original CSS if needed */\n@import url('/static/admin.css');\n\n/* Override CSS variables */\n:root {\n    /* Brand colors */\n    --color-primary: #1e40af;\n    --color-primary-hover: #1e3a8a;\n    --color-secondary: #059669;\n\n    /* Custom spacing */\n    --spacing-unit: 0.5rem;\n    --border-radius: 0.375rem;\n\n    /* Custom fonts */\n    --font-family: 'Inter', system-ui, -apple-system, sans-serif;\n}\n\n/* Dark mode overrides */\n[data-theme=\"dark\"] {\n    --color-primary: #3b82f6;\n    --color-background: #0f172a;\n    --color-surface: #1e293b;\n}\n\n/* Component-specific overrides */\n.admin-header {\n    background: var(--color-primary);\n    padding: calc(var(--spacing-unit) * 3);\n}\n\n.server-card {\n    border-radius: var(--border-radius);\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n/* Custom animations */\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(-10px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n.panel {\n    animation: fadeIn 0.3s ease-out;\n}\n</code></pre>"},{"location":"manage/ui-customization/#kubernetes-configmap-for-css","title":"Kubernetes ConfigMap for CSS","text":"<p>For Kubernetes deployments, use a ConfigMap:</p> <pre><code># configmap-custom-css.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mcpgateway-custom-css\n  namespace: default\ndata:\n  admin.css: |\n    :root {\n      --color-primary: #2563eb;\n      --color-secondary: #10b981;\n    }\n    /* Additional custom styles */\n---\n# deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcpgateway\nspec:\n  template:\n    spec:\n      containers:\n      - name: mcpgateway\n        image: ghcr.io/MCP-Mirror/mcpgateway:latest\n        volumeMounts:\n        - name: custom-css\n          mountPath: /app/mcpgateway/static/admin.css\n          subPath: admin.css\n          readOnly: true\n      volumes:\n      - name: custom-css\n        configMap:\n          name: mcpgateway-custom-css\n</code></pre>"},{"location":"manage/ui-customization/#verifying-custom-css","title":"Verifying Custom CSS","text":"<p>To verify your custom CSS is loaded:</p> <ol> <li>Access the Admin UI at <code>http://localhost:4444/admin</code></li> <li>Open browser developer tools (F12)</li> <li>Check the Network tab for <code>admin.css</code></li> <li>Inspect elements to see applied styles</li> <li>Look for your custom CSS variables in the computed styles</li> </ol>"},{"location":"manage/ui-customization/#troubleshooting-container-css-issues","title":"Troubleshooting Container CSS Issues","text":"<p>Common issues and solutions:</p> <ol> <li>CSS not updating: Clear browser cache or use hard refresh (Ctrl+Shift+R)</li> <li>Permission denied: Ensure mounted files are readable (<code>chmod 644 admin.css</code>)</li> <li>Path not found: Verify the container path is exactly <code>/app/mcpgateway/static/</code></li> <li>Styles not applying: Check CSS specificity and use <code>!important</code> if necessary</li> </ol>"},{"location":"manage/ui-customization/#configuration-examples","title":"Configuration Examples","text":""},{"location":"manage/ui-customization/#environment-variables","title":"Environment Variables","text":"<p>Complete list of UI customization environment variables:</p> <pre><code># Theme and Appearance\nMCPGATEWAY_ADMIN_THEME=dark\nMCPGATEWAY_ADMIN_HIGH_CONTRAST=false\nMCPGATEWAY_ADMIN_FONT_SIZE=medium\nMCPGATEWAY_ADMIN_ANIMATIONS=true\n\n# Branding\nMCPGATEWAY_ADMIN_TITLE=\"Custom MCP Gateway\"\nMCPGATEWAY_ADMIN_LOGO_URL=\"/static/logo.svg\"\nMCPGATEWAY_ADMIN_FAVICON_URL=\"/static/favicon.ico\"\nMCPGATEWAY_ADMIN_CUSTOM_CSS=\"/static/custom.css\"\n\n# Layout\nMCPGATEWAY_ADMIN_DEFAULT_LAYOUT=dashboard\nMCPGATEWAY_ADMIN_SHOW_SERVERS=true\nMCPGATEWAY_ADMIN_SHOW_TOOLS=true\nMCPGATEWAY_ADMIN_SHOW_RESOURCES=true\nMCPGATEWAY_ADMIN_SHOW_PROMPTS=true\nMCPGATEWAY_ADMIN_SHOW_METRICS=true\n\n# Features\nMCPGATEWAY_ADMIN_ENABLE_SEARCH=true\nMCPGATEWAY_ADMIN_ENABLE_EXPORT=true\nMCPGATEWAY_ADMIN_ENABLE_SHORTCUTS=true\nMCPGATEWAY_ADMIN_ENABLE_DRAG_DROP=true\n\n# Localization\nMCPGATEWAY_ADMIN_DEFAULT_LANGUAGE=en\nMCPGATEWAY_ADMIN_AVAILABLE_LANGUAGES=en,es,fr,de,ja\n\n# Performance\nMCPGATEWAY_ADMIN_LAZY_LOAD=true\nMCPGATEWAY_ADMIN_CACHE_DURATION=3600\nMCPGATEWAY_ADMIN_UPDATE_INTERVAL=5000\n</code></pre>"},{"location":"manage/ui-customization/#docker-configuration","title":"Docker Configuration","text":"<p>Mount custom configuration in Docker:</p> <pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  mcpgateway:\n    image: mcpgateway:latest\n    environment:\n      - MCPGATEWAY_ADMIN_THEME=dark\n      - MCPGATEWAY_ADMIN_TITLE=My Custom Gateway\n    volumes:\n      - ./custom-ui:/app/static/custom:ro\n      - ./ui-config.json:/app/config/ui.json:ro\n    ports:\n      - \"4444:4444\"\n</code></pre>"},{"location":"manage/ui-customization/#troubleshooting","title":"Troubleshooting","text":""},{"location":"manage/ui-customization/#common-issues","title":"Common Issues","text":"<ol> <li>Theme not persisting: Check browser localStorage permissions</li> <li>Custom CSS not loading: Verify file path and permissions</li> <li>Layout reset on refresh: Ensure localStorage is not being cleared</li> <li>Mobile layout issues: Check viewport meta tag in HTML</li> </ol>"},{"location":"manage/ui-customization/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for UI troubleshooting:</p> <pre><code>// Enable UI debug mode\nlocalStorage.setItem('ui-debug', 'true');\n\n// Debug logging\nif (localStorage.getItem('ui-debug') === 'true') {\n    console.log('Panel configuration:', panelConfig);\n    console.log('Theme:', currentTheme);\n    console.log('User preferences:', userProfile);\n}\n</code></pre>"},{"location":"manage/ui-customization/#building-your-own-custom-ui","title":"Building Your Own Custom UI","text":"<p>The MCP Gateway provides comprehensive REST APIs that enable you to build completely custom user interfaces. This section covers API endpoints, authentication, real-time communication, and how to disable the built-in UI.</p>"},{"location":"manage/ui-customization/#disabling-the-built-in-ui","title":"Disabling the Built-in UI","text":"<p>When using a custom UI, you can disable the default Admin UI:</p> <pre><code># Disable built-in UI completely\nMCPGATEWAY_UI_ENABLED=false         # Disables static file serving and root redirect\nMCPGATEWAY_ADMIN_API_ENABLED=false  # Disables admin-specific API endpoints\n\n# Or keep APIs but disable UI\nMCPGATEWAY_UI_ENABLED=false         # Disable UI only\nMCPGATEWAY_ADMIN_API_ENABLED=true   # Keep admin APIs for custom UI\n</code></pre> <p>When the UI is disabled: - Root path (<code>/</code>) returns API information instead of redirecting to <code>/admin</code> - Static files (<code>/static/*</code>) are not served - Admin UI routes (<code>/admin/*</code>) return 404 - All API endpoints remain accessible (unless <code>MCPGATEWAY_ADMIN_API_ENABLED=false</code>)</p>"},{"location":"manage/ui-customization/#api-documentation","title":"API Documentation","text":"<p>The gateway provides interactive API documentation:</p> <ul> <li><code>/docs</code> - Swagger UI interactive documentation</li> <li><code>/redoc</code> - ReDoc API documentation</li> <li><code>/openapi.json</code> - OpenAPI 3.0 schema (for code generation)</li> </ul> <p>Access the Swagger UI at <code>http://localhost:4444/docs</code> to explore all available endpoints interactively.</p>"},{"location":"manage/ui-customization/#core-api-endpoints","title":"Core API Endpoints","text":""},{"location":"manage/ui-customization/#virtual-server-management","title":"Virtual Server Management","text":"<pre><code>GET    /servers              # List all virtual servers\nPOST   /servers              # Create new virtual server\nGET    /servers/{id}         # Get specific server details\nPUT    /servers/{id}         # Update server configuration\nDELETE /servers/{id}         # Delete virtual server\n</code></pre>"},{"location":"manage/ui-customization/#tool-registry","title":"Tool Registry","text":"<pre><code>GET    /tools                # List all available tools\nPOST   /tools                # Register new tool\nGET    /tools/{id}           # Get tool details\nPUT    /tools/{id}           # Update tool\nDELETE /tools/{id}           # Remove tool\nPOST   /tools/{id}/invoke    # Invoke a specific tool\n</code></pre>"},{"location":"manage/ui-customization/#resource-management","title":"Resource Management","text":"<pre><code>GET    /resources            # List all resources\nPOST   /resources            # Create new resource\nGET    /resources/{id}       # Get resource details\nPUT    /resources/{id}       # Update resource\nDELETE /resources/{id}       # Delete resource\nGET    /resources/{id}/read  # Read resource content\n</code></pre>"},{"location":"manage/ui-customization/#prompt-templates","title":"Prompt Templates","text":"<pre><code>GET    /prompts              # List all prompts\nPOST   /prompts              # Create new prompt\nGET    /prompts/{id}         # Get prompt details\nPUT    /prompts/{id}         # Update prompt\nDELETE /prompts/{id}         # Delete prompt\nPOST   /prompts/{id}/execute # Execute prompt\n</code></pre>"},{"location":"manage/ui-customization/#gateway-federation","title":"Gateway Federation","text":"<pre><code>GET    /gateways             # List peer gateways\nPOST   /gateways             # Register new gateway\nGET    /gateways/{id}        # Get gateway details\nDELETE /gateways/{id}        # Remove gateway\nGET    /gateways/{id}/health # Check gateway health\n</code></pre>"},{"location":"manage/ui-customization/#system-information","title":"System Information","text":"<pre><code>GET    /version              # System diagnostics and metrics\nGET    /health               # Health check endpoint\nGET    /ready                # Readiness check\nGET    /metrics              # Prometheus-compatible metrics\n</code></pre>"},{"location":"manage/ui-customization/#mcp-protocol-operations","title":"MCP Protocol Operations","text":"<pre><code>POST   /                     # JSON-RPC endpoint for MCP protocol\nPOST   /rpc                  # Alternative JSON-RPC endpoint\nPOST   /protocol/initialize  # Initialize MCP session\nPOST   /protocol/ping        # Ping for keepalive\nPOST   /protocol/notify      # Send notifications\n</code></pre>"},{"location":"manage/ui-customization/#authentication","title":"Authentication","text":""},{"location":"manage/ui-customization/#generate-jwt-token","title":"Generate JWT Token","text":"<pre><code># Generate a JWT token for API access\npython3 -m mcpgateway.utils.create_jwt_token \\\n    --username admin \\\n    --exp 10080 \\\n    --secret $JWT_SECRET_KEY\n\n# Export for use in API calls\nexport TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\\n    --username admin --exp 0 --secret my-test-key)\n</code></pre>"},{"location":"manage/ui-customization/#using-authentication-in-api-calls","title":"Using Authentication in API Calls","text":"<pre><code># Bearer token authentication (recommended)\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n     http://localhost:4444/servers\n\n# Basic authentication (alternative)\ncurl -u admin:changeme \\\n     http://localhost:4444/servers\n\n# Cookie-based (for browser sessions)\ncurl -c cookies.txt -X POST \\\n     -d '{\"username\":\"admin\",\"password\":\"changeme\"}' \\\n     http://localhost:4444/auth/login\n</code></pre>"},{"location":"manage/ui-customization/#real-time-communication","title":"Real-time Communication","text":""},{"location":"manage/ui-customization/#server-sent-events-sse","title":"Server-Sent Events (SSE)","text":"<pre><code>// Connect to SSE endpoint for real-time updates\nconst eventSource = new EventSource(\n    `/servers/${serverId}/sse`,\n    { headers: { 'Authorization': `Bearer ${token}` } }\n);\n\neventSource.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    console.log('Server update:', data);\n};\n\neventSource.addEventListener('tool-invoked', (event) =&gt; {\n    console.log('Tool invoked:', JSON.parse(event.data));\n});\n</code></pre>"},{"location":"manage/ui-customization/#websocket-connection","title":"WebSocket Connection","text":"<pre><code>// WebSocket for bidirectional communication\nconst ws = new WebSocket(`ws://localhost:4444/ws`);\n\nws.onopen = () =&gt; {\n    // Send authentication\n    ws.send(JSON.stringify({\n        type: 'auth',\n        token: token\n    }));\n\n    // Subscribe to updates\n    ws.send(JSON.stringify({\n        jsonrpc: '2.0',\n        method: 'subscribe',\n        params: { topics: ['tools', 'servers'] },\n        id: 1\n    }));\n};\n\nws.onmessage = (event) =&gt; {\n    const message = JSON.parse(event.data);\n    console.log('WebSocket message:', message);\n};\n</code></pre>"},{"location":"manage/ui-customization/#http-streaming","title":"HTTP Streaming","text":"<pre><code># Stream responses using HTTP chunked encoding\ncurl -N -H \"Authorization: Bearer $TOKEN\" \\\n     -H \"Accept: text/event-stream\" \\\n     http://localhost:4444/servers/stream\n</code></pre>"},{"location":"manage/ui-customization/#building-a-react-based-custom-ui","title":"Building a React-Based Custom UI","text":"<p>Example React application structure:</p> <pre><code>// api/client.js\nclass MCPGatewayClient {\n    constructor(baseUrl, token) {\n        this.baseUrl = baseUrl;\n        this.token = token;\n    }\n\n    async fetchServers() {\n        const response = await fetch(`${this.baseUrl}/servers`, {\n            headers: {\n                'Authorization': `Bearer ${this.token}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        return response.json();\n    }\n\n    async createServer(config) {\n        const response = await fetch(`${this.baseUrl}/servers`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${this.token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(config)\n        });\n        return response.json();\n    }\n\n    connectSSE(serverId, onMessage) {\n        const eventSource = new EventSource(\n            `${this.baseUrl}/servers/${serverId}/sse`,\n            {\n                headers: {\n                    'Authorization': `Bearer ${this.token}`\n                }\n            }\n        );\n\n        eventSource.onmessage = onMessage;\n        return eventSource;\n    }\n}\n\n// components/ServerDashboard.jsx\nimport React, { useState, useEffect } from 'react';\nimport { MCPGatewayClient } from '../api/client';\n\nexport function ServerDashboard() {\n    const [servers, setServers] = useState([]);\n    const client = new MCPGatewayClient(\n        process.env.REACT_APP_GATEWAY_URL,\n        process.env.REACT_APP_TOKEN\n    );\n\n    useEffect(() =&gt; {\n        // Load initial data\n        client.fetchServers().then(setServers);\n\n        // Subscribe to real-time updates\n        const sse = client.connectSSE('all', (event) =&gt; {\n            const update = JSON.parse(event.data);\n            if (update.type === 'server-update') {\n                setServers(prev =&gt;\n                    prev.map(s =&gt; s.id === update.server.id\n                        ? update.server : s)\n                );\n            }\n        });\n\n        return () =&gt; sse.close();\n    }, []);\n\n    return (\n        &lt;div className=\"dashboard\"&gt;\n            &lt;h1&gt;MCP Gateway Servers&lt;/h1&gt;\n            &lt;div className=\"server-grid\"&gt;\n                {servers.map(server =&gt; (\n                    &lt;ServerCard key={server.id} server={server} /&gt;\n                ))}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre>"},{"location":"manage/ui-customization/#python-custom-ui-example","title":"Python Custom UI Example","text":"<pre><code># custom_ui_client.py\nimport requests\nimport sseclient\nfrom typing import Dict, List\n\nclass MCPGatewayClient:\n    def __init__(self, base_url: str, token: str):\n        self.base_url = base_url\n        self.headers = {\n            \"Authorization\": f\"Bearer {token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def list_servers(self) -&gt; List[Dict]:\n        \"\"\"List all virtual servers\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/servers\",\n            headers=self.headers\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def create_server(self, config: Dict) -&gt; Dict:\n        \"\"\"Create a new virtual server\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/servers\",\n            json=config,\n            headers=self.headers\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def invoke_tool(self, tool_id: str, params: Dict) -&gt; Dict:\n        \"\"\"Invoke a tool\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/tools/{tool_id}/invoke\",\n            json={\"params\": params},\n            headers=self.headers\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def stream_events(self, server_id: str = \"all\"):\n        \"\"\"Stream real-time events via SSE\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/servers/{server_id}/sse\",\n            headers=self.headers,\n            stream=True\n        )\n        client = sseclient.SSEClient(response)\n        for event in client.events():\n            yield event\n\n# Example usage\nif __name__ == \"__main__\":\n    client = MCPGatewayClient(\n        base_url=\"http://localhost:4444\",\n        token=\"your-jwt-token\"\n    )\n\n    # List servers\n    servers = client.list_servers()\n    print(f\"Found {len(servers)} servers\")\n\n    # Stream events\n    for event in client.stream_events():\n        print(f\"Event: {event.event}, Data: {event.data}\")\n</code></pre>"},{"location":"manage/ui-customization/#typescript-sdk-example","title":"TypeScript SDK Example","text":"<pre><code>// mcp-gateway-sdk.ts\nexport interface Server {\n    id: string;\n    name: string;\n    description?: string;\n    tools: string[];\n    resources: string[];\n    status: 'active' | 'inactive';\n}\n\nexport interface Tool {\n    id: string;\n    name: string;\n    description: string;\n    parameters: Record&lt;string, any&gt;;\n}\n\nexport class MCPGatewaySDK {\n    constructor(\n        private baseUrl: string,\n        private token: string\n    ) {}\n\n    private async request&lt;T&gt;(\n        path: string,\n        options: RequestInit = {}\n    ): Promise&lt;T&gt; {\n        const response = await fetch(`${this.baseUrl}${path}`, {\n            ...options,\n            headers: {\n                'Authorization': `Bearer ${this.token}`,\n                'Content-Type': 'application/json',\n                ...options.headers,\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`API Error: ${response.statusText}`);\n        }\n\n        return response.json();\n    }\n\n    async getServers(): Promise&lt;Server[]&gt; {\n        return this.request&lt;Server[]&gt;('/servers');\n    }\n\n    async createServer(config: Partial&lt;Server&gt;): Promise&lt;Server&gt; {\n        return this.request&lt;Server&gt;('/servers', {\n            method: 'POST',\n            body: JSON.stringify(config),\n        });\n    }\n\n    async getTools(): Promise&lt;Tool[]&gt; {\n        return this.request&lt;Tool[]&gt;('/tools');\n    }\n\n    async invokeTool(\n        toolId: string,\n        params: Record&lt;string, any&gt;\n    ): Promise&lt;any&gt; {\n        return this.request(`/tools/${toolId}/invoke`, {\n            method: 'POST',\n            body: JSON.stringify({ params }),\n        });\n    }\n\n    subscribeToEvents(\n        serverId: string = 'all',\n        onMessage: (event: MessageEvent) =&gt; void\n    ): EventSource {\n        const eventSource = new EventSource(\n            `${this.baseUrl}/servers/${serverId}/sse`,\n            {\n                headers: {\n                    'Authorization': `Bearer ${this.token}`,\n                },\n            }\n        );\n\n        eventSource.onmessage = onMessage;\n\n        eventSource.onerror = (error) =&gt; {\n            console.error('SSE Error:', error);\n        };\n\n        return eventSource;\n    }\n}\n</code></pre>"},{"location":"manage/ui-customization/#cors-configuration","title":"CORS Configuration","text":"<p>For browser-based custom UIs, configure CORS:</p> <pre><code># Enable CORS for your custom UI domain\nCORS_ENABLED=true\nALLOWED_ORIGINS=http://localhost:3000,https://my-custom-ui.com\n</code></pre>"},{"location":"manage/ui-customization/#api-rate-limiting","title":"API Rate Limiting","text":"<p>When building custom UIs, be aware of rate limits:</p> <pre><code># Rate limiting configuration\nRATE_LIMIT_ENABLED=true\nRATE_LIMIT_PER_MINUTE=60\nRATE_LIMIT_BURST=10\n</code></pre> <p>Handle rate limit responses: <pre><code>async function apiCall(url, options) {\n    const response = await fetch(url, options);\n\n    if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        console.log(`Rate limited. Retry after ${retryAfter} seconds`);\n        // Implement exponential backoff\n        await sleep(retryAfter * 1000);\n        return apiCall(url, options);\n    }\n\n    return response;\n}\n</code></pre></p>"},{"location":"manage/ui-customization/#monitoring-your-custom-ui","title":"Monitoring Your Custom UI","text":"<p>Track custom UI interactions:</p> <pre><code>// Send custom metrics to the gateway\nfetch('/metrics/custom', {\n    method: 'POST',\n    headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        metric: 'ui.page_view',\n        value: 1,\n        labels: {\n            page: 'dashboard',\n            user: 'admin'\n        }\n    })\n});\n</code></pre>"},{"location":"manage/ui-customization/#best-practices","title":"Best Practices","text":"<ol> <li>Test customizations across different browsers and devices</li> <li>Backup configurations before major changes</li> <li>Use version control for custom CSS and JavaScript files</li> <li>Document custom changes for team members</li> <li>Monitor performance impact of customizations</li> <li>Follow accessibility guidelines (WCAG 2.1 AA)</li> <li>Implement progressive enhancement for better compatibility</li> <li>Use API versioning when building custom UIs to handle future changes</li> <li>Implement proper error handling for API failures</li> <li>Cache API responses appropriately to reduce load</li> </ol>"},{"location":"manage/ui-customization/#related-documentation","title":"Related Documentation","text":"<ul> <li>Admin UI Overview - Basic UI concepts and navigation</li> <li>Security Configuration - Securing the Admin UI</li> <li>Performance Tuning - Optimizing UI performance</li> <li>API Reference - Admin API endpoints</li> </ul>"},{"location":"manage/upgrade/","title":"Upgrading MCP Gateway and Managing Database Migrations","text":"<p>This guide provides step-by-step instructions for upgrading the MCP Gateway and handling associated database migrations to ensure a smooth transition with minimal downtime.</p>"},{"location":"manage/upgrade/#upgrade-overview","title":"\ud83d\udd04 Upgrade Overview","text":"<p>MCP Gateway is under active development, and while we strive for backward compatibility, it's essential to review version changes carefully when upgrading. Due to rapid iterations, documentation updates may sometimes lag. If you encounter issues, consult our GitHub repository or reach out via GitHub Issues.</p>"},{"location":"manage/upgrade/#upgrade-steps","title":"\ud83d\udee0 Upgrade Steps","text":""},{"location":"manage/upgrade/#1-backup-current-configuration-and-data","title":"1. Backup Current Configuration and Data","text":"<p>Before initiating an upgrade:</p> <ul> <li>Export Configuration: Backup your current configuration files.</li> <li>Database Backup: Create a full backup of your database to prevent data loss.</li> </ul>"},{"location":"manage/upgrade/#2-review-release-notes","title":"2. Review Release Notes","text":"<p>Check the release notes for:</p> <ul> <li>Breaking Changes: Identify any changes that might affect your current setup.</li> <li>Migration Scripts: Look for any provided scripts or instructions for database migrations.</li> </ul>"},{"location":"manage/upgrade/#3-update-mcp-gateway","title":"3. Update MCP Gateway","text":"<p>Depending on your deployment method: podman, docker, kubernetes, etc.</p>"},{"location":"manage/upgrade/#4-apply-database-migrations","title":"4. Apply Database Migrations","text":"<p>If the new version includes database schema changes:</p> <ul> <li>Migration Scripts: Execute any provided migration scripts.</li> <li>Manual Migrations: If no scripts are provided, consult the release notes for manual migration instructions.</li> </ul>"},{"location":"manage/upgrade/#5-verify-the-upgrade","title":"5. Verify the Upgrade","text":"<p>Post-upgrade, ensure:</p> <ul> <li>Service Availability: MCP Gateway is running and accessible.</li> <li>Functionality: All features and integrations are working as expected.</li> <li>Logs: Check logs for any errors or warnings.</li> </ul>"},{"location":"manage/upgrade/#testing-and-validation","title":"\ud83e\uddea Testing and Validation","text":"<ul> <li>Staging Environment: Test the upgrade process in a staging environment before applying to production.</li> <li>Automated Tests: Run your test suite to catch any regressions.</li> <li>User Acceptance Testing (UAT): Engage end-users to validate critical workflows.</li> </ul>"},{"location":"manage/upgrade/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>MCP Gateway GitHub Repository</li> <li>MCP Gateway Documentation</li> </ul>"},{"location":"manage/well-known-uris/","title":"Well-Known URI Configuration","text":"<p>Well-known URIs are standardized endpoints that web services expose for automated discovery and security contact purposes, as defined by RFC 8615. MCP Gateway provides configurable support for standard well-known URIs with security-first defaults.</p>"},{"location":"manage/well-known-uris/#overview","title":"Overview","text":"<p>The well-known URI handler provides:</p> <ul> <li>robots.txt - Search engine crawler management</li> <li>security.txt - Security contact information (RFC 9116)</li> <li>Custom files - Organization-specific policies (ai.txt, dnt-policy.txt, etc.)</li> <li>Security-first defaults - Appropriate for private API gateway deployment</li> <li>Admin monitoring - Configuration status via <code>/admin/well-known</code></li> </ul>"},{"location":"manage/well-known-uris/#quick-start","title":"Quick Start","text":""},{"location":"manage/well-known-uris/#default-configuration-private-api","title":"Default Configuration (Private API)","text":"<pre><code># Enable well-known URIs (enabled by default)\nWELL_KNOWN_ENABLED=true\n\n# Default robots.txt blocks all crawlers (appropriate for private APIs)\n# No additional configuration needed - uses built-in secure defaults\n</code></pre> <p>Access your well-known files: - <code>GET /.well-known/robots.txt</code> - Always available - <code>GET /.well-known/security.txt</code> - Available when configured - <code>GET /admin/well-known</code> - Configuration status (requires auth)</p>"},{"location":"manage/well-known-uris/#configuration","title":"Configuration","text":""},{"location":"manage/well-known-uris/#basic-settings","title":"Basic Settings","text":"<pre><code># Enable/disable well-known URI endpoints\nWELL_KNOWN_ENABLED=true\n\n# Cache control for well-known files (seconds)\nWELL_KNOWN_CACHE_MAX_AGE=3600  # 1 hour default\n</code></pre>"},{"location":"manage/well-known-uris/#robotstxt-configuration","title":"robots.txt Configuration","text":"<pre><code># Default: blocks all crawlers (security-first for private APIs)\nWELL_KNOWN_ROBOTS_TXT=\"User-agent: *\\nDisallow: /\\n\\n# MCP Gateway is a private API gateway\\n# Public crawling is disabled by default\"\n\n# Public API example: allow health checks, block admin\nWELL_KNOWN_ROBOTS_TXT=\"User-agent: *\\nAllow: /health\\nAllow: /docs\\nDisallow: /admin\\nDisallow: /tools\\nDisallow: /\"\n\n# Allow specific bots only\nWELL_KNOWN_ROBOTS_TXT=\"User-agent: monitoring-bot\\nAllow: /health\\nAllow: /metrics\\n\\nUser-agent: *\\nDisallow: /\"\n</code></pre>"},{"location":"manage/well-known-uris/#securitytxt-configuration","title":"security.txt Configuration","text":"<p>Configure security contact information per RFC 9116:</p> <pre><code># Basic security contact\nWELL_KNOWN_SECURITY_TXT=\"Contact: mailto:security@example.com\\nExpires: 2025-12-31T23:59:59Z\\nPreferred-Languages: en\"\n\n# Comprehensive security.txt\nWELL_KNOWN_SECURITY_TXT=\"Contact: mailto:security@example.com\\nContact: https://example.com/security\\nEncryption: https://example.com/pgp-key.txt\\nAcknowledgments: https://example.com/security/thanks\\nPreferred-Languages: en, es\\nCanonical: https://api.example.com/.well-known/security.txt\\nHiring: https://example.com/careers\"\n</code></pre> <p>Note: The system automatically: - Adds <code>Expires</code> field if missing (6 months from generation) - Adds header comments with generation timestamp - Validates RFC 9116 format requirements</p>"},{"location":"manage/well-known-uris/#custom-well-known-files","title":"Custom Well-Known Files","text":"<p>Add organization-specific well-known files via JSON configuration:</p> <pre><code># AI usage policy\nWELL_KNOWN_CUSTOM_FILES='{\"ai.txt\": \"# AI Usage Policy\\n\\nThis MCP Gateway uses AI for:\\n- Tool orchestration\\n- Response generation\\n- Error handling\\n\\nWe do not use AI for:\\n- User data analysis\\n- Behavioral tracking\\n- Decision making without human oversight\"}'\n\n# Multiple custom files\nWELL_KNOWN_CUSTOM_FILES='{\"ai.txt\": \"AI Policy: Responsible use only\", \"dnt-policy.txt\": \"# Do Not Track Policy\\n\\nWe respect the DNT header.\\nNo tracking cookies are used.\\nOnly essential session data is stored.\", \"change-password\": \"https://mycompany.com/account/password\"}'\n</code></pre>"},{"location":"manage/well-known-uris/#api-access","title":"API Access","text":""},{"location":"manage/well-known-uris/#public-endpoints-no-authentication","title":"Public Endpoints (No Authentication)","text":"<p>Well-known URIs are public by design (RFC 8615):</p> <pre><code># Always available (when enabled)\ncurl https://api.example.com/.well-known/robots.txt\n\n# Available when configured\ncurl https://api.example.com/.well-known/security.txt\n\n# Custom files (when configured)\ncurl https://api.example.com/.well-known/ai.txt\n</code></pre>"},{"location":"manage/well-known-uris/#admin-monitoring-authentication-required","title":"Admin Monitoring (Authentication Required)","text":"<pre><code># Check configuration status\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  https://api.example.com/admin/well-known\n\n# Response example:\n{\n  \"enabled\": true,\n  \"configured_files\": [\n    {\n      \"path\": \"/.well-known/robots.txt\",\n      \"enabled\": true,\n      \"description\": \"Robot exclusion standard\",\n      \"cache_max_age\": 3600\n    },\n    {\n      \"path\": \"/.well-known/security.txt\",\n      \"enabled\": true,\n      \"description\": \"Security contact information\",\n      \"cache_max_age\": 3600\n    }\n  ],\n  \"supported_files\": [\"robots.txt\", \"security.txt\", \"ai.txt\", \"dnt-policy.txt\", \"change-password\"],\n  \"cache_max_age\": 3600\n}\n</code></pre>"},{"location":"manage/well-known-uris/#security-considerations","title":"Security Considerations","text":""},{"location":"manage/well-known-uris/#private-api-deployment-default","title":"Private API Deployment (Default)","text":"<p>For private API gateways, the default configuration: - Blocks all crawlers via robots.txt - Minimizes information disclosure - No security.txt (unless explicitly configured) - Cache headers for performance but not long-term public caching</p>"},{"location":"manage/well-known-uris/#public-api-deployment","title":"Public API Deployment","text":"<p>For public-facing APIs, consider: - Selective crawler access - allow health checks, block admin endpoints - Security contact information - enable security.txt for responsible disclosure - Custom policies - AI usage policy, privacy policy links - Monitoring - track well-known endpoint access in logs</p>"},{"location":"manage/well-known-uris/#information-disclosure","title":"Information Disclosure","text":"<p>Well-known URIs intentionally disclose information: - Service type/purpose through robots.txt comments - Security contact through security.txt - Organizational policies through custom files</p> <p>Review all content before deployment.</p>"},{"location":"manage/well-known-uris/#deployment-examples","title":"Deployment Examples","text":""},{"location":"manage/well-known-uris/#docker-compose","title":"Docker Compose","text":"<pre><code>services:\n  gateway:\n    environment:\n      WELL_KNOWN_ENABLED: \"true\"\n      WELL_KNOWN_ROBOTS_TXT: |\n        User-agent: monitoring-bot\n        Allow: /health\n\n        User-agent: *\n        Disallow: /\n      WELL_KNOWN_SECURITY_TXT: |\n        Contact: security@example.com\n        Encryption: https://example.com/pgp\n        Expires: 2025-12-31T23:59:59Z\n      WELL_KNOWN_CUSTOM_FILES: '{\"ai.txt\": \"AI is used for tool orchestration\"}'\n      WELL_KNOWN_CACHE_MAX_AGE: \"7200\"\n</code></pre>"},{"location":"manage/well-known-uris/#kubernetes-configmap","title":"Kubernetes ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mcp-gateway-wellknown\ndata:\n  WELL_KNOWN_ENABLED: \"true\"\n  WELL_KNOWN_ROBOTS_TXT: |\n    User-agent: *\n    Disallow: /\n\n    # Private API - No public crawling\n  WELL_KNOWN_SECURITY_TXT: |\n    Contact: mailto:security@example.com\n    Contact: https://example.com/security\n    Expires: 2025-12-31T23:59:59Z\n    Preferred-Languages: en\n  WELL_KNOWN_CUSTOM_FILES: |\n    {\n      \"ai.txt\": \"This service uses AI for tool orchestration only.\",\n      \"dnt-policy.txt\": \"We honor Do Not Track headers.\"\n    }\n</code></pre>"},{"location":"manage/well-known-uris/#helm-chart-values","title":"Helm Chart Values","text":"<pre><code>config:\n  wellKnown:\n    enabled: true\n    cacheMaxAge: 3600\n    robotsTxt: |\n      User-agent: internal-monitor\n      Allow: /health\n      Allow: /metrics\n\n      User-agent: *\n      Disallow: /\n    securityTxt: |\n      Contact: security@example.com\n      Encryption: https://example.com/pgp-key.txt\n      Acknowledgments: https://example.com/security/hall-of-fame\n    customFiles:\n      ai.txt: \"AI Usage: Tool orchestration and response generation only\"\n      dnt-policy.txt: \"We respect Do Not Track headers and implement minimal tracking\"\n</code></pre>"},{"location":"manage/well-known-uris/#troubleshooting","title":"Troubleshooting","text":""},{"location":"manage/well-known-uris/#common-issues","title":"Common Issues","text":"<p>Problem: Well-known endpoints return 404 <pre><code># Check if feature is enabled\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  https://api.example.com/admin/well-known\n</code></pre></p> <p>Problem: security.txt not available <pre><code># security.txt is only enabled when content is provided\nWELL_KNOWN_SECURITY_TXT=\"Contact: security@example.com\"\n</code></pre></p> <p>Problem: Custom files not working <pre><code># Ensure valid JSON format\nWELL_KNOWN_CUSTOM_FILES='{\"ai.txt\": \"AI Policy content here\"}'\n\n# Check JSON validity\necho '{\"ai.txt\": \"content\"}' | python3 -m json.tool\n</code></pre></p> <p>Problem: Cache headers not updating <pre><code># Clear browser cache or check cache-control header\ncurl -I https://api.example.com/.well-known/robots.txt\n</code></pre></p>"},{"location":"manage/well-known-uris/#validation","title":"Validation","text":"<p>Check well-known URI configuration:</p> <pre><code># Test robots.txt\ncurl -I https://api.example.com/.well-known/robots.txt\n\n# Test security.txt (if configured)\ncurl https://api.example.com/.well-known/security.txt\n\n# Check admin status\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  https://api.example.com/admin/well-known | jq .\n</code></pre>"},{"location":"manage/well-known-uris/#monitoring","title":"Monitoring","text":"<p>Monitor well-known URI access in logs:</p> <pre><code># Search for well-known requests in logs\ngrep \"/.well-known/\" /var/log/mcpgateway.log\n\n# Monitor for unexpected access patterns\ngrep -E \"(/.well-known/|robots|security\\.txt)\" /var/log/access.log | \\\n  awk '{print $1, $7}' | sort | uniq -c\n</code></pre>"},{"location":"manage/well-known-uris/#standards-compliance","title":"Standards Compliance","text":""},{"location":"manage/well-known-uris/#rfc-8615-well-known-uris","title":"RFC 8615 - Well-Known URIs","text":"<ul> <li>\u2705 Serves content at <code>/.well-known/</code> path</li> <li>\u2705 Uses appropriate content types</li> <li>\u2705 Implements proper caching headers</li> <li>\u2705 Provides helpful error messages</li> </ul>"},{"location":"manage/well-known-uris/#rfc-9116-securitytxt","title":"RFC 9116 - security.txt","text":"<ul> <li>\u2705 Validates required fields</li> <li>\u2705 Auto-generates Expires field if missing</li> <li>\u2705 Serves with correct content-type</li> <li>\u2705 Supports all standard fields (Contact, Expires, Encryption, etc.)</li> </ul>"},{"location":"manage/well-known-uris/#rfc-9309-robots-exclusion-protocol","title":"RFC 9309 - Robots Exclusion Protocol","text":"<ul> <li>\u2705 Standard robots.txt format</li> <li>\u2705 User-agent directive support</li> <li>\u2705 Allow/Disallow directive support</li> <li>\u2705 Comment support for documentation</li> </ul>"},{"location":"manage/well-known-uris/#related-documentation","title":"Related Documentation","text":"<ul> <li>Security Guide - General security configuration</li> <li>ADR-015 - Architecture decision record</li> <li>Export/Import - Configuration management</li> <li>Environment Variables - Complete configuration reference</li> </ul>"},{"location":"manage/observability/observability/","title":"Observability","text":"<p>MCP Gateway includes production-grade OpenTelemetry instrumentation for distributed tracing, enabling you to monitor performance, debug issues, and understand request flows across your gateway instances.</p>"},{"location":"manage/observability/observability/#overview","title":"Overview","text":"<p>The observability implementation is vendor-agnostic and works with any OTLP-compatible backend:</p> <ul> <li>Arize Phoenix - AI/LLM-focused observability</li> <li>Jaeger - Open source distributed tracing</li> <li>Zipkin - Distributed tracing system</li> <li>Grafana Tempo - High-scale distributed tracing</li> <li>Datadog, New Relic, Honeycomb - Commercial APM solutions</li> <li>Console - Debug output to stdout (development)</li> </ul>"},{"location":"manage/observability/observability/#what-gets-traced","title":"What Gets Traced","text":"<ul> <li>Tool invocations - Full lifecycle with arguments, results, and timing</li> <li>Prompt rendering - Template processing and message generation</li> <li>Resource fetching - URI resolution, caching, and content retrieval</li> <li>Gateway federation - Cross-gateway requests and health checks</li> <li>Plugin execution - Pre/post hooks if plugins are enabled</li> <li>Errors and exceptions - Full stack traces and error context</li> </ul>"},{"location":"manage/observability/observability/#quick-start","title":"Quick Start","text":""},{"location":"manage/observability/observability/#1-install-dependencies","title":"1. Install Dependencies","text":"<p>The observability packages are included in the Docker containers by default. For local development:</p> <pre><code># Install with observability support\npip install mcp-contextforge-gateway[observability]\n\n# Or add all backends\npip install mcp-contextforge-gateway[observability-all]\n</code></pre>"},{"location":"manage/observability/observability/#2-configure-environment","title":"2. Configure Environment","text":"<p>Set these environment variables (or add to <code>.env</code>):</p> <pre><code># Enable observability (default: true)\nexport OTEL_ENABLE_OBSERVABILITY=true\n\n# Service identification\nexport OTEL_SERVICE_NAME=mcp-gateway\nexport OTEL_SERVICE_VERSION=0.6.0\nexport OTEL_DEPLOYMENT_ENVIRONMENT=development\n\n# Choose your backend (otlp, jaeger, zipkin, console, none)\nexport OTEL_TRACES_EXPORTER=otlp\n\n# OTLP Configuration (for Phoenix, Tempo, etc.)\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\nexport OTEL_EXPORTER_OTLP_PROTOCOL=grpc\nexport OTEL_EXPORTER_OTLP_INSECURE=true\n</code></pre>"},{"location":"manage/observability/observability/#3-start-your-backend","title":"3. Start Your Backend","text":"<p>Choose your preferred observability backend:</p>"},{"location":"manage/observability/observability/#phoenix-aillm-focus","title":"Phoenix (AI/LLM Focus)","text":"<pre><code># Start Phoenix\ndocker run -d \\\n  --name phoenix \\\n  -p 6006:6006 \\\n  -p 4317:4317 \\\n  arizephoenix/phoenix:latest\n\n# Configure environment\nexport OTEL_TRACES_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\nexport OTEL_SERVICE_NAME=mcp-gateway\n\n# View UI at http://localhost:6006\n</code></pre>"},{"location":"manage/observability/observability/#jaeger","title":"Jaeger","text":"<pre><code># Start Jaeger\ndocker run -d \\\n  --name jaeger \\\n  -p 16686:16686 \\\n  -p 14268:14268 \\\n  jaegertracing/all-in-one\n\n# Configure environment\nexport OTEL_TRACES_EXPORTER=jaeger\nexport OTEL_EXPORTER_JAEGER_ENDPOINT=http://localhost:14268/api/traces\nexport OTEL_SERVICE_NAME=mcp-gateway\n\n# View UI at http://localhost:16686\n</code></pre>"},{"location":"manage/observability/observability/#zipkin","title":"Zipkin","text":"<pre><code># Start Zipkin\ndocker run -d \\\n  --name zipkin \\\n  -p 9411:9411 \\\n  openzipkin/zipkin\n\n# Configure environment\nexport OTEL_TRACES_EXPORTER=zipkin\nexport OTEL_EXPORTER_ZIPKIN_ENDPOINT=http://localhost:9411/api/v2/spans\nexport OTEL_SERVICE_NAME=mcp-gateway\n\n# View UI at http://localhost:9411\n</code></pre>"},{"location":"manage/observability/observability/#grafana-tempo","title":"Grafana Tempo","text":"<pre><code># Start Tempo\ndocker run -d \\\n  --name tempo \\\n  -p 4317:4317 \\\n  -p 3200:3200 \\\n  grafana/tempo:latest\n\n# Configure environment (uses OTLP)\nexport OTEL_TRACES_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\nexport OTEL_SERVICE_NAME=mcp-gateway\n</code></pre>"},{"location":"manage/observability/observability/#console-development","title":"Console (Development)","text":"<pre><code># For debugging - prints traces to stdout\nexport OTEL_TRACES_EXPORTER=console\nexport OTEL_SERVICE_NAME=mcp-gateway\n</code></pre>"},{"location":"manage/observability/observability/#4-run-mcp-gateway","title":"4. Run MCP Gateway","text":"<pre><code># Start the gateway (observability is enabled by default)\nmcpgateway\n\n# Or with Docker\ndocker run -e OTEL_EXPORTER_OTLP_ENDPOINT=http://host.docker.internal:4317 \\\n           ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre>"},{"location":"manage/observability/observability/#configuration-reference","title":"Configuration Reference","text":""},{"location":"manage/observability/observability/#core-settings","title":"Core Settings","text":"Variable Description Default Options <code>OTEL_ENABLE_OBSERVABILITY</code> Master switch <code>true</code> <code>true</code>, <code>false</code> <code>OTEL_SERVICE_NAME</code> Service identifier <code>mcp-gateway</code> Any string <code>OTEL_SERVICE_VERSION</code> Service version <code>0.6.0</code> Any string <code>OTEL_DEPLOYMENT_ENVIRONMENT</code> Environment tag <code>development</code> <code>development</code>, <code>staging</code>, <code>production</code> <code>OTEL_TRACES_EXPORTER</code> Export backend <code>otlp</code> <code>otlp</code>, <code>jaeger</code>, <code>zipkin</code>, <code>console</code>, <code>none</code> <code>OTEL_RESOURCE_ATTRIBUTES</code> Custom attributes - <code>key=value,key2=value2</code>"},{"location":"manage/observability/observability/#otlp-configuration","title":"OTLP Configuration","text":"Variable Description Default Example <code>OTEL_EXPORTER_OTLP_ENDPOINT</code> Collector endpoint - <code>http://localhost:4317</code> <code>OTEL_EXPORTER_OTLP_PROTOCOL</code> Protocol <code>grpc</code> <code>grpc</code>, <code>http/protobuf</code> <code>OTEL_EXPORTER_OTLP_HEADERS</code> Auth headers - <code>api-key=secret,x-auth=token</code> <code>OTEL_EXPORTER_OTLP_INSECURE</code> Skip TLS verify <code>true</code> <code>true</code>, <code>false</code>"},{"location":"manage/observability/observability/#alternative-backends","title":"Alternative Backends","text":"Variable Description Default <code>OTEL_EXPORTER_JAEGER_ENDPOINT</code> Jaeger collector <code>http://localhost:14268/api/traces</code> <code>OTEL_EXPORTER_ZIPKIN_ENDPOINT</code> Zipkin collector <code>http://localhost:9411/api/v2/spans</code>"},{"location":"manage/observability/observability/#performance-tuning","title":"Performance Tuning","text":"Variable Description Default <code>OTEL_TRACES_SAMPLER</code> Sampling strategy <code>parentbased_traceidratio</code> <code>OTEL_TRACES_SAMPLER_ARG</code> Sample rate (0.0-1.0) <code>0.1</code> (10%) <code>OTEL_BSP_MAX_QUEUE_SIZE</code> Max queued spans <code>2048</code> <code>OTEL_BSP_MAX_EXPORT_BATCH_SIZE</code> Batch size <code>512</code> <code>OTEL_BSP_SCHEDULE_DELAY</code> Export interval (ms) <code>5000</code>"},{"location":"manage/observability/observability/#understanding-traces","title":"Understanding Traces","text":""},{"location":"manage/observability/observability/#span-attributes","title":"Span Attributes","text":"<p>Each span includes standard attributes:</p> <ul> <li>Operation name - e.g., <code>tool.invoke</code>, <code>prompt.render</code>, <code>resource.read</code></li> <li>Service info - Service name, version, environment</li> <li>User context - User ID, tenant ID, request ID</li> <li>Timing - Start time, duration, end time</li> <li>Status - Success/error status with error details</li> </ul>"},{"location":"manage/observability/observability/#tool-invocation-spans","title":"Tool Invocation Spans","text":"<pre><code>{\n  \"name\": \"tool.invoke\",\n  \"attributes\": {\n    \"tool.name\": \"github_search\",\n    \"tool.id\": \"550e8400-e29b-41d4-a716\",\n    \"tool.integration_type\": \"REST\",\n    \"arguments_count\": 3,\n    \"success\": true,\n    \"duration.ms\": 234.5,\n    \"http.status_code\": 200\n  }\n}\n</code></pre>"},{"location":"manage/observability/observability/#error-tracking","title":"Error Tracking","text":"<p>Failed operations include: - <code>error</code>: <code>true</code> - <code>error.type</code>: Exception class name - <code>error.message</code>: Error description - Full stack trace via <code>span.record_exception()</code></p>"},{"location":"manage/observability/observability/#production-deployment","title":"Production Deployment","text":""},{"location":"manage/observability/observability/#docker-compose","title":"Docker Compose","text":"<p>Use the provided compose files:</p> <pre><code># Start MCP Gateway with Phoenix observability\ndocker-compose -f docker-compose.yml \\\n               -f docker-compose.with-phoenix.yml up -d\n</code></pre>"},{"location":"manage/observability/observability/#kubernetes","title":"Kubernetes","text":"<p>Add environment variables to your deployment:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcp-gateway\nspec:\n  template:\n    spec:\n      containers:\n      - name: gateway\n        image: ghcr.io/ibm/mcp-context-forge:0.6.0\n        env:\n        - name: OTEL_ENABLE_OBSERVABILITY\n          value: \"true\"\n        - name: OTEL_TRACES_EXPORTER\n          value: \"otlp\"\n        - name: OTEL_EXPORTER_OTLP_ENDPOINT\n          value: \"http://otel-collector:4317\"\n        - name: OTEL_SERVICE_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.labels['app.kubernetes.io/name']\n</code></pre>"},{"location":"manage/observability/observability/#sampling-strategies","title":"Sampling Strategies","text":"<p>For production, adjust sampling to balance visibility and performance:</p> <pre><code># Sample 1% of traces\nexport OTEL_TRACES_SAMPLER=parentbased_traceidratio\nexport OTEL_TRACES_SAMPLER_ARG=0.01\n\n# Always sample errors (coming in future update)\n# export OTEL_TRACES_SAMPLER=parentbased_always_on_errors\n</code></pre>"},{"location":"manage/observability/observability/#testing-your-setup","title":"Testing Your Setup","text":""},{"location":"manage/observability/observability/#generate-test-traces","title":"Generate Test Traces","text":"<p>Use the trace generator helper to verify your observability backend is working:</p> <pre><code># Activate virtual environment if needed\n. /home/cmihai/.venv/mcpgateway/bin/activate\n\n# Run the trace generator\npython tests/integration/helpers/trace_generator.py\n</code></pre> <p>This will send sample traces for: - Tool invocations - Prompt rendering - Resource fetching - Gateway federation - Complex workflows with nested spans</p>"},{"location":"manage/observability/observability/#troubleshooting","title":"Troubleshooting","text":""},{"location":"manage/observability/observability/#no-traces-appearing","title":"No Traces Appearing","text":"<ol> <li> <p>Check observability is enabled:    <pre><code>echo $OTEL_ENABLE_OBSERVABILITY  # Should be \"true\"\n</code></pre></p> </li> <li> <p>Verify endpoint is reachable:    <pre><code>curl -v http://localhost:4317  # Should connect\n</code></pre></p> </li> <li> <p>Use console exporter for debugging:    <pre><code>export OTEL_TRACES_EXPORTER=console\nmcpgateway  # Traces will print to stdout\n</code></pre></p> </li> </ol>"},{"location":"manage/observability/observability/#high-memory-usage","title":"High Memory Usage","text":"<p>Reduce batch size and queue limits: <pre><code>export OTEL_BSP_MAX_QUEUE_SIZE=512\nexport OTEL_BSP_MAX_EXPORT_BATCH_SIZE=128\n</code></pre></p>"},{"location":"manage/observability/observability/#missing-spans","title":"Missing Spans","text":"<p>Check sampling rate: <pre><code># Temporarily disable sampling\nexport OTEL_TRACES_SAMPLER=always_on\n</code></pre></p>"},{"location":"manage/observability/observability/#performance-impact","title":"Performance Impact","text":"<ul> <li>When disabled: Zero overhead (no-op context managers)</li> <li>When enabled: ~0.1-0.5ms per span</li> <li>Memory: ~50MB for typical workload</li> <li>Network: Batched exports every 5 seconds</li> </ul>"},{"location":"manage/observability/observability/#next-steps","title":"Next Steps","text":"<ul> <li>See Phoenix Integration Guide for AI/LLM-specific features</li> <li>Review OpenTelemetry Best Practices</li> <li>Configure dashboards in your APM solution</li> <li>Set up alerting based on error rates and latencies</li> </ul>"},{"location":"manage/observability/phoenix/","title":"Phoenix Integration Guide","text":"<p>Arize Phoenix provides AI/LLM-focused observability for MCP Gateway, offering specialized features for monitoring AI-powered applications.</p>"},{"location":"manage/observability/phoenix/#why-phoenix","title":"Why Phoenix?","text":"<p>Phoenix is optimized for AI/LLM workloads with features like:</p> <ul> <li>Token usage tracking - Monitor prompt and completion tokens</li> <li>Cost analysis - Track API costs across models</li> <li>Evaluation metrics - Measure response quality</li> <li>Drift detection - Identify model behavior changes</li> <li>Conversation analysis - Understand multi-turn interactions</li> </ul>"},{"location":"manage/observability/phoenix/#quick-start","title":"Quick Start","text":""},{"location":"manage/observability/phoenix/#option-1-docker-compose-recommended","title":"Option 1: Docker Compose (Recommended)","text":"<pre><code># Clone the repository\ngit clone https://github.com/IBM/mcp-context-forge\ncd mcp-context-forge\n\n# Start Phoenix with MCP Gateway\ndocker-compose -f docker-compose.yml \\\n               -f docker-compose.with-phoenix.yml up -d\n\n# View Phoenix UI\nopen http://localhost:6006\n\n# View traces flowing in\ncurl http://localhost:4444/health  # Generate a trace\n</code></pre>"},{"location":"manage/observability/phoenix/#option-2-standalone-phoenix","title":"Option 2: Standalone Phoenix","text":"<pre><code># Start Phoenix\ndocker run -d \\\n  --name phoenix \\\n  -p 6006:6006 \\\n  -p 4317:4317 \\\n  -v phoenix-data:/phoenix/data \\\n  arizephoenix/phoenix:latest\n\n# Configure MCP Gateway\nexport OTEL_ENABLE_OBSERVABILITY=true\nexport OTEL_TRACES_EXPORTER=otlp\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\nexport OTEL_SERVICE_NAME=mcp-gateway\n\n# Start MCP Gateway\nmcpgateway\n</code></pre>"},{"location":"manage/observability/phoenix/#option-3-phoenix-cloud","title":"Option 3: Phoenix Cloud","text":"<p>For production deployments, use Phoenix Cloud:</p> <pre><code># Get your API key from Phoenix Cloud\nexport PHOENIX_API_KEY=your-api-key\n\n# Configure MCP Gateway for Phoenix Cloud\nexport OTEL_EXPORTER_OTLP_ENDPOINT=https://app.phoenix.arize.com\nexport OTEL_EXPORTER_OTLP_HEADERS=\"api-key=$PHOENIX_API_KEY\"\nexport OTEL_EXPORTER_OTLP_INSECURE=false\n</code></pre>"},{"location":"manage/observability/phoenix/#docker-compose-configuration","title":"Docker Compose Configuration","text":"<p>The provided <code>docker-compose.with-phoenix.yml</code> includes:</p> <pre><code>services:\n  phoenix:\n    image: arizephoenix/phoenix:latest\n    ports:\n      - \"6006:6006\"  # Phoenix UI\n      - \"4317:4317\"  # OTLP gRPC endpoint\n    environment:\n      - PHOENIX_GRPC_PORT=4317\n      - PHOENIX_PORT=6006\n      - PHOENIX_HOST=0.0.0.0\n    volumes:\n      - phoenix-data:/phoenix/data\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:6006/health\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  mcpgateway:\n    environment:\n      - OTEL_ENABLE_OBSERVABILITY=true\n      - OTEL_TRACES_EXPORTER=otlp\n      - OTEL_EXPORTER_OTLP_ENDPOINT=http://phoenix:4317\n      - OTEL_SERVICE_NAME=mcp-gateway\n    depends_on:\n      phoenix:\n        condition: service_healthy\n</code></pre>"},{"location":"manage/observability/phoenix/#using-phoenix-ui","title":"Using Phoenix UI","text":""},{"location":"manage/observability/phoenix/#viewing-traces","title":"Viewing Traces","text":"<ol> <li>Navigate to http://localhost:6006</li> <li>Click on \"Traces\" in the left sidebar</li> <li>You'll see:</li> <li>Timeline view of all operations</li> <li>Span details with attributes</li> <li>Error rates and latencies</li> <li>Service dependency graph</li> </ol>"},{"location":"manage/observability/phoenix/#analyzing-tool-invocations","title":"Analyzing Tool Invocations","text":"<p>Phoenix provides specialized views for tool calls:</p> <ol> <li>Tool Performance</li> <li>Average latency per tool</li> <li>Success/failure rates</li> <li> <p>Usage frequency</p> </li> <li> <p>Cost Analysis (when token tracking is implemented)</p> </li> <li>Token usage per tool</li> <li>Estimated costs by model</li> <li>Cost trends over time</li> </ol>"},{"location":"manage/observability/phoenix/#setting-up-evaluations","title":"Setting Up Evaluations","text":"<p>Phoenix can evaluate response quality:</p> <pre><code># Example: Set up Phoenix evaluations (Python)\nfrom phoenix.evals import llm_eval\nfrom phoenix.trace import trace\n\n# Configure evaluations\nevaluator = llm_eval.LLMEvaluator(\n    model=\"gpt-4\",\n    eval_type=\"relevance\"\n)\n\n# Traces from MCP Gateway will be evaluated\nevaluator.evaluate(\n    trace_dataset=phoenix.get_traces(),\n    eval_name=\"response_quality\"\n)\n</code></pre>"},{"location":"manage/observability/phoenix/#production-deployment","title":"Production Deployment","text":""},{"location":"manage/observability/phoenix/#with-postgresql-backend","title":"With PostgreSQL Backend","text":"<p>For production, use PostgreSQL for Phoenix storage:</p> <pre><code>services:\n  postgres:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: phoenix\n      POSTGRES_USER: phoenix\n      POSTGRES_PASSWORD: phoenix_secret\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n\n  phoenix:\n    image: arizephoenix/phoenix:latest\n    environment:\n      - DATABASE_URL=postgresql://phoenix:phoenix_secret@postgres:5432/phoenix\n      - PHOENIX_GRPC_PORT=4317\n      - PHOENIX_PORT=6006\n    depends_on:\n      - postgres\n</code></pre>"},{"location":"manage/observability/phoenix/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<p>Deploy Phoenix on Kubernetes:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: phoenix\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: phoenix\n  template:\n    metadata:\n      labels:\n        app: phoenix\n    spec:\n      containers:\n      - name: phoenix\n        image: arizephoenix/phoenix:latest\n        ports:\n        - containerPort: 6006\n          name: ui\n        - containerPort: 4317\n          name: otlp\n        env:\n        - name: PHOENIX_GRPC_PORT\n          value: \"4317\"\n        - name: PHOENIX_PORT\n          value: \"6006\"\n        volumeMounts:\n        - name: data\n          mountPath: /phoenix/data\n      volumes:\n      - name: data\n        persistentVolumeClaim:\n          claimName: phoenix-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: phoenix\nspec:\n  selector:\n    app: phoenix\n  ports:\n  - port: 6006\n    name: ui\n  - port: 4317\n    name: otlp\n</code></pre>"},{"location":"manage/observability/phoenix/#advanced-features","title":"Advanced Features","text":""},{"location":"manage/observability/phoenix/#custom-span-attributes","title":"Custom Span Attributes","text":"<p>Add Phoenix-specific attributes in your code:</p> <pre><code>from mcpgateway.observability import create_span\n\n# Add LLM-specific attributes\nwith create_span(\"tool.invoke\", {\n    \"llm.model\": \"gpt-4\",\n    \"llm.prompt_tokens\": 150,\n    \"llm.completion_tokens\": 50,\n    \"llm.temperature\": 0.7,\n    \"llm.top_p\": 0.9\n}) as span:\n    # Tool execution\n    pass\n</code></pre>"},{"location":"manage/observability/phoenix/#integrating-with-phoenix-sdk","title":"Integrating with Phoenix SDK","text":"<p>For advanced analysis, use the Phoenix SDK:</p> <pre><code>import phoenix as px\n\n# Connect to Phoenix\npx.launch_app(trace_dataset=px.Client().get_traces())\n\n# Analyze traces\ntraces_df = px.Client().get_traces_dataframe()\nprint(traces_df.describe())\n\n# Export for further analysis\ntraces_df.to_csv(\"mcp_gateway_traces.csv\")\n</code></pre>"},{"location":"manage/observability/phoenix/#monitoring-best-practices","title":"Monitoring Best Practices","text":""},{"location":"manage/observability/phoenix/#key-metrics-to-track","title":"Key Metrics to Track","text":"<ol> <li>Response Times</li> <li>P50, P95, P99 latencies</li> <li>Slowest operations</li> <li> <p>Timeout rates</p> </li> <li> <p>Error Rates</p> </li> <li>Error percentage by tool</li> <li>Error types distribution</li> <li> <p>Error trends</p> </li> <li> <p>Usage Patterns</p> </li> <li>Most used tools</li> <li>Peak usage times</li> <li>User distribution</li> </ol>"},{"location":"manage/observability/phoenix/#setting-up-alerts","title":"Setting Up Alerts","text":"<p>Configure alerts in Phoenix Cloud:</p> <ol> <li>Go to Settings \u2192 Alerts</li> <li>Create rules for:</li> <li>High error rates (&gt; 5%)</li> <li>Slow responses (P95 &gt; 2s)</li> <li>Unusual token usage</li> <li>Cost thresholds</li> </ol>"},{"location":"manage/observability/phoenix/#troubleshooting","title":"Troubleshooting","text":""},{"location":"manage/observability/phoenix/#phoenix-not-receiving-traces","title":"Phoenix Not Receiving Traces","text":"<ol> <li> <p>Check Phoenix is running:    <pre><code>docker ps | grep phoenix\ncurl http://localhost:6006/health\n</code></pre></p> </li> <li> <p>Verify OTLP endpoint:    <pre><code>telnet localhost 4317\n</code></pre></p> </li> <li> <p>Check MCP Gateway logs:    <pre><code>docker logs mcpgateway | grep -i phoenix\n</code></pre></p> </li> </ol>"},{"location":"manage/observability/phoenix/#high-memory-usage","title":"High Memory Usage","text":"<p>Phoenix stores traces in memory by default. For production:</p> <ol> <li>Use PostgreSQL backend</li> <li>Configure retention policies</li> <li>Set sampling rates appropriately</li> </ol>"},{"location":"manage/observability/phoenix/#performance-optimization","title":"Performance Optimization","text":"<ol> <li> <p>Reduce trace volume:    <pre><code>export OTEL_TRACES_SAMPLER_ARG=0.01  # Sample 1%\n</code></pre></p> </li> <li> <p>Filter unnecessary spans:    <pre><code># In observability.py, add filtering\nif span_name in [\"health_check\", \"metrics\"]:\n    return nullcontext()\n</code></pre></p> </li> </ol>"},{"location":"manage/observability/phoenix/#next-steps","title":"Next Steps","text":"<ul> <li>Configure Phoenix Evaluations</li> <li>Set up Phoenix Datasets</li> <li>Integrate with Arize Platform</li> <li>Join Phoenix Community</li> </ul>"},{"location":"media/","title":"Media","text":"<p>This section collects press coverage, social-media highlights, customer testimonials, and a ready-to-use media kit:</p> <ul> <li>Press Coverage</li> <li>Social Highlights</li> <li>Testimonials</li> <li>Media Kit</li> </ul>"},{"location":"media/#other-catalogs","title":"Other catalogs:","text":"<ul> <li>https://mcp.so/server/mcp-context-forge/IBM</li> </ul>"},{"location":"media/kit/","title":"\ud83e\uddf0 Media Kit","text":"<p>Everything you need to write about ContextForge MCP Gateway-assets, ready-to-use copy, badges, images, and quick-start commands.</p>"},{"location":"media/kit/#what-is-mcp-model-context-protocol","title":"\ud83e\udd14 What is MCP (Model Context Protocol)?","text":"<p>MCP is an open-source protocol released by Anthropic in November 2024 that lets AI agents communicate with external tools through a standard JSON-RPC envelope. It's often described as the \"USB-C of AI\"-a universal connector for language models.</p> <p>It's widely supported by GitHub Copilot, Microsoft Copilot, AWS Bedrock, Google Cloud AI, IBM watsonx, and 15,000+ servers in the community.</p>"},{"location":"media/kit/#why-it-matters","title":"\u26a1 Why it matters","text":"<ul> <li>\u2705 Standardized interface contracts via typed JSON Schema</li> <li>\u2705 Supported across the ecosystem - GitHub/Microsoft Copilot, AWS Bedrock, Google Cloud AI, IBM watsonx, AgentBee, LangChain, CrewAI, and more</li> <li>\u2705 Strong ecosystem - 15,000+ MCP-compatible servers and multiple clients, with announcements from multiple major vendors</li> </ul>"},{"location":"media/kit/#current-challenges","title":"\u274c Current challenges","text":"<ul> <li>\u274c Fragmented transports: STDIO, SSE, HTTP - with some methods already deprecated</li> <li>\u274c Inconsistent authentication: none, JWT, OAuth</li> <li>\u274c Operational overhead: managing endpoints, credentials, retries, and logs for each tool</li> <li>\u274c Version mismatch: clients and servers may support different MCP versions</li> </ul>"},{"location":"media/kit/#why-contextforge-mcp-gateway","title":"\ud83d\udca1 Why ContextForge MCP Gateway?","text":"<p>Problem: Most teams build one-off adapters for each tool or model, leading to maintenance burden and slow development.</p> <p>ContextForge MCP Gateway solves this by proxying all MCP and REST tool servers through a single HTTPS + JSON-RPC endpoint, with discovery, security, and observability built in.</p> <p>It lets you create Virtual Servers - remixing tools/prompts/resources from multiple servers, introduce strong Auth - and change protocol versions on the fly. It lets you easily create new MCP Servers without having to write any code - by proxing existing REST services.</p> <p>And is readily available as open source, published a container image and as a Python module published on PyPi - so you can get started with a single command - and scale all the way up to multi-regional Kubernetes clusters.</p> Pain Point How Gateway Solves It Transport fragmentation (STDIO/SSE/HTTP) Unifies everything under HTTPS + JSON-RPC DIY wrappers &amp; retry logic Automatic, schema-validated retry handling Weak auth layers Built-in JWT (or OAuth) &amp; rate limiting No visibility Per-call and per-server metrics &amp; logging Onboarding difficulties Built-in admin UI for tools, prompts, and resources <p></p>"},{"location":"media/kit/#sample-announcements","title":"\ud83d\udcd1 Sample Announcements","text":"\ud83d\udce3 Non-Technical Post \ud83d\udee0\ufe0f Technical Post \ud83d\udee0\ufe0f Connect Cline VS Code Extension to ContextForge MCP Gateway <p>A great idea is to create posts, videos or articles on using specific clients or with MCP Gateway. Provide details on how to run and register a number of useful MCP Servers, adding them to the gateway, then using specific clients to connect. For example, Visual Studio Cline, GitHub Copilot, Langchain, etc. Example:</p>"},{"location":"media/kit/#meet-contextforge-mcp-gateway-simplify-ai-tool-connections","title":"Meet ContextForge MCP Gateway: Simplify AI Tool Connections","text":"<p>Building AI agents should be easy-but each tool speaks a different dialect.</p> <p>ContextForge MCP Gateway is a universal hub: one secure endpoint that discovers your tools and works seamlessly with Copilot, CrewAI, LangChain, and more.</p> <p>\"What should be simple often becomes a debugging nightmare. The ContextForge MCP Gateway solves that.\" - Mihai Criveti</p> <p>Try it in 60 seconds: <pre><code>docker run -d --name mcpgateway \\\n  -p 4444:4444 \\\n  -e JWT_SECRET_KEY=YOUR_KEY \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre></p> <p>Please \u2b50 the project on GitHub if you find this useful, it helps us grow!</p>"},{"location":"media/kit/#introducing-contextforge-mcp-gateway-the-missing-proxy-for-ai-agents-and-tools","title":"Introducing ContextForge MCP Gateway: The Missing Proxy for AI Agents and Tools","text":"<p>ContextForge MCP Gateway normalizes STDIO, SSE, REST, and HTTP MCP servers into one HTTPS + JSON-RPC interface with full MCP support.</p> <p>It includes schema-validated retries, JWT auth, and a built-in catalog UI.</p> <p>Docker: <pre><code>docker run -d --name mcpgateway \\\n  -p 4444:4444 \\\n  -e JWT_SECRET_KEY=YOUR_KEY \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre></p> <p>PyPI: <pre><code>pip install mcp-gateway\nmcpgateway --host 0.0.0.0 --port 4444\n</code></pre></p> <p>Please \u2b50 the project on GitHub if you find this useful, it helps us grow!</p>"},{"location":"media/kit/#connect-your-cline-extension-to-mcp-gateway","title":"Connect your Cline extension to MCP Gateway","text":"<p>ContextForge MCP Gateway offers a unified HTTPS + JSON-RPC endpoint for AI tools, making integration seamless-including with Cline, a VS Code extension that supports MCP.</p> <p>Start the Gateway (Docker): <pre><code>docker run -d --name mcpgateway \\\n  -p 4444:4444 \\\n  -e JWT_SECRET_KEY=YOUR_KEY \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre></p> <p>Or install via PyPI:</p> <pre><code>pip install mcp-gateway\nmcpgateway --host 0.0.0.0 --port 4444\n</code></pre> <p>\u2b50 Enjoying this? Leave a star on GitHub!</p>"},{"location":"media/kit/#what-is-cline","title":"\ud83d\udd0d What is Cline?","text":"<p>Cline is a powerful AI coding assistant for VS Code. It supports MCP, allowing it to discover and use tools provided through MCP Gateway.</p>"},{"location":"media/kit/#set-up-jwt-authentication","title":"\ud83d\udd10 Set up JWT Authentication","text":"<p>In your Cline settings, add an MCP server:</p> <pre><code>{\n  \"name\": \"MCP Gateway\",\n  \"url\": \"http://localhost:4444\",\n  \"auth\": {\n    \"type\": \"bearer\",\n    \"token\": \"&lt;YOUR_JWT_TOKEN&gt;\"\n  }\n}\n</code></pre> <p>Enable the server in Cline-you should see a green \"connected\" indicator when authentication succeeds.</p>"},{"location":"media/kit/#using-mcp-tools-in-cline","title":"\ud83d\ude80 Using MCP Tools in Cline","text":"<p>With the connection live, Cline can:</p> <ul> <li>Automatically list tools exposed by the Gateway</li> <li>Use simple prompts to invoke tools, e.g.:</li> </ul> <p><pre><code>Run the `list_files` tool with path: \"./src\"\n</code></pre> * Display results and JSON output directly within the VS Code interface</p> <p>Try it yourself-and don't forget to \u2b50 the project at ContextForge MCP Gateway!</p>"},{"location":"media/kit/#logo-images","title":"\ud83d\uddbc\ufe0f Logo &amp; Images","text":"Asset URL Transparent PNG logo <code>https://ibm.github.io/mcp-context-forge/logo.png</code> Hero demo GIF <code>https://ibm.github.io/mcp-context-forge/images/mcpgateway.gif</code> Architecture overview SVG"},{"location":"media/kit/#social-snippets","title":"\ud83d\udce3 Social Snippets","text":"<p>Tweet / X</p> <p>Twitter / X</p> <p>\ud83d\ude80 ContextForge MCP Gateway is now open source! One endpoint to unify &amp; secure AI-tool connections (STDIO, SSE, REST). Give it a spin and drop a \u2b50 \u2192 IBM/mcp-context-forge #mcp #ai #tools</p> <p>LinkedIn</p> <p>Example</p> <p>Thrilled to share ContextForge MCP Gateway-an open-source hub that turns fragmented AI-tool integrations into a single secure interface with discovery, observability, and a live catalog UI. Check it out on GitHub and leave us a star \u2b50! <code>#mcp #ai #tools</code></p> <p>Tip</p> <p>See Social for example articles and social media posts - and add your own there once published!</p>"},{"location":"media/press/","title":"Press Highlights","text":"<p>Coverage from industry publications, press, and news media about MCP Gateway, ACP, and IBM's agentic AI initiatives.</p>"},{"location":"media/press/#articles","title":"Articles","text":"<p>Watsonx.ai Agent to MCP Gateway (ruslanmv.com)</p> <p>Author: Ruslan Magana Vsevolodovna | Publication: ruslanmv.com | Date: July 4, 2025 Read the article</p> <p>Quote</p> <p>This detailed, end-to-end tutorial provides a practical blueprint for developers. It walks through the entire process of building a watsonx.ai-powered agent, registering it with the MCP Gateway using SSE, and connecting it to a custom FastAPI frontend. The post serves as a hands-on guide for creating fully-functional, multi-component AI applications.</p> <p>Getting Started with ContextForge MCP Gateway on macOS (aiarchplaybook.substack.com)</p> <p>Author: Shaikh Quader | Publication: AI Architect's Playbook | Date: June 26, 2025 Read the article</p> <p>Quote</p> <p>ContextForge MCP Gateway is an open-source IBM middleware that connects AI agents to multiple MCP servers through a single endpoint with centralized login and built-in observability.</p> <p>IBM's MCP Gateway: A Unified FastAPI-Based Model Context Protocol Gateway for Next-Gen AI Toolchains (MarkTechPost)</p> <p>Author: Nikhil | Publication: MarkTechPost | Date: June 21, 2025 Read the article</p> <p>Quote</p> <p>IBM's MCP Gateway offers a robust orchestration layer for agentic and GenAI applications, enabling API wrapping, multi-protocol support, centralized schema management, and real-time observability through a modern admin UI. It serves as a scalable foundation for unifying diverse AI tools and resources under the Model Context Protocol.</p> <p>IBM MCP Gateway: Revolutionizing GenAI Integration for Startups and Enterprises (Pitangent)</p> <p>Author: Miltan Chaudhury | Publication: Pitangent | Date: June 11, 2025 Read the article</p> <p>Quote</p> <p>\"IBM's MCP Gateway is more than a bridge-it's a platform for accelerating GenAI transformation with agility and confidence. For startups and enterprises navigating the complex AI tool landscape, this innovation brings a modular, future-proof path to build smarter, scalable, and context-aware applications.\"</p> <p>The article breaks down the technical benefits of the MCP Gateway and positions it as a game-changer for reducing integration overhead, improving developer productivity, and democratizing AI access for early-stage companies.</p> <p>IBM Introduces MCP Gateway to Simplify GenAI Tool Integration (Analytics India Magazine)</p> <p>Author: Ankush Das | Publication: Analytics India Magazine | Date: June 10, 2025 Read the article</p> <p>Quote</p> <p>\"IBM has launched MCP Gateway, a FastAPI-based component designed to streamline the integration and orchestration of generative AI tools and services. It is an open-source project made available under the Apache 2.0 license\u2026 Armand Ruiz, VP of AI Platform at IBM, stated on LinkedIn, 'I think this is a great step forward for those building agentic systems, orchestrating tools, or deploying complex GenAI apps.'\"</p> <p>The article also notes IBM's draft Agent Communication Protocol (ACP) as a complementary innovation to MCP, aimed at enabling standardized AI agent interaction as part of the BeeAI initiative.</p> <p>IBM Launches MCP Gateway to Merge and Manage AI Tools (Geekflare)</p> <p>Author: Keval Vachharajani | Publication: Geekflare | Date: June 10, 2025 Read the article</p> <p>Quote</p> <p>\"Built on FastAPI, the MCP Gateway is designed to act as a unified entry point for the Model Context Protocol (MCP)\u2026 According to Ruiz, this launch is particularly relevant for teams working on agent-based systems or orchestrating multiple AI tools within enterprise environments.\"</p> <p>The article highlights MCP Gateway's support for JSON-Schema validation, transport layer management, and its production-ready admin UI. It also mentions IBM Consulting's influence in shaping the tool and situates the launch within IBM's broader innovation efforts, including the new Watsonx AI Labs.</p>"},{"location":"media/social/","title":"Social Highlights","text":"<p>Check out these social media highlights, and write your own!</p>"},{"location":"media/social/#linkedin-posts","title":"LinkedIn Posts:","text":"<p>MCP Context Forge Collaboration &amp; Open-Source Release (LinkedIn)</p> <p>Manav Gupta - Vice President &amp; CTO, IBM Canada @ IBM | June 24, 2025</p> <p>\"I have been lucky to collaborate and contribute to mcp-context-forge. It serves as a central management point for tools, resources, and prompts that can be accessed by MCP-compatible LLM applications. Converts REST API endpoints to MCP, composes virtual MCP servers with added security and observability, and converts between protocols (stdio, SSE, Streamable HTTP). I think this will be way to build AI Agents of the future.\"</p> <p>IBM's Armand Ruiz on MCP Gateway &amp; ACP (LinkedIn)</p> <p>Author: Analytics India Magazine | Date: June 10, 2025 View on LinkedIn</p> <p>Quote</p> <p>\"Armand Ruiz, IBM's VP of AI Platform, hails the open-source MCP Gateway as 'a great step forward for those building agentic systems, orchestrating tools, or deploying complex GenAI apps.' \u2026 With MCP Gateway streamlining tool orchestration and ACP redefining agent interactions, IBM is pushing to standardize AI infrastructure. As Ruiz emphasizes, this dual approach reduces deployment friction, empowering developers to scale GenAI applications efficiently.\"</p> <p>MCP Gateway Overview Post (LinkedIn)</p> <p>Author: Armand Ruiz - VP of AI Platform @ IBM | Date: June 9, 2025 View on LinkedIn</p> <p>Quote</p> <p>\"Introducing MCP Gateway, a powerful, FastAPI-based gateway for the Model Context Protocol, designed to unify and scale your AI toolchain\u2026 It does a lot\u2026 I think this is a great step forward for those building agentic systems, orchestrating tools, or deploying complex GenAI apps.\"</p> <p>MCP Gateway Launch Announcement (LinkedIn)</p> <p>Author: Mihai Criveti - Distinguished Engineer, Agentic AI @ IBM | Date: June 5, 2025 View on LinkedIn</p> <p>Quote</p> <p>\"Just open-sourced something I've been building - the MCP Gateway: turn any REST API into an MCP server, connect multiple MCP servers, combine tools into virtual servers, swap them on the fly, and adds observability and security - all in one container that can be deployed anywhere.\"</p>"},{"location":"media/social/#articles","title":"Articles","text":"<p>MCP Gateway: The Missing Proxy for AI Tools (Medium)</p> <p>Author: Mihai Criveti - Distinguished Engineer, Agentic AI @ IBM | Date: June 8, 2025 | 6 min read Read on Medium</p> <p>Quote</p> <p>\"AI agents and tool integration are exciting - until you actually try to connect them. Different authentication systems (or none), fragmented documentation, and incompatible protocols quickly turn what should be simple integrations into debugging nightmares. MCP Gateway solves this.\"</p> <p>Model Context Protocol (MCP) Gateway - a middleware meant to productionize MCP for an enterprise</p> <p>Author: Manoj Jahgirdar - AI Engineer, Agentic AI @ IBM | Date: June 13, 2025 | 6 min read Read on Medium</p> <p>Quote</p> <p>\"Learn how ContextForge MCP Gateway works - a secure, unified middleware for scaling agentic AI integrations in the enterprise.\"</p>"},{"location":"media/testimonials/","title":"Testimonials","text":""},{"location":"media/testimonials/#platforms","title":"Platforms","text":"<ul> <li>IBM Consulting Advantage IBM Consulting Advantage - AI-tooling platform, equipping 160,000 expert consultants with role, industry and business domain-specific AI assistants, agents, and applications.</li> </ul>"},{"location":"overview/","title":"Overview","text":"<p>Welcome to the MCP Gateway documentation.</p> <p>This section introduces what the Gateway is, how it fits into the MCP ecosystem, and what core features and capabilities it offers out of the box.</p>"},{"location":"overview/#what-is-mcp-gateway","title":"What is MCP Gateway?","text":"<p>MCP Gateway is an orchestration and federation layer for the Model Context Protocol (MCP). It provides:</p> <ul> <li>A unified entrypoint for tools, resources, prompts, and agents</li> <li>Federation of multiple MCP servers into one composable catalog</li> <li>Protocol enforcement, health monitoring, and registry centralization</li> <li>A visual Admin UI to manage everything in real time</li> <li>Comprehensive audit trails with metadata tracking for all entities</li> <li>Comprehensive doctest coverage ensuring all code examples are tested and verified</li> </ul> <p>Whether you're integrating REST APIs, local functions, or full LLM agents, MCP Gateway standardizes access and transport - over HTTP, WebSockets, SSE, StreamableHttp or stdio.</p>"},{"location":"overview/#whats-in-this-section","title":"What's in This Section","text":"Page Description Features Breakdown of supported features including federation, transports, and tool wrapping Admin UI Screenshots and explanation of the interactive web dashboard Quick Start Quick Installation and Start up"},{"location":"overview/features/","title":"\u2728 Features Overview","text":"<p>MCP Gateway is a gateway + registry + proxy purpose-built for the Model Context Protocol (MCP). It unifies REST, MCP, and stdio worlds while adding auth, caching, federation, and an HTMX-powered Admin UI.</p>"},{"location":"overview/features/#multi-transport-core","title":"\ud83c\udf10 Multi-Transport Core","text":"Supported Transports Transport Description Typical Use-case HTTP / JSON-RPC Low-latency request-response, default for most REST clients Simple tool invocations WebSocket Bi-directional, full-duplex Streaming chat or incremental tool results Server-Sent Events (SSE) Uni-directional server \u2192 client stream LLM completions or real-time updates STDIO Local process pipes via <code>mcpgateway-wrapper</code> Editor plugins, headless CLI clients Try it: SSE from curl <pre><code>curl -N -H \"Accept: text/event-stream\" \\\n     -H \"Authorization: Bearer $TOKEN\" \\\n     http://localhost:4444/servers/UUID_OF_SERVER_1/sse\n</code></pre>"},{"location":"overview/features/#federation-discovery","title":"\ud83c\udf0d Federation &amp; Discovery","text":"Features <ul> <li>Auto-discovery - DNS-SD (<code>_mcp._tcp.local.</code>) or static peer list</li> <li>Health checks - fail-over + removal of unhealthy gateways</li> <li>Capability sync - merges remote tool catalogs into the local DB</li> <li>Request forwarding - automatic routing to the correct gateway</li> </ul> Architecture <pre><code>graph TD\n  subgraph Local_Gateway\n    A[MCP Gateway Core]\n  end\n  subgraph Remote_Gateway_1\n    B[Peer 1]\n  end\n  subgraph Remote_Gateway_2\n    C[Peer 2]\n  end\n  A &lt;-- ping / register --&gt; B\n  A &lt;-- ping / register --&gt; C</code></pre> Configuration <p>Enable or tweak discovery via <code>.env</code>:</p> <pre><code>FEDERATION_ENABLED=true\nFEDERATION_DISCOVERY=true\nFEDERATION_PEERS=https://remote.example.com\nHEALTH_CHECK_INTERVAL=30\n</code></pre>"},{"location":"overview/features/#security","title":"\ud83d\udd10 Security","text":"Auth mechanisms <ul> <li>JWT bearer (default, signed with <code>JWT_SECRET_KEY</code>)</li> <li>HTTP Basic for the Admin UI</li> <li>Custom headers (e.g., API keys) per tool or gateway</li> </ul> Rate limiting <p>Set <code>MAX_TOOL_CALLS_PER_MINUTE</code> to throttle abusive clients. Exceeding the limit returns HTTP 429 with a <code>Retry-After</code> header.</p> Generate a 24 h token <pre><code>python3 -m mcpgateway.utils.create_jwt_token \\\n  --username alice --exp 1440 --secret \"$JWT_SECRET_KEY\"\n</code></pre>"},{"location":"overview/features/#tool-server-registry","title":"\ud83d\udee0 Tool &amp; Server Registry","text":"What you can register Registry Entities Notes Tools Native MCP tools or wrapped REST / CLI functions JSON Schema input validation Resources URIs for blobs, text, images Optional SSE change notifications Prompts Jinja2 templates + multimodal content Versioning &amp; rollback Servers Virtual collections of tools/prompts/resources Exposed as full MCP servers REST tool example <pre><code>curl -X POST -H \"Authorization: Bearer $TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\": \"joke_api\",\n           \"url\": \"https://icanhazdadjoke.com/\",\n           \"requestType\": \"GET\",\n           \"integrationType\": \"REST\",\n           \"headers\": {\"Accept\":\"application/json\"}\n         }' \\\n     http://localhost:4444/tools\n</code></pre>"},{"location":"overview/features/#admin-ui","title":"\ud83d\udda5 Admin UI","text":"Built with <ul> <li>FastAPI + Jinja2 + HTMX + Alpine.js</li> <li>Tailwind CSS for styling</li> </ul> \ud83d\udcca Audit &amp; Metadata Tracking <ul> <li>Comprehensive metadata for all entities (Tools, Resources, Prompts, Servers, Gateways)</li> <li>Creation tracking - who, when, from where, how</li> <li>Modification history - change attribution and versioning</li> <li>Federation source tracking for MCP server entities</li> <li>Bulk import batch identification</li> <li>Auth-agnostic - works with/without authentication</li> <li>Backwards compatible - legacy entities show graceful fallbacks</li> </ul>"},{"location":"overview/features/#persistence-caching-observability","title":"\ud83d\uddc4 Persistence, Caching &amp; Observability","text":"Storage options <ul> <li>SQLite (default dev)</li> <li>PostgreSQL, MySQL/MariaDB, MongoDB - via <code>DATABASE_URL</code></li> </ul> Redis cache <pre><code>CACHE_TYPE=redis\nREDIS_URL=redis://localhost:6379/0\n</code></pre> Observability <ul> <li>Structured JSON logs (tap with <code>jq</code>)</li> <li><code>/metrics</code> - Prometheus-friendly counters (<code>tool_calls_total</code>, <code>gateway_up</code>)</li> <li><code>/health</code> - readiness + dependency checks</li> </ul>"},{"location":"overview/features/#dev-extensibility","title":"\ud83e\udde9 Dev &amp; Extensibility","text":"Highlights <ul> <li>Makefile targets - <code>make dev</code>, <code>make test</code>, <code>make lint</code></li> <li>400+ unit tests - Pytest + HTTPX TestClient</li> <li>VS Code Dev Container - Python 3.11 + Docker/Podman CLI</li> <li>Plug-in friendly - drop-in FastAPI routers or Pydantic models</li> </ul>"},{"location":"overview/features/#next-steps","title":"Next Steps","text":"<ul> <li>Hands-on Walk-through \u2192 Quick Start</li> <li>Deployment Guides \u2192 Compose, K8s &amp; Cloud</li> <li>Admin UI deep dive \u2192 UI Guide</li> </ul> <p>Ready to explore</p> <p>With transports, federation, and security handled for you, focus on building great MCP tools, prompts, and agents-the gateway has your back.</p>"},{"location":"overview/passthrough/","title":"HTTP Header Passthrough","text":"<p>\u26a0\ufe0f Security Notice: HTTP Header Passthrough is disabled by default for security reasons. Only enable this feature if you understand the security implications and have reviewed which headers should be passed through to backing MCP servers.</p> <p>The MCP Gateway supports HTTP Header Passthrough, allowing specific headers from incoming client requests to be forwarded to backing MCP servers. This feature is essential for maintaining authentication context and request tracing across the gateway infrastructure.</p>"},{"location":"overview/passthrough/#overview","title":"Overview","text":"<p>When clients make requests through the MCP Gateway, certain headers (like authentication tokens or trace IDs) need to be preserved and passed to the underlying MCP servers. The header passthrough feature provides a configurable, secure way to forward these headers while preventing conflicts with existing authentication mechanisms.</p>"},{"location":"overview/passthrough/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd12 Security by Default: Feature disabled by default - must be explicitly enabled</li> <li>\ud83d\udee1\ufe0f Header Validation: Server-side and client-side header name and value validation</li> <li>\ud83e\uddf9 Sanitization: Automatic removal of dangerous characters and length limits</li> <li>Global Configuration: Set default passthrough headers for all gateways</li> <li>Per-Gateway Override: Customize header passthrough on a per-gateway basis</li> <li>Conflict Prevention: Automatically prevents overriding existing authentication headers</li> <li>Admin UI Integration: Configure passthrough headers through the web interface</li> <li>API Management: Programmatic control via REST endpoints</li> <li>Rate Limiting: Built-in rate limiting for configuration endpoints</li> </ul>"},{"location":"overview/passthrough/#configuration","title":"Configuration","text":""},{"location":"overview/passthrough/#enable-the-feature-required","title":"\u26a0\ufe0f Enable the Feature (Required)","text":"<p>The header passthrough feature is disabled by default for security. You must explicitly enable it:</p> <pre><code># Enable the feature (disabled by default)\nENABLE_HEADER_PASSTHROUGH=true\n\n# Or in .env file\nENABLE_HEADER_PASSTHROUGH=true\n</code></pre> <p>Warning: Only enable this feature if you: - Understand the security implications - Have reviewed which headers should be passed through - Trust the backing MCP servers with the forwarded headers - Have implemented proper network security</p>"},{"location":"overview/passthrough/#environment-variables","title":"Environment Variables","text":"<p>Set global default headers using the <code>DEFAULT_PASSTHROUGH_HEADERS</code> environment variable:</p> <pre><code># JSON array format (recommended)\nDEFAULT_PASSTHROUGH_HEADERS=[\"X-Tenant-Id\", \"X-Trace-Id\"]\n\n# Comma-separated format (also supported)\nDEFAULT_PASSTHROUGH_HEADERS=X-Tenant-Id,X-Trace-Id\n\n# Or in .env file\nDEFAULT_PASSTHROUGH_HEADERS=[\"X-Tenant-Id\", \"X-Trace-Id\"]\n</code></pre> <p>Security Notes: - <code>Authorization</code> header is not included in defaults for security - Only add <code>Authorization</code> if you fully understand the token leakage risks - Header names are validated against pattern: <code>^[A-Za-z0-9-]+$</code> - Header values are sanitized (newlines removed, length limited to 4KB)</p>"},{"location":"overview/passthrough/#admin-ui-configuration","title":"Admin UI Configuration","text":"<p>Prerequisites: 1. Set <code>ENABLE_HEADER_PASSTHROUGH=true</code> in your environment 2. Restart the MCP Gateway service</p>"},{"location":"overview/passthrough/#global-configuration","title":"Global Configuration","text":"<p>Access the admin interface to set global passthrough headers that apply to all gateways by default.</p> <p>\ud83d\udee1\ufe0f Client-side validation automatically checks: - Header names match pattern <code>^[A-Za-z0-9-]+$</code> - Header values don't contain newlines or excessive length - Invalid headers are rejected with clear error messages</p>"},{"location":"overview/passthrough/#per-gateway-configuration","title":"Per-Gateway Configuration","text":"<p>When creating or editing gateways:</p> <ol> <li>Navigate to the Gateways section in the admin UI</li> <li>Click Add Gateway or edit an existing gateway</li> <li>In the Passthrough Headers field, enter a comma-separated list:    <pre><code>X-Tenant-Id, X-Trace-Id, X-Request-Id\n</code></pre> \u26a0\ufe0f Avoid including <code>Authorization</code> unless absolutely necessary</li> <li>Gateway-specific headers override global defaults</li> <li>The UI validates headers in real-time and shows security warnings</li> </ol>"},{"location":"overview/passthrough/#api-configuration","title":"API Configuration","text":"<p>Rate Limited: Configuration endpoints are rate-limited (20-30 requests/minute) for security.</p>"},{"location":"overview/passthrough/#get-global-configuration","title":"Get Global Configuration","text":"<pre><code>GET /admin/config/passthrough-headers\nAuthorization: Bearer &lt;your-jwt-token&gt;\n</code></pre> <p>Response: <pre><code>{\n  \"passthrough_headers\": [\"X-Tenant-Id\", \"X-Trace-Id\"]\n}\n</code></pre></p>"},{"location":"overview/passthrough/#update-global-configuration","title":"Update Global Configuration","text":"<pre><code>PUT /admin/config/passthrough-headers\nContent-Type: application/json\nAuthorization: Bearer &lt;your-jwt-token&gt;\n\n{\n  \"passthrough_headers\": [\"X-Tenant-Id\", \"X-Custom-Header\"]\n}\n</code></pre> <p>Security Validation: The API automatically: - Validates header names against <code>^[A-Za-z0-9-]+$</code> pattern - Rejects invalid characters and formats - Sanitizes header values when used - Logs all configuration changes for audit</p>"},{"location":"overview/passthrough/#how-it-works","title":"How It Works","text":""},{"location":"overview/passthrough/#header-processing-flow","title":"Header Processing Flow","text":"<ol> <li>Client Request: Client sends request with various headers</li> <li>Header Extraction: Gateway extracts headers configured for passthrough</li> <li>Conflict Check: System verifies no conflicts with existing auth headers</li> <li>Forwarding: Allowed headers are added to requests sent to backing MCP servers</li> </ol>"},{"location":"overview/passthrough/#configuration-hierarchy","title":"Configuration Hierarchy","text":"<p>The system follows this priority order:</p> <ol> <li>Gateway-specific headers (highest priority)</li> <li>Global configuration (from database)</li> <li>Environment variable defaults (lowest priority)</li> </ol>"},{"location":"overview/passthrough/#example-flow","title":"Example Flow","text":"<pre><code>graph LR\n    A[Client Request] --&gt; B[MCP Gateway]\n    B --&gt; C{Check Passthrough Config}\n    C --&gt; D[Extract Configured Headers]\n    D --&gt; E[Conflict Prevention Check]\n    E --&gt; F[Forward to MCP Server]\n\n    G[Global Config] --&gt; C\n    H[Gateway Config] --&gt; C</code></pre>"},{"location":"overview/passthrough/#security-considerations","title":"Security Considerations","text":""},{"location":"overview/passthrough/#security-by-default-features","title":"\ud83d\udee1\ufe0f Security-by-Default Features","text":"<p>Feature Flag Protection: - Header passthrough is disabled by default (<code>ENABLE_HEADER_PASSTHROUGH=false</code>) - Must be explicitly enabled with full awareness of security implications - Can be disabled instantly by setting the flag to <code>false</code></p> <p>Header Sanitization: - Injection Prevention: Removes newlines (<code>\\r\\n</code>) that could enable header injection attacks - Length Limiting: Restricts header values to 4KB maximum to prevent DoS - Control Character Filtering: Removes dangerous control characters (except tab) - Validation: Header names must match <code>^[A-Za-z0-9-]+$</code> pattern</p> <p>Rate Limiting: - Configuration endpoints limited to 20-30 requests/minute - Prevents automated attacks on configuration - Configurable via existing rate limiting settings</p>"},{"location":"overview/passthrough/#conflict-prevention","title":"Conflict Prevention","text":"<p>The system automatically prevents header conflicts:</p> <ul> <li>Basic Auth: Skips <code>Authorization</code> header if gateway uses basic authentication</li> <li>Bearer Auth: Skips <code>Authorization</code> header if gateway uses bearer token authentication</li> <li>Existing Headers: Won't override pre-existing headers in base request</li> <li>Warnings: Logs warnings when headers are skipped due to conflicts</li> </ul>"},{"location":"overview/passthrough/#header-validation","title":"Header Validation","text":"<ul> <li>Server-side validation: Headers validated against security patterns</li> <li>Client-side validation: Admin UI provides real-time validation feedback</li> <li>Case-insensitive matching: Handles header case variations safely</li> <li>Empty filtering: Empty or invalid headers are filtered out</li> <li>Explicit configuration: Only explicitly configured headers are passed through</li> </ul>"},{"location":"overview/passthrough/#use-cases","title":"Use Cases","text":""},{"location":"overview/passthrough/#authentication-context","title":"Authentication Context","text":"<p>\u26a0\ufe0f Security Warning: Be extremely careful when forwarding authentication tokens.</p> <p>Forward authentication tokens to maintain user context: <pre><code># Client request includes\nAuthorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\n\n# Forwarded to MCP server if configured\n</code></pre></p>"},{"location":"overview/passthrough/#request-tracing","title":"Request Tracing","text":"<p>Maintain trace context across service boundaries: <pre><code># Client request includes\nX-Trace-Id: abc123def456\nX-Span-Id: span789\n\n# Both forwarded to enable distributed tracing\n</code></pre></p>"},{"location":"overview/passthrough/#multi-tenant-systems","title":"Multi-Tenant Systems","text":"<p>Pass tenant identification: <pre><code># Client request includes\nX-Tenant-Id: tenant_12345\nX-Organization: acme_corp\n\n# Forwarded for tenant-specific processing\n</code></pre></p>"},{"location":"overview/passthrough/#configuration-examples","title":"Configuration Examples","text":""},{"location":"overview/passthrough/#basic-setup","title":"Basic Setup","text":"<pre><code># .env file (Authorization not recommended in defaults)\nDEFAULT_PASSTHROUGH_HEADERS=[\"X-Tenant-Id\"]\n</code></pre>"},{"location":"overview/passthrough/#multi-header-configuration","title":"Multi-Header Configuration","text":"<pre><code># .env file with multiple headers (safer defaults)\nDEFAULT_PASSTHROUGH_HEADERS=[\"X-Tenant-Id\", \"X-Trace-Id\", \"X-Request-Id\"]\n</code></pre>"},{"location":"overview/passthrough/#gateway-specific-override","title":"Gateway-Specific Override","text":"<pre><code>// Via Admin API for specific gateway\n{\n  \"name\": \"secure-gateway\",\n  \"url\": \"https://secure-mcp-server.example.com\",\n  \"passthrough_headers\": [\"X-API-Key\", \"X-Client-Id\"]\n}\n</code></pre>"},{"location":"overview/passthrough/#troubleshooting","title":"Troubleshooting","text":""},{"location":"overview/passthrough/#common-issues","title":"Common Issues","text":""},{"location":"overview/passthrough/#headers-not-being-forwarded","title":"Headers Not Being Forwarded","text":"<p>Most Common Cause - Feature Disabled: - \u2705 Check: Is <code>ENABLE_HEADER_PASSTHROUGH=true</code> set in your environment? - \u2705 Check: Did you restart the gateway after setting the flag? - \u2705 Check: Are you seeing \"Header passthrough is disabled\" in debug logs?</p> <p>Other Causes: - Verify header names in configuration match exactly (case-insensitive matching) - Check for authentication conflicts in logs - Ensure gateway configuration overrides aren't blocking headers - Verify header names pass validation (only letters, numbers, hyphens allowed)</p>"},{"location":"overview/passthrough/#authentication-conflicts","title":"Authentication Conflicts","text":"<p>If you see warnings like: <pre><code>Skipping passthrough header 'Authorization' - conflicts with existing basic auth\n</code></pre></p> <p>Solution: Either: 1. Remove <code>Authorization</code> from passthrough headers for that gateway 2. Change the gateway to not use basic/bearer authentication 3. Use a different header name for custom auth tokens</p>"},{"location":"overview/passthrough/#configuration-not-taking-effect","title":"Configuration Not Taking Effect","text":"<ul> <li>Restart the gateway after environment variable changes</li> <li>Verify database migration has been applied</li> <li>Check admin API responses to confirm configuration is saved</li> <li>Verify rate limiting isn't blocking your configuration requests (20-30/min limit)</li> </ul>"},{"location":"overview/passthrough/#header-validation-errors","title":"Header Validation Errors","text":"<p>If you see validation errors in the Admin UI or API:</p> <p>Header Name Validation: - Only letters, numbers, and hyphens allowed: <code>A-Za-z0-9-</code> - Examples: \u2705 <code>X-Tenant-Id</code>, <code>Authorization</code> \u274c <code>X_Tenant_ID</code>, <code>My Header</code></p> <p>Header Value Issues: - No newlines (<code>\\r</code> or <code>\\n</code>) allowed in values - Maximum length: 4KB per header value - Control characters are automatically removed</p>"},{"location":"overview/passthrough/#debug-logging","title":"Debug Logging","text":"<p>Enable debug logging to see header processing: <pre><code>LOG_LEVEL=DEBUG\n</code></pre></p> <p>Look for log entries containing: - <code>Header passthrough is disabled</code> - Feature flag is off - <code>Passthrough headers configured</code> - Headers are being processed - <code>Skipping passthrough header</code> - Header blocked due to conflict - <code>Adding passthrough header</code> - Header successfully forwarded - <code>Invalid header name</code> - Header name validation failed - <code>Header value became empty after sanitization</code> - Header value was sanitized away</p>"},{"location":"overview/passthrough/#api-reference","title":"API Reference","text":""},{"location":"overview/passthrough/#data-models","title":"Data Models","text":""},{"location":"overview/passthrough/#globalconfig","title":"GlobalConfig","text":"<pre><code>class GlobalConfig(Base):\n    id: int\n    passthrough_headers: Optional[List[str]]\n</code></pre>"},{"location":"overview/passthrough/#gateway","title":"Gateway","text":"<pre><code>class Gateway(Base):\n    # ... other fields\n    passthrough_headers: Optional[List[str]]\n</code></pre>"},{"location":"overview/passthrough/#admin-endpoints","title":"Admin Endpoints","text":"Method Endpoint Description GET <code>/admin/config/passthrough-headers</code> Get global configuration PUT <code>/admin/config/passthrough-headers</code> Update global configuration POST <code>/admin/gateways</code> Create gateway with headers PUT <code>/admin/gateways/{id}</code> Update gateway headers"},{"location":"overview/passthrough/#best-practices","title":"Best Practices","text":"<ol> <li>Minimal Headers: Only configure headers you actually need to reduce overhead</li> <li>Security Review: Regularly audit which headers are being passed through</li> <li>Environment Consistency: Use consistent header configuration across environments</li> <li>Documentation: Document which headers your MCP servers expect</li> <li>Monitoring: Monitor logs for conflict warnings and adjust configuration accordingly</li> </ol>"},{"location":"overview/passthrough/#migration-notes","title":"Migration Notes","text":"<p>When upgrading to a version with header passthrough:</p> <ol> <li>Database Migration: Ensure the migration <code>3b17fdc40a8d</code> has been applied</li> <li>Configuration Review: Review existing authentication setup for conflicts</li> <li>Testing: Test header forwarding in development before production deployment</li> <li>Monitoring: Monitor logs for any unexpected behavior after deployment</li> </ol>"},{"location":"overview/passthrough/#testing-with-the-built-in-test-tool","title":"Testing with the Built-in Test Tool","text":"<p>The MCP Gateway admin interface includes a built-in test tool with passthrough header support:</p>"},{"location":"overview/passthrough/#using-the-test-tool","title":"Using the Test Tool","text":"<ol> <li>Access the Admin UI: Navigate to the Tools section</li> <li>Select a Tool: Click the Test button on any available tool</li> <li>Configure Headers: In the test modal, scroll to the Passthrough Headers section</li> <li>Add Headers: Enter headers in the format <code>Header-Name: Value</code> (one per line):    <pre><code>Authorization: Bearer your-token-here\nX-Tenant-Id: tenant-123\nX-Trace-Id: abc-def-456\n</code></pre></li> <li>Run Test: Click Run Tool - the headers will be included in the request</li> </ol>"},{"location":"overview/passthrough/#example-test-scenarios","title":"Example Test Scenarios","text":"<p>Authentication Testing: <pre><code>Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\n</code></pre></p> <p>Multi-Tenant Testing: <pre><code>X-Tenant-Id: acme-corp\nX-Organization-Id: org-12345\n</code></pre></p> <p>Distributed Tracing: <pre><code>X-Trace-Id: trace-abc123\nX-Span-Id: span-def456\nX-Request-Id: req-789xyz\n</code></pre></p> <p>The test tool provides immediate feedback and allows you to verify that your passthrough header configuration is working correctly before deploying to production.</p>"},{"location":"overview/quick_start/","title":"\ud83d\ude80 Quick Start","text":"<p>MCP Gateway can be running on your laptop or server in &lt; 5 minutes. Pick an install method below, generate an auth token, then walk through a real tool + server demo.</p>"},{"location":"overview/quick_start/#installing-and-starting-mcp-gateway","title":"Installing and starting MCP Gateway","text":"PyPI / uvPyPI / virtual-envDocker / PodmanDocker Compose <p>Note</p> <p>Prereqs: Install uv (https://docs.astral.sh/uv/getting-started/installation/)</p> <pre><code>BASIC_AUTH_PASSWORD=pass \\\nMCPGATEWAY_UI_ENABLED=true \\\nMCPGATEWAY_ADMIN_API_ENABLED=true \\\nuvx --from mcp-contextforge-gateway mcpgateway --host 0.0.0.0 --port 4444\n</code></pre>"},{"location":"overview/quick_start/#local-install-via-pypi","title":"Local install via PyPI","text":"<p>Note</p> <p>Prereqs: Python \u2265 3.11, plus <code>curl</code> &amp; <code>jq</code> for the smoke test.</p> <ol> <li> <p>Create an isolated environment and upgrade pip if required</p> <pre><code>mkdir mcpgateway &amp;&amp; cd mcpgateway\npython3 -m venv .venv &amp;&amp; source .venv/bin/activate\npython3 -m pip install --upgrade pip\n</code></pre> </li> <li> <p>Install the gateway from pypi</p> <pre><code>pip install mcp-contextforge-gateway\nmcpgateway --version\n</code></pre> </li> <li> <p>Launch it, listening on all interfaces</p> <pre><code>export BASIC_AUTH_PASSWORD=changeme\nexport JWT_SECRET_KEY=my-test-key\nmcpgateway --host 0.0.0.0 --port 4444\n</code></pre> <p>The terminal shows startup logs; keep it running.</p> </li> <li> <p>Generate a bearer token with an expiration time of 10080 seconds (1 week)</p> <pre><code>export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\\n    --username admin --exp 10080 --secret my-test-key)\n</code></pre> <p>Use <code>--exp 0</code> for tokens that don't expire</p> </li> <li> <p>Smoke-test health + version</p> <pre><code>curl -s http://localhost:4444/health | jq\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/version | jq\n</code></pre> </li> </ol>"},{"location":"overview/quick_start/#dockerpodman-container-install","title":"Docker/Podman Container install","text":"<p>Note</p> <p>Substitute <code>docker</code> with <code>podman</code> if preferred.</p> <ol> <li> <p>Run the image</p> <pre><code>docker run -d --name mcpgateway \\\n  -p 4444:4444 \\\n  -e HOST=0.0.0.0 \\\n  -e JWT_SECRET_KEY=my-test-key \\\n  -e BASIC_AUTH_USER=admin \\\n  -e BASIC_AUTH_PASSWORD=changeme \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre> </li> <li> <p>(Optional) persist the DB</p> <pre><code>mkdir -p $(pwd)/data\ndocker run -d --name mcpgateway \\\n  -p 4444:4444 \\\n  -v $(pwd)/data:/data \\\n  -e DATABASE_URL=sqlite:////data/mcp.db \\\n  -e JWT_SECRET_KEY=my-test-key \\\n  -e BASIC_AUTH_USER=admin \\\n  -e BASIC_AUTH_PASSWORD=changeme \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre> </li> <li> <p>Generate a token inside the container</p> <pre><code>docker exec mcpgateway python3 -m mcpgateway.utils.create_jwt_token \\\n  --username admin --exp 10080 --secret my-test-key\n</code></pre> </li> <li> <p>Smoke-test</p> <pre><code>export MCPGATEWAY_BEARER_TOKEN=&lt;paste_from_previous_step&gt;\ncurl -s http://localhost:4444/health | jq\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/version | jq\n</code></pre> </li> </ol>"},{"location":"overview/quick_start/#run-the-full-stack-with-compose","title":"Run the full stack with Compose","text":"<p>Typical Compose file includes Gateway + Postgres + Redis and optional PgAdmin / Redis Commander. See the complete sample and advanced scenarios in Deployment \u203a Compose.</p> <ol> <li> <p>Install Compose v2 (if needed)</p> <pre><code># Ubuntu example\nsudo apt install docker-buildx docker-compose-v2\n# Tell the Makefile / docs which command to use\nexport COMPOSE_CMD=\"docker compose\"\n</code></pre> </li> <li> <p>Pull the published image</p> <pre><code>docker pull ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre> </li> <li> <p>Start the stack</p> <pre><code># Uses podman or docker automatically\nmake compose-up\n# -or- raw CLI\ndocker compose -f docker-compose.yml up -d\n</code></pre> </li> <li> <p>Verify</p> <pre><code>curl -s http://localhost:4444/health | jq\n</code></pre> </li> </ol> <p>Tip : The sample Compose file has multiple database blocks (Postgres, MariaDB, MySQL, MongoDB) and admin tools. Uncomment one and align <code>DATABASE_URL</code> for your preferred backend.</p>"},{"location":"overview/quick_start/#registering-mcp-tools-creating-a-virtual-server","title":"Registering MCP tools &amp; creating a virtual server","text":"<pre><code># Spin up a sample MCP time server (SSE, port 8002)\npip install uv\npython3 -m mcpgateway.translate \\\n  --stdio \"uvx mcp_server_time -- --local-timezone=Europe/Dublin\" \\\n  --expose-sse \\\n  --port 8002 &amp;\n</code></pre> <pre><code># Register that server with your gateway\ncurl -s -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\":\"local_time\",\"url\":\"http://localhost:8002/sse\"}' \\\n     http://localhost:4444/gateways | jq\n</code></pre> <pre><code># Bundle the imported tool(s) into a virtual MCP server\ncurl -s -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\":\"demo_server\",\"description\":\"Time tools\",\"associatedTools\":[\"1\"]}' \\\n     http://localhost:4444/servers | jq\n</code></pre> <pre><code># Verify catalog entries\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/tools   | jq\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/servers | jq\n</code></pre> <pre><code># Optional: Connect interactively via MCP Inspector\nnpx -y @modelcontextprotocol/inspector\n# Transport SSE \u2192 URL http://localhost:4444/servers/UUID_OF_SERVER_1/sse\n# Header Authorization \u2192 Bearer $MCPGATEWAY_BEARER_TOKEN\n</code></pre>"},{"location":"overview/quick_start/#connect-via-mcpgateway-wrapper-stdio","title":"Connect via <code>mcpgateway-wrapper</code> (stdio)","text":"<pre><code>export MCP_AUTH=$MCPGATEWAY_BEARER_TOKEN\nexport MCP_SERVER_URL=http://localhost:4444/servers/UUID_OF_SERVER_1/mcp\npython3 -m mcpgateway.wrapper   # behaves as a local MCP stdio server - run from MCP client\n</code></pre> <p>Use this in GUI clients (Claude Desktop, Continue, etc.) that prefer stdio. Example:</p> <pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"command\": \"python3\",\n      \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n      \"env\": {\n        \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1/mcp\",\n        \"MCP_AUTH\": \"&lt;YOUR_JWT_TOKEN&gt;\",\n        \"MCP_TOOL_CALL_TIMEOUT\": \"120\"\n      }\n    }\n  }\n}\n</code></pre> <p>For more information see MCP Clients</p>"},{"location":"overview/quick_start/#4-useful-urls","title":"4 - Useful URLs","text":"URL Description <code>http://localhost:4444/admin</code> Admin UI (Basic Auth: <code>admin</code> / <code>changeme</code>) <code>http://localhost:4444/tools</code> Tool registry (GET) <code>http://localhost:4444/servers</code> Virtual servers (GET) <code>/servers/&lt;id&gt;/sse</code> SSE endpoint for that server <code>/docs</code>, <code>/redoc</code> Swagger / ReDoc (JWT-protected)"},{"location":"overview/quick_start/#5-next-steps","title":"5 - Next Steps","text":"<ul> <li>Features Overview - deep dive on transports, federation, caching</li> <li>Admin UI Guide</li> <li>Deployment to K8s / AWS / GCP / Azure</li> <li>Wrap any client via <code>mcpgateway-wrapper</code></li> <li>Tweak <code>.env</code> - see example</li> </ul> <p>Gateway is ready!</p> <p>You now have an authenticated MCP Gateway proxying a live tool, exposed via SSE and stdio. Jump into the Admin UI or start wiring it into your agents and clients!</p>"},{"location":"overview/tags/","title":"\ud83c\udff7\ufe0f Tags System","text":"<p>MCP Gateway provides a comprehensive tag system for organizing and filtering entities. Tags help categorize tools, resources, prompts, servers, and gateways, making them easier to discover and manage.</p>"},{"location":"overview/tags/#overview","title":"\ud83d\udccb Overview","text":"<p>Tags are metadata labels that can be attached to any entity in MCP Gateway:</p> <ul> <li>Tools - Categorize by functionality (e.g., <code>api</code>, <code>database</code>, <code>utility</code>)</li> <li>Resources - Group by content type (e.g., <code>documentation</code>, <code>config</code>, <code>data</code>)</li> <li>Prompts - Organize by purpose (e.g., <code>coding</code>, <code>analysis</code>, <code>creative</code>)</li> <li>Servers - Tag by environment (e.g., <code>production</code>, <code>development</code>, <code>testing</code>)</li> <li>Gateways - Label federated gateways (e.g., <code>cloud</code>, <code>on-premise</code>, <code>partner</code>)</li> <li>A2A Agents - Classify AI agents (e.g., <code>openai</code>, <code>anthropic</code>, <code>assistant</code>, <code>custom</code>)</li> </ul> <p>Tag Format</p> <ul> <li>Tags are automatically normalized to lowercase</li> <li>Length: 2-50 characters</li> <li>Allowed characters: letters, numbers, hyphens, colons, dots</li> <li>Spaces and underscores automatically converted to hyphens</li> <li>Stored as JSON arrays in the database</li> <li>Displayed as comma-separated values in forms</li> </ul>"},{"location":"overview/tags/#quick-start","title":"\ud83c\udfaf Quick Start","text":""},{"location":"overview/tags/#using-the-admin-ui","title":"Using the Admin UI","text":"<ol> <li>View Tags: All entity tables display tags as blue badges</li> <li>Filter by Tags: Use the tag filter boxes to find entities</li> <li>Add Tags: Include tags when creating entities (comma-separated)</li> <li>Edit Tags: Modify tags through edit modals</li> <li>Browse All Tags: Visit <code>/admin/tags</code> to see all tags and their usage</li> </ol>"},{"location":"overview/tags/#using-the-rest-api","title":"Using the REST API","text":"<p>All CRUD operations support tags through the REST API with JWT authentication.</p>"},{"location":"overview/tags/#tag-discovery-api","title":"\ud83d\udd0d Tag Discovery API","text":""},{"location":"overview/tags/#list-all-tags","title":"List All Tags","text":"<p>Get all unique tags across the system with statistics:</p> RequestParametersResponse (Statistics Only)Response (With Entities) <pre><code>GET /tags\n</code></pre> Parameter Type Description Default <code>entity_types</code> string Comma-separated: tools, resources, prompts, servers, gateways All <code>include_entities</code> boolean Include entities that have each tag false <pre><code>[\n  {\n    \"name\": \"api\",\n    \"stats\": {\n      \"tools\": 5,\n      \"resources\": 2,\n      \"prompts\": 1,\n      \"servers\": 3,\n      \"gateways\": 0,\n      \"total\": 11\n    },\n    \"entities\": []\n  }\n]\n</code></pre> <pre><code>[\n  {\n    \"name\": \"api\",\n    \"stats\": {\n      \"tools\": 2,\n      \"resources\": 1,\n      \"prompts\": 0,\n      \"servers\": 1,\n      \"gateways\": 0,\n      \"total\": 4\n    },\n    \"entities\": [\n      {\n        \"id\": \"tool-123\",\n        \"name\": \"REST Client\",\n        \"type\": \"tool\",\n        \"description\": \"Make HTTP requests\"\n      },\n      {\n        \"id\": \"resource://api-docs\",\n        \"name\": \"API Documentation\",\n        \"type\": \"resource\",\n        \"description\": null\n      }\n    ]\n  }\n]\n</code></pre>"},{"location":"overview/tags/#get-entities-by-tag","title":"Get Entities by Tag","text":"<p>Retrieve all entities that have a specific tag:</p> RequestParametersResponse <pre><code>GET /tags/{tag_name}/entities\n</code></pre> Parameter Type Description Default <code>tag_name</code> string The tag to search for (path parameter) Required <code>entity_types</code> string Comma-separated entity types to filter All <pre><code>[\n  {\n    \"id\": \"tool-123\",\n    \"name\": \"REST Client\",\n    \"type\": \"tool\",\n    \"description\": \"Make HTTP requests to REST APIs\"\n  },\n  {\n    \"id\": \"server-789\",\n    \"name\": \"API Gateway Server\",\n    \"type\": \"server\",\n    \"description\": \"Central API gateway\"\n  }\n]\n</code></pre>"},{"location":"overview/tags/#admin-tags-endpoint","title":"Admin Tags Endpoint","text":"<p>The admin endpoint provides UI-optimized formatting:</p> <pre><code>GET /admin/tags?include_entities=true\n</code></pre> <p>Returns the same data in a flattened structure for easier UI rendering.</p>"},{"location":"overview/tags/#tag-normalization","title":"\u2728 Tag Normalization","text":"<p>MCP Gateway automatically normalizes tags to ensure consistency and prevent duplicates:</p>"},{"location":"overview/tags/#automatic-transformations","title":"Automatic Transformations","text":"<ul> <li>Case Conversion: <code>\"Finance\"</code> \u2192 <code>\"finance\"</code></li> <li>Space Replacement: <code>\"Machine Learning\"</code> \u2192 <code>\"machine-learning\"</code></li> <li>Underscore Replacement: <code>\"web_development\"</code> \u2192 <code>\"web-development\"</code></li> <li>Whitespace Trimming: <code>\"  api  \"</code> \u2192 <code>\"api\"</code></li> <li>Multiple Hyphen Reduction: <code>\"a--b---c\"</code> \u2192 <code>\"a-b-c\"</code></li> <li>Invalid Character Removal: <code>\"api@#$\"</code> \u2192 <code>\"api\"</code></li> </ul>"},{"location":"overview/tags/#validation-rules","title":"Validation Rules","text":"Rule Description Example Minimum Length Tags must be at least 2 characters \u274c <code>\"a\"</code> \u2192 Error Maximum Length Tags cannot exceed 50 characters \u274c <code>\"this-is-a-very-long-tag-that-exceeds-fifty-chars\"</code> \u2192 Error Allowed Characters Letters, numbers, hyphens, colons, dots \u2705 <code>\"api:v2.0\"</code> No Leading/Trailing Hyphens Hyphens removed from edges <code>\"-api-\"</code> \u2192 <code>\"api\"</code>"},{"location":"overview/tags/#examples","title":"\ud83d\udcdd Examples","text":""},{"location":"overview/tags/#creating-entities-with-tags","title":"Creating Entities with Tags","text":"ToolsResourcesPromptsServers <pre><code>curl -X POST http://localhost:4444/tools \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Database Query Tool\",\n    \"description\": \"Execute SQL queries\",\n    \"input_schema\": {...},\n    \"tags\": [\"database\", \"sql\", \"query\"]\n  }'\n</code></pre> <pre><code>curl -X POST http://localhost:4444/resources \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"uri\": \"resource://config/database\",\n    \"name\": \"Database Configuration\",\n    \"content\": \"...\",\n    \"tags\": [\"config\", \"database\", \"settings\"]\n  }'\n</code></pre> <pre><code>curl -X POST http://localhost:4444/prompts \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"SQL Generator\",\n    \"template\": \"Generate SQL for: {query}\",\n    \"arguments\": [...],\n    \"tags\": [\"sql\", \"generation\", \"database\"]\n  }'\n</code></pre> <pre><code>curl -X POST http://localhost:4444/servers \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Development Server\",\n    \"description\": \"Local development environment\",\n    \"tags\": [\"development\", \"local\", \"testing\"]\n  }'\n</code></pre>"},{"location":"overview/tags/#filtering-by-tags","title":"Filtering by Tags","text":"<p>When listing entities, filter by tags using the <code>tags</code> parameter:</p> List ToolsList ResourcesList Prompts <pre><code># Get tools with \"api\" OR \"database\" tags\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/tools?tags=api,database\"\n</code></pre> <pre><code># Get resources with \"config\" tag\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/resources?tags=config\"\n</code></pre> <pre><code># Get prompts with \"generation\" tag\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/prompts?tags=generation\"\n</code></pre>"},{"location":"overview/tags/#tag-discovery-examples","title":"Tag Discovery Examples","text":"Find All Database ToolsGet Tag StatisticsFind Popular Tags <pre><code># Get all entities tagged with \"database\"\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/tags/database/entities?entity_types=tools\"\n</code></pre> <pre><code># See how many entities use each tag\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/tags\" | jq '.[] | {name: .name, total: .stats.total}'\n</code></pre> <pre><code># Get top 10 most used tags\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  \"http://localhost:4444/tags\" | \\\n  jq 'sort_by(-.stats.total) | .[0:10] | .[] | {name: .name, count: .stats.total}'\n</code></pre>"},{"location":"overview/tags/#best-practices","title":"\ud83c\udfc6 Best Practices","text":""},{"location":"overview/tags/#naming-conventions","title":"Naming Conventions","text":"<p>Recommended Tag Patterns</p> <ul> <li>Functionality: <code>auth</code>, <code>database</code>, <code>api</code>, <code>file-system</code></li> <li>Environment: <code>dev</code>, <code>test</code>, <code>staging</code>, <code>prod</code></li> <li>Domain: <code>finance</code>, <code>hr</code>, <code>sales</code>, <code>engineering</code></li> <li>Access Level: <code>public</code>, <code>internal</code>, <code>restricted</code>, <code>admin</code></li> <li>Version: <code>v1</code>, <code>v2</code>, <code>beta</code>, <code>deprecated</code></li> </ul>"},{"location":"overview/tags/#tag-strategies","title":"Tag Strategies","text":"By FunctionalityBy EnvironmentBy Access Control <p>Group entities by what they do: - <code>auth</code> - Authentication/authorization - <code>database</code> - Database operations - <code>api</code> - External API interactions - <code>file</code> - File system operations - <code>cache</code> - Caching mechanisms</p> <p>Separate by deployment environment: - <code>dev</code> - Development only - <code>test</code> - Testing environment - <code>staging</code> - Pre-production - <code>prod</code> - Production ready - <code>local</code> - Local development</p> <p>Control visibility and access: - <code>public</code> - Available to all users - <code>internal</code> - Internal use only - <code>restricted</code> - Requires special permissions - <code>admin</code> - Administrator only - <code>beta</code> - Beta features</p>"},{"location":"overview/tags/#tag-management-guidelines","title":"Tag Management Guidelines","text":"Guideline Description Example Keep it Simple Use clear, descriptive tags \u2705 <code>database</code> \u274c <code>db-stuff</code> Be Consistent Use the same tag across entities \u2705 All use <code>api</code> \u274c Mix of <code>api</code>, <code>API</code>, <code>apis</code> Limit Quantity 3-5 tags per entity is optimal \u2705 <code>[api, auth, v2]</code> \u274c 10+ tags Document Tags Maintain a tag glossary Create a reference document Regular Review Audit and clean up unused tags Quarterly tag review"},{"location":"overview/tags/#integration-examples","title":"\ud83d\udd27 Integration Examples","text":""},{"location":"overview/tags/#python-client","title":"Python Client","text":"<pre><code>import httpx\nfrom typing import List, Dict, Any, Optional\n\nclass MCPTagClient:\n    def __init__(self, base_url: str, token: str):\n        self.base_url = base_url\n        self.headers = {\"Authorization\": f\"Bearer {token}\"}\n\n    def get_tags(\n        self,\n        entity_types: Optional[List[str]] = None,\n        include_entities: bool = False\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Get all tags with optional filtering.\"\"\"\n        params = {}\n        if entity_types:\n            params[\"entity_types\"] = \",\".join(entity_types)\n        if include_entities:\n            params[\"include_entities\"] = \"true\"\n\n        response = httpx.get(\n            f\"{self.base_url}/tags\",\n            params=params,\n            headers=self.headers\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def get_entities_by_tag(\n        self,\n        tag: str,\n        entity_types: Optional[List[str]] = None\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Get all entities with a specific tag.\"\"\"\n        params = {}\n        if entity_types:\n            params[\"entity_types\"] = \",\".join(entity_types)\n\n        response = httpx.get(\n            f\"{self.base_url}/tags/{tag}/entities\",\n            params=params,\n            headers=self.headers\n        )\n        response.raise_for_status()\n        return response.json()\n\n    def find_related_entities(\n        self,\n        entity_id: str,\n        entity_type: str\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Find entities with similar tags.\"\"\"\n        # First, get the entity's tags\n        entity = httpx.get(\n            f\"{self.base_url}/{entity_type}s/{entity_id}\",\n            headers=self.headers\n        ).json()\n\n        # Then find entities with those tags\n        related = []\n        for tag in entity.get(\"tags\", []):\n            entities = self.get_entities_by_tag(tag)\n            related.extend([\n                e for e in entities\n                if e[\"id\"] != entity_id\n            ])\n\n        # Deduplicate by ID\n        seen = set()\n        unique = []\n        for e in related:\n            if e[\"id\"] not in seen:\n                seen.add(e[\"id\"])\n                unique.append(e)\n\n        return unique\n\n# Usage\nclient = MCPTagClient(\n    base_url=\"http://localhost:4444\",\n    token=\"your-jwt-token\"\n)\n\n# Get all tags with statistics\ntags = client.get_tags()\n\n# Get all database tools\ndb_tools = client.get_entities_by_tag(\n    \"database\",\n    entity_types=[\"tools\"]\n)\n\n# Find related entities\nrelated = client.find_related_entities(\n    entity_id=\"tool-123\",\n    entity_type=\"tool\"\n)\n</code></pre>"},{"location":"overview/tags/#javascripttypescript","title":"JavaScript/TypeScript","text":"<pre><code>interface TagStats {\n  tools: number;\n  resources: number;\n  prompts: number;\n  servers: number;\n  gateways: number;\n  total: number;\n}\n\ninterface TaggedEntity {\n  id: string;\n  name: string;\n  type: string;\n  description?: string;\n}\n\ninterface TagInfo {\n  name: string;\n  stats: TagStats;\n  entities: TaggedEntity[];\n}\n\nclass MCPTagClient {\n  constructor(\n    private baseUrl: string,\n    private token: string\n  ) {}\n\n  private get headers() {\n    return {\n      'Authorization': `Bearer ${this.token}`,\n      'Content-Type': 'application/json'\n    };\n  }\n\n  async getTags(\n    entityTypes?: string[],\n    includeEntities = false\n  ): Promise&lt;TagInfo[]&gt; {\n    const params = new URLSearchParams();\n    if (entityTypes?.length) {\n      params.append('entity_types', entityTypes.join(','));\n    }\n    if (includeEntities) {\n      params.append('include_entities', 'true');\n    }\n\n    const response = await fetch(\n      `${this.baseUrl}/tags?${params}`,\n      { headers: this.headers }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Failed to get tags: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  async getEntitiesByTag(\n    tag: string,\n    entityTypes?: string[]\n  ): Promise&lt;TaggedEntity[]&gt; {\n    const params = new URLSearchParams();\n    if (entityTypes?.length) {\n      params.append('entity_types', entityTypes.join(','));\n    }\n\n    const response = await fetch(\n      `${this.baseUrl}/tags/${tag}/entities?${params}`,\n      { headers: this.headers }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Failed to get entities: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  async createTaggedTool(\n    name: string,\n    tags: string[],\n    inputSchema: any\n  ): Promise&lt;any&gt; {\n    const response = await fetch(\n      `${this.baseUrl}/tools`,\n      {\n        method: 'POST',\n        headers: this.headers,\n        body: JSON.stringify({\n          name,\n          tags,\n          input_schema: inputSchema\n        })\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Failed to create tool: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n}\n\n// Usage\nasync function example() {\n  const client = new MCPTagClient(\n    'http://localhost:4444',\n    'your-jwt-token'\n  );\n\n  // Get all tags with entities\n  const tags = await client.getTags(\n    undefined,\n    true // include entities\n  );\n\n  // Find all API tools\n  const apiTools = await client.getEntitiesByTag(\n    'api',\n    ['tools']\n  );\n\n  // Create a new tagged tool\n  const newTool = await client.createTaggedTool(\n    'My API Tool',\n    ['api', 'rest', 'v2'],\n    { type: 'object', properties: {} }\n  );\n}\n</code></pre>"},{"location":"overview/tags/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"overview/tags/#common-issues","title":"Common Issues","text":"Issue Cause Solution Tags not appearing Incorrect JSON format Ensure tags are JSON arrays: <code>[\"tag1\", \"tag2\"]</code> Duplicate tags Case differences Tags are normalized to lowercase automatically Tag validation errors Invalid characters Use only letters, numbers, hyphens, colons, dots Empty tag results No entities with tag Verify tag exists with <code>/tags</code> endpoint Tag not updating Cache issue Clear Redis cache if using distributed caching"},{"location":"overview/tags/#debugging-commands","title":"Debugging Commands","text":"<pre><code># List all unique tags in the system\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost:4444/tags | jq '.[].name'\n\n# Count total entities per tag\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost:4444/tags | \\\n  jq 'map({(.name): .stats.total}) | add'\n\n# Find entities without tags (database query)\npsql -d mcp_gateway -c \\\n  \"SELECT id, name FROM tools WHERE tags IS NULL OR tags = '[]';\"\n\n# Validate tag format\necho \"My_Tag Name\" | \\\n  python3 -c \"from mcpgateway.validation.tags import TagValidator; \\\n  import sys; print(TagValidator.normalize_tag(sys.stdin.read().strip()))\"\n</code></pre>"},{"location":"overview/tags/#advanced-use-cases","title":"\ud83d\udcda Advanced Use Cases","text":""},{"location":"overview/tags/#virtual-server-composition","title":"Virtual Server Composition","text":"<p>Create virtual servers that bundle tools by tags:</p> <pre><code>async def create_tag_based_server(tag: str, db: Session):\n    \"\"\"Create a virtual server with all tools having a specific tag.\"\"\"\n\n    # Get all tools with the tag\n    tools = await tool_service.list_tools(db, tags=[tag])\n    tool_ids = [tool.id for tool in tools]\n\n    # Create virtual server\n    server = await server_service.create_server(\n        db,\n        ServerCreate(\n            name=f\"{tag.title()} Tools Server\",\n            description=f\"Virtual server for {tag} tools\",\n            tags=[\"virtual\", tag],\n            tool_ids=tool_ids\n        )\n    )\n\n    return server\n</code></pre>"},{"location":"overview/tags/#access-control-by-tags","title":"Access Control by Tags","text":"<p>Implement tag-based access control:</p> <pre><code>from typing import List, Set\n\nclass TagBasedAccessControl:\n    \"\"\"Control access to entities based on tags.\"\"\"\n\n    ROLE_PERMISSIONS = {\n        \"admin\": {\"*\"},  # Access all tags\n        \"developer\": {\"dev\", \"test\", \"internal\", \"public\"},\n        \"user\": {\"public\"},\n        \"guest\": {\"public\", \"demo\"}\n    }\n\n    @classmethod\n    def filter_by_access(\n        cls,\n        entities: List[dict],\n        user_role: str\n    ) -&gt; List[dict]:\n        \"\"\"Filter entities based on user's tag permissions.\"\"\"\n        allowed_tags = cls.ROLE_PERMISSIONS.get(user_role, {\"public\"})\n\n        if \"*\" in allowed_tags:\n            return entities\n\n        filtered = []\n        for entity in entities:\n            entity_tags = set(entity.get(\"tags\", []))\n            if entity_tags &amp; allowed_tags:  # Has at least one allowed tag\n                filtered.append(entity)\n\n        return filtered\n</code></pre>"},{"location":"overview/tags/#tag-based-discovery","title":"Tag-Based Discovery","text":"<p>Discover related entities through shared tags:</p> <pre><code>async def discover_related(\n    entity_type: str,\n    entity_id: str,\n    db: Session\n) -&gt; Dict[str, List]:\n    \"\"\"Find related entities based on shared tags.\"\"\"\n\n    # Get the source entity\n    if entity_type == \"tool\":\n        entity = await tool_service.get_tool(db, entity_id)\n    elif entity_type == \"resource\":\n        entity = await resource_service.get_resource(db, entity_id)\n    # ... handle other types\n\n    if not entity or not entity.tags:\n        return {}\n\n    # Find entities with overlapping tags\n    related = {}\n    for tag in entity.tags:\n        entities = await tag_service.get_entities_by_tag(\n            db,\n            tag_name=tag\n        )\n\n        for e in entities:\n            if e.id != entity_id:  # Exclude self\n                if e.type not in related:\n                    related[e.type] = []\n                related[e.type].append(e)\n\n    # Deduplicate and sort by relevance\n    for entity_type in related:\n        # Count tag overlaps\n        overlap_counts = {}\n        for e in related[entity_type]:\n            overlap = len(set(e.tags) &amp; set(entity.tags))\n            overlap_counts[e.id] = overlap\n\n        # Sort by overlap count\n        related[entity_type] = sorted(\n            related[entity_type],\n            key=lambda e: overlap_counts[e.id],\n            reverse=True\n        )\n\n    return related\n</code></pre>"},{"location":"overview/tags/#related-documentation","title":"\ud83d\udd17 Related Documentation","text":"<ul> <li>REST API Reference - Complete API documentation</li> <li>Admin UI Guide - Using the web interface</li> <li>Virtual Servers - Composing servers with tags</li> <li>Federation - Tag-based gateway discovery</li> </ul>"},{"location":"overview/ui-concepts/","title":"Admin Console Concepts","text":"<p>This guide introduces each major section of the Gateway Admin UI and how it connects to the Model Context Protocol (MCP).</p>"},{"location":"overview/ui-concepts/#setting-up-a-new-mcp-server-to-federate-to-the-gateway","title":"\ud83c\udd95 Setting up a new MCP Server to federate to the gateway","text":"\ud83d\udd0c How do I expose an MCP server over SSE? <p>To federate a new MCP Server to your gateway, it must run over Server-Sent Events (SSE) so the gateway can communicate with it.</p> <p>Use the built-in translate bridge to wrap any <code>stdio</code>-only MCP server and expose it over SSE:</p> <pre><code>python3 -m mcpgateway.translate --stdio \"uvx mcp-server-git\" --expose-sse --port 8001\npython3 -m mcpgateway.translate --stdio \"uvx mcp_server_time -- --local-timezone=Europe/Dublin\" --expose-sse --port 8002\n</code></pre> <p>\u2705 Important: The gateway must be able to reach the MCP server's network address.</p> <p>If you're running services inside Docker (or other containerized environments), ensure networking is configured properly: - Use <code>host</code> networking when needed. - Expose ports to the host machine. - Make sure internal container IPs are reachable from the gateway.</p>"},{"location":"overview/ui-concepts/#virtual-servers","title":"\ud83d\udce6 Virtual Servers","text":"<p>A virtual server is a logical wrapper that combines selected tools, resources, and prompts under one context-specific endpoint.</p> \ud83d\udd17 What are Virtual Servers? <ul> <li>A Virtual Server defines a project-specific toolset.</li> <li>Each one is backed by a real SSE or STDIO interface.</li> <li>You can activate/deactivate, view metrics, and invoke tools from this server.</li> </ul>"},{"location":"overview/ui-concepts/#global-tools","title":"\ud83d\udee0 Global Tools","text":"<p>Tools are remote functions that an LLM can invoke, either via MCP or REST. Think of them like typed APIs with schemas and optional auth.</p> \u2699\ufe0f What do Tools represent? <ul> <li>Integration Types: <code>MCP</code>, <code>REST</code></li> <li>Request Types: <code>STDIO</code>, <code>SSE</code>, <code>GET</code>, <code>POST</code>, etc.</li> <li>Input Schema: JSON Schema defines valid input.</li> <li>Supports Basic Auth, Bearer, or Custom headers.</li> </ul>"},{"location":"overview/ui-concepts/#global-resources","title":"\ud83d\udcc1 Global Resources","text":"<p>Resources expose read-only data like files, database rows, logs, or screenshots. LLMs can read this content through a URI.</p> \ud83d\udcd6 How do Resources work? <ul> <li>Text and Binary data supported.</li> <li>Exposed via unique URI (<code>file:///</code>, <code>db://</code>, etc.).</li> <li>Resources can be listed, templated, or subscribed to.</li> </ul>"},{"location":"overview/ui-concepts/#global-prompts","title":"\ud83e\uddfe Global Prompts","text":"<p>Prompts are reusable message templates with arguments. They define system prompts, user instructions, or chainable inputs.</p> \ud83d\uddd2 What's in a Prompt? <ul> <li>Each prompt has a name, template, and arguments.</li> <li>Arguments are defined with name, description, and required status.</li> <li>Used to enforce consistency across tool use or system messaging.</li> </ul>"},{"location":"overview/ui-concepts/#gateways-mcp-servers","title":"\ud83c\udf10 Gateways (MCP Servers)","text":"<p>Gateways are other MCP-compatible servers. When registered, their tools/resources/prompts become usable locally.</p> \ud83c\udf09 What is a federated Gateway? <ul> <li>Syncs public tools from a remote MCP server.</li> <li>Peer tools show up in your catalog with <code>gateway_id</code>.</li> <li>Can be toggled active/inactive.</li> </ul>"},{"location":"overview/ui-concepts/#roots","title":"\ud83d\udcc2 Roots","text":"<p>Roots define base folders for file-based resources. They control what files MCP clients can access from your local system.</p> \ud83d\udcc1 What are Roots used for? <ul> <li>Restrict access to specific folders (<code>file:///workspace</code>)</li> <li>Prevent tools from referencing outside their sandbox.</li> <li>Deleting a root invalidates its associated resources.</li> </ul>"},{"location":"overview/ui-concepts/#metrics","title":"\ud83d\udcc8 Metrics","text":"<p>Track tool calls, resource reads, prompt renders, and overall usage in one place.</p> \ud83d\udcca What does the Metrics tab show? <ul> <li>Overall executions by server/tool/prompt.</li> <li>Latency, failure rate, and hot paths.</li> <li>Top tools, resources, prompts, and servers.</li> </ul>"},{"location":"overview/ui-concepts/#version-diagnostics","title":"\ud83e\uddea Version &amp; Diagnostics","text":"<p>The <code>/version</code> endpoint returns structured JSON diagnostics including system info, DB/Redis health, and Git SHA.</p> \ud83e\ude7a What does the Version panel include? <ul> <li>MCP protocol version and server metadata.</li> <li>Live system metrics (CPU, memory).</li> <li>Environment checks and service readiness.</li> </ul>"},{"location":"overview/ui-concepts/#learn-more","title":"\ud83d\udcda Learn More","text":"<ul> <li>\ud83d\udd17 MCP Specification</li> </ul>"},{"location":"overview/ui/","title":"Admin UI","text":"<p>MCP Gateway includes a built-in Admin UI for managing all entities in real time via a web browser.</p>"},{"location":"overview/ui/#accessing-the-ui","title":"\ud83d\udda5\ufe0f Accessing the UI","text":"<p>After launching the gateway (<code>make serve</code> or <code>make podman-run</code>), open your browser and go to:</p> <p>http://localhost:4444/admin - or the corresponding URL / port / protocol (ex: https when launching with <code>make podman-run-ssl</code>)</p> <p>Login using the <code>BASIC_AUTH_USER</code> and <code>BASIC_AUTH_PASSWORD</code> set in your <code>.env</code>.</p>"},{"location":"overview/ui/#ui-overview","title":"\ud83e\udded UI Overview","text":"<p>The Admin UI is built with HTMX, Alpine.js, and Tailwind CSS, offering a dynamic, SPA-like experience without JavaScript bloat.</p> <p>It provides tabbed access to:</p> <ul> <li>Servers Catalog: Define or edit MCP servers (real or virtual)</li> <li>Tools: Register REST or native tools, configure auth/rate limits, test responses</li> <li>Resources: Add templated or static resources, set MIME types, enable caching</li> <li>Prompts: Define Jinja2 prompt templates with argument schemas and preview rendering</li> <li>Gateways: View and manage federated peers, toggle activity status</li> <li>Roots: Register root URIs for agent or resource scoping</li> <li>Metrics: Real-time usage and performance metrics for all entities</li> <li>\ud83d\udcca Metadata Tracking: View comprehensive audit information in entity detail modals</li> </ul>"},{"location":"overview/ui/#common-actions","title":"\u270d\ufe0f Common Actions","text":"Action How Register a tool Use the Tools tab \u2192 Add Tool form Bulk import tools Use API endpoint <code>/admin/tools/import</code> (see Bulk Import) View prompt output Go to Prompts \u2192 click View View entity metadata Click \"View\" on any entity \u2192 scroll to \"Metadata\" section Toggle server activity Use the \"Activate/Deactivate\" buttons in Servers tab Delete a resource Navigate to Resources \u2192 click Delete (after confirming) <p>All actions are reflected in the live API via <code>/tools</code>, <code>/prompts</code>, etc.</p>"},{"location":"overview/ui/#auth-jwt-from-ui","title":"\ud83d\udd10 Auth + JWT from UI","text":"<p>Upon successful login, the UI automatically sets a secure JWT token as an HTTP-only cookie (<code>jwt_token</code>).</p> <p>This token is reused for all Admin API calls from within the UI.</p>"},{"location":"overview/ui/#live-reloading-dev-only","title":"\ud83d\udd04 Live Reloading (Dev Only)","text":"<p>If running in development mode (<code>DEV_MODE=true</code> or <code>make run</code>), changes to templates and routes reload automatically.</p>"},{"location":"testing/","title":"\ud83e\uddea Testing MCP Gateway","text":"<p>This section contains guides for testing your MCP Gateway deployment.</p>"},{"location":"testing/#basic-smoke-test","title":"\ud83d\udd39 Basic Smoke Test","text":"<p>Use the Basic Smoke Test to verify:</p> <ul> <li>JWT token generation and authentication</li> <li>Gateway registration</li> <li>Tool registration</li> <li>Server creation and event streaming</li> <li>Tool invocation via JSON-RPC</li> </ul> <p>This test is ideal for validating local development environments or freshly deployed test instances.</p> <p>For additional scenarios (e.g., completion APIs, multi-hop toolchains), expand the test suite as needed.</p>"},{"location":"testing/acceptance/","title":"MCP Gateway Manual Acceptance Testing","text":"<p>Acceptance testing for MCP Gateway. Use these example steps to ensure a deploy MCP Gateway is working correctly in your environment.</p> <pre><code>graph TB\n    subgraph \"TESTER WORKSTATION\"\n        PIP[pip install mcp-contextforge-gateway]\n        JWT[mcpgateway.utils.create_jwt_token&lt;br/&gt;Generates Bearer Token]\n        WRAPPER[mcpgateway.wrapper&lt;br/&gt;stdio to HTTP bridge]\n        VSC_SSE[VS Code with SSE/HTTP&lt;br/&gt;Direct connection]\n        INSPECTOR[MCP Inspector]\n        AGENTS[AI Agents&lt;br/&gt;LangChain / CrewAI]\n        HEY[hey&lt;br/&gt;Performance Testing]\n\n        PIP --&gt; JWT\n        JWT --&gt; WRAPPER\n        JWT --&gt; VSC_SSE\n        JWT --&gt; AGENTS\n    end\n\n    subgraph \"MCP GATEWAY\"\n        GATEWAY_ENTRY[ ]\n        GW[MCP Gateway&lt;br/&gt;Remote: $GW_URL]\n        GW_AUTH[Authentication&lt;br/&gt;Bearer Token]\n        GW_FEDERATION[Federation Layer]\n        GW_VIRTUAL[Virtual Servers]\n        GW_RESOURCES[Resources]\n        GW_PROMPTS[Prompts]\n        GW_TOOLS[Tool Registry]\n\n        GW --&gt; GW_AUTH\n        GW_AUTH --&gt; GW_FEDERATION\n        GW_FEDERATION --&gt; GW_VIRTUAL\n        GW_FEDERATION --&gt; GW_TOOLS\n        GW --&gt; GW_RESOURCES\n        GW --&gt; GW_PROMPTS\n    end\n\n    subgraph \"MCP SERVERS RUNTIME\"\n        RUNTIME_ENTRY[ ]\n        TIME[time server&lt;br/&gt;Port: 8101]\n        TIME_AUTH[time server auth&lt;br/&gt;Port: 8102]\n        FAST_TIME[fast_time_server]\n        GIT[git server&lt;br/&gt;Port: 8103]\n        GITHUB[github]\n        JIRA[jira]\n        SERVICENOW[servicenow]\n        PLAYWRIGHT[playwright]\n        FIGMA[figma]\n        MONDAY[monday.com]\n        BOX[box]\n    end\n\n    %% Simulate full subgraph connection\n    GATEWAY_ENTRY --&gt;|\u2195 Full Runtime \u2194 Gateway| RUNTIME_ENTRY\n\n    %% Connections from Workstation to Gateway\n    WRAPPER -.-&gt;|HTTP/JSON-RPC| GW\n    VSC_SSE -.-&gt;|SSE/HTTP| GW_VIRTUAL\n    INSPECTOR -.-&gt;|HTTP| GW\n    AGENTS -.-&gt;|HTTP API| GW\n    HEY -.-&gt;|Load Testing| GW\n\n    %% Styling for dark theme visibility\n    classDef workstation fill:#2196F3,stroke:#64B5F6,stroke-width:3px,color:#fff\n    classDef gateway fill:#FF6B35,stroke:#FF8C61,stroke-width:4px,color:#fff\n    classDef servers fill:#9C27B0,stroke:#BA68C8,stroke-width:3px,color:#fff\n    classDef auth fill:#F44336,stroke:#EF5350,stroke-width:3px,color:#fff\n\n    class PIP,JWT,WRAPPER,VSC_SSE,INSPECTOR,AGENTS,HEY workstation\n    class GW,GW_FEDERATION,GW_VIRTUAL,GW_RESOURCES,GW_PROMPTS,GW_TOOLS,GATEWAY_ENTRY gateway\n    class TIME,TIME_AUTH,FAST_TIME,GIT,GITHUB,JIRA,SERVICENOW,PLAYWRIGHT,FIGMA,MONDAY,BOX,RUNTIME_ENTRY servers\n    class GW_AUTH,TIME_AUTH auth\n</code></pre>"},{"location":"testing/acceptance/#test-environment-setup","title":"Test Environment Setup","text":"Feature URL/Command Actions Expected Result Status Notes Set Gateway URL <code>export GW_URL=http://localhost:4444</code> Set base URL (can be remote) Variable exported \u2610 Change to your gateway URL if remote Install Gateway Package <code>pip install mcp-contextforge-gateway</code> Install the gateway package for utilities Successfully installed \u2610 Needed for JWT token creation and wrapper testing Generate JWT Token <code>export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token -u admin --secret my-test-key)</code> Generate auth token using installed package Token generated and exported \u2610 Default expiry 10080 (7 days) Verify Health <code>curl -s $GW_URL/health</code> GET request (no auth required) <code>{\"status\":\"ok\"}</code> \u2610 Basic connectivity check Verify Ready <code>curl -s $GW_URL/ready</code> GET request (no auth required) <code>{\"ready\":true,\"database\":\"ok\",\"redis\":\"ok\"}</code> \u2610 All subsystems ready Test Auth Required <code>curl -s $GW_URL/version</code> GET without auth <code>{\"detail\":\"Not authenticated\"}</code> \u2610 Confirms auth is enforced Test Auth Works <code>curl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/version \\| jq '.app.name'</code> GET with auth <code>\"MCP_Gateway\"</code> \u2610 JWT authentication working"},{"location":"testing/acceptance/#setting-up-mcp-servers-for-testing","title":"Setting up MCP Servers for Testing","text":"Feature URL/Command Actions Expected Result Status Notes Start Time Server (No Auth) <code>python3 -m mcpgateway.translate --stdio \"uvx mcp_server_time -- --local-timezone=Europe/Dublin\" --expose-sse --port 8101</code> Launch MCP time server without auth Server running on port 8101 \u2610 SSE at http://localhost:8101/sse Start Time Server (Auth) <code>python3 -m mcpgateway.translate --stdio \"uvx mcp_server_time -- --local-timezone=Europe/Dublin\" --expose-sse --port 8102</code> Launch MCP time server with auth Server running on port 8102 \u2610 Add Authorization header when registering Start Git Server <code>python3 -m mcpgateway.translate --stdio \"uvx mcp_server_git -- .\" --expose-sse --port 8103</code> Launch MCP git server Server running on port 8103 \u2610 Provides git operations Verify Time Server Health <code>curl http://localhost:8101/health</code> Check server status <code>{\"status\":\"healthy\",\"uptime_seconds\":XXX}</code> \u2610 No auth endpoint Test Auth Server <code>curl -H \"Authorization: Bearer secret123\" http://localhost:8102/sse</code> Test SSE with auth SSE stream starts (Ctrl+C to exit) \u2610 Confirms auth working"},{"location":"testing/acceptance/#1-core-protocol-operations","title":"1. Core Protocol Operations","text":"Feature URL Commands Expected Result Status Notes Protocol Initialize <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"protocolVersion\": \"1.0.0\", \"capabilities\": {\"tools\": {\"listing\": true, \"execution\": true}}, \"clientInfo\": {\"name\": \"test-client\", \"version\": \"1.0.0\"}}' $GW_URL/protocol/initialize</code> Initialize MCP session Returns server capabilities and info \u2610 Establishes MCP session Protocol Ping <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"id\": \"test-123\", \"method\": \"ping\"}' $GW_URL/protocol/ping</code> Send ping request <code>{\"jsonrpc\": \"2.0\", \"id\": \"test-123\", \"result\": {}}</code> \u2610 Keep-alive mechanism Client Initialized <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"method\": \"notifications/initialized\"}' $GW_URL/protocol/notifications</code> Notify server ready 200 OK \u2610 Client ready notification Request Cancelled <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"method\": \"notifications/cancelled\", \"params\": {\"requestId\": \"req-123\"}}' $GW_URL/protocol/notifications</code> Cancel request 200 OK \u2610 Cancel pending request"},{"location":"testing/acceptance/#2-gateway-federation","title":"2. Gateway Federation","text":"Feature URL Commands Expected Result Status Notes Register No-Auth Gateway <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\":\"time_server_noauth\",\"url\":\"http://127.0.0.1:8101/sse\",\"transport\":\"SSE\"}' $GW_URL/gateways \\| jq</code> Register time server Success (201), returns gateway with ID \u2610 Key setup step Register Auth Gateway <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\":\"time_server_auth\",\"url\":\"http://127.0.0.1:8102/sse\",\"transport\":\"SSE\",\"auth_type\":\"bearer\",\"auth_token\":\"secret123\"}' $GW_URL/gateways \\| jq</code> Register with auth Success (201) \u2610 Gateway with authentication Register Git Gateway <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\":\"git_server\",\"url\":\"http://127.0.0.1:8103/sse\",\"transport\":\"SSE\"}' $GW_URL/gateways \\| jq</code> Register git server Success (201) \u2610 Git operations gateway List Gateways <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/gateways \\| jq</code> List all gateways Shows all registered gateways with <code>\"reachable\": true</code> \u2610 Verify federation status Test Gateway Health <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/gateways/{gateway-id}/health \\| jq</code> Check specific gateway Health status returned \u2610 Monitor federation"},{"location":"testing/acceptance/#3-tool-discovery-execution","title":"3. Tool Discovery &amp; Execution","text":"Feature URL Commands Expected Result Status Notes List All Tools <code>curl -sH \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/tools \\| jq '.[].originalName'</code> Discover federated tools Shows: <code>\"get_system_time\"</code>, <code>\"convert_time\"</code>, <code>\"git_log\"</code>, etc. \u2610 Tools from all gateways Get Tool Details <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/tools/{tool-id} \\| jq</code> Get specific tool info Full tool schema with inputSchema \u2610 Replace {tool-id} with actual UUID Execute Time Tool <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"time-server-noauth-get-system-time\", \"params\": {\"timezone\": \"Europe/Dublin\"}, \"id\": 1}' $GW_URL/rpc \\| jq</code> Call federated tool Returns current Dublin time \u2610 Cross-gateway execution Convert Time Tool <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"time-server-noauth-convert-time\", \"params\": {\"time\": \"2025-01-10T12:00:00Z\", \"source_timezone\": \"UTC\", \"target_timezone\": \"America/New_York\"}, \"id\": 2}' $GW_URL/rpc \\| jq</code> Time conversion Returns converted time \u2610 Tool with multiple params Execute Git Tool <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"git-server-git-log\", \"params\": {\"repo_path\": \".\"}, \"id\": 3}' $GW_URL/rpc \\| jq</code> Get git history Returns git log entries \u2610 File system tool"},{"location":"testing/acceptance/#4-virtual-server-management","title":"4. Virtual Server Management","text":"Feature URL Commands Expected Result Status Notes Get Tool IDs <code>TIME_TOOL_ID=$(curl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/tools \\| jq -r '.[] \\| select(.originalName==\"get_system_time\") \\| .id'); echo $TIME_TOOL_ID</code> Extract tool UUID Tool ID printed \u2610 Save for server creation Create Time Server <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\": \"time_utilities\", \"description\": \"Time and timezone utilities\", \"associatedTools\": [\"'$TIME_TOOL_ID'\"]}' $GW_URL/servers \\| jq</code> Create virtual server Success (201), returns server UUID \u2610 Groups related tools List Servers <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/servers \\| jq</code> List all servers Shows created virtual servers \u2610 Verify server creation Get Server UUID <code>TIME_SERVER_UUID=$(curl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/servers \\| jq -r '.[] \\| select(.name==\"time_utilities\") \\| .id'); echo $TIME_SERVER_UUID</code> Extract server UUID Server ID printed \u2610 For SSE endpoint Test Server SSE <code>curl -N -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \"$GW_URL/servers/$TIME_SERVER_UUID/sse\" --max-time 2</code> Test SSE stream SSE events start flowing \u2610 Real-time updates"},{"location":"testing/acceptance/#5-resource-management","title":"5. Resource Management","text":"Feature URL Commands Expected Result Status Notes Create Markdown Resource <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"uri\": \"docs/readme\", \"name\": \"readme\", \"description\": \"Project README\", \"mimeType\": \"text/markdown\", \"content\": \"# MCP Gateway\\n\\nWelcome to the MCP Gateway!\"}' $GW_URL/resources \\| jq</code> Create README Success (201) \u2610 Markdown content Create JSON Resource <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"uri\": \"config/app\", \"name\": \"app_config\", \"mimeType\": \"application/json\", \"content\": \"{\\\"version\\\": \\\"1.0.0\\\", \\\"debug\\\": false}\"}' $GW_URL/resources \\| jq</code> Create config Success (201) \u2610 JSON content List Resources <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/resources \\| jq</code> List all resources Shows created resources \u2610 Verify creation Get Resource Content <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/resources/{resource-id}/content</code> Read resource Returns actual content \u2610 May use caching"},{"location":"testing/acceptance/#6-prompt-management","title":"6. Prompt Management","text":"Feature URL Commands Expected Result Status Notes Create Analysis Prompt <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\": \"code_analysis\", \"description\": \"Analyze code quality\", \"template\": \"Analyze the following {{ language }} code:\\n\\n{{ code }}\\n\\nFocus on: {{ focus_areas }}\", \"arguments\": [{\"name\": \"language\", \"description\": \"Programming language\", \"required\": true}, {\"name\": \"code\", \"description\": \"Code to analyze\", \"required\": true}, {\"name\": \"focus_areas\", \"description\": \"Specific areas to focus on\", \"required\": false}]}' $GW_URL/prompts \\| jq</code> Create with args Success (201) \u2610 Template with variables Create Simple Prompt <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\": \"system_summary\", \"description\": \"System status summary\", \"template\": \"MCP Gateway is running and ready to process requests.\", \"arguments\": []}' $GW_URL/prompts \\| jq</code> No arguments Success (201) \u2610 Static prompt Execute Prompt <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\": \"Alice\", \"company\": \"Acme Corp\"}' $GW_URL/prompts/greeting_prompt \\| jq</code> Fill template <code>{\"messages\":[{\"role\":\"user\",\"content\":{\"type\":\"text\",\"text\":\"Hello Alice, welcome to Acme Corp!\"}}]}</code> \u2610 Dynamic generation List Prompts <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/prompts \\| jq</code> List all prompts Shows created prompts \u2610 Verify creation"},{"location":"testing/acceptance/#7-rest-tool-creation","title":"7. REST Tool Creation","text":"Feature URL Commands Expected Result Status Notes Create REST Tool <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\": \"weather_api\", \"url\": \"https://api.openweathermap.org/data/2.5/weather\", \"description\": \"Get current weather data\", \"integrationType\": \"REST\", \"requestType\": \"GET\", \"headers\": {\"X-API-Key\": \"demo-key\"}, \"input_schema\": {\"type\": \"object\", \"properties\": {\"q\": {\"type\": \"string\", \"description\": \"City name\"}, \"units\": {\"type\": \"string\", \"enum\": [\"metric\", \"imperial\"]}}, \"required\": [\"q\"]}}' $GW_URL/tools \\| jq</code> Virtualize REST API Success (201) \u2610 REST as MCP tool"},{"location":"testing/acceptance/#8-mcp-wrapper-testing","title":"8. MCP Wrapper Testing","text":"Feature URL Commands Expected Result Status Notes Install Package <code>pip install mcp-contextforge-gateway</code> Install for wrapper Package installed \u2610 If not already done Set Environment <code>export MCP_SERVER_URL=\"$GW_URL/servers/$TIME_SERVER_UUID\" &amp;&amp; export MCP_AUTH=$MCPGATEWAY_BEARER_TOKEN</code> Configure wrapper Environment set \u2610 Point to virtual server Test Wrapper Init <code>echo '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2025-03-26\",\"capabilities\":{},\"clientInfo\":{\"name\":\"test\",\"version\":\"1.0\"}}}' \\| python3 -m mcpgateway.wrapper 2&gt;/dev/null \\| jq</code> Initialize via stdio Returns capabilities with tools \u2610 Stdio to HTTP bridge List Tools via Wrapper <code>echo '{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/list\",\"params\":{}}' \\| python3 -m mcpgateway.wrapper 2&gt;/dev/null \\| jq</code> List tools via stdio Returns tool list \u2610 Wrapper functionality"},{"location":"testing/acceptance/#9-vs-code-integration-testing","title":"9. VS Code Integration Testing","text":""},{"location":"testing/acceptance/#91-vs-code-with-mcp-wrapper-stdio","title":"9.1. VS Code with MCP Wrapper (stdio)","text":"Feature Configuration Actions Expected Result Status Notes Install VS Code Extension Install \"MCP Host\" extension Open VS Code, install from marketplace Extension installed \u2610 Official MCP extension Configure MCP Settings Add to VS Code settings.json ```json { \"mcp.servers\": { \"gateway-virtual\": { \"command\": \"python\", \"args\": [\"-m\", \"mcpgateway.wrapper\"], \"env\": { \"MCP_SERVER_URL\": \"GW_URL/servers/TIME_SERVER_UUID\", \"MCP_AUTH\": \"$MCPGATEWAY_BEARER_TOKEN\" } } } }``` Server configured \u2610 Replace $GW_URL and tokens Restart VS Code Reload window Cmd/Ctrl+Shift+P \u2192 \"Reload Window\" MCP server connects \u2610 Check output panel Verify Connection Check MCP panel View \u2192 MCP Servers Gateway tools visible \u2610 Should show time tools Execute Tool Use command palette Cmd/Ctrl+Shift+P \u2192 \"MCP: Execute Tool\" \u2192 Select time tool Tool executes successfully \u2610 Returns time data"},{"location":"testing/acceptance/#92-vs-code-direct-ssehttp-connection","title":"9.2. VS Code Direct SSE/HTTP Connection","text":"Feature Configuration Actions Expected Result Status Notes Configure Direct SSE Add to VS Code settings.json ```json { \"mcp.servers\": { \"gateway-direct\": { \"transport\": \"sse\", \"url\": \"GW_URL/servers/TIME_SERVER_UUID/sse\", \"headers\": { \"Authorization\": \"Bearer $MCPGATEWAY_BEARER_TOKEN\" } } } }``` Server configured \u2610 Direct SSE connection Test HTTP Transport Alternative config ```json { \"mcp.servers\": { \"gateway-http\": { \"transport\": \"http\", \"url\": \"$GW_URL\", \"headers\": { \"Authorization\": \"Bearer $MCPGATEWAY_BEARER_TOKEN\" } } } }``` HTTP transport configured \u2610 REST-based connection Verify SSE Stream Check developer tools F12 \u2192 Network tab \u2192 Filter \"EventSource\" SSE connection established \u2610 Real-time updates Execute via HTTP Use MCP panel Click tool \u2192 Enter parameters \u2192 Execute Tool runs successfully \u2610 Check response"},{"location":"testing/acceptance/#10-ai-agent-integration-testing","title":"10. AI Agent Integration Testing","text":""},{"location":"testing/acceptance/#101-langchain-integration","title":"10.1. LangChain Integration","text":"Feature Command Actions Expected Result Status Notes Install LangChain MCP <code>pip install langchain-mcp</code> Install integration package Package installed \u2610 LangChain MCP support Configure Agent Create test script langchain_test_1.py Agent configured \u2610 Replace variables Test Tool Discovery Run: <code>print(len(tools))</code> List available tools Shows tool count &gt; 0 \u2610 Verify integration Execute via Agent <code>agent.run(\"What time is it in Dublin?\")</code> Natural language query Returns Dublin time \u2610 Tool execution through LLM Complex Query <code>agent.run(\"Convert 3pm UTC to Tokyo time\")</code> Multi-step reasoning Correct conversion \u2610 Tests tool chaining <p>langchain_test_1.py</p> <pre><code>from langchain_mcp import MCPToolkit\nfrom langchain.agents import create_react_agent\n\ntoolkit = MCPToolkit(\n    gateway_url=\"$GW_URL\",\n    auth_token=\"$MCPGATEWAY_BEARER_TOKEN\"\n)\ntools = toolkit.get_tools()\nagent = create_react_agent(tools=tools)\n</code></pre>"},{"location":"testing/acceptance/#102-crewai-integration","title":"10.2. CrewAI Integration","text":"Feature Command Actions Expected Result Status Notes Install CrewAI <code>pip install crewai crewai-tools</code> Install CrewAI framework Package installed \u2610 Multi-agent framework Configure MCP Tool Create custom tool <code>crewai_test_1.py</code> Tool configured \u2610 Wrap MCP tool Create Agent Define specialist agent <code>crewai_test_2.py</code> Crew executes \u2610 Collaborative execution Verify Results Check output Print crew execution results Correct times returned \u2610 Multi-agent coordination <p>crewai_test_1.py</p> <pre><code>from crewai_tools import MCPGatewayTool\n\ntime_tool = MCPGatewayTool(\n    gateway_url=\"$GW_URL\",\n    tool_name=\"time-server-noauth-get-system-time\",\n    auth_token=\"$MCPGATEWAY_BEARER_TOKEN\"\n)\n</code></pre> <p>crewai_test_2.py <pre><code>from crewai import Agent\n\ntime_agent = Agent(\n    role=\"Time Zone Specialist\",\n    goal=\"Provide accurate time information\",\n    tools=[time_tool]\n)\n</code></pre></p> <p>crewai_test_3.py <pre><code>from crewai import Crew, Task\n\ntask = Task(description=\"Get current time in multiple cities\")\ncrew = Crew(agents=[time_agent], tasks=[task])\nresult = crew.kickoff()\n</code></pre></p>"},{"location":"testing/acceptance/#11-open-source-mcp-server-testing","title":"11. Open Source MCP Server Testing","text":"Server Registration Command Tool Discovery Sample Execution Status Notes GitHub <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\":\"github\",\"url\":\"http://localhost:3001/sse\",\"transport\":\"SSE\"}' $GW_URL/gateways \\| jq</code> <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/tools \\| jq '.[] \\| select(.gatewaySlug==\"github\")'</code> Create issue, list PRs \u2610 Requires GitHub token Jira <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\":\"jira\",\"url\":\"http://localhost:3002/sse\",\"transport\":\"SSE\",\"auth_type\":\"bearer\",\"auth_token\":\"JIRA_API_KEY\"}' $GW_URL/gateways \\| jq</code> Check for issue management tools Create/update tickets \u2610 Requires Jira instance ServiceNow <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\":\"servicenow\",\"url\":\"http://localhost:3003/sse\",\"transport\":\"SSE\"}' $GW_URL/gateways \\| jq</code> Verify incident tools Create incidents \u2610 ITSM integration Playwright <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\":\"playwright\",\"url\":\"http://localhost:3004/sse\",\"transport\":\"SSE\"}' $GW_URL/gateways \\| jq</code> Browser automation tools Navigate, screenshot \u2610 Web automation Figma <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\":\"figma\",\"url\":\"http://localhost:3005/sse\",\"transport\":\"SSE\",\"auth_type\":\"bearer\",\"auth_token\":\"FIGMA_TOKEN\"}' $GW_URL/gateways \\| jq</code> Design tools Export designs \u2610 Requires Figma token Monday.com <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\":\"monday\",\"url\":\"http://localhost:3006/sse\",\"transport\":\"SSE\"}' $GW_URL/gateways \\| jq</code> Project management tools Create boards/items \u2610 Work management Box <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\":\"box\",\"url\":\"http://localhost:3007/sse\",\"transport\":\"SSE\",\"auth_type\":\"oauth2\",\"auth_token\":\"BOX_TOKEN\"}' $GW_URL/gateways \\| jq</code> File storage tools Upload/download files \u2610 Cloud storage"},{"location":"testing/acceptance/#mcp-server-tool-testing","title":"MCP Server Tool Testing","text":"Server Tool Test Command Expected Result Status Notes GitHub <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"github-list-repositories\", \"params\": {\"org\": \"anthropics\"}, \"id\": 1}' $GW_URL/rpc \\| jq</code> List of repositories \u2610 Public repo access Jira <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"jira-search-issues\", \"params\": {\"jql\": \"project = TEST\"}, \"id\": 1}' $GW_URL/rpc \\| jq</code> Issue list \u2610 JQL query ServiceNow <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"servicenow-get-incidents\", \"params\": {\"limit\": 5}, \"id\": 1}' $GW_URL/rpc \\| jq</code> Recent incidents \u2610 ITSM data Playwright <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"playwright-screenshot\", \"params\": {\"url\": \"https://example.com\"}, \"id\": 1}' $GW_URL/rpc \\| jq</code> Base64 screenshot \u2610 Headless browser Figma <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"figma-get-file\", \"params\": {\"file_key\": \"TEST_FILE\"}, \"id\": 1}' $GW_URL/rpc \\| jq</code> Design file data \u2610 Design assets Monday <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"monday-list-boards\", \"params\": {}, \"id\": 1}' $GW_URL/rpc \\| jq</code> Board list \u2610 Workspace data Box <code>curl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"box-list-folders\", \"params\": {\"folder_id\": \"0\"}, \"id\": 1}' $GW_URL/rpc \\| jq</code> Root folder contents \u2610 File listing"},{"location":"testing/acceptance/#12-health-monitoring","title":"12. Health &amp; Monitoring","text":"Feature URL Commands Expected Result Status Notes Version Info (JSON) <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/version \\| jq</code> Get diagnostics Detailed system info including uptime, platform, database status \u2610 Key diagnostic endpoint Version Info (HTML) <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \"$GW_URL/version?fmt=html\"</code> Human-readable HTML diagnostics page \u2610 Browser-friendly OpenAPI Schema <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/openapi.json \\| jq '.info.title'</code> Get API schema <code>\"MCP_Gateway\"</code> \u2610 API documentation Swagger UI <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/docs \\| grep -q \"MCP Gateway\" &amp;&amp; echo \"\u2713 Swagger UI loads\"</code> Interactive docs \u2713 Swagger UI loads \u2610 API explorer ReDoc <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/redoc \\| grep -q \"ReDoc\" &amp;&amp; echo \"\u2713 ReDoc loads\"</code> Alternative docs \u2713 ReDoc loads \u2610 Clean API docs"},{"location":"testing/acceptance/#13-admin-interface-testing","title":"13. Admin Interface Testing","text":"<p>Note: Admin API must be enabled in configuration: <pre><code>MCPGATEWAY_UI_ENABLED=true\nMCPGATEWAY_ADMIN_API_ENABLED=true\n</code></pre></p> Feature URL Commands Expected Result Status Notes Admin Home Navigate to <code>$GW_URL/admin</code> Access admin UI Dashboard displayed \u2610 Visual interface Create Tool (Form) <code>curl -X POST $GW_URL/admin/tools -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/x-www-form-urlencoded\" -d 'name=admin_tool&amp;url=https://api.example.com/v1/endpoint&amp;description=Admin created tool&amp;integrationType=REST&amp;requestType=GET'</code> Create via form <code>{\"message\": \"Tool registered successfully!\", \"success\": true}</code> \u2610 Form submission Create Resource (Form) <code>curl -X POST $GW_URL/admin/resources -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/x-www-form-urlencoded\" -d 'uri=admin/test&amp;name=admin_resource&amp;description=Created via admin&amp;mimeType=text/plain&amp;content=Admin content'</code> Create via form 303 redirect \u2610 Admin form endpoint Test Gateway Connectivity <code>curl -X POST $GW_URL/admin/gateways/test -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"base_url\": \"http://localhost:8101\", \"path\": \"/health\", \"method\": \"GET\", \"headers\": {}, \"body\": null}'</code> Test connection Returns status_code, latency_ms, and body \u2610 Connectivity test"},{"location":"testing/acceptance/#14-input-validation-testing","title":"14. Input Validation Testing","text":"Feature URL Commands Expected Result Status Notes XSS in Tool Name <code>curl -X POST $GW_URL/tools -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\": \"&lt;script&gt;alert(1)&lt;/script&gt;\", \"url\": \"https://example.com\"}'</code> Attempt XSS 422 - <code>\"Tool name must start with a letter and contain only letters, numbers, and underscore\"</code> \u2610 Input sanitization SQL Injection Pattern <code>curl -X POST $GW_URL/admin/tools -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/x-www-form-urlencoded\" -d 'name=tool\"; DROP TABLE tools; --&amp;url=https://example.com&amp;integrationType=REST&amp;requestType=GET'</code> SQL injection 400/500 - Validation error \u2610 Pattern blocked Invalid URL Scheme <code>curl -X POST $GW_URL/tools -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\": \"test_tool\", \"url\": \"javascript:alert(1)\"}'</code> JavaScript URL 422 - <code>\"Tool URL must start with one of: http://, https://, ws://, wss://\"</code> \u2610 URL validation Directory Traversal <code>curl -X POST $GW_URL/admin/resources -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/x-www-form-urlencoded\" -d 'uri=../../etc/passwd&amp;name=test&amp;content=data'</code> Path traversal 500 - <code>\"Resource URI cannot contain directory traversal sequences\"</code> \u2610 Path validation Name Too Long <code>curl -X POST $GW_URL/tools -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\": \"'\"$(printf 'a%.0s' {1..300})\"'\", \"url\": \"https://example.com\"}'</code> 300 char name 422 - <code>\"Tool name exceeds maximum length of 255\"</code> \u2610 Length validation Empty Required Field <code>curl -X POST $GW_URL/tools -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\": \"\", \"url\": \"https://example.com\"}'</code> Empty name 422 - <code>\"Tool name cannot be empty\"</code> \u2610 Required validation Whitespace Only <code>curl -X POST $GW_URL/tools -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"name\": \"   \", \"url\": \"https://example.com\"}'</code> Spaces only 422 - <code>\"Tool name cannot be empty\"</code> \u2610 Trimming validation"},{"location":"testing/acceptance/#15-error-handling-verification","title":"15. Error Handling Verification","text":"Feature URL Commands Expected Result Status Notes Tool Not Found <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/tools/nonexistent \\| jq '.detail'</code> Get missing tool <code>\"Tool not found\"</code> \u2610 404 response Missing Required Fields <code>curl -X POST $GW_URL/tools -H \"Content-Type: application/json\" -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -d '{}' \\| jq '.detail[0].msg'</code> Empty POST <code>\"Field required\"</code> \u2610 422 validation Invalid Endpoint <code>curl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/invalid-endpoint \\| jq '.detail'</code> Bad URL <code>\"Not Found\"</code> \u2610 404 response Invalid RPC Method <code>curl -X POST $GW_URL/rpc -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" -H \"Content-Type: application/json\" -d '{\"jsonrpc\": \"2.0\", \"method\": \"invalid/method\", \"id\": 1}' \\| jq</code> Bad method Error response \u2610 RPC error"},{"location":"testing/acceptance/#16-system-summary-verification","title":"16. System Summary Verification","text":"Feature URL Commands Expected Result Status Notes Count All Entities <code>echo \"=== System Status ===\"; echo \"Gateways: $(curl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/gateways \\| jq length)\"; echo \"Tools: $(curl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/tools \\| jq length)\"; echo \"Resources: $(curl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/resources \\| jq length)\"; echo \"Prompts: $(curl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/prompts \\| jq length)\"; echo \"Servers: $(curl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/servers \\| jq length)\"</code> System overview All counts &gt; 0 \u2610 Verify test data"},{"location":"testing/acceptance/#test-cleanup","title":"Test Cleanup","text":"Feature URL/Command Actions Expected Result Status Notes Stop Time Server (8101) Ctrl+C on process Terminate server Process stopped \u2610 Clean up test server Stop Auth Server (8102) Ctrl+C on process Terminate server Process stopped \u2610 Clean up test server Stop Git Server (8103) Ctrl+C on process Terminate server Process stopped \u2610 Clean up test server Remove Test Gateways <code>curl -X DELETE -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/gateways/{gateway-id}</code> Delete each gateway 204 No Content \u2610 Use actual gateway IDs Remove Test Resources <code>curl -X DELETE -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/resources/{resource-uri}</code> Delete resources 204 No Content \u2610 Clean test data Remove Test Prompts <code>curl -X DELETE -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" $GW_URL/prompts/{prompt-name}</code> Delete prompts 204 No Content \u2610 Clean test data"},{"location":"testing/acceptance/#notes","title":"Notes","text":"<ul> <li>Gateway Base URL: Set <code>export GW_URL=http://your-gateway:4444</code> for remote gateways</li> <li>Authentication: Use Bearer token in format: <code>Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN</code></li> <li>JWT Token Generation: Can also be done inside Docker container: <code>docker exec mcpgateway python3 -m mcpgateway.utils.create_jwt_token -u admin -e 10080 --secret my-test-key</code></li> <li>Time Servers: The time server gateways are used throughout testing as reference implementations</li> <li>Gateway Tool Separator: Default is <code>__</code> (double underscore) between gateway name and tool name, but newer versions may use <code>-</code></li> <li>Status Column: Check \u2610 when test passes, add \u2717 if test fails with failure reason</li> <li>Pipe Character: The <code>\\|</code> in commands represents the pipe character - remove the backslash when copying</li> <li>jq: Install with <code>apt-get install jq</code> or <code>brew install jq</code> for JSON formatting</li> <li>MCP Servers: Start each MCP server on its designated port before registering as gateway</li> <li>VS Code: Reload window after changing MCP configuration in settings.json</li> <li>AI Agents: Ensure you have API keys configured for LLM providers when testing agents</li> </ul>"},{"location":"testing/acceptance/#mcp-gateway-test-report-template","title":"MCP Gateway Test Report Template","text":"<p>Test Environment: MCP Gateway v___ Test Date: ___________ Tester: ___________ Gateway URL: ___________</p>"},{"location":"testing/acceptance/#status-legend","title":"Status Legend","text":"<ul> <li>\u2705 Passed - All tests in section completed successfully</li> <li>\u26a0\ufe0f Partial - Some tests passed, some failed or incomplete</li> <li>\u274c Failed - Critical failures preventing section completion</li> <li>\ud83d\udea7 In Progress - Testing currently underway</li> <li>\ud83d\udd12 Blocked - Cannot proceed due to dependencies or external factors</li> </ul>"},{"location":"testing/acceptance/#executive-summary","title":"Executive Summary","text":"<p>Overall test completion: ___% | Total Tests: ___ | Passed: ___ | Failed: ___ | Blocked: ___</p>"},{"location":"testing/acceptance/#test-results-by-section","title":"Test Results by Section","text":"Section Test Area Status Tests Passed Failed Blocked Comments Setup Test Environment Setup 1 MCP Servers Setup 2 Core Protocol Operations 3 Gateway Federation 4 Tool Discovery &amp; Execution 5 Virtual Server Management 6 Resource Management 7 Prompt Management 8 REST Tool Creation 9 MCP Wrapper Testing 10.1 VS Code Integration (Wrapper) 10.2 VS Code Integration (Direct) 11.1 LangChain Integration 11.2 CrewAI Integration 12 Open Source MCP Servers 13 Health &amp; Monitoring 14 Admin Interface 15 Input Validation 16 Error Handling 17 System Summary Cleanup Test Cleanup"},{"location":"testing/acceptance/#issue-summary","title":"Issue Summary","text":""},{"location":"testing/acceptance/#critical-issues","title":"\ud83d\udd34 Critical Issues","text":"<p>1. 2. 3.</p>"},{"location":"testing/acceptance/#major-issues","title":"\ud83d\udfe1 Major Issues","text":"<p>1. 2. 3.</p>"},{"location":"testing/acceptance/#minor-issues","title":"\ud83d\udfe2 Minor Issues","text":"<p>1. 2. 3.</p>"},{"location":"testing/acceptance/#recommendations","title":"Recommendations","text":"<ol> <li> <p>Immediate Actions:    -    -    -</p> </li> <li> <p>Short-term:    -    -    -</p> </li> <li> <p>Long-term:    -    -    -</p> </li> </ol>"},{"location":"testing/acceptance/#test-environment-notes","title":"Test Environment Notes","text":"<ul> <li>Performance:</li> <li>Stability:</li> <li>Federation:</li> <li>Compatibility:</li> </ul> <p>Next Test Cycle:</p>"},{"location":"testing/basic/","title":"MCP Gateway - Basic","text":"<p>Test script for MCP Gateway development environments. Verifies API readiness, JWT auth, Gateway/Tool/Server lifecycle, and RPC invocation.</p>"},{"location":"testing/basic/#environment-setup","title":"\ud83d\udd27 Environment Setup","text":""},{"location":"testing/basic/#0-bootstrap-env","title":"0. Bootstrap <code>.env</code>","text":"<pre><code>cp .env.example .env\n</code></pre>"},{"location":"testing/basic/#1-start-the-gateway","title":"1. Start the Gateway","text":"<pre><code>make podman podman-run-ssl\n# or\nmake venv install serve-ssl\n</code></pre> <p>Gateway will listen on:</p> <ul> <li>Admin UI \u2192 https://localhost:4444/admin</li> <li>Swagger   \u2192 https://localhost:4444/docs</li> <li>ReDoc     \u2192 https://localhost:4444/redoc</li> </ul>"},{"location":"testing/basic/#authentication","title":"\ud83d\udd11 Authentication","text":""},{"location":"testing/basic/#2-generate-and-export-tokens","title":"2. Generate and export tokens","text":""},{"location":"testing/basic/#gateway-jwt-for-local-api-access","title":"Gateway JWT (for local API access)","text":"<pre><code>export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token -u admin)\ncurl -s -k -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" https://localhost:4444/health\n</code></pre> <p>Expected: <code>{\"status\":\"ok\"}</code></p>"},{"location":"testing/basic/#remote-gateway-token-peer","title":"Remote gateway token (peer)","text":"<pre><code>export MY_MCP_TOKEN=\"sse-bearer-token-here...\"\n</code></pre>"},{"location":"testing/basic/#optional-local-test-server-token-github-mcp-server","title":"Optional: local test server token (GitHub MCP server)","text":"<pre><code>export LOCAL_MCP_URL=\"http://localhost:8000/sse\"\nexport LOCAL_MCP_TOOL_URL=\"http://localhost:9000/rpc\"\n</code></pre>"},{"location":"testing/basic/#3-set-convenience-variables","title":"3. Set convenience variables","text":"<pre><code>export BASE_URL=\"https://localhost:4444\"\nexport AUTH_HEADER=\"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\"\nexport JSON=\"Content-Type: application/json\"\n</code></pre>"},{"location":"testing/basic/#smoke-tests","title":"\ud83e\uddea Smoke Tests","text":""},{"location":"testing/basic/#4-ping-json-rpc-system","title":"4. Ping JSON-RPC system","text":"<pre><code>curl -s -k -X POST $BASE_URL/protocol/ping \\\n  -H \"$AUTH_HEADER\" -H \"$JSON\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"ping\"}'\n</code></pre> <p>Expected:</p> <pre><code>{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":{}}\n</code></pre>"},{"location":"testing/basic/#5-add-a-peer-gateway","title":"5. Add a Peer Gateway","text":"<pre><code>curl -s -k -X POST $BASE_URL/gateways \\\n  -H \"$AUTH_HEADER\" -H \"$JSON\" \\\n  -d '{\n        \"name\": \"my-mcp\",\n        \"url\": \"https://link-to-remote-mcp-server/sse\",\n        \"description\": \"My MCP Servers\",\n        \"auth_type\": \"bearer\",\n        \"auth_token\": \"'\"$MY_MCP_TOKEN\"'\"\n      }'\n</code></pre> <p>List gateways:</p> <pre><code>curl -s -k -H \"$AUTH_HEADER\" $BASE_URL/gateways\n</code></pre>"},{"location":"testing/basic/#6-add-a-tool","title":"6. Add a Tool","text":"<pre><code>curl -s -k -X POST $BASE_URL/tools \\\n  -H \"$AUTH_HEADER\" -H \"$JSON\" \\\n  -d '{\n        \"name\": \"clock_tool\",\n        \"url\": \"'\"$LOCAL_MCP_TOOL_URL\"'\",\n        \"description\": \"Returns current time\",\n        \"request_type\": \"POST\",\n        \"integration_type\": \"REST\",\n        \"input_schema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"timezone\": { \"type\": \"string\" }\n          }\n        }\n      }'\n</code></pre>"},{"location":"testing/basic/#7-create-a-virtual-server","title":"7. Create a Virtual Server","text":"<pre><code>curl -s -k -X POST $BASE_URL/servers/ \\\n  -H \"$AUTH_HEADER\" -H \"$JSON\" -H 'accept: application/json' \\\n  -d '{\n        \"name\": \"demo-server\",\n        \"description\": \"Smoke-test virtual server\",\n        \"icon\": \"https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png\",\n        \"associatedTools\": [\"1\"],\n        \"associatedResources\": [],\n        \"associatedPrompts\": []\n      }'\n</code></pre> <p>Expected:</p> <pre><code>{\n  \"id\": 2,\n  \"name\": \"demo-server\",\n  \"description\": \"Smoke-test virtual server\",\n  \"icon\": \"https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png\",\n  \"createdAt\": \"2025-05-28T04:28:38.554558\",\n  \"updatedAt\": \"2025-05-28T04:28:38.554564\",\n  \"isActive\": true,\n  \"associatedTools\": [\n    1\n  ],\n  \"associatedResources\": [],\n  \"associatedPrompts\": [],\n  \"metrics\": {\n    \"totalExecutions\": 0,\n    \"successfulExecutions\": 0,\n    \"failedExecutions\": 0,\n    \"failureRate\": 0,\n    \"minResponseTime\": null,\n    \"maxResponseTime\": null,\n    \"avgResponseTime\": null,\n    \"lastExecutionTime\": null\n  }\n}\n</code></pre> <p>Check:</p> <pre><code>curl -s -k -H \"$AUTH_HEADER\" $BASE_URL/servers | jq\n</code></pre>"},{"location":"testing/basic/#8-open-an-sse-stream","title":"8. Open an SSE stream","text":"<pre><code>curl -s -k -N -H \"$AUTH_HEADER\" $BASE_URL/servers/UUID_OF_SERVER_1/sse\n</code></pre> <p>Leave running - real-time events appear here.</p>"},{"location":"testing/basic/#9-invoke-the-tool-via-rpc","title":"9. Invoke the Tool via RPC","text":"<pre><code>curl -s -k -X POST $BASE_URL/rpc \\\n  -H \"$AUTH_HEADER\" -H \"$JSON\" \\\n  -d '{\n        \"jsonrpc\": \"2.0\",\n        \"id\": 99,\n        \"method\": \"get_system_time\",\n        \"params\": {\n          \"timezone\": \"Europe/Dublin\"\n        }\n      }'\n</code></pre> <p>Expected:</p> <pre><code>{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"{\\n  \\\"timezone\\\": \\\"Europe/Dublin\\\",\\n  \\\"datetime\\\": \\\"2025-05-28T05:24:13+01:00\\\",\\n  \\\"is_dst\\\": true\\n}\"\n    }\n  ],\n  \"is_error\": false\n}\n</code></pre>"},{"location":"testing/basic/#10-connect-to-github-mcp-tools-via-translate-bridge","title":"10. Connect to GitHub MCP Tools via Translate Bridge","text":"<p>You can test the Gateway against GitHub's official <code>mcp-server-git</code> tool using the built-in <code>mcpgateway.translate</code> bridge.</p> <p>Start a temporary SSE wrapper around the GitHub MCP server:</p> <pre><code>python3 -m mcpgateway.translate --stdio \"uvx mcp-server-git\" --expose-sse --port 9003\n</code></pre> <p>This starts:</p> <ul> <li>SSE endpoint: <code>http://localhost:8000/sse</code></li> <li>Message POST: <code>http://localhost:8000/message</code></li> </ul> <p>To register it with the MCP Gateway:</p> <pre><code>export MY_MCP_TOKEN=\"optional-auth-header-if-needed\"\n\ncurl -s -k -X POST $BASE_URL/gateways \\\n  -H \"$AUTH_HEADER\" -H \"$JSON\" \\\n  -d '{\n        \"name\": \"github-mcp\",\n        \"url\": \"http://localhost:8000/sse\",\n        \"description\": \"GitHub MCP Tools via Translate Bridge\",\n        \"auth_type\": \"none\"\n      }'\n</code></pre> <p>This gives you access to GitHub's MCP tools like <code>get_repo_issues</code>, <code>get_pull_requests</code>, etc.</p>"},{"location":"testing/basic/#11-development-testing-with-mcp-inspector","title":"11. Development Testing with MCP Inspector","text":"<p>Launch a visual inspector to interactively test your Gateway:</p> <pre><code>npx @modelcontextprotocol/inspector\n</code></pre> <p>Once launched at http://localhost:5173:</p> <ol> <li>Click \"Add Server\"</li> <li>Use the URL for your virtual server's SSE stream:</li> </ol> <pre><code>http://localhost:4444/servers/UUID_OF_SERVER_1/sse\n</code></pre> <ol> <li>Add this header:</li> </ol> <pre><code>{\n  \"Authorization\": \"Bearer &lt;your-jwt-token&gt;\"\n}\n</code></pre> <ol> <li>Save and test tool invocations by selecting a tool and sending sample input:</li> </ol> <pre><code>{ \"timezone\": \"Europe/Dublin\" }\n</code></pre>"},{"location":"testing/basic/#cleanup","title":"\ud83e\uddf9 Cleanup","text":"<pre><code>curl -s -k -X DELETE -H \"$AUTH_HEADER\" $BASE_URL/servers/UUID_OF_SERVER_1\ncurl -s -k -X DELETE -H \"$AUTH_HEADER\" $BASE_URL/tools/1\ncurl -s -k -X DELETE -H \"$AUTH_HEADER\" $BASE_URL/gateways/1\n</code></pre>"},{"location":"testing/basic/#summary","title":"\u2705 Summary","text":"<p>This smoke test validates:</p> <ul> <li>\u2705 Gateway JWT auth</li> <li>\u2705 Peer Gateway registration with remote bearer</li> <li>\u2705 Tool registration and RPC wiring</li> <li>\u2705 Virtual server creation</li> <li>\u2705 SSE subscription and live messaging</li> <li>\u2705 JSON-RPC invocation flow</li> <li>\u2705 Connecting MCP Inspector to the MCP Gateway</li> <li>\u2705 Connecting the official GitHub MCP server to the Gateway</li> </ul>"},{"location":"testing/fuzzing/","title":"Fuzz Testing","text":"<p>MCP Gateway includes comprehensive fuzz testing to automatically discover edge cases, security vulnerabilities, and crashes through property-based testing, coverage-guided fuzzing, and security-focused validation.</p>"},{"location":"testing/fuzzing/#overview","title":"Overview","text":"<p>Fuzz testing generates thousands of random, malformed, or edge-case inputs to find bugs that traditional testing might miss. Our implementation combines multiple fuzzing approaches:</p> <ul> <li>Property-Based Testing with Hypothesis for core validation logic</li> <li>Coverage-Guided Fuzzing with Atheris for deep code path exploration</li> <li>API Schema Fuzzing with Schemathesis for contract validation</li> <li>Security-Focused Testing for vulnerability discovery</li> </ul>"},{"location":"testing/fuzzing/#quick-start","title":"Quick Start","text":""},{"location":"testing/fuzzing/#installation","title":"Installation","text":"<p>Install fuzzing dependencies as an optional package group:</p> <pre><code># Via Makefile (recommended)\nmake fuzz-install\n\n# Or directly with pip\npip install -e .[fuzz]\n</code></pre>"},{"location":"testing/fuzzing/#running-tests","title":"Running Tests","text":"<pre><code># Complete fuzzing suite\nmake fuzz-all\n\n# Individual components\nmake fuzz-hypothesis     # Property-based tests\nmake fuzz-security       # Security vulnerability tests\nmake fuzz-quick          # Fast CI validation\nmake fuzz-report         # Generate reports\n</code></pre>"},{"location":"testing/fuzzing/#fuzzing-components","title":"Fuzzing Components","text":""},{"location":"testing/fuzzing/#property-based-testing-hypothesis","title":"Property-Based Testing (Hypothesis)","text":"<p>Tests core validation logic by generating inputs that satisfy certain properties and verifying invariants hold.</p> <p>Test Modules: - <code>tests/fuzz/test_jsonrpc_fuzz.py</code> - JSON-RPC validation (16 tests) - <code>tests/fuzz/test_jsonpath_fuzz.py</code> - JSONPath processing (16 tests) - <code>tests/fuzz/test_schema_validation_fuzz.py</code> - Pydantic schemas (19 tests)</p> <p>Example Test: <pre><code>@given(st.text())\ndef test_validate_request_handles_text_input(self, text_input):\n    \"\"\"Test that text input never crashes the validator.\"\"\"\n    try:\n        data = json.loads(text_input)\n        if isinstance(data, dict):\n            validate_request(data)\n    except (JSONRPCError, ValueError, TypeError, json.JSONDecodeError, AttributeError):\n        # Expected exceptions for invalid input\n        pass\n    except Exception as e:\n        pytest.fail(f\"Unexpected exception: {type(e).__name__}: {e}\")\n</code></pre></p> <p>Configuration: Set testing intensity via environment variables: <pre><code>HYPOTHESIS_PROFILE=dev      # 100 examples (default)\nHYPOTHESIS_PROFILE=ci       # 50 examples (fast)\nHYPOTHESIS_PROFILE=thorough # 1000 examples (comprehensive)\n</code></pre></p>"},{"location":"testing/fuzzing/#coverage-guided-fuzzing-atheris","title":"Coverage-Guided Fuzzing (Atheris)","text":"<p>Uses libfuzzer to instrument code and guide input generation toward unexplored code paths.</p> <p>Fuzzer Scripts: - <code>tests/fuzz/fuzzers/fuzz_jsonpath.py</code> - JSONPath expression fuzzing - <code>tests/fuzz/fuzzers/fuzz_jsonrpc.py</code> - JSON-RPC message fuzzing - <code>tests/fuzz/fuzzers/fuzz_config_parser.py</code> - Configuration parsing fuzzing</p> <p>Setup Requirements: Atheris requires clang and libfuzzer to be installed:</p> <pre><code># Install LLVM/Clang (one-time setup)\ngit clone --depth=1 https://github.com/llvm/llvm-project.git\ncd llvm-project\ncmake -DLLVM_ENABLE_PROJECTS='clang;compiler-rt' -G \"Unix Makefiles\" -S llvm -B build\ncmake --build build --parallel $(nproc)\n\n# Set environment and install\nexport CLANG_BIN=\"$(pwd)/bin/clang\"\npip install -e .[fuzz-atheris]\n</code></pre> <p>Running Atheris: <pre><code># Manual execution with custom parameters\npython tests/fuzz/fuzzers/fuzz_jsonpath.py -runs=10000 -max_total_time=300\n</code></pre></p>"},{"location":"testing/fuzzing/#api-schema-fuzzing-schemathesis","title":"API Schema Fuzzing (Schemathesis)","text":"<p>Tests API endpoints by generating requests based on OpenAPI schema definitions.</p> <p>Features: - Validates API contracts automatically - Tests authentication flows - Verifies response schemas - Discovers endpoint-specific edge cases</p> <p>Manual Setup: API fuzzing requires a running server instance:</p> <pre><code># Terminal 1: Start server\nmake dev\n\n# Terminal 2: Run API fuzzing\nsource $(VENV_DIR)/bin/activate\nschemathesis run http://localhost:4444/openapi.json \\\n  --checks all \\\n  --auth admin:changeme \\\n  --hypothesis-max-examples=500\n</code></pre>"},{"location":"testing/fuzzing/#security-focused-testing","title":"Security-Focused Testing","text":"<p>Tests resistance to common security vulnerabilities and attack patterns.</p> <p>Test Categories: - SQL Injection: Tests input sanitization in database queries - XSS Prevention: Validates output encoding and CSP headers - Path Traversal: Tests file access controls - Command Injection: Validates command execution safeguards - Authentication Bypass: Tests auth mechanism robustness - DoS Protection: Validates rate limiting and resource constraints</p> <p>Example Security Test: <pre><code>@given(st.text(min_size=1, max_size=1000))\ndef test_sql_injection_resistance(self, malicious_input):\n    \"\"\"Test resistance to SQL injection in various fields.\"\"\"\n    sql_patterns = [\n        malicious_input,\n        f\"'; DROP TABLE tools; --\",\n        f\"' OR '1'='1\",\n        f\"'; INSERT INTO tools (name) VALUES ('hacked'); --\",\n    ]\n\n    for pattern in sql_patterns:\n        response = client.post(\"/admin/tools\", json={\n            \"name\": pattern,\n            \"url\": \"http://example.com\"\n        }, headers={\"Authorization\": \"Basic YWRtaW46Y2hhbmdlbWU=\"})\n\n        # Should not crash or allow injection\n        assert response.status_code in [200, 201, 400, 401, 422]\n</code></pre></p>"},{"location":"testing/fuzzing/#makefile-targets","title":"Makefile Targets","text":"Target Purpose Dependencies Use Case <code>fuzz-install</code> Install fuzzing dependencies Virtual environment One-time setup <code>fuzz-all</code> Complete fuzzing suite <code>fuzz-install</code> Full validation <code>fuzz-hypothesis</code> Property-based testing <code>fuzz-install</code> Core logic validation <code>fuzz-atheris</code> Coverage-guided fuzzing clang/libfuzzer Deep exploration <code>fuzz-api</code> API endpoint fuzzing Running server Contract validation <code>fuzz-restler</code> RESTler API fuzzing (instructions) Docker or local RESTler Stateful/sequence fuzzing <code>fuzz-restler-auto</code> Run RESTler via Docker automatically Docker, running server Automated stateful fuzzing <code>fuzz-security</code> Security vulnerability testing <code>fuzz-install</code> Security validation <code>fuzz-quick</code> Fast fuzzing for CI <code>fuzz-install</code> PR validation <code>fuzz-extended</code> Extended fuzzing <code>fuzz-install</code> Nightly testing <code>fuzz-report</code> Generate reports <code>fuzz-install</code> Analysis <code>fuzz-clean</code> Clean artifacts None Maintenance"},{"location":"testing/fuzzing/#test-execution-modes","title":"Test Execution Modes","text":""},{"location":"testing/fuzzing/#development-mode","title":"Development Mode","text":"<p>For interactive development and debugging: <pre><code>make fuzz-hypothesis    # Run with statistics and detailed output\nmake fuzz-security      # Security tests with warnings\n</code></pre></p>"},{"location":"testing/fuzzing/#cicd-mode","title":"CI/CD Mode","text":"<p>For automated testing in continuous integration: <pre><code>make fuzz-quick         # Fast validation (50 examples)\n</code></pre></p>"},{"location":"testing/fuzzing/#comprehensive-mode","title":"Comprehensive Mode","text":"<p>For thorough testing in nightly builds: <pre><code>make fuzz-extended      # Extended testing (1000+ examples)\n</code></pre></p>"},{"location":"testing/fuzzing/#restler-fuzzing","title":"RESTler Fuzzing","text":"<p>RESTler performs stateful, sequence-based fuzzing of REST APIs using the OpenAPI/Swagger specification. It's ideal for discovering bugs that require specific call sequences.</p>"},{"location":"testing/fuzzing/#option-a-docker-recommended","title":"Option A: Docker (recommended)","text":"<p>Prerequisites: Docker installed and the gateway running locally.</p> <pre><code># Terminal 1: Start the server\nmake dev\n\n# Terminal 2: Generate/OpenAPI and run RESTler via Docker\ncurl -sSf http://localhost:4444/openapi.json -o reports/restler/openapi.json\ndocker run --rm -v \"$PWD/reports/restler:/workspace\" \\\n  ghcr.io/microsoft/restler restler compile --api_spec /workspace/openapi.json\ndocker run --rm -v \"$PWD/reports/restler:/workspace\" \\\n  ghcr.io/microsoft/restler restler test --grammar_dir /workspace/Compile --no_ssl --time_budget 5\n\n# Results are written to reports/restler\n</code></pre> <p>You can print these instructions anytime with:</p> <pre><code>make fuzz-restler\n</code></pre>"},{"location":"testing/fuzzing/#option-a2-automated-docker-runner","title":"Option A2: Automated Docker runner","text":"<p>Use the helper that waits for the server, downloads the spec, then compiles and runs RESTler in Docker:</p> <pre><code># Terminal 1: Start the server\nmake dev\n\n# Terminal 2: Run automated RESTler fuzzing\nmake fuzz-restler-auto\n\n# Optional environment variables:\n# MCPFUZZ_BASE_URL   (default: http://localhost:4444)\n# MCPFUZZ_AUTH_HEADER (e.g., \"Authorization: Basic YWRtaW46Y2hhbmdlbWU=\")\n# MCPFUZZ_TIME_BUDGET (minutes, default: 5)\n# MCPFUZZ_NO_SSL      (1 to pass --no_ssl; default: 1)\n</code></pre> <p>Notes: - If Docker is not present, <code>fuzz-restler-auto</code> will print a friendly message and exit successfully (use <code>make fuzz-restler</code> for manual steps). This behavior avoids CI failures on runners without Docker. - Artifacts are written under <code>reports/restler/</code>.</p>"},{"location":"testing/fuzzing/#option-b-local-install","title":"Option B: Local install","text":"<p>Follow RESTler's official installation guide, set <code>RESTLER_HOME</code>, then:</p> <pre><code>export RESTLER_HOME=/path/to/restler\ncurl -sSf http://localhost:4444/openapi.json -o reports/restler/openapi.json\n\"$RESTLER_HOME\"/restler compile --api_spec reports/restler/openapi.json\n\"$RESTLER_HOME\"/restler test --grammar_dir Compile --no_ssl --time_budget 5\n</code></pre> <p>Notes: - Ensure the server exposes <code>http://localhost:4444/openapi.json</code>. - For authenticated specs, supply tokens/headers to RESTler as needed. - Increase <code>--time_budget</code> for deeper exploration in nightly runs.  - In CI, prefer running <code>fuzz-restler-auto</code> only on runners with Docker available, or skip otherwise.</p>"},{"location":"testing/fuzzing/#understanding-results","title":"Understanding Results","text":""},{"location":"testing/fuzzing/#test-outcomes","title":"Test Outcomes","text":"<p>Passing Tests: Inputs handled correctly without crashes Failing Tests: Unexpected exceptions or crashes discovered Skipped Tests: Tests requiring external dependencies (auth, servers)</p>"},{"location":"testing/fuzzing/#hypothesis-statistics","title":"Hypothesis Statistics","text":"<p>Hypothesis provides detailed statistics about test execution:</p> <pre><code>- during generate phase (1.86 seconds):\n  - Typical runtimes: ~ 15-16 ms, of which &lt; 1ms in data generation\n  - 100 passing examples, 0 failing examples, 0 invalid examples\n- Stopped because settings.max_examples=100\n</code></pre>"},{"location":"testing/fuzzing/#bug-discovery","title":"Bug Discovery","text":"<p>When fuzzing finds issues, it provides: - Minimal failing example: Simplified input that reproduces the bug - Seed for reproduction: Run with <code>--hypothesis-seed=X</code> to reproduce - Call stack: Exact location where the failure occurred</p> <p>Example failure: <pre><code>Falsifying example: test_validate_request_handles_text_input(\n    self=&lt;TestJSONRPCRequestFuzzing&gt;,\n    text_input='null'\n)\n</code></pre></p>"},{"location":"testing/fuzzing/#writing-fuzz-tests","title":"Writing Fuzz Tests","text":""},{"location":"testing/fuzzing/#property-based-test-structure","title":"Property-Based Test Structure","text":"<pre><code>from hypothesis import given, strategies as st\nimport pytest\n\nclass TestMyComponentFuzzing:\n    @given(st.text(min_size=1, max_size=100))\n    def test_component_never_crashes(self, input_text):\n        \"\"\"Test that component handles arbitrary text input.\"\"\"\n        try:\n            result = my_component.process(input_text)\n            # Verify expected properties\n            assert isinstance(result, (str, dict, list))\n        except (ValueError, TypeError):\n            # Expected exceptions for invalid input\n            pass\n        except Exception as e:\n            pytest.fail(f\"Unexpected exception: {type(e).__name__}: {e}\")\n</code></pre>"},{"location":"testing/fuzzing/#atheris-fuzzer-structure","title":"Atheris Fuzzer Structure","text":"<pre><code>#!/usr/bin/env python3\nimport atheris\nimport sys\nimport os\n\n# Ensure project is in path\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../..'))\n\nfrom mcpgateway.my_module import my_function\n\ndef TestOneInput(data: bytes) -&gt; None:\n    \"\"\"Fuzz target for my_function.\"\"\"\n    fdp = atheris.FuzzedDataProvider(data)\n\n    try:\n        if fdp.remaining_bytes() &lt; 1:\n            return\n\n        # Generate test input\n        test_input = fdp.ConsumeUnicodeNoSurrogates(100)\n\n        # Test function (should never crash)\n        my_function(test_input)\n\n    except (ValueError, TypeError):\n        # Expected exceptions\n        pass\n    except Exception:\n        # Unexpected - let Atheris catch it\n        raise\n\ndef main():\n    atheris.instrument_all()\n    atheris.Setup(sys.argv, TestOneInput)\n    atheris.Fuzz()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"testing/fuzzing/#security-test-patterns","title":"Security Test Patterns","text":"<pre><code>@given(st.text().filter(lambda x: any(char in x for char in '&lt;&gt;\"\\'&amp;')))\ndef test_xss_prevention(self, potentially_malicious):\n    \"\"\"Test XSS prevention in user inputs.\"\"\"\n    response = client.post(\"/api/endpoint\", json={\n        \"field\": potentially_malicious\n    }, headers={\"Authorization\": \"Basic YWRtaW46Y2hhbmdlbWU=\"})\n\n    # Should handle malicious content safely\n    assert response.status_code in [200, 201, 400, 401, 422]\n\n    # Raw script tags should not appear unescaped\n    if \"&lt;script&gt;\" in potentially_malicious.lower():\n        assert \"&lt;script&gt;\" not in response.text.lower()\n</code></pre>"},{"location":"testing/fuzzing/#common-strategies","title":"Common Strategies","text":""},{"location":"testing/fuzzing/#input-generation-strategies","title":"Input Generation Strategies","text":"<pre><code>import hypothesis.strategies as st\n\n# Basic types\nst.text()                    # Unicode strings\nst.integers()                # Integers\nst.binary()                  # Raw bytes\nst.booleans()               # True/False\n\n# Structured data\nst.dictionaries(\n    keys=st.text(min_size=1),\n    values=st.integers()\n)\nst.lists(st.text(), max_size=10)\n\n# Custom strategies\nst.one_of(st.none(), st.text(), st.integers())  # Union types\n\n# Filtered strategies (use sparingly)\nst.text().filter(lambda x: '$' in x)\n</code></pre>"},{"location":"testing/fuzzing/#common-edge-cases-to-test","title":"Common Edge Cases to Test","text":"<p>JSON-RPC Validation: - Empty objects: <code>{}</code> - Non-objects: <code>null</code>, <code>[]</code>, <code>\"string\"</code>, <code>123</code> - Missing required fields - Invalid field types - Very large payloads</p> <p>JSONPath Processing: - Invalid expressions: <code>$..</code>, <code>$[</code>, <code>$.</code> - Very long expressions - Unicode characters - Special characters that break parsing</p> <p>API Endpoints: - Malformed JSON payloads - Missing authentication headers - Invalid content types - Very large request bodies - Concurrent requests</p>"},{"location":"testing/fuzzing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"testing/fuzzing/#common-issues","title":"Common Issues","text":"<p>Import Errors: <pre><code>ModuleNotFoundError: No module named 'hypothesis'\n</code></pre> Solution: Run <code>make fuzz-install</code> first</p> <p>Authentication Failures: <pre><code>assert 401 in [200, 201, 400, 422]\n</code></pre> Solution: Security tests expect auth failures when testing in isolation</p> <p>Filter Warnings: <pre><code>FailedHealthCheck: filtering out a lot of inputs\n</code></pre> Solution: Use <code>assume()</code> instead of <code>.filter()</code> or disable health check</p>"},{"location":"testing/fuzzing/#performance-tuning","title":"Performance Tuning","text":"<p>Slow Tests: - Reduce <code>max_examples</code> for development - Use <code>HYPOTHESIS_PROFILE=ci</code> for faster execution - Add <code>@settings(timeout=timedelta(seconds=10))</code> for time limits</p> <p>Memory Issues: - Limit recursive data structure depth - Use <code>max_leaves</code> parameter in recursive strategies - Monitor corpus size growth</p>"},{"location":"testing/fuzzing/#debugging-failed-tests","title":"Debugging Failed Tests","text":"<p>Reproduce Failures: <pre><code># Use seed from failed test output\npytest --hypothesis-seed=12345 tests/fuzz/test_my_module.py::test_function\n</code></pre></p> <p>Debug Mode: <pre><code>@settings(verbosity=Verbosity.verbose)\n@given(st.text())\ndef test_with_debug(self, input_text):\n    print(f\"Testing with: {repr(input_text)}\")  # Add debug output\n    # ... test logic\n</code></pre></p>"},{"location":"testing/fuzzing/#integration-with-cicd","title":"Integration with CI/CD","text":""},{"location":"testing/fuzzing/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code>name: Fuzz Testing\non:\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 2 * * *'  # Nightly\n\njobs:\n  fuzz-quick:\n    name: Quick Fuzzing\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request'\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: \"3.12\"\n      - run: make fuzz-quick\n\n  fuzz-extended:\n    name: Extended Fuzzing\n    runs-on: ubuntu-latest\n    if: github.event_name == 'schedule'\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with:\n          python-version: \"3.12\"\n      - run: make fuzz-extended\n      - run: make fuzz-report\n      - uses: actions/upload-artifact@v4\n        with:\n          name: fuzz-reports\n          path: reports/\n</code></pre>"},{"location":"testing/fuzzing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Add fuzzing to pre-commit pipeline:</p> <pre><code># .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: fuzz-quick\n        name: Quick Fuzz Testing\n        entry: make fuzz-quick\n        language: system\n        pass_filenames: false\n        stages: [pre-push]\n</code></pre>"},{"location":"testing/fuzzing/#best-practices","title":"Best Practices","text":""},{"location":"testing/fuzzing/#test-design","title":"Test Design","text":"<ol> <li>Focus on invariants: Test properties that should always hold</li> <li>Expect the expected: Handle known exception types gracefully</li> <li>Fail on unexpected: Use <code>pytest.fail()</code> for truly unexpected errors</li> <li>Use examples: Add <code>@example()</code> decorators for known edge cases</li> </ol>"},{"location":"testing/fuzzing/#input-strategies","title":"Input Strategies","text":"<ol> <li>Start broad: Use general strategies like <code>st.text()</code> initially</li> <li>Narrow gradually: Add constraints based on domain knowledge</li> <li>Avoid over-filtering: Use <code>assume()</code> instead of <code>.filter()</code> when possible</li> <li>Test boundaries: Include empty, very large, and edge case inputs</li> </ol>"},{"location":"testing/fuzzing/#security-testing","title":"Security Testing","text":"<ol> <li>Test defensively: Assume all input is potentially malicious</li> <li>Verify sanitization: Check that dangerous content is properly escaped</li> <li>Test authentication: Verify auth requirements are properly enforced</li> <li>Monitor responses: Ensure error messages don't leak sensitive information</li> </ol>"},{"location":"testing/fuzzing/#real-issues-found","title":"Real Issues Found","text":"<p>Our fuzzing implementation has already discovered several real bugs:</p>"},{"location":"testing/fuzzing/#json-rpc-validation-crashes","title":"JSON-RPC Validation Crashes","text":"<p>Issue: <code>validate_request()</code> crashes with <code>AttributeError</code> when given non-dict inputs.</p> <p>Root Cause: Function assumes input is always a dictionary and calls <code>.get()</code> method.</p> <p>Examples that crash: - <code>json.loads(\"null\")</code> \u2192 <code>None</code> \u2192 <code>None.get(\"jsonrpc\")</code> crashes - <code>json.loads(\"0\")</code> \u2192 <code>0</code> \u2192 <code>0.get(\"jsonrpc\")</code> crashes - <code>json.loads(\"[]\")</code> \u2192 <code>[]</code> \u2192 <code>[].get(\"jsonrpc\")</code> crashes</p> <p>Fix Applied: Added type checking in fuzz tests to only validate dict inputs.</p>"},{"location":"testing/fuzzing/#schema-validation-edge-cases","title":"Schema Validation Edge Cases","text":"<p>Issue: Pydantic schemas accept broader input types than expected.</p> <p>Examples: - <code>AuthenticationValues(auth_type=\"\")</code> accepts empty strings - <code>ToolCreate(input_schema=None)</code> allows None values - Various unicode and special character handling inconsistencies</p>"},{"location":"testing/fuzzing/#directory-structure","title":"Directory Structure","text":"<pre><code>tests/fuzz/                          # Fuzz testing directory\n\u251c\u2500\u2500 conftest.py                     # Pytest configuration and markers\n\u251c\u2500\u2500 test_jsonrpc_fuzz.py            # JSON-RPC validation tests\n\u251c\u2500\u2500 test_jsonpath_fuzz.py           # JSONPath processing tests\n\u251c\u2500\u2500 test_schema_validation_fuzz.py  # Pydantic schema tests\n\u251c\u2500\u2500 test_api_schema_fuzz.py         # API endpoint tests\n\u251c\u2500\u2500 test_security_fuzz.py           # Security vulnerability tests\n\u251c\u2500\u2500 fuzzers/                        # Atheris coverage-guided fuzzers\n\u2502   \u251c\u2500\u2500 fuzz_jsonpath.py           # JSONPath expression fuzzer\n\u2502   \u251c\u2500\u2500 fuzz_jsonrpc.py            # JSON-RPC message fuzzer\n\u2502   \u2514\u2500\u2500 fuzz_config_parser.py      # Configuration parser fuzzer\n\u2514\u2500\u2500 scripts/\n    \u2514\u2500\u2500 generate_fuzz_report.py    # Report generation utility\n\n# Generated artifacts (gitignored)\ncorpus/                             # Test case corpus\n\u251c\u2500\u2500 jsonpath/                       # JSONPath test cases\n\u251c\u2500\u2500 jsonrpc/                       # JSON-RPC test cases\n\u2514\u2500\u2500 api/                           # API request test cases\n\nreports/                            # Generated reports\n\u251c\u2500\u2500 fuzz-report.json               # Machine-readable report\n\u2514\u2500\u2500 fuzz-report.md                 # Human-readable report\n</code></pre>"},{"location":"testing/fuzzing/#advanced-usage","title":"Advanced Usage","text":""},{"location":"testing/fuzzing/#custom-strategies","title":"Custom Strategies","text":"<p>Create domain-specific input generators:</p> <pre><code># JSON-RPC message strategy\njsonrpc_request = st.fixed_dict({\n    \"jsonrpc\": st.just(\"2.0\"),\n    \"method\": st.text(min_size=1, max_size=50),\n    \"id\": st.one_of(st.integers(), st.text(), st.none())\n}, optional={\n    \"params\": st.one_of(\n        st.dictionaries(st.text(), st.text()),\n        st.lists(st.text())\n    )\n})\n\n@given(jsonrpc_request)\ndef test_with_valid_structure(self, request):\n    validate_request(request)\n</code></pre>"},{"location":"testing/fuzzing/#corpus-management","title":"Corpus Management","text":"<p>Build and maintain test case collections:</p> <pre><code># Generate corpus from successful fuzzing runs\npython tests/fuzz/fuzzers/fuzz_jsonpath.py \\\n  -runs=10000 \\\n  -artifact_prefix=corpus/jsonpath/\n\n# Use corpus for regression testing\npython tests/fuzz/fuzzers/fuzz_jsonpath.py \\\n  corpus/jsonpath/* \\\n  -runs=0  # Only test existing corpus\n</code></pre>"},{"location":"testing/fuzzing/#performance-monitoring","title":"Performance Monitoring","text":"<p>Track fuzzing performance over time:</p> <pre><code>@settings(deadline=timedelta(milliseconds=500))\n@given(st.text())\ndef test_performance_regression(self, input_text):\n    \"\"\"Ensure processing stays within performance bounds.\"\"\"\n    start_time = time.time()\n    my_function(input_text)\n    duration = time.time() - start_time\n    assert duration &lt; 0.1, f\"Processing took {duration}s, expected &lt; 0.1s\"\n</code></pre>"},{"location":"testing/fuzzing/#reporting-and-analysis","title":"Reporting and Analysis","text":""},{"location":"testing/fuzzing/#generated-reports","title":"Generated Reports","text":"<p>The <code>make fuzz-report</code> command generates comprehensive reports:</p> <p>JSON Report (<code>reports/fuzz-report.json</code>): - Machine-readable results for CI integration - Tool execution statistics - Failure counts and error categorization - Corpus and coverage metrics</p> <p>Markdown Report (<code>reports/fuzz-report.md</code>): - Human-readable executive summary - Tool-by-tool breakdown - Recommendations for action - Links to detailed artifacts</p>"},{"location":"testing/fuzzing/#interpreting-results","title":"Interpreting Results","text":"<p>Green (\u2705): No crashes or security issues found Yellow (\u26a0\ufe0f): Partial results or configuration issues Red (\ud83d\udea8): Critical issues requiring immediate attention</p> <p>Example Report Summary: <pre><code>\ud83c\udfaf Overall Status: \u2705 PASS\n\ud83d\udd27 Tools Completed: 4/4\n\ud83d\udea8 Critical Issues: 0\n\n\ud83d\udca1 Key Recommendations:\n\u2705 No critical issues found in fuzzing\n\ud83d\udd04 Continue regular fuzzing as part of CI/CD\n\ud83d\udcca Review detailed results for optimization opportunities\n</code></pre></p>"},{"location":"testing/fuzzing/#maintenance","title":"Maintenance","text":""},{"location":"testing/fuzzing/#regular-tasks","title":"Regular Tasks","text":"<ol> <li>Update corpus: Add new interesting test cases discovered during development</li> <li>Review failures: Investigate and fix any new crashes discovered</li> <li>Tune performance: Adjust example counts based on CI time constraints</li> <li>Update strategies: Enhance input generation as code evolves</li> </ol>"},{"location":"testing/fuzzing/#corpus-hygiene","title":"Corpus Hygiene","text":"<pre><code># Clean up old artifacts\nmake fuzz-clean\n\n# Regenerate corpus with latest code\nmake fuzz-atheris\n\n# Verify corpus quality\npython tests/fuzz/scripts/generate_fuzz_report.py\n</code></pre>"},{"location":"testing/fuzzing/#references","title":"References","text":"<ul> <li>Hypothesis Documentation - Property-based testing guide</li> <li>Atheris Documentation - Coverage-guided fuzzing</li> <li>Schemathesis Documentation - API schema testing</li> <li>OWASP Fuzzing Guide - Security fuzzing practices</li> <li>Property-Based Testing - Testing philosophy and examples</li> </ul>"},{"location":"testing/performance/","title":"Performance Testing","text":"<p>Use this guide to benchmark MCP Gateway under load, validate performance improvements, and identify bottlenecks before production deployment.</p>"},{"location":"testing/performance/#tooling-hey","title":"\u2699\ufe0f Tooling: <code>hey</code>","text":"<p><code>hey</code> is a CLI-based HTTP load generator. Install it with:</p> <pre><code>brew install hey            # macOS\nsudo apt install hey        # Debian/Ubuntu\ngo install github.com/rakyll/hey@latest  # From source\n</code></pre>"},{"location":"testing/performance/#establishing-a-baseline","title":"\ud83c\udfaf Establishing a Baseline","text":"<p>Before benchmarking the full MCP Gateway stack, run tests against the MCP server directly (if applicable) to establish baseline latency and throughput. This helps isolate issues related to gateway overhead, authentication, or network I/O.</p> <p>If your backend service exposes a direct HTTP interface or gRPC gateway, target it with <code>hey</code> using the same payload and concurrency settings.</p> <pre><code>hey -n 5000 -c 100 \\\n  -m POST \\\n  -T application/json \\\n  -D tests/hey/payload.json \\\n  http://localhost:5000/your-backend-endpoint\n</code></pre> <p>Compare the 95/99<sup>th</sup> percentile latencies and error rates with and without the gateway in front. Any significant increase can guide you toward:</p> <ul> <li>Bottlenecks in auth middleware</li> <li>Overhead from JSON-RPC wrapping/unwrapping</li> <li>Improper worker/thread config in Gunicorn</li> </ul>"},{"location":"testing/performance/#scripted-load-tests-testsheyheysh","title":"\ud83d\ude80 Scripted Load Tests: <code>tests/hey/hey.sh</code>","text":"<p>A wrapper script exists at:</p> <pre><code>tests/hey/hey.sh\n</code></pre> <p>This script provides:</p> <ul> <li>Strict error handling (<code>set -euo pipefail</code>)</li> <li>Helpful CLI interface (<code>-n</code>, <code>-c</code>, <code>-d</code>, etc.)</li> <li>Required dependency checks</li> <li>Optional dry-run mode</li> <li>Timestamped logging</li> </ul> <p>Example usage:</p> <pre><code>./hey.sh -n 10000 -c 200 \\\n  -X POST \\\n  -T application/json \\\n  -H \"Authorization: Bearer $JWT\" \\\n  -d payload.json \\\n  -u http://localhost:4444/rpc\n</code></pre> <p>The <code>payload.json</code> file is expected to be a valid JSON-RPC request payload.</p> <p>Sample payload (<code>tests/hey/payload.json</code>):</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"convert_time\",\n  \"params\": {\n    \"source_timezone\": \"Europe/Berlin\",\n    \"target_timezone\": \"Europe/Dublin\",\n    \"time\": \"09:00\"\n  }\n}\n</code></pre> <p>Logs are saved automatically (e.g. <code>hey-20250610_120000.log</code>).</p>"},{"location":"testing/performance/#interpreting-results","title":"\ud83d\udcca Interpreting Results","text":"<p>When the test completes, look at:</p> Metric Interpretation Requests/sec (RPS) Raw throughput capability 95/99<sup>th</sup> percentile Tail latency - tune <code>timeout</code>, workers, or DB pooling Non-2xx responses Failures under load - common with CPU/memory starvation"},{"location":"testing/performance/#tips-best-practices","title":"\ud83e\uddea Tips &amp; Best Practices","text":"<ul> <li>Always test against a realistic endpoint (e.g. <code>POST /rpc</code> with auth and payload).</li> <li>Use the same JWT and payload structure your clients would.</li> <li>Run from a dedicated machine to avoid local CPU skewing results.</li> <li>Use <code>make run</code> or <code>make serve</code> to launch the app for local testing.</li> </ul> <p>For runtime tuning details, see Gateway Tuning Guide.</p>"},{"location":"tutorials/","title":"\ud83d\udcda Tutorials","text":"<p>Step-by-step guides to help you deploy and integrate MCP Gateway and related components using both cloud-native and local containerized environments.</p>"},{"location":"tutorials/#cloud-deployment-with-argo-cd-and-ibm-cloud-kubernetes-service","title":"\ud83d\ude80 Cloud Deployment with Argo CD and IBM Cloud Kubernetes Service","text":"<p>This guide walks you through deploying the MCP Gateway Stack on IBM Cloud Kubernetes Service (IKS) using Helm and Argo CD for GitOps-based lifecycle management. You'll learn how to:</p> <ul> <li>Build and push container images to IBM Container Registry</li> <li>Provision an IKS cluster with VPC-native networking</li> <li>Deploy the full MCP Gateway Helm chart via Argo CD</li> <li>Configure services like PostgreSQL, Redis, and TLS</li> <li>Connect AI clients like VS Code Copilot and LangChain Agent</li> </ul> <p>\ud83d\udc49 Read the full guide</p>"},{"location":"tutorials/#local-deployment-of-openwebui-mcp-tools","title":"\ud83e\udde0 Local Deployment of OpenWebUI + MCP Tools","text":"<p>This tutorial helps you set up OpenWebUI integrated with Ollama, LiteLLM, MCPO, and the MCP Gateway in a local containerized environment using Docker. It covers:</p> <ul> <li>Running LLMs locally via Ollama</li> <li>Using LiteLLM as a proxy for unified model access</li> <li>Bridging MCP tools through MCPO to OpenWebUI</li> <li>Managing MCP servers with the MCP Gateway</li> <li>Connecting it all through Docker networks</li> </ul> <p>Perfect for experimenting on your workstation or air-gapped environments.</p> <p>\ud83d\udc49 View the tutorial</p>"},{"location":"tutorials/#additional-resources","title":"\ud83d\udce6 Additional Resources","text":"<ul> <li>MCP Gateway GitHub</li> <li>Model Context Protocol Specification</li> <li>OpenWebUI Documentation</li> </ul> <p>Stay tuned for more guides on CI/CD, hybrid federation, observability, and secure API operations.</p>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/","title":"\ud83d\ude80 Deploying the MCP Gateway Stack to IBM Cloud Kubernetes Service with Argo CD","text":"<p>Work in progress</p> <p>This document is a WORK IN PROGRESS and is not yet ready for consumption.</p> <p>What you'll achieve</p> <ul> <li>Build or pull the OCI image(s) for MCP Gateway</li> <li>Push them to IBM Container Registry (ICR)</li> <li>Provision an IKS cluster with VPC-native networking</li> <li>Install &amp; bootstrap Argo CD for GitOps management</li> <li>Deploy the MCP Stack Helm chart via Argo CD</li> <li>Configure MCP Gateway with servers and tools</li> <li>Connect clients (VS Code Copilot, LangChain Agent, Claude Desktop)</li> <li>Set up observability, scaling, and managed databases</li> </ul>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#solution-architecture","title":"Solution Architecture","text":"<pre><code>flowchart TD\n    %% ---------------- Git ----------------\n    subgraph Git\n        repo[\"Helm values&lt;br/&gt;+ Argo App CR\"]\n    end\n\n    %% ---------------- CI/CD --------------\n    subgraph \"CI/CD\"\n        build[\"Build &amp;amp; Push&lt;br/&gt;OCI Image\"]\n    end\n\n    %% ---------------- IBM Cloud ----------\n    subgraph \"IBM Cloud\"\n        vpc[\"VPC + Subnets\"]\n        iks[\"IKS Cluster\"]\n        icr[\"ICR&lt;br/&gt;eu.icr.io\"]\n        argocd[\"Argo CD\"]\n        helm[\"Helm Release&lt;br/&gt;mcp-stack\"]\n        gateway[\"MCP Gateway Pods\"]\n        db[\"PostgreSQL PVC\"]\n        redis[\"Redis PVC\"]\n        kms[\"Key Protect KMS\"]\n        secrets[\"Secrets Manager\"]\n        logs[\"Cloud Logs\"]\n    end\n\n    %% ---------------- Clients ------------\n    subgraph Clients\n        vscode[\"VS Code Copilot\"]\n        claude[\"Claude Desktop\"]\n        langchain[\"LangChain Agent\"]\n    end\n\n    %% ---------- Styling for IBM Cloud ----\n    classDef cloud fill:#f5f5f5,stroke:#c6c6c6;\n    class vpc,iks,icr,argocd,helm,gateway,db,redis,kms,secrets,logs cloud;\n\n    %% ------------ Edges ------------------\n    repo   -- \"git push\"      --&gt; build\n    build  -- \"docker push\"   --&gt; icr\n    repo   -- \"App CR\"        --&gt; argocd\n    argocd -- \"helm upgrade\"  --&gt; iks\n    icr    -- \"ImagePull\"     --&gt; iks\n    iks    --&gt; db\n    iks    --&gt; redis\n    helm   -- \"Deploy\"        --&gt; gateway\n    secrets-- \"TLS certs\"     --&gt; iks\n    kms    -- \"encryption\"    --&gt; iks\n    logs   -- \"audit logs\"    --&gt; iks\n    gateway-- \"SSE/stdio\"     --&gt; vscode\n    gateway-- \"wrapper\"       --&gt; claude\n    gateway-- \"HTTP API\"      --&gt; langchain</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#prerequisites","title":"Prerequisites","text":"Requirement Minimum Reference IBM Cloud CLI \u2265 2.16 https://clis.cloud.ibm.com CLI plugins - <code>container-registry</code>, <code>kubernetes-service</code>, <code>vpc-infrastructure</code>, <code>secrets-manager</code>, <code>logs</code> latest <code>ibmcloud plugin install ...</code> kubectl \u2265 1.25 https://kubernetes.io/ Helm 3 \u2265 3.12 https://helm.sh/ git, podman/docker - distro packages Argo CD CLI \u2265 2.9 https://argo-cd.readthedocs.io IBM Cloud account with VPC quota - free tier works <p>Quick sanity check</p> <pre><code>kubectl version --short\nhelm version\nibmcloud --version\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#1-clone-prepare-the-repository","title":"1. Clone &amp; Prepare the Repository","text":"<pre><code>git clone https://github.com/IBM/mcp-context-forge.git\ncd mcp-context-forge\n\n# Optional local build for testing\npodman build -t mcp-context-forge:dev -f Containerfile .\n</code></pre> <p>Production deployments</p> <p>Production deployments can pull the signed image directly: <pre><code>ghcr.io/ibm/mcp-context-forge:0.6.0\n</code></pre></p>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#2-ibm-cloud-account-setup","title":"2. IBM Cloud Account Setup","text":""},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#21-authentication-region-resource-group","title":"2.1. Authentication, Region &amp; Resource Group","text":"<pre><code>ibmcloud login --sso                       # or: ibmcloud login --apikey \"$IBMCLOUD_API_KEY\"\nibmcloud target -r eu-de -g Default\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#22-install-required-cli-plugins","title":"2.2. Install Required CLI Plugins","text":"<pre><code>ibmcloud plugin install container-registry -f\nibmcloud plugin install kubernetes-service -f\nibmcloud plugin install vpc-infrastructure -f\nibmcloud plugin install secrets-manager -f\nibmcloud plugin install logs -f\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#23-create-vpc-and-networking-one-time","title":"2.3. Create VPC and Networking (one-time)","text":"<pre><code># Create VPC\nibmcloud is vpc-create mcp-vpc --resource-group Default\n\n# Create subnet in each zone for HA\nibmcloud is subnet-create mcp-subnet-eu-de-1 \\\n    $(ibmcloud is vpc mcp-vpc --output json | jq -r '.id') \\\n    --zone eu-de-1 --ipv4-cidr-block 10.10.1.0/24\n\nibmcloud is subnet-create mcp-subnet-eu-de-2 \\\n    $(ibmcloud is vpc mcp-vpc --output json | jq -r '.id') \\\n    --zone eu-de-2 --ipv4-cidr-block 10.10.2.0/24\n\nibmcloud is subnet-create mcp-subnet-eu-de-3 \\\n    $(ibmcloud is vpc mcp-vpc --output json | jq -r '.id') \\\n    --zone eu-de-3 --ipv4-cidr-block 10.10.3.0/24\n</code></pre> <p>Bring-your-own VPC</p> <p>You can reuse an existing VPC; just skip the commands above and note the IDs.</p>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#24-provision-ibm-cloud-services","title":"2.4. Provision IBM Cloud Services","text":"Service Purpose CLI Command Secrets Manager wildcard TLS certs, JWT secret <code>ibmcloud resource service-instance-create mcp-secrets secrets-manager standard eu-de</code> Key Protect (KMS) CSI envelope encryption <code>ibmcloud resource service-instance-create mcp-kms kms tiered-pricing eu-de</code> Cloud Logs audit &amp; app logs <code>ibmcloud resource service-instance-create mcp-logs logs standard eu-de</code> Container Registry host OCI images <code>ibmcloud cr namespace-add mcp-gw</code>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#25-push-images-to-ibm-container-registry","title":"2.5. Push Images to IBM Container Registry","text":"<pre><code># Login to Container Registry\nibmcloud cr login\n\n# Tag and push the image\npodman tag mcp-context-forge:dev eu.icr.io/mcp-gw/mcpgateway:0.6.0\npodman push eu.icr.io/mcp-gw/mcpgateway:0.6.0\n\n# Verify the image\nibmcloud cr images --restrict mcp-gw\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#3-create-ibm-kubernetes-service-iks-cluster","title":"3. Create IBM Kubernetes Service (IKS) Cluster","text":""},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#31-provision-the-cluster","title":"3.1. Provision the Cluster","text":"<pre><code># Get subnet IDs\nSUBNET_1=$(ibmcloud is subnets --output json | jq -r '.[] | select(.name==\"mcp-subnet-eu-de-1\") | .id')\nSUBNET_2=$(ibmcloud is subnets --output json | jq -r '.[] | select(.name==\"mcp-subnet-eu-de-2\") | .id')\nSUBNET_3=$(ibmcloud is subnets --output json | jq -r '.[] | select(.name==\"mcp-subnet-eu-de-3\") | .id')\n\n# Create the cluster with HA across zones\nibmcloud ks cluster create vpc-gen2 \\\n  --name mcp-cluster \\\n  --vpc-id $(ibmcloud is vpc mcp-vpc --output json | jq -r '.id') \\\n  --subnet-id $SUBNET_1 \\\n  --subnet-id $SUBNET_2 \\\n  --subnet-id $SUBNET_3 \\\n  --flavor bx2.4x16 \\\n  --workers 1 \\\n  --zones eu-de-1,eu-de-2,eu-de-3 \\\n  --kms-instance $(ibmcloud resource service-instance mcp-kms --output json | jq -r '.[0].guid')\n</code></pre> <p>Cluster Provisioning Time</p> <p>Cluster creation takes 15-30 minutes. Monitor progress with: <pre><code>ibmcloud ks cluster get --cluster mcp-cluster\n</code></pre></p>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#32-configure-kubectl-access","title":"3.2. Configure kubectl Access","text":"<pre><code>ibmcloud ks cluster config --cluster mcp-cluster\nkubectl config current-context   # should display mcp-cluster\nkubectl get nodes                # verify nodes are Ready\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#33-enable-storage-classes","title":"3.3. Enable Storage Classes","text":"<pre><code># List available storage classes\nibmcloud ks storage ls --cluster mcp-cluster\n\n# Enable File Storage (for RWX volumes)\nibmcloud ks storage file enable --cluster mcp-cluster\n\n# Verify storage classes\nkubectl get sc\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#4-prepare-kubernetes-namespaces-and-rbac","title":"4. Prepare Kubernetes Namespaces and RBAC","text":"<pre><code># Create application namespace\nkubectl create namespace mcp\nkubectl label namespace mcp app=mcp-gateway environment=prod\n\n# Create Argo CD namespace\nkubectl create namespace argocd\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#41-optional-network-policies","title":"4.1. Optional Network Policies","text":"<pre><code>cat &lt;&lt;'EOF' | kubectl apply -n mcp -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-by-default\nspec:\n  podSelector: {}\n  policyTypes: [Ingress, Egress]\n  egress:\n  - to: []\n    ports:\n    - protocol: TCP\n      port: 53\n    - protocol: UDP\n      port: 53\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          name: kube-system\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    - namespaceSelector:\n        matchLabels:\n          name: argocd\nEOF\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#5-install-and-configure-argo-cd","title":"5. Install and Configure Argo CD","text":""},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#51-install-argo-cd-server","title":"5.1. Install Argo CD Server","text":"<pre><code>kubectl apply -n argocd \\\n  -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Wait for rollout to complete\nkubectl -n argocd rollout status deploy/argocd-server\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#52-initial-login-and-configuration","title":"5.2. Initial Login and Configuration","text":"<pre><code># Port forward Argo CD UI (run in background)\nkubectl -n argocd port-forward svc/argocd-server 8080:443 &amp;\n\n# Get initial admin password\nPASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret \\\n          -o jsonpath='{.data.password}' | base64 -d)\n\n# Login to Argo CD CLI\nargocd login localhost:8080 \\\n      --username admin --password \"$PASSWORD\" --insecure\n\necho \"Argo CD admin password: $PASSWORD\"\n</code></pre> <p>Change Default Password</p> <p>Browse to http://localhost:8080 and change the admin password via the UI.</p>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#6-configure-git-repository-structure","title":"6. Configure Git Repository Structure","text":""},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#61-create-argo-cd-application-definition","title":"6.1. Create Argo CD Application Definition","text":"<p>Create <code>argocd/apps/mcp-stack.yaml</code> in your Git repository:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: mcp-stack\n  namespace: argocd\n  finalizers:\n    - resources-finalizer.argocd.argoproj.io\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/IBM/mcp-context-forge\n    path: charts/mcp-stack\n    targetRevision: main\n    helm:\n      valueFiles:\n        - values.yaml\n        - envs/iks/values.yaml   # custom overrides\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: mcp\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n    - CreateNamespace=true\n    - PrunePropagationPolicy=foreground\n    - PruneLast=true\n  revisionHistoryLimit: 10\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#62-create-custom-values-override","title":"6.2. Create Custom Values Override","text":"<p>Create <code>charts/mcp-stack/envs/iks/values.yaml</code>:</p> <pre><code># MCP Gateway Configuration\nmcpContextForge:\n  replicaCount: 2\n\n  image:\n    repository: eu.icr.io/mcp-gw/mcpgateway\n    tag: \"0.6.0\"\n    pullPolicy: IfNotPresent\n\n  # Service configuration\n  service:\n    type: ClusterIP\n    port: 80\n    targetPort: 4444\n\n  # Ingress configuration\n  ingress:\n    enabled: true\n    className: \"public-iks-k8s-nginx\"\n    annotations:\n      kubernetes.io/ingress.class: \"public-iks-k8s-nginx\"\n      cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\n    hosts:\n      - host: mcp-gateway.&lt;CLUSTER_INGRESS_SUBDOMAIN&gt;\n        paths:\n          - path: /\n            pathType: Prefix\n    tls:\n      - secretName: mcp-gateway-tls\n        hosts:\n          - mcp-gateway.&lt;CLUSTER_INGRESS_SUBDOMAIN&gt;\n\n  # Environment variables\n  env:\n    - name: AUTH_REQUIRED\n      value: \"true\"\n    - name: HOST\n      value: \"0.0.0.0\"\n    - name: PORT\n      value: \"4444\"\n    - name: LOG_LEVEL\n      value: \"INFO\"\n    - name: CACHE_TYPE\n      value: \"redis\"\n    - name: FEDERATION_ENABLED\n      value: \"true\"\n\n  # Resource limits\n  resources:\n    limits:\n      cpu: 1000m\n      memory: 1Gi\n    requests:\n      cpu: 500m\n      memory: 512Mi\n\n  # Health checks\n  livenessProbe:\n    httpGet:\n      path: /health\n      port: http\n    initialDelaySeconds: 30\n    periodSeconds: 10\n\n  readinessProbe:\n    httpGet:\n      path: /health\n      port: http\n    initialDelaySeconds: 5\n    periodSeconds: 5\n\n  # Horizontal Pod Autoscaler\n  autoscaling:\n    enabled: true\n    minReplicas: 2\n    maxReplicas: 10\n    targetCPUUtilizationPercentage: 70\n    targetMemoryUtilizationPercentage: 80\n\n# PostgreSQL Configuration\npostgres:\n  enabled: true\n  auth:\n    username: mcpgateway\n    database: mcpgateway\n    existingSecret: postgres-secret\n\n  primary:\n    persistence:\n      enabled: true\n      storageClass: \"ibmc-vpc-block-metro-10iops-tier\"\n      size: 20Gi\n\n    resources:\n      limits:\n        cpu: 1000m\n        memory: 1Gi\n      requests:\n        cpu: 500m\n        memory: 512Mi\n\n# Redis Configuration\nredis:\n  enabled: true\n  auth:\n    enabled: true\n    existingSecret: redis-secret\n\n  master:\n    persistence:\n      enabled: true\n      storageClass: \"ibmc-vpc-block-metro-10iops-tier\"\n      size: 8Gi\n\n    resources:\n      limits:\n        cpu: 500m\n        memory: 512Mi\n      requests:\n        cpu: 250m\n        memory: 256Mi\n\n# RBAC\nrbac:\n  create: true\n\n# ServiceAccount\nserviceAccount:\n  create: true\n  annotations:\n    iks.ibm.com/pod-security-policy: \"ibm-privileged-psp\"\n\n# PodSecurityPolicy for IKS\npodSecurityContext:\n  runAsNonRoot: true\n  runAsUser: 1001\n  fsGroup: 1001\n\nsecurityContext:\n  allowPrivilegeEscalation: false\n  readOnlyRootFilesystem: true\n  runAsNonRoot: true\n  runAsUser: 1001\n  capabilities:\n    drop:\n    - ALL\n\n# Network Policy\nnetworkPolicy:\n  enabled: true\n  ingress:\n    - from:\n      - namespaceSelector:\n          matchLabels:\n            name: ingress-nginx\n      ports:\n      - protocol: TCP\n        port: 4444\n  egress:\n    - to: []\n      ports:\n      - protocol: TCP\n        port: 53\n      - protocol: UDP\n        port: 53\n    - to:\n      - namespaceSelector:\n          matchLabels:\n            name: kube-system\n</code></pre> <p>Replace Placeholder</p> <p>Replace <code>&lt;CLUSTER_INGRESS_SUBDOMAIN&gt;</code> with your actual cluster's ingress subdomain: <pre><code>ibmcloud ks cluster get --cluster mcp-cluster | grep \"Ingress Subdomain\"\n</code></pre></p>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#63-create-required-secrets","title":"6.3. Create Required Secrets","text":"<pre><code># Generate strong passwords\nPOSTGRES_PASSWORD=$(openssl rand -base64 32)\nREDIS_PASSWORD=$(openssl rand -base64 32)\nJWT_SECRET=$(openssl rand -hex 32)\nBASIC_AUTH_PASSWORD=$(openssl rand -base64 16)\n\n# Create PostgreSQL secret\nkubectl create secret generic postgres-secret -n mcp \\\n  --from-literal=postgres-password=\"$POSTGRES_PASSWORD\"\n\n# Create Redis secret\nkubectl create secret generic redis-secret -n mcp \\\n  --from-literal=redis-password=\"$REDIS_PASSWORD\"\n\n# Create MCP Gateway config\nkubectl create secret generic mcp-gateway-secret -n mcp \\\n  --from-literal=JWT_SECRET_KEY=\"$JWT_SECRET\" \\\n  --from-literal=BASIC_AUTH_PASSWORD=\"$BASIC_AUTH_PASSWORD\" \\\n  --from-literal=DATABASE_URL=\"postgresql://mcpgateway:$POSTGRES_PASSWORD@mcp-stack-postgres:5432/mcpgateway\" \\\n  --from-literal=REDIS_URL=\"redis://:$REDIS_PASSWORD@mcp-stack-redis:6379/0\"\n\n# Store passwords securely for later use\necho \"POSTGRES_PASSWORD=$POSTGRES_PASSWORD\" &gt;&gt; ~/mcp-credentials.env\necho \"REDIS_PASSWORD=$REDIS_PASSWORD\" &gt;&gt; ~/mcp-credentials.env\necho \"JWT_SECRET=$JWT_SECRET\" &gt;&gt; ~/mcp-credentials.env\necho \"BASIC_AUTH_PASSWORD=$BASIC_AUTH_PASSWORD\" &gt;&gt; ~/mcp-credentials.env\nchmod 600 ~/mcp-credentials.env\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#7-deploy-via-argo-cd","title":"7. Deploy via Argo CD","text":""},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#71-create-and-sync-the-application","title":"7.1. Create and Sync the Application","text":"<pre><code># Create the application\nargocd app create -f argocd/apps/mcp-stack.yaml\n\n# Sync the application\nargocd app sync mcp-stack\n\n# Wait for synchronization\nargocd app wait mcp-stack --health\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#72-verify-deployment","title":"7.2. Verify Deployment","text":"<pre><code># Check all resources in the mcp namespace\nkubectl get all -n mcp\n\n# Check pod logs\nkubectl logs -n mcp deployment/mcp-stack-mcpcontextforge -f\n\n# Check ingress\nkubectl get ingress -n mcp\n\n# Check persistent volumes\nkubectl get pv,pvc -n mcp\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#8-test-and-configure-mcp-gateway","title":"8. Test and Configure MCP Gateway","text":""},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#81-generate-api-token","title":"8.1. Generate API Token","text":"<pre><code># Generate JWT token for API access\nsource ~/mcp-credentials.env\nexport MCPGATEWAY_BEARER_TOKEN=$(kubectl exec -n mcp deployment/mcp-stack-mcpcontextforge -- \\\n  python3 -m mcpgateway.utils.create_jwt_token \\\n  --username admin --exp 0 --secret \"$JWT_SECRET\")\n\necho \"Bearer token: $MCPGATEWAY_BEARER_TOKEN\"\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#82-test-api-endpoints","title":"8.2. Test API Endpoints","text":"<pre><code># Get cluster ingress subdomain\nINGRESS_SUBDOMAIN=$(ibmcloud ks cluster get --cluster mcp-cluster --output json | jq -r '.ingressHostname')\nGATEWAY_URL=\"https://mcp-gateway.$INGRESS_SUBDOMAIN\"\n\n# Test health endpoint\ncurl -s \"$GATEWAY_URL/health\"\n\n# Test authenticated endpoints\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     \"$GATEWAY_URL/version\" | jq\n\ncurl -s -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     \"$GATEWAY_URL/tools\" | jq\n\n# Open admin UI\necho \"Admin UI: $GATEWAY_URL/admin\"\necho \"Username: admin\"\necho \"Password: $BASIC_AUTH_PASSWORD\"\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#83-add-mcp-servers","title":"8.3. Add MCP Servers","text":"<p>You can add MCP servers through the Admin UI or API:</p> <pre><code># Example: Add a time server via API\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"name\": \"time_server\",\n       \"url\": \"http://time-server:8000/sse\",\n       \"description\": \"Time utilities server\"\n     }' \\\n     \"$GATEWAY_URL/gateways\"\n\n# Create a virtual server with selected tools\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"name\": \"production_tools\",\n       \"description\": \"Production tool set\",\n       \"associatedTools\": [\"1\", \"2\"]\n     }' \\\n     \"$GATEWAY_URL/servers\"\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#9-configure-ai-clients","title":"9. Configure AI Clients","text":""},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#91-vs-code-copilot-integration","title":"9.1. VS Code Copilot Integration","text":"<p>Add this to your VS Code <code>settings.json</code>:</p> <pre><code>{\n  \"chat.mcp.enabled\": true,\n  \"mcp.servers\": {\n    \"mcp-gateway\": {\n      \"type\": \"sse\",\n      \"url\": \"https://mcp-gateway.&lt;CLUSTER_INGRESS_SUBDOMAIN&gt;/servers/UUID_OF_SERVER_1/sse\",\n      \"headers\": {\n        \"Authorization\": \"Bearer &lt;MCPGATEWAY_BEARER_TOKEN&gt;\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#92-claude-desktop-configuration","title":"9.2. Claude Desktop Configuration","text":"<p>Add to your Claude Desktop configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"mcp-gateway\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n      \"env\": {\n        \"MCP_AUTH\": \"&lt;MCPGATEWAY_BEARER_TOKEN&gt;\",\n        \"MCP_SERVER_URL\": \"https://mcp-gateway.&lt;CLUSTER_INGRESS_SUBDOMAIN&gt;/servers/UUID_OF_SERVER_1/mcp\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#93-langchain-agent-integration","title":"9.3. LangChain Agent Integration","text":"<pre><code>from mcpgateway_wrapper import MCPClient\n\nclient = MCPClient(\n    catalog_urls=[\"https://mcp-gateway.&lt;CLUSTER_INGRESS_SUBDOMAIN&gt;/servers/UUID_OF_SERVER_1\"],\n    token=\"&lt;MCPGATEWAY_BEARER_TOKEN&gt;\",\n)\n\n# List available tools\ntools = client.tools_list()\nprint(tools)\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#10-upgrade-and-database-migration","title":"10. Upgrade and Database Migration","text":""},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#101-rolling-upgrades","title":"10.1. Rolling Upgrades","text":"<p>Update the image tag in your values file and commit:</p> <pre><code># Update values file\nsed -i 's/tag: \"0.3.0\"/tag: \"0.6.0\"/' charts/mcp-stack/envs/iks/values.yaml\n\n# Commit and push\ngit add charts/mcp-stack/envs/iks/values.yaml\ngit commit -m \"Upgrade MCP Gateway to v0.6.0\"\ngit push\n\n# Argo CD will automatically sync the changes\nargocd app sync mcp-stack\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#102-monitor-migration","title":"10.2. Monitor Migration","text":"<pre><code># Watch the rollout\nkubectl rollout status deployment/mcp-stack-mcpcontextforge -n mcp\n\n# Check for migration jobs\nkubectl get jobs -n mcp\n\n# Follow migration logs if present\nkubectl logs -f job/mcp-stack-postgres-migrate -n mcp\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#11-operations-scaling-backup-security-logging-observability","title":"11. Operations: Scaling, Backup, Security, Logging, Observability","text":""},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#111-horizontal-pod-autoscaling","title":"11.1. Horizontal Pod Autoscaling","text":"<p>The HPA is configured automatically. Monitor it:</p> <pre><code>kubectl get hpa -n mcp\nkubectl describe hpa mcp-stack-mcpcontextforge -n mcp\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#112-manual-scaling","title":"11.2. Manual Scaling","text":"<pre><code># Scale replicas manually\nkubectl scale deployment mcp-stack-mcpcontextforge --replicas=5 -n mcp\n\n# Or update via Helm values\nhelm upgrade mcp-stack charts/mcp-stack -n mcp \\\n  --set mcpContextForge.replicaCount=5 \\\n  -f charts/mcp-stack/envs/iks/values.yaml\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#113-database-backup","title":"11.3. Database Backup","text":"<pre><code># Create a backup using IBM Cloud Snapshots\nibmcloud ks storage snapshot-create --cluster mcp-cluster \\\n  --pvc $(kubectl get pvc -n mcp -o jsonpath='{.items[0].metadata.name}') \\\n  --description \"MCP Gateway backup $(date +%Y%m%d)\"\n\n# List snapshots\nibmcloud ks storage snapshots --cluster mcp-cluster\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#114-monitoring-and-logs","title":"11.4. Monitoring and Logs","text":"<pre><code># View application logs\nkubectl logs -n mcp deployment/mcp-stack-mcpcontextforge -f\n\n# Check resource usage\nkubectl top pods -n mcp\nkubectl top nodes\n\n# Access IBM Cloud Logs\nibmcloud logs tail -r eu-de\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#115-grafana-dashboards","title":"11.5 Grafana Dashboards","text":"<p>TODO</p>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#12-database-migration-ibm-cloud-databases","title":"12. Database Migration: IBM Cloud Databases","text":""},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#121-provision-ibm-cloud-databases-for-postgresql","title":"12.1. Provision IBM Cloud Databases for PostgreSQL","text":"<pre><code># Create managed PostgreSQL instance\nibmcloud resource service-instance-create mcp-postgres \\\n    databases-for-postgresql standard eu-de \\\n    -p '{\"members_memory_allocation_mb\": 4096, \"members_disk_allocation_mb\": 10240}'\n\n# Create service credentials\nibmcloud resource service-key-create mcp-postgres-creds Administrator \\\n    --instance-name mcp-postgres\n\n# Get connection details\nibmcloud resource service-key mcp-postgres-creds --output json\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#122-database-migration-process","title":"12.2. Database Migration Process","text":"<pre><code># 1. Create backup of current database\nkubectl exec -n mcp deployment/mcp-stack-postgres -- \\\n  pg_dump -U mcpgateway mcpgateway &gt; /tmp/mcp-backup.sql\n\n# 2. Get managed database connection string\nCREDS=$(ibmcloud resource service-key mcp-postgres-creds --output json)\nHOST=$(echo \"$CREDS\" | jq -r '.[0].credentials.connection.postgres.hosts[0].hostname')\nPORT=$(echo \"$CREDS\" | jq -r '.[0].credentials.connection.postgres.hosts[0].port')\nUSER=$(echo \"$CREDS\" | jq -r '.[0].credentials.connection.postgres.authentication.username')\nPASS=$(echo \"$CREDS\" | jq -r '.[0].credentials.connection.postgres.authentication.password')\nDATABASE=$(echo \"$CREDS\" | jq -r '.[0].credentials.connection.postgres.database')\n\nMANAGED_DB_URL=\"postgresql://${USER}:${PASS}@${HOST}:${PORT}/${DATABASE}?sslmode=require\"\n\n# 3. Update database URL secret\nkubectl patch secret mcp-gateway-secret -n mcp \\\n  --patch=\"{\\\"data\\\":{\\\"DATABASE_URL\\\":\\\"$(echo -n \"$MANAGED_DB_URL\" | base64 -w 0)\\\"}}\"\n\n# 4. Update PostgreSQL settings in values\ncat &gt;&gt; charts/mcp-stack/envs/iks/values.yaml &lt;&lt; EOF\n\n# Disable embedded PostgreSQL\npostgres:\n  enabled: false\n\n# Use external database\nmcpContextForge:\n  env:\n    - name: DATABASE_URL\n      valueFrom:\n        secretKeyRef:\n          name: mcp-gateway-secret\n          key: DATABASE_URL\nEOF\n\n# 5. Commit and deploy\ngit add charts/mcp-stack/envs/iks/values.yaml\ngit commit -m \"Migrate to IBM Cloud Databases for PostgreSQL\"\ngit push\n\n# 6. Sync the application\nargocd app sync mcp-stack\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#123-setup-ibm-cloud-databases-for-redis","title":"12.3. Setup IBM Cloud Databases for Redis","text":"<pre><code># Create managed Redis instance\nibmcloud resource service-instance-create mcp-redis \\\n    databases-for-redis standard eu-de \\\n    -p '{\"members_memory_allocation_mb\": 1024}'\n\n# Create service credentials\nibmcloud resource service-key-create mcp-redis-creds Administrator \\\n    --instance-name mcp-redis\n\n# Get Redis connection details\nREDIS_CREDS=$(ibmcloud resource service-key mcp-redis-creds --output json)\nREDIS_HOST=$(echo \"$REDIS_CREDS\" | jq -r '.[0].credentials.connection.rediss.hosts[0].hostname')\nREDIS_PORT=$(echo \"$REDIS_CREDS\" | jq -r '.[0].credentials.connection.rediss.hosts[0].port')\nREDIS_PASS=$(echo \"$REDIS_CREDS\" | jq -r '.[0].credentials.connection.rediss.authentication.password')\n\nMANAGED_REDIS_URL=\"rediss://:${REDIS_PASS}@${REDIS_HOST}:${REDIS_PORT}/0\"\n\n# Update Redis URL secret\nkubectl patch secret mcp-gateway-secret -n mcp \\\n  --patch=\"{\\\"data\\\":{\\\"REDIS_URL\\\":\\\"$(echo -n \"$MANAGED_REDIS_URL\" | base64 -w 0)\\\"}}\"\n\n# Update values to disable embedded Redis\ncat &gt;&gt; charts/mcp-stack/envs/iks/values.yaml &lt;&lt; EOF\n\n# Disable embedded Redis\nredis:\n  enabled: false\nEOF\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#13-troubleshooting","title":"13. Troubleshooting","text":""},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#131-common-issues","title":"13.1. Common Issues","text":"<p>Pod ImagePullBackOff</p> <ul> <li>Verify image name and tag in values.yaml</li> <li>Check that worker nodes can reach ICR:   <pre><code>kubectl describe pod &lt;pod-name&gt; -n mcp\n</code></pre></li> <li>Ensure image exists in registry:   <pre><code>ibmcloud cr images --restrict mcp-gw\n</code></pre></li> </ul> <p>Ingress 404/502 Errors</p> <ul> <li>Verify ingress subdomain matches cluster:   <pre><code>ibmcloud ks cluster get --cluster mcp-cluster | grep \"Ingress\"\n</code></pre></li> <li>Check ingress controller status:   <pre><code>kubectl get pods -n kube-system | grep nginx\n</code></pre></li> </ul> <p>Argo CD Sync Failed</p> <ul> <li>Check application status:   <pre><code>argocd app get mcp-stack\n</code></pre></li> <li>View detailed sync errors:   <pre><code>kubectl describe application mcp-stack -n argocd\n</code></pre></li> </ul>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#132-resource-debugging","title":"13.2. Resource Debugging","text":"<pre><code># Check cluster capacity\nkubectl describe nodes\n\n# View resource usage\nkubectl top pods -n mcp\nkubectl top nodes\n\n# Check events\nkubectl get events -n mcp --sort-by='.lastTimestamp'\n\n# Debug pod issues\nkubectl describe pod &lt;pod-name&gt; -n mcp\nkubectl logs &lt;pod-name&gt; -n mcp --previous\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#133-network-troubleshooting","title":"13.3. Network Troubleshooting","text":"<pre><code># Test internal DNS resolution\nkubectl run -it --rm debug --image=busybox --restart=Never -- nslookup mcp-stack-postgres.mcp.svc.cluster.local\n\n# Test external connectivity\nkubectl run -it --rm debug --image=busybox --restart=Never -- wget -O- https://google.com\n\n# Check network policies\nkubectl get networkpolicy -n mcp\nkubectl describe networkpolicy deny-by-default -n mcp\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#14-performance-testing","title":"14. Performance Testing","text":"<p>Performance testing helps validate the stability, scalability, and responsiveness of the MCP Gateway under different workloads. This section outlines how to perform load tests using <code>hey</code> and how to inspect performance metrics.</p>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#141-run-basic-load-test-with-hey","title":"14.1. Run Basic Load Test with <code>hey</code>","text":"<p><code>hey</code> is a CLI load-testing tool for HTTP endpoints. You can use it to simulate traffic to the MCP Gateway's <code>/health</code> or <code>/version</code> endpoint:</p> <pre><code># Install hey (if not already installed)\nbrew install hey  # on macOS\ngo install github.com/rakyll/hey@latest  # if using Go\n\n# Run a basic test against the public health endpoint\nhey -z 30s -c 10 https://mcp-gateway.&lt;CLUSTER_INGRESS_SUBDOMAIN&gt;/health\n</code></pre> <p>Options explained:</p> <ul> <li><code>-z 30s</code>: Duration of test</li> <li><code>-c 10</code>: Number of concurrent connections</li> </ul> <p>For authenticated endpoints:</p> <pre><code># Replace with your actual token\nexport TOKEN=\"&lt;MCPGATEWAY_BEARER_TOKEN&gt;\"\n\n# Target authenticated endpoint\nhey -z 30s -c 10 \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  https://mcp-gateway.&lt;CLUSTER_INGRESS_SUBDOMAIN&gt;/version\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#142-analyze-gateway-performance","title":"14.2. Analyze Gateway Performance","text":"<p>Check metrics through Kubernetes and the API:</p> <pre><code># Observe resource usage\nkubectl top pods -n mcp\nkubectl top nodes\n\n# Inspect autoscaler activity\nkubectl get hpa -n mcp\nkubectl describe hpa mcp-stack-mcpcontextforge -n mcp\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#143-inspect-tool-level-metrics","title":"14.3. Inspect Tool-Level Metrics","text":"<p>Each tool invocation is tracked with:</p> <ul> <li>Response time (min/max/avg)</li> <li>Success/failure rate</li> <li>Total executions</li> </ul> <p>Fetch aggregated metrics from the API:</p> <pre><code>curl -H \"Authorization: Bearer $TOKEN\" \\\n     https://mcp-gateway.&lt;CLUSTER_INGRESS_SUBDOMAIN&gt;/metrics | jq\n</code></pre> <p>You can also inspect per-tool or per-server metrics via the Admin UI at:</p> <pre><code>https://mcp-gateway.&lt;CLUSTER_INGRESS_SUBDOMAIN&gt;/admin\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#144-advanced-stress-test-specific-tool","title":"14.4. Advanced: Stress Test Specific Tool","text":"<pre><code># Invoke a specific tool multiple times in parallel\nfor i in {1..50}; do\n  curl -s -H \"Authorization: Bearer $TOKEN\" \\\n       -X POST \\\n       -H \"Content-Type: application/json\" \\\n       -d '{\"name\":\"clock_tool\",\"arguments\":{\"timezone\":\"UTC\"}}' \\\n       https://mcp-gateway.&lt;CLUSTER_INGRESS_SUBDOMAIN&gt;/rpc &amp;\ndone\nwait\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#15-configuring-the-kubernetes-mcp-server","title":"15. Configuring the Kubernetes MCP Server","text":"<p>Run the Kubernetes MCP Server and add it to the gateway:</p> <pre><code>python3 -m mcpgateway.translate --stdio \"npx -y kubernetes-mcp-server@latest\" --expose-sse --port 8103\n</code></pre>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#16-faq","title":"16. FAQ","text":"<p>Q: How do I rotate the JWT secret without downtime? A: Update the secret and restart the MCP Gateway pods: <pre><code>NEW_JWT_SECRET=$(openssl rand -hex 32)\nkubectl patch secret mcp-gateway-secret -n mcp \\\n  --patch=\"{\\\"data\\\":{\\\"JWT_SECRET_KEY\\\":\\\"$(echo -n \"$NEW_JWT_SECRET\" | base64 -w 0)\\\"}}\"\nkubectl rollout restart deployment/mcp-stack-mcpcontextforge -n mcp\n</code></pre></p> <p>Q: Can I use custom storage classes? A: Yes, update the storageClass in your values.yaml: <pre><code>postgres:\n  primary:\n    persistence:\n      storageClass: \"your-custom-storage-class\"\n</code></pre></p> <p>Q: How do I enable TLS termination at the ingress? A: Install cert-manager and configure Let's Encrypt: <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml\n</code></pre></p> <p>Q: How do I backup the entire application? A: Use Velero for full cluster backups or create database dumps and store them in IBM Cloud Object Storage.</p> <p>\u2705 You now have a production-ready MCP Gateway stack on IBM Cloud Kubernetes Service with GitOps management, managed databases, and comprehensive observability!</p>"},{"location":"tutorials/argocd-helm-deployment-ibm-cloud-iks/#next-steps","title":"Next Steps","text":"<ol> <li>Set up monitoring: Deploy Prometheus and Grafana for detailed metrics</li> <li>Configure alerts: Set up IBM Cloud Monitoring alerts for critical metrics</li> <li>Implement CI/CD: Automate image builds and deployments with IBM Cloud Toolchain</li> <li>Scale across regions: Deploy additional clusters for global availability</li> <li>Security hardening: Implement pod security standards and network policies</li> </ol>"},{"location":"tutorials/openwebui-tutorial/","title":"OpenWebUI with Ollama, LiteLLM, MCPO, and MCP Gateway Deployment Guide","text":"<p>This guide provides a comprehensive walkthrough for deploying OpenWebUI with local LLM models via Ollama, integrated with MCP (Model Context Protocol) tools through MCPO and MCP Gateway.</p>"},{"location":"tutorials/openwebui-tutorial/#architecture-overview","title":"\ud83c\udfd7 Architecture Overview","text":"<p>This deployment creates a powerful AI assistant platform with local model hosting and extensible tool capabilities:</p> <pre><code>flowchart TD\n  %% User Interface\n  U[\ud83c\udf10 User Browser] --&gt;|HTTPS :443| OW\n\n  %% Core Components\n  subgraph \"OpenWebUI Deployment\"\n    OW[OpenWebUI Container \ud83d\udda5\ufe0f&lt;br/&gt;Web Interface]\n    LL[LiteLLM Proxy \ud83d\udd04&lt;br/&gt;Model Gateway&lt;br/&gt;Port 4000]\n    DB[PostgreSQL Database \ud83d\uddc4\ufe0f&lt;br/&gt;Port 5432]\n  end\n\n  %% Local AI Backend\n  subgraph \"Local AI Backend\"\n    OL[Ollama Server \ud83e\udd16&lt;br/&gt;Port 11434&lt;br/&gt;Local LLM Models]\n  end\n\n  %% MCP Integration Layer\n  subgraph \"MCP Integration\"\n    MCPO[MCPO Server \ud83d\udd0c&lt;br/&gt;Port 8000&lt;br/&gt;MCP \u2192 OpenAPI Bridge]\n    MCG[MCP Gateway \ud83d\udeaa&lt;br/&gt;Port 4444&lt;br/&gt;MCP Registry &amp; Federation]\n    MCP1[MCP Server 1 \ud83d\udce6]\n    MCP2[MCP Server 2 \ud83d\udce6]\n    MCPN[MCP Server N \ud83d\udce6]\n  end\n\n  %% External Services\n  subgraph \"External Services\"\n    OP[OAuth Provider \ud83d\udd10&lt;br/&gt;Port 443]\n  end\n\n  %% Connections\n  OW -.-&gt;|\"OAuth Login\"| OP\n  OW --&gt;|\"Model API Calls\"| LL\n  OW --&gt;|\"Tool API Calls\"| MCPO\n  OW --&gt;|\"DB Connection\"| DB\n\n  LL --&gt;|\"Model Requests\"| OL\n\n  MCPO --&gt;|\"Register &amp; Proxy\"| MCG\n  MCG --&gt;|\"MCP Protocol\"| MCP1\n  MCG --&gt;|\"MCP Protocol\"| MCP2\n  MCG --&gt;|\"MCP Protocol\"| MCPN\n\n  %% Styling\n  classDef deployment fill:#1F618D,stroke:#85C1E9,stroke-width:2px,color:#FFF;\n  classDef ai fill:#27AE60,stroke:#58D68D,stroke-width:2px,color:#FFF;\n  classDef mcp fill:#8E44AD,stroke:#BB8FCE,stroke-width:2px,color:#FFF;\n  classDef external fill:#E74C3C,stroke:#F5B7B1,stroke-width:2px,color:#FFF;\n\n  class OW,LL,DB deployment;\n  class OL ai;\n  class MCPO,MCG,MCP1,MCP2,MCPN mcp;\n  class OP external;</code></pre>"},{"location":"tutorials/openwebui-tutorial/#components-overview","title":"Components Overview","text":"<ol> <li>OpenWebUI: Feature-rich web interface for AI interactions</li> <li>Ollama: Local LLM runtime supporting various models (Llama, Mistral, Granite, etc.)</li> <li>LiteLLM: Unified proxy providing OpenAI-compatible API for multiple model backends</li> <li>MCPO: Bridges MCP servers to OpenAPI, making tools accessible to OpenWebUI</li> <li>MCP Gateway: Central registry and federation point for MCP servers</li> <li>PostgreSQL: Persistent storage for OpenWebUI data</li> </ol>"},{"location":"tutorials/openwebui-tutorial/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>Operating System: Linux, macOS, or Windows with WSL2</li> <li>Docker/Podman: Container runtime installed and running</li> <li>Python 3.8+: For running MCPO and MCP tools</li> <li>8GB+ RAM: Recommended for running local models</li> <li>20GB+ Storage: For model files and data</li> </ul>"},{"location":"tutorials/openwebui-tutorial/#deployment-steps","title":"\ud83d\ude80 Deployment Steps","text":""},{"location":"tutorials/openwebui-tutorial/#step-1-postgresql-database-setup","title":"Step 1: PostgreSQL Database Setup","text":"<p>First, set up a PostgreSQL database for OpenWebUI's persistent storage:</p> <pre><code># Create a Docker network for service communication\ndocker network create openwebui-net\n\n# Run PostgreSQL container\ndocker run -d \\\n  --name postgres \\\n  --network openwebui-net \\\n  -e POSTGRES_DB=openwebui \\\n  -e POSTGRES_USER=openwebui \\\n  -e POSTGRES_PASSWORD=changeme \\\n  -v postgres_data:/var/lib/postgresql/data \\\n  -p 5432:5432 \\\n  postgres:15-alpine\n\n# Verify PostgreSQL is running\ndocker logs postgres\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#step-2-install-and-configure-ollama","title":"Step 2: Install and Configure Ollama","text":""},{"location":"tutorials/openwebui-tutorial/#21-install-ollama","title":"2.1 Install Ollama","text":"<p>Important: Install Ollama on the host system, not in a container or WSL2.</p> <pre><code># Universal installer for macOS/Linux\ncurl -fsSL https://ollama.com/install.sh | sh\n\n# For Windows, download from: https://ollama.com/download\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#22-pull-ai-models","title":"2.2 Pull AI Models","text":"<pre><code># Pull IBM Granite model (recommended)\nollama pull granite3.3\n\n# Alternative smaller model for lower-end hardware\nollama pull granite3.3:2b\n\n# Pull additional models as needed\nollama pull llama3.2\nollama pull mistral\n\n# List installed models\nollama list\n\n# Test model\nollama run granite3.3 \"Hello, how are you?\"\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#23-configure-ollama-for-network-access","title":"2.3 Configure Ollama for Network Access","text":"<p>By default, Ollama only listens on localhost. To make it accessible to containers:</p> <pre><code># Linux/macOS: Edit systemd service\nsudo systemctl edit ollama.service\n\n# Add these lines:\n[Service]\nEnvironment=\"OLLAMA_HOST=0.0.0.0\"\n\n# Restart Ollama\nsudo systemctl restart ollama\n\n# Verify it's listening on all interfaces\ncurl http://localhost:11434/api/tags\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#step-3-deploy-litellm-proxy","title":"Step 3: Deploy LiteLLM Proxy","text":"<p>LiteLLM provides an OpenAI-compatible API interface for Ollama models:</p> <pre><code># Create LiteLLM configuration\ncat &gt; litellm_config.yaml &lt;&lt;EOF\nmodel_list:\n  - model_name: granite\n    litellm_params:\n      model: ollama/granite3.3\n      api_base: http://host.docker.internal:11434\n  - model_name: llama\n    litellm_params:\n      model: ollama/llama3.2\n      api_base: http://host.docker.internal:11434\n  - model_name: mistral\n    litellm_params:\n      model: ollama/mistral\n      api_base: http://host.docker.internal:11434\n\ngeneral_settings:\n  master_key: \"sk-1234567890\"  # Change this!\n  database_url: \"postgresql://openwebui:changeme@postgres:5432/litellm\"\nEOF\n\n# Run LiteLLM container\ndocker run -d \\\n  --name litellm \\\n  --network openwebui-net \\\n  -v $(pwd)/litellm_config.yaml:/app/config.yaml \\\n  -p 4000:4000 \\\n  ghcr.io/berriai/litellm:main \\\n  --config /app/config.yaml \\\n  --detailed_debug\n\n# Test LiteLLM\ncurl http://localhost:4000/v1/models \\\n  -H \"Authorization: Bearer sk-1234567890\"\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#step-4-set-up-mcp-gateway","title":"Step 4: Set Up MCP Gateway","text":"<p>Deploy the MCP Gateway (ContextForge) for managing MCP servers:</p> <pre><code># Create data directory\nmkdir -p $(pwd)/mcpgateway_data\n\n# Run MCP Gateway\ndocker run -d \\\n  --name mcpgateway \\\n  --network openwebui-net \\\n  -p 4444:4444 \\\n  -v $(pwd)/mcpgateway_data:/data \\\n  -e MCPGATEWAY_UI_ENABLED=true \\\n  -e MCPGATEWAY_ADMIN_API_ENABLED=true \\\n  -e DATABASE_URL=sqlite:////data/mcp.db \\\n  -e HOST=0.0.0.0 \\\n  -e JWT_SECRET_KEY=your-secret-key \\\n  -e BASIC_AUTH_USER=admin \\\n  -e BASIC_AUTH_PASSWORD=changeme \\\n  -e AUTH_REQUIRED=true \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n\n# Generate an API token for later use\ndocker exec mcpgateway \\\n  python3 -m mcpgateway.utils.create_jwt_token \\\n  --username admin --exp 0 --secret your-secret-key\n</code></pre> <p>Access the MCP Gateway UI at http://localhost:4444/admin (admin/changeme).</p>"},{"location":"tutorials/openwebui-tutorial/#step-5-deploy-mcpo","title":"Step 5: Deploy MCPO","text":"<p>MCPO exposes MCP servers as OpenAPI-compatible endpoints:</p> <pre><code># Install MCPO using UV (recommended)\npip install uv\nuvx mcpo --version\n\n# Or install with pip\npip install mcpo\n\n# Create MCPO configuration\ncat &gt; mcpo_config.json &lt;&lt;EOF\n{\n  \"mcpServers\": {\n    \"time\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-time\", \"--local-timezone=America/New_York\"]\n    },\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/tmp\"]\n    },\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\nEOF\n\n# Run MCPO with configuration\nuvx mcpo \\\n  --port 8000 \\\n  --api-key \"mcpo-secret-key\" \\\n  --config mcpo_config.json\n\n# Test MCPO endpoints\ncurl http://localhost:8000/docs\ncurl http://localhost:8000/time/docs\ncurl -H \"Authorization: Bearer mcpo-secret-key\" \\\n  http://localhost:8000/time/list-tools\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#step-6-deploy-openwebui","title":"Step 6: Deploy OpenWebUI","text":"<p>Now deploy OpenWebUI with all integrations configured:</p> <pre><code># Create OpenWebUI environment file\ncat &gt; openwebui.env &lt;&lt;EOF\n# Database\nDATABASE_URL=postgresql://openwebui:changeme@postgres:5432/openwebui\n\n# OAuth (optional - adjust for your provider)\nENABLE_OAUTH_SIGNUP=false\nENABLE_SIGNUP=true\nWEBUI_AUTH=true\n\n# Model Backend (LiteLLM)\nOPENAI_API_BASE_URL=http://litellm:4000/v1\nOPENAI_API_KEY=sk-1234567890\n\n# UI Settings\nWEBUI_NAME=AI Assistant Platform\nDEFAULT_MODELS=granite,llama,mistral\n\n# MCP Tools URL (via MCPO)\nTOOLS_FUNCTION_CALLING_PROMPT=\"Use available tools to assist with user requests\"\nEOF\n\n# Run OpenWebUI\ndocker run -d \\\n  --name openwebui \\\n  --network openwebui-net \\\n  --env-file openwebui.env \\\n  -p 3000:8080 \\\n  -v openwebui_data:/app/backend/data \\\n  --restart always \\\n  ghcr.io/open-webui/open-webui:latest\n\n# Check logs\ndocker logs -f openwebui\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"tutorials/openwebui-tutorial/#61-configure-openwebui-model-connection","title":"6.1 Configure OpenWebUI Model Connection","text":"<ol> <li>Access OpenWebUI at http://localhost:3000</li> <li>Create an admin account on first login</li> <li>Navigate to Settings \u2192 Connections</li> <li>Verify the OpenAI connection is configured:</li> <li>API Base URL: <code>http://litellm:4000/v1</code></li> <li>API Key: <code>sk-1234567890</code></li> </ol>"},{"location":"tutorials/openwebui-tutorial/#62-register-mcp-tools-in-openwebui","title":"6.2 Register MCP Tools in OpenWebUI","text":"<ol> <li>Go to Settings \u2192 Tools</li> <li>Click Add Tool Server</li> <li>Add MCPO endpoints:    <pre><code>Name: MCP Time Tool\nURL: http://host.docker.internal:8000/time\nAPI Key: mcpo-secret-key\n</code></pre></li> <li>Repeat for other MCPO tools (filesystem, memory, etc.)</li> </ol>"},{"location":"tutorials/openwebui-tutorial/#63-enable-tools-for-models","title":"6.3 Enable Tools for Models","text":"<ol> <li>Navigate to Workspace \u2192 Models</li> <li>Edit each model (granite, llama, mistral)</li> <li>Scroll to Tools section</li> <li>Toggle on the MCP tools you want available</li> <li>Click Save</li> </ol>"},{"location":"tutorials/openwebui-tutorial/#64-add-mcp-servers-to-gateway","title":"6.4 Add MCP Servers to Gateway","text":"<ol> <li>Access MCP Gateway at http://localhost:4444/admin</li> <li>Navigate to Gateways tab</li> <li>Click Add Gateway to register external MCP servers</li> <li>Example configuration:    <pre><code>Name: Local MCP Time Server\nURL: http://host.docker.internal:8000/time\nAuth Type: Bearer Token\nToken: mcpo-secret-key\n</code></pre></li> </ol>"},{"location":"tutorials/openwebui-tutorial/#testing-the-integration","title":"\ud83e\uddea Testing the Integration","text":""},{"location":"tutorials/openwebui-tutorial/#test-1-model-connectivity","title":"Test 1: Model Connectivity","text":"<pre><code># Test LiteLLM is serving models\ncurl -X POST http://localhost:4000/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer sk-1234567890\" \\\n  -d '{\n    \"model\": \"granite\",\n    \"messages\": [{\"role\": \"user\", \"content\": \"Hello!\"}]\n  }'\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#test-2-mcp-tool-invocation","title":"Test 2: MCP Tool Invocation","text":"<p>In OpenWebUI chat: 1. Enable the time tool by clicking the \u2795 icon 2. Ask: \"What's the current time in New York?\" 3. The assistant should use the MCP time tool to respond</p>"},{"location":"tutorials/openwebui-tutorial/#test-3-multi-tool-workflow","title":"Test 3: Multi-Tool Workflow","text":"<p>Try complex queries that require multiple tools: - \"Save a note about today's meeting at 3 PM EST\" - \"What files are in the /tmp directory?\"</p>"},{"location":"tutorials/openwebui-tutorial/#advanced-configuration","title":"\ud83d\udd27 Advanced Configuration","text":""},{"location":"tutorials/openwebui-tutorial/#adding-custom-mcp-servers","title":"Adding Custom MCP Servers","text":"<ol> <li> <p>Install any MCP server:    <pre><code>npm install -g @your-org/mcp-server-custom\n</code></pre></p> </li> <li> <p>Add to MCPO config:    <pre><code>{\n  \"mcpServers\": {\n    \"custom\": {\n      \"command\": \"mcp-server-custom\",\n      \"args\": [\"--option\", \"value\"]\n    }\n  }\n}\n</code></pre></p> </li> <li> <p>Restart MCPO and register in OpenWebUI</p> </li> </ol>"},{"location":"tutorials/openwebui-tutorial/#using-functions-and-filters","title":"Using Functions and Filters","text":"<p>OpenWebUI supports custom functions for extending capabilities:</p> <ol> <li>Go to Settings \u2192 Functions</li> <li>Enable built-in functions or import custom ones</li> <li>Functions can:</li> <li>Act as custom models (Pipe Functions)</li> <li>Modify inputs/outputs (Filter Functions)</li> <li>Add action buttons (Action Functions)</li> </ol>"},{"location":"tutorials/openwebui-tutorial/#performance-tuning","title":"Performance Tuning","text":"<p>For production deployments:</p> <pre><code># litellm_config.yaml additions\ngeneral_settings:\n  max_parallel_requests: 100\n  request_timeout: 600\n  stream_timeout: 60\n\nrouter_settings:\n  routing_strategy: \"usage-based-routing\"\n  redis_host: \"redis\"\n  redis_port: 6379\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#monitoring-and-maintenance","title":"\ud83d\udcca Monitoring and Maintenance","text":""},{"location":"tutorials/openwebui-tutorial/#container-health-checks","title":"Container Health Checks","text":"<pre><code># Check all containers\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n\n# View logs\ndocker logs --tail 50 -f openwebui\ndocker logs --tail 50 -f litellm\ndocker logs --tail 50 -f mcpgateway\n\n# Resource usage\ndocker stats\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#backup-and-restore","title":"Backup and Restore","text":"<pre><code># Backup PostgreSQL\ndocker exec postgres pg_dump -U openwebui openwebui &gt; backup.sql\n\n# Backup volumes\ndocker run --rm -v postgres_data:/data -v $(pwd):/backup \\\n  alpine tar czf /backup/postgres_backup.tar.gz -C /data .\n\n# Restore PostgreSQL\ndocker exec -i postgres psql -U openwebui openwebui &lt; backup.sql\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"tutorials/openwebui-tutorial/#common-issues","title":"Common Issues","text":"<p>1. Models not appearing in OpenWebUI - Check Ollama is running: <code>curl http://localhost:11434/api/tags</code> - Verify LiteLLM can reach Ollama: <code>docker logs litellm</code> - Ensure model names match in litellm_config.yaml</p> <p>2. MCP tools not working - Verify MCPO is running: <code>curl http://localhost:8000/docs</code> - Check tool registration in OpenWebUI settings - Ensure tools are enabled for the model</p> <p>3. Container connectivity issues - Use <code>host.docker.internal</code> for host access from containers - Ensure all containers are on the same network - Check firewall rules</p>"},{"location":"tutorials/openwebui-tutorial/#debug-commands","title":"Debug Commands","text":"<pre><code># Test inter-container connectivity\ndocker exec openwebui ping postgres\ndocker exec openwebui curl http://litellm:4000/health\n\n# Check MCPO tool availability\ncurl -H \"Authorization: Bearer mcpo-secret-key\" \\\n  http://localhost:8000/{tool-name}/list-tools\n\n# Verify MCP Gateway\ncurl -H \"Authorization: Bearer $(cat mcpgateway_token.txt)\" \\\n  http://localhost:4444/tools\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<ol> <li>Add More Models: Explore Ollama's model library</li> <li>Integrate More MCP Servers: Browse MCP servers directory</li> <li>Customize UI: Modify OpenWebUI themes and settings</li> <li>Set Up Authentication: Configure OAuth for production use</li> <li>Enable Web Search: Add search capabilities to models</li> <li>Document Indexing: Set up RAG with document collections</li> </ol>"},{"location":"tutorials/openwebui-tutorial/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>OpenWebUI Documentation</li> <li>Ollama Documentation</li> <li>LiteLLM Documentation</li> <li>MCPO Documentation</li> <li>MCP Gateway Documentation</li> <li>Model Context Protocol Spec</li> </ul>"},{"location":"tutorials/openwebui-tutorial/#docker-compose-deployment","title":"\ud83d\udc33 Docker Compose Deployment","text":"<p>For easier management, use Docker Compose:</p> <pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_DB: openwebui\n      POSTGRES_USER: openwebui\n      POSTGRES_PASSWORD: changeme\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    networks:\n      - openwebui-net\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U openwebui\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  litellm:\n    image: ghcr.io/berriai/litellm:main\n    command: --config /app/config.yaml --detailed_debug\n    volumes:\n      - ./litellm_config.yaml:/app/config.yaml\n    ports:\n      - \"4000:4000\"\n    networks:\n      - openwebui-net\n    depends_on:\n      postgres:\n        condition: service_healthy\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n\n  mcpgateway:\n    image: ghcr.io/ibm/mcp-context-forge:0.6.0\n    environment:\n      MCPGATEWAY_UI_ENABLED: \"true\"\n      MCPGATEWAY_ADMIN_API_ENABLED: \"true\"\n      DATABASE_URL: \"sqlite:////data/mcp.db\"\n      HOST: \"0.0.0.0\"\n      JWT_SECRET_KEY: \"your-secret-key\"\n      BASIC_AUTH_USER: \"admin\"\n      BASIC_AUTH_PASSWORD: \"changeme\"\n      AUTH_REQUIRED: \"true\"\n    volumes:\n      - mcpgateway_data:/data\n    ports:\n      - \"4444:4444\"\n    networks:\n      - openwebui-net\n\n  openwebui:\n    image: ghcr.io/open-webui/open-webui:latest\n    env_file:\n      - openwebui.env\n    ports:\n      - \"3000:8080\"\n    volumes:\n      - openwebui_data:/app/backend/data\n    networks:\n      - openwebui-net\n    depends_on:\n      - postgres\n      - litellm\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n\nvolumes:\n  postgres_data:\n  mcpgateway_data:\n  openwebui_data:\n\nnetworks:\n  openwebui-net:\n    driver: bridge\n</code></pre> <p>Deploy with: <pre><code>docker-compose up -d\ndocker-compose logs -f\n</code></pre></p>"},{"location":"tutorials/openwebui-tutorial/#security-best-practices","title":"\ud83d\udd12 Security Best Practices","text":""},{"location":"tutorials/openwebui-tutorial/#1-use-strong-secrets","title":"1. Use Strong Secrets","text":"<pre><code># Generate secure tokens\nopenssl rand -hex 32  # For JWT secrets\nopenssl rand -base64 32  # For API keys\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#2-enable-https","title":"2. Enable HTTPS","text":"<p>For production, use a reverse proxy with SSL:</p> <pre><code>server {\n    listen 443 ssl http2;\n    server_name your-domain.com;\n\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#3-network-isolation","title":"3. Network Isolation","text":"<pre><code># docker-compose.yml addition\nservices:\n  openwebui:\n    networks:\n      - frontend\n      - backend\n\nnetworks:\n  frontend:\n    driver: bridge\n  backend:\n    driver: bridge\n    internal: true\n</code></pre>"},{"location":"tutorials/openwebui-tutorial/#4-resource-limits","title":"4. Resource Limits","text":"<pre><code>services:\n  openwebui:\n    deploy:\n      resources:\n        limits:\n          cpus: '2'\n          memory: 4G\n        reservations:\n          cpus: '1'\n          memory: 2G\n</code></pre>"},{"location":"using/","title":"Using MCP Gateway","text":"<p>This section focuses on how to use MCP Gateway effectively as a developer, integrator, or end user.</p>"},{"location":"using/#typical-use-cases","title":"\ud83d\udc68\ud83d\udcbb Typical Use Cases","text":"<ul> <li>You want to expose tools, prompts, or resources via MCP.</li> <li>You want to use <code>mcpgateway-wrapper</code> to connect to any MCP Gateway service using <code>stdio</code>, while still supporting authentication to the gateway.</li> <li>You're building a client or agent framework that speaks the MCP protocol.</li> <li>You want to consume Gateway APIs from an LLM agent, browser app, or CLI tool.</li> </ul>"},{"location":"using/#what-youll-find-in-this-section","title":"\ud83d\udcda What You'll Find in This Section","text":"Page Description Tool Annotations Configure behavior hints for tools (safety, idempotency, etc.) mcpgateway-wrapper Wrap CLI tools or subprocesses to expose them via SSE/stdio Clients Compatible UIs and developer tools Agents LangChain, LangGraph, CrewAI, and other frameworks"},{"location":"using/#authentication-reminder","title":"\ud83d\udd11 Authentication Reminder","text":"<p>All Gateway usage requires authentication unless <code>AUTH_REQUIRED=false</code>. Refer to:</p> <pre><code>curl -H \"Authorization: Bearer $TOKEN\" http://localhost:4444/tools\n</code></pre> <p>Or use Basic Auth for the Admin UI and <code>/admin</code> routes.</p>"},{"location":"using/mcpgateway-translate/","title":"MCP Gateway Transport Bridge (<code>mcpgateway.translate</code>)","text":"<p><code>mcpgateway.translate</code> is a powerful command-line tool that bridges Model Context Protocol (MCP) servers across different transport protocols. It enables seamless communication between stdio/JSON-RPC, HTTP/SSE, and streamable HTTP protocols, making MCP servers accessible from various clients and environments.</p>"},{"location":"using/mcpgateway-translate/#overview","title":"Overview","text":"<p>The transport bridge solves a common problem in MCP deployments: protocol incompatibility. Many MCP servers communicate via stdio (standard input/output), while web applications need HTTP-based protocols. This tool provides bidirectional bridging between:</p> <ul> <li>Standard I/O (stdio): Traditional command-line MCP servers</li> <li>Server-Sent Events (SSE): Real-time streaming for web browsers</li> <li>Streamable HTTP: Modern HTTP-based MCP protocol with session management</li> </ul>"},{"location":"using/mcpgateway-translate/#transport-modes","title":"Transport Modes","text":""},{"location":"using/mcpgateway-translate/#1-stdio-sse","title":"1. StdIO \u2192 SSE","text":"<p>Expose a local stdio-based MCP server over HTTP with Server-Sent Events.</p> <p>Use case: Making command-line MCP servers accessible to web browsers.</p> <pre><code>python3 -m mcpgateway.translate \\\n  --stdio \"uvx mcp-server-git\" \\\n  --expose-sse \\\n  --port 9000\n</code></pre> <p>Endpoints: - <code>GET /sse</code> - SSE stream for receiving messages - <code>POST /message</code> - Send JSON-RPC requests - <code>GET /healthz</code> - Health check</p>"},{"location":"using/mcpgateway-translate/#2-sse-stdio","title":"2. SSE \u2192 StdIO","text":"<p>Connect to a remote SSE endpoint and bridge to local stdio process.</p> <p>Use case: Integrating remote MCP servers with local CLI tools.</p> <pre><code>python3 -m mcpgateway.translate \\\n  --connect-sse \"https://api.example.com/sse\" \\\n  --stdioCommand \"uvx mcp-client\" \\\n  --oauth2Bearer \"your-token\"\n</code></pre>"},{"location":"using/mcpgateway-translate/#3-stdio-streamable-http","title":"3. StdIO \u2192 Streamable HTTP","text":"<p>Expose a local stdio MCP server via the streamable HTTP protocol.</p> <p>Use case: Modern HTTP API with session management and flexible response modes.</p> <pre><code># Stateful mode with SSE streaming\npython3 -m mcpgateway.translate \\\n  --stdio \"uvx mcp-server-filesystem\" \\\n  --expose-streamable-http \\\n  --port 9000\n\n# Stateless mode with JSON responses\npython3 -m mcpgateway.translate \\\n  --stdio \"uvx mcp-server-git\" \\\n  --expose-streamable-http \\\n  --port 9000 \\\n  --stateless \\\n  --jsonResponse\n</code></pre> <p>Endpoints: - <code>POST /mcp</code> - Handle MCP requests - <code>GET /mcp</code> - SSE stream (when not in JSON response mode) - <code>GET /healthz</code> - Health check</p>"},{"location":"using/mcpgateway-translate/#4-streamable-http-stdio","title":"4. Streamable HTTP \u2192 StdIO","text":"<p>Bridge a remote streamable HTTP endpoint to local stdio.</p> <p>Use case: Connecting cloud-hosted MCP servers to local development tools.</p> <pre><code>python3 -m mcpgateway.translate \\\n  --connect-streamable-http \"https://api.example.com/mcp\" \\\n  --stdioCommand \"uvx mcp-client\" \\\n  --oauth2Bearer \"your-token\"\n</code></pre>"},{"location":"using/mcpgateway-translate/#5-multi-protocol-server-new","title":"5. Multi-Protocol Server (New!)","text":"<p>Expose a single stdio server via multiple protocols simultaneously.</p> <p>Use case: Maximum compatibility - different clients can connect using their preferred protocol.</p> <pre><code># Expose via both SSE and Streamable HTTP\npython3 -m mcpgateway.translate \\\n  --stdio \"uvx mcp-server-time\" \\\n  --expose-sse \\\n  --expose-streamable-http \\\n  --port 9000\n</code></pre>"},{"location":"using/mcpgateway-translate/#features","title":"Features","text":"Feature Description Multi-protocol bridging Seamlessly convert between stdio, SSE, and streamable HTTP Bidirectional communication Full duplex message flow in all modes Session management Stateful sessions with event replay (streamable HTTP) Flexible response modes Choose between SSE streams or JSON responses Keep-alive support Automatic keepalive frames prevent connection timeouts CORS configuration Enable cross-origin requests for web applications Authentication OAuth2 Bearer token support for secure connections Health monitoring Built-in health check endpoint for container orchestration Graceful shutdown Clean process termination on SIGINT/SIGTERM Retry logic Automatic reconnection with exponential backoff"},{"location":"using/mcpgateway-translate/#installation","title":"Installation","text":"<pre><code># Install from PyPI\npip install mcp-contextforge-gateway\n</code></pre>"},{"location":"using/mcpgateway-translate/#command-line-reference","title":"Command-Line Reference","text":""},{"location":"using/mcpgateway-translate/#basic-syntax","title":"Basic Syntax","text":"<pre><code>python3 -m mcpgateway.translate [TRANSPORT] [OPTIONS]\n</code></pre>"},{"location":"using/mcpgateway-translate/#transport-options","title":"Transport Options","text":""},{"location":"using/mcpgateway-translate/#local-server-stdio","title":"Local Server (stdio)","text":""},{"location":"using/mcpgateway-translate/#-stdio-command","title":"<code>--stdio &lt;command&gt;</code>","text":"<p>Start a local process that communicates via stdio.</p> <p>Example: <code>--stdio \"uvx mcp-server-git\"</code></p>"},{"location":"using/mcpgateway-translate/#exposure-options-use-with-stdio","title":"Exposure Options (use with \u2013stdio)","text":""},{"location":"using/mcpgateway-translate/#-expose-sse","title":"<code>--expose-sse</code>","text":"<p>Expose the stdio server via Server-Sent Events protocol.</p>"},{"location":"using/mcpgateway-translate/#-expose-streamable-http","title":"<code>--expose-streamable-http</code>","text":"<p>Expose the stdio server via streamable HTTP protocol.</p> <p>Note: You can use both <code>--expose-sse</code> and <code>--expose-streamable-http</code> together to expose via multiple protocols simultaneously.</p>"},{"location":"using/mcpgateway-translate/#remote-connection-options","title":"Remote Connection Options","text":""},{"location":"using/mcpgateway-translate/#-connect-sse-url","title":"<code>--connect-sse &lt;url&gt;</code>","text":"<p>Connect to a remote SSE endpoint.</p> <p>Example: <code>--connect-sse \"https://api.example.com/sse\"</code></p>"},{"location":"using/mcpgateway-translate/#-connect-streamable-http-url","title":"<code>--connect-streamable-http &lt;url&gt;</code>","text":"<p>Connect to a remote streamable HTTP endpoint.</p> <p>Example: <code>--connect-streamable-http \"https://api.example.com/mcp\"</code></p>"},{"location":"using/mcpgateway-translate/#configuration-options","title":"Configuration Options","text":"Option Description Default <code>--port &lt;number&gt;</code> HTTP server port (local modes) 8000 <code>--host &lt;address&gt;</code> Bind address (local modes) 127.0.0.1 <code>--cors &lt;origins...&gt;</code> CORS allowed origins (space-separated) None <code>--oauth2Bearer &lt;token&gt;</code> Bearer token for remote authentication None <code>--logLevel &lt;level&gt;</code> Logging verbosity (debug/info/warning/error/critical) info <code>--stdioCommand &lt;command&gt;</code> Local command for remote\u2192stdio bridging None"},{"location":"using/mcpgateway-translate/#streamable-http-options","title":"Streamable HTTP Options","text":"Option Description Default <code>--stateless</code> Use stateless mode (no session management) False <code>--jsonResponse</code> Return JSON instead of SSE streams False"},{"location":"using/mcpgateway-translate/#sse-options","title":"SSE Options","text":"Option Description Default <code>--ssePath &lt;path&gt;</code> SSE endpoint path /sse <code>--messagePath &lt;path&gt;</code> Message POST endpoint path /message <code>--keepAlive &lt;seconds&gt;</code> Keepalive interval 30"},{"location":"using/mcpgateway-translate/#api-documentation","title":"API Documentation","text":""},{"location":"using/mcpgateway-translate/#sse-mode-endpoints","title":"SSE Mode Endpoints","text":""},{"location":"using/mcpgateway-translate/#get-sse","title":"<code>GET /sse</code>","text":"<p>Establishes an SSE connection for receiving MCP messages.</p> <p>Response: Server-Sent Events stream</p> <p>Events: - <code>endpoint</code>: Initial bootstrap with unique message URL - <code>message</code>: JSON-RPC responses from the MCP server - <code>keepalive</code>: Periodic keepalive signals</p> <p>Example: <pre><code>const evtSource = new EventSource('http://localhost:9000/sse');\nevtSource.addEventListener('message', (event) =&gt; {\n  const response = JSON.parse(event.data);\n  console.log('MCP Response:', response);\n});\n</code></pre></p>"},{"location":"using/mcpgateway-translate/#post-message","title":"<code>POST /message</code>","text":"<p>Send JSON-RPC requests to the MCP server.</p> <p>Request: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/list\",\n  \"params\": {}\n}\n</code></pre></p> <p>Response: 202 Accepted or 400 Bad Request</p>"},{"location":"using/mcpgateway-translate/#streamable-http-mode-endpoints","title":"Streamable HTTP Mode Endpoints","text":""},{"location":"using/mcpgateway-translate/#post-mcp","title":"<code>POST /mcp</code>","text":"<p>Handle MCP protocol requests.</p> <p>Stateless Mode Request: <pre><code>curl -X POST http://localhost:9000/mcp \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{...}}'\n</code></pre></p> <p>Stateful Mode: Includes session management headers</p>"},{"location":"using/mcpgateway-translate/#get-mcp","title":"<code>GET /mcp</code>","text":"<p>Establish SSE stream for stateful sessions (when not using JSON response mode).</p>"},{"location":"using/mcpgateway-translate/#common-endpoints","title":"Common Endpoints","text":""},{"location":"using/mcpgateway-translate/#get-healthz","title":"<code>GET /healthz</code>","text":"<p>Health check endpoint for monitoring and orchestration.</p> <p>Response: <code>200 OK</code> with body <code>\"ok\"</code></p>"},{"location":"using/mcpgateway-translate/#complete-examples","title":"Complete Examples","text":""},{"location":"using/mcpgateway-translate/#web-application-integration","title":"Web Application Integration","text":"<p>Expose a local MCP server for browser access:</p> <pre><code># Start the bridge\npython3 -m mcpgateway.translate \\\n  --stdio \"uvx mcp-server-filesystem --directory ./docs\" \\\n  --expose-sse \\\n  --port 9000 \\\n  --cors \"http://localhost:3000\" \"https://myapp.com\"\n\n# In your web app\nconst response = await fetch('http://localhost:9000/message', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    jsonrpc: '2.0',\n    id: 1,\n    method: 'resources/list'\n  })\n});\n</code></pre>"},{"location":"using/mcpgateway-translate/#corporate-proxy-setup","title":"Corporate Proxy Setup","text":"<p>Bridge internal MCP servers to external clients:</p> <pre><code># On proxy server\npython3 -m mcpgateway.translate \\\n  --stdio \"uvx mcp-server-internal\" \\\n  --expose-streamable-http \\\n  --port 443 \\\n  --host 0.0.0.0 \\\n  --stateless \\\n  --cors \"*\"\n\n# From external client\npython3 -m mcpgateway.translate \\\n  --connect-streamable-http \"https://proxy.corp.com/mcp\" \\\n  --oauth2Bearer \"$CORP_TOKEN\" \\\n  --stdioCommand \"local-mcp-client\"\n</code></pre>"},{"location":"using/mcpgateway-translate/#development-environment","title":"Development Environment","text":"<p>Quick setup for testing MCP servers:</p> <pre><code># Terminal 1: Start server bridge\npython3 -m mcpgateway.translate \\\n  --stdio \"uvx mcp-server-git\" \\\n  --expose-sse \\\n  --port 9001 \\\n  --logLevel debug\n\n# Terminal 2: Test with curl\ncurl -X POST http://localhost:9001/message \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\"}'\n\n# Terminal 3: Watch SSE stream\ncurl -N http://localhost:9001/sse\n</code></pre>"},{"location":"using/mcpgateway-translate/#container-deployment","title":"Container Deployment","text":"<pre><code>FROM python:3.11-slim\nRUN pip install mcpgateway mcp\nEXPOSE 8000\nHEALTHCHECK CMD curl -f http://localhost:8000/healthz || exit 1\nCMD [\"python\", \"-m\", \"mcpgateway.translate\", \\\n     \"--stdio\", \"uvx mcp-server-sqlite\", \\\n     \"--expose-streamable-http\", \\\n     \"--port\", \"8000\", \\\n     \"--host\", \"0.0.0.0\", \\\n     \"--stateless\"]\n</code></pre>"},{"location":"using/mcpgateway-translate/#protocol-comparison","title":"Protocol Comparison","text":"Feature SSE Streamable HTTP Streaming \u2705 Yes \u2705 Optional Bidirectional \u2705 Via backchannel \u2705 Native Session Management \u274c No \u2705 Optional Event Replay \u274c No \u2705 Yes JSON Response Mode \u274c No \u2705 Yes Browser Support \u2705 Native EventSource \u2705 Fetch API Complexity Simple Moderate"},{"location":"using/mcpgateway-translate/#troubleshooting","title":"Troubleshooting","text":""},{"location":"using/mcpgateway-translate/#common-issues","title":"Common Issues","text":""},{"location":"using/mcpgateway-translate/#mcp-server-components-are-required","title":"\"MCP server components are required\"","text":"<p>Solution: Install the MCP library <pre><code>pip install mcp\n</code></pre></p>"},{"location":"using/mcpgateway-translate/#connection-timeouts-with-sse","title":"Connection timeouts with SSE","text":"<p>Solution: Adjust keepalive interval <pre><code>--keepAlive 15  # More frequent keepalives\n</code></pre></p>"},{"location":"using/mcpgateway-translate/#cors-errors-in-browser","title":"CORS errors in browser","text":"<p>Solution: Configure allowed origins <pre><code>--cors \"http://localhost:3000\" \"https://yourapp.com\"\n</code></pre></p>"},{"location":"using/mcpgateway-translate/#authentication-failures","title":"Authentication failures","text":"<p>Solution: Verify token format <pre><code>--oauth2Bearer \"Bearer your-token\"  # Note: Include \"Bearer\" prefix if required\n</code></pre></p>"},{"location":"using/mcpgateway-translate/#debug-mode","title":"Debug Mode","text":"<p>Enable detailed logging to troubleshoot issues:</p> <pre><code>python3 -m mcpgateway.translate \\\n  --stdio \"your-mcp-server\" \\\n  --port 9000 \\\n  --logLevel debug\n</code></pre>"},{"location":"using/mcpgateway-translate/#performance-considerations","title":"Performance Considerations","text":""},{"location":"using/mcpgateway-translate/#stateless-vs-stateful","title":"Stateless vs Stateful","text":"<ul> <li>Stateless (<code>--stateless</code>): Better for high-volume, short-lived connections</li> <li>Stateful: Better for long-running sessions with context preservation</li> </ul>"},{"location":"using/mcpgateway-translate/#json-vs-sse-responses","title":"JSON vs SSE Responses","text":"<ul> <li>JSON (<code>--jsonResponse</code>): Lower latency, simpler client implementation</li> <li>SSE: Real-time streaming, better for continuous updates</li> </ul>"},{"location":"using/mcpgateway-translate/#connection-pooling","title":"Connection Pooling","text":"<p>When bridging to remote endpoints, connections are reused with automatic retry: - Initial retry delay: 1 second - Exponential backoff: Up to 30 seconds - Maximum retries: 5 (configurable in code)</p>"},{"location":"using/mcpgateway-translate/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Bind to localhost by default (<code>--host 127.0.0.1</code>)</li> <li>Use CORS restrictions to limit allowed origins</li> <li>Enable authentication with <code>--oauth2Bearer</code> for remote endpoints</li> <li>Run with minimal privileges in production</li> <li>Use HTTPS when exposing to public networks (reverse proxy recommended)</li> </ol>"},{"location":"using/mcpgateway-translate/#integration-with-mcp-gateway","title":"Integration with MCP Gateway","text":"<p>This tool complements the full MCP Gateway by providing: - Lightweight alternative for simple bridging needs - Development and testing utility - Protocol conversion without full gateway features</p> <p>For production deployments requiring: - Multiple server management - Persistent configuration - Advanced routing - Admin UI</p> <p>Consider using the full MCP Gateway.</p>"},{"location":"using/mcpgateway-translate/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"using/mcpgateway-translate/#environment-variables","title":"Environment Variables","text":"<p>All command-line options can be set via environment variables:</p> <pre><code>export MCPGATEWAY_PORT=9000\nexport MCPGATEWAY_LOG_LEVEL=debug\nexport MCPGATEWAY_CORS_ORIGINS=\"http://localhost:3000\"\npython3 -m mcpgateway.translate --stdio \"mcp-server\"\n</code></pre>"},{"location":"using/mcpgateway-translate/#custom-headers","title":"Custom Headers","text":"<p>For advanced authentication scenarios, modify the code to add custom headers:</p> <pre><code>headers = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"X-API-Key\": api_key,\n    \"X-Request-ID\": request_id\n}\n</code></pre>"},{"location":"using/mcpgateway-translate/#notes","title":"Notes","text":"<ul> <li>Protocol Support: All three protocols (stdio, SSE, streamable HTTP) are fully implemented</li> <li>Dependencies: Streamable HTTP requires <code>pip install mcp</code></li> <li>Bidirectional Flow: Use <code>--stdioCommand</code> for remote\u2192local bridging</li> <li>Performance: Stateless mode recommended for high-traffic scenarios</li> <li>Compatibility: Works with all MCP-compliant servers and clients</li> </ul>"},{"location":"using/mcpgateway-translate/#related-documentation","title":"Related Documentation","text":"<ul> <li>MCP Gateway Overview</li> <li>MCP Protocol Specification</li> <li>Transport Protocols</li> <li>Authentication Guide</li> </ul>"},{"location":"using/mcpgateway-translate/#support","title":"Support","text":"<p>For issues, feature requests, or contributions: - GitHub: mcp-context-forge - Issues: Report bugs</p>"},{"location":"using/mcpgateway-wrapper/","title":"\ud83d\udee0 STDIO Wrapper (<code>mcpgateway.wrapper</code>)","text":"<p><code>mcpgateway.wrapper</code> ships inside the main PyPI package and re-publishes your Gateway's tools / prompts / resources over <code>stdin \u2194 stdout</code>, while connecting securely to the gateway using <code>SSE</code> + <code>JWT</code>.</p> <p>Perfect for clients that can't open SSE streams or attach JWT headers (e.g. Claude Desktop, Cline, Continue, custom CLI scripts).</p>"},{"location":"using/mcpgateway-wrapper/#key-highlights","title":"\ud83d\udd11 Key Highlights","text":"<ul> <li>Dynamic catalog - auto-syncs from one or more <code>.../servers/{id}</code> Virtual Server endpoints</li> <li>Full MCP protocol - <code>initialize</code>, <code>ping</code>, <code>tools/call</code>, streaming content, resources and prompts/template rendering</li> <li>Transparent proxy - stdio \u2192 Gateway \u2192 tool, results stream back to stdout</li> <li>Secure - wrapper keeps using your JWT to talk to the Gateway</li> </ul>"},{"location":"using/mcpgateway-wrapper/#launch-options","title":"\ud83d\ude80 Launch Options","text":"<p>Ensure you have a valid JWT token:</p> <pre><code>export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\\n      --username admin --exp 10080 --secret my-test-key)\n</code></pre> <p>Configure the wrapper via ENV variables:</p> <pre><code>export MCP_AUTH=${MCPGATEWAY_BEARER_TOKEN}\nexport MCP_SERVER_URL='http://localhost:4444/servers/UUID_OF_SERVER_1/mcp'  # select a virtual server\nexport MCP_TOOL_CALL_TIMEOUT=120          # tool call timeout in seconds (optional - default 90)\nexport MCP_WRAPPER_LOG_LEVEL=INFO         # DEBUG | INFO | OFF\n</code></pre> <p>Configure via Pip or Docker. Note that lauching the wrapper should be done from an MCP Client (ex: via the JSON configuration).</p> <p>Launching it in your terminal (ex: <code>python3 -m mcpgateway.wrapper</code>) is useful for testing.</p> Local shell (venv)Docker / Podmanpipx (one-liner)uv / uvx (ultra-fast) <pre><code>pip install mcp-contextforge-gateway\npython3 -m mcpgateway.wrapper\n</code></pre> <pre><code>docker run -i --rm --network=host \\\n  -e MCP_SERVER_URL=$MCP_SERVER_URL \\\n  -e MCP_AUTH=$MCP_AUTH \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0 \\\n  python3 -m mcpgateway.wrapper\n</code></pre> <pre><code>pipx install --include-deps mcp-contextforge-gateway\nMCP_AUTH=$MCP_AUTH \\\nMCP_SERVER_URL=$MCP_SERVER_URL \\\npython3 -m mcpgateway.wrapper\n</code></pre> <pre><code>curl -Ls https://astral.sh/uv/install.sh | sh\nuv venv ~/.venv/mcpgw &amp;&amp; source ~/.venv/mcpgw/bin/activate\nuv pip install mcp-contextforge-gateway\nuv python3 -m mcpgateway.wrapper\n</code></pre> <p>The wrapper now waits for JSON-RPC on stdin and emits replies on stdout.</p>"},{"location":"using/mcpgateway-wrapper/#environment-variables","title":"\u2705 Environment Variables","text":"Variable Purpose Default <code>MCP_SERVER_URL</code> Comma-sep list of <code>/servers/{id}</code> endpoints - <code>MCP_AUTH</code> Bearer token the wrapper forwards to Gateway - <code>MCP_TOOL_CALL_TIMEOUT</code> Per-tool timeout (seconds) <code>90</code> <code>MCP_WRAPPER_LOG_LEVEL</code> <code>OFF</code>, <code>INFO</code>, <code>DEBUG</code>, \u2026 <code>INFO</code>"},{"location":"using/mcpgateway-wrapper/#gui-client-config-json-snippets","title":"\ud83d\udda5 GUI Client Config JSON Snippets","text":"<p>You can run <code>mcpgateway.wrapper</code> from any MCP client, using either <code>python3</code>, <code>uv</code>, <code>uvx</code>, <code>uvx</code>, <code>pipx</code>, <code>docker</code>, or <code>podman</code> entrypoints.</p> <p>The MCP Client calls the entrypoint, which needs to have the <code>mcp-contextforge-gateway</code> module installed, able to call <code>mcpgateway.wrapper</code> and the right <code>env</code> settings exported (<code>MCP_SERVER_URL</code> and <code>MCP_AUTH</code> at a minimum).</p> Claude Desktop (venv)Claude Desktop (uvx)Continue (python3)Cline (uv) <pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"command\": \"python3\",\n      \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n      \"env\": {\n        \"MCP_AUTH\": \"&lt;paste-token&gt;\",\n        \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1\"\n      }\n    }\n  }\n}\n</code></pre> <p>Use your venv's Python</p> <p>Replace <code>/path/to/python</code> with the exact interpreter in your venv (e.g. <code>$HOME/.venv/mcpgateway/bin/python3</code>) - where the <code>mcp-contextforge-gateway</code> module is installed.</p> <pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"run\",\n        \"--\",\n        \"python\",\n        \"-m\",\n        \"mcpgateway.wrapper\"\n      ],\n      \"env\": {\n        \"MCP_AUTH\": \"&lt;paste-token&gt;\",\n        \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1\"\n      }\n    }\n  }\n}\n</code></pre> <p>Add to Settings \u2192 Continue: MCP Servers:</p> <pre><code>{\n  \"mcpgateway-wrapper\": {\n    \"command\": \"/path/to/python\",\n    \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n    \"env\": {\n      \"MCP_AUTH\": \"&lt;token&gt;\",\n      \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1\"\n    }\n  }\n}\n</code></pre> <p>(Replace <code>/path/to/python</code> with your venv interpreter.)</p> <pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"type\": \"stdio\",\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"REPLACE_WITH_PATH_TO_REPO\",\n        \"-m\",\n        \"mcpgateway.wrapper\"\n      ],\n      \"env\": {\n        \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1\",\n        \"MCP_AUTH\": \"REPLACE_WITH_MCPGATEWAY_BEARER_TOKEN\",\n        \"MCP_WRAPPER_LOG_LEVEL\": \"OFF\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"using/mcpgateway-wrapper/#local-development","title":"\ud83d\udc0d Local Development","text":"<pre><code># Hot-reload wrapper code while hacking\nuv --dev run python3 -m mcpgateway.wrapper\n</code></pre>"},{"location":"using/mcpgateway-wrapper/#mcp-inspector","title":"\ud83d\udd0e MCP Inspector","text":"<pre><code>npx @modelcontextprotocol/inspector \\\n     python3 -m mcpgateway.wrapper -- \\\n     --log-level DEBUG\n</code></pre>"},{"location":"using/mcpgateway-wrapper/#example-call-flow","title":"\ud83d\udcdd Example call flow","text":"<pre><code>{\n  \"method\": \"get_system_time\",\n  \"params\": { \"timezone\": \"Europe/Dublin\" }\n}\n</code></pre> <ol> <li>Wrapper maps <code>get_system_time</code> \u2192 tool ID 123 in the catalog.</li> <li>Sends RPC to the Gateway with your JWT token.</li> <li>Gateway executes the tool and returns JSON \u2192 wrapper \u2192 stdout.</li> </ol>"},{"location":"using/mcpgateway-wrapper/#manual-json-rpc-smoke-test","title":"\ud83e\uddea Manual JSON-RPC Smoke-test","text":"<p>The wrapper speaks plain JSON-RPC over stdin/stdout, so you can exercise it from any terminal-no GUI required. Open two shells or use a tool like <code>jq -c | nc -U</code> to pipe messages in and view replies.</p> Step-by-step request sequence <pre><code># 1\ufe0f\u20e3 Initialize session\n{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2025-03-26\",\"capabilities\":{},\n  \"clientInfo\":{\"name\":\"demo\",\"version\":\"0.0.1\"}\n}}\n\n# 2\ufe0f\u20e3 Ack initialisation (required by MCP)\n{\"jsonrpc\":\"2.0\",\"method\":\"notifications/initialized\",\"params\":{}}\n\n# 3\ufe0f\u20e3 Prompts\n{\"jsonrpc\":\"2.0\",\"id\":4,\"method\":\"prompts/list\"}\n{\"jsonrpc\":\"2.0\",\"id\":5,\"method\":\"prompts/get\",\n \"params\":{\"name\":\"greeting\",\"arguments\":{\"user\":\"Bob\"}}}\n\n# 4\ufe0f\u20e3 Resources\n{\"jsonrpc\":\"2.0\",\"id\":6,\"method\":\"resources/list\"}\n{\"jsonrpc\":\"2.0\",\"id\":7,\"method\":\"resources/read\",\n \"params\":{\"uri\":\"https://example.com/some.txt\"}}\n\n# 5\ufe0f\u20e3 Tools (list / call)\n{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/list\"}\n{\"jsonrpc\":\"2.0\",\"id\":3,\"method\":\"tools/call\",\n \"params\":{\"name\":\"get_system_time\",\"arguments\":{\"timezone\":\"Europe/Dublin\"}}}\n</code></pre> Sample responses you should see <pre><code># Initialise\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":{\n  \"protocolVersion\":\"2025-03-26\",\n  \"capabilities\":{\n    \"experimental\":{},\n    \"prompts\":{\"listChanged\":false},\n    \"resources\":{\"subscribe\":false,\"listChanged\":false},\n    \"tools\":{\"listChanged\":false}\n  },\n  \"serverInfo\":{\"name\":\"mcpgateway-wrapper\",\"version\":\"0.6.0\"}\n}}\n\n# Empty tool list\n{\"jsonrpc\":\"2.0\",\"id\":2,\"result\":{\"tools\":[]}}\n\n# ...after adding tools (example)\n{\"jsonrpc\":\"2.0\",\"id\":2,\"result\":{\n  \"tools\":[\n    {\n      \"name\":\"get_system_time\",\n      \"description\":\"Get current time in a specific timezone\",\n      \"inputSchema\":{\n        \"type\":\"object\",\n        \"properties\":{\n          \"timezone\":{\n            \"type\":\"string\",\n            \"description\":\"IANA timezone name (e.g. 'Europe/London').\"\n          }\n        },\n        \"required\":[\"timezone\"]\n      }\n    }\n  ]\n}}\n\n# Tool invocation\n{\"jsonrpc\":\"2.0\",\"id\":3,\"result\":{\n  \"content\":[\n    {\n      \"type\":\"text\",\n      \"text\":\"{ \\\"timezone\\\": \\\"Europe/Dublin\\\", \\\"datetime\\\": \\\"2025-06-08T21:47:07+01:00\\\", \\\"is_dst\\\": true }\"\n    }\n  ],\n  \"isError\":false\n}}\n</code></pre>"},{"location":"using/multi-auth-headers/","title":"Multiple Authentication Headers","text":""},{"location":"using/multi-auth-headers/#overview","title":"Overview","text":"<p>MCP Gateway now supports multiple custom authentication headers for gateway connections. This feature allows you to configure multiple header key-value pairs that will be sent with every request to your MCP servers.</p>"},{"location":"using/multi-auth-headers/#use-cases","title":"Use Cases","text":"<p>Multiple authentication headers are useful when: - Your MCP server requires multiple API keys or tokens - You need to send client identification along with authentication - Your service uses region-specific or version-specific headers - You're integrating with services that require complex header-based authentication</p>"},{"location":"using/multi-auth-headers/#configuration","title":"Configuration","text":""},{"location":"using/multi-auth-headers/#via-admin-ui","title":"Via Admin UI","text":"<ol> <li>Navigate to the Admin Panel at <code>http://localhost:8000/admin/</code></li> <li>Click on the \"Gateways\" tab</li> <li>When adding or editing a gateway:</li> <li>Select \"Custom Headers\" as the Authentication Type</li> <li>Click \"Add Header\" to add multiple header pairs</li> <li>Enter the header key (e.g., <code>X-API-Key</code>) and value for each header</li> <li>Click \"Remove\" next to any header to delete it</li> <li>Submit the form to save your configuration</li> </ol>"},{"location":"using/multi-auth-headers/#via-api","title":"Via API","text":"<p>Send a POST request to <code>/admin/gateways</code> with the <code>auth_headers</code> field as a JSON array:</p> <pre><code>{\n  \"name\": \"My Gateway\",\n  \"url\": \"http://mcp-server.example.com\",\n  \"auth_type\": \"authheaders\",\n  \"auth_headers\": [\n    {\"key\": \"X-API-Key\", \"value\": \"secret-key-123\"},\n    {\"key\": \"X-Client-ID\", \"value\": \"client-456\"},\n    {\"key\": \"X-Region\", \"value\": \"us-east-1\"}\n  ]\n}\n</code></pre>"},{"location":"using/multi-auth-headers/#via-python-sdk","title":"Via Python SDK","text":"<pre><code>from mcpgateway.schemas import GatewayCreate\n\ngateway = GatewayCreate(\n    name=\"My Gateway\",\n    url=\"http://mcp-server.example.com\",\n    auth_type=\"authheaders\",\n    auth_headers=[\n        {\"key\": \"X-API-Key\", \"value\": \"secret-key-123\"},\n        {\"key\": \"X-Client-ID\", \"value\": \"client-456\"},\n        {\"key\": \"X-Region\", \"value\": \"us-east-1\"}\n    ]\n)\n</code></pre>"},{"location":"using/multi-auth-headers/#backward-compatibility","title":"Backward Compatibility","text":"<p>The gateway still supports the legacy single-header format for backward compatibility:</p> <pre><code>{\n  \"name\": \"My Gateway\",\n  \"url\": \"http://mcp-server.example.com\",\n  \"auth_type\": \"authheaders\",\n  \"auth_header_key\": \"X-API-Key\",\n  \"auth_header_value\": \"secret-key-123\"\n}\n</code></pre> <p>If both <code>auth_headers</code> (multi) and <code>auth_header_key</code>/<code>auth_header_value</code> (single) are provided, the multi-header format takes precedence.</p>"},{"location":"using/multi-auth-headers/#security-considerations","title":"Security Considerations","text":""},{"location":"using/multi-auth-headers/#encryption","title":"Encryption","text":"<p>All authentication headers are encrypted before being stored in the database using AES-256-GCM encryption. The encryption key is derived from the <code>AUTH_ENCRYPTION_SECRET</code> environment variable.</p>"},{"location":"using/multi-auth-headers/#header-validation","title":"Header Validation","text":"<ul> <li>Empty header keys are ignored</li> <li>Duplicate header keys will use the last provided value</li> <li>Header values can be empty strings if required by your authentication scheme</li> <li>Special characters in header keys and values are supported</li> </ul>"},{"location":"using/multi-auth-headers/#best-practices","title":"Best Practices","text":"<ol> <li>Use HTTPS: Always use HTTPS URLs for your MCP servers to prevent header interception</li> <li>Rotate Keys: Regularly rotate your API keys and update them in the gateway configuration</li> <li>Minimal Headers: Only include headers that are strictly necessary for authentication</li> <li>Environment Variables: Store sensitive values in environment variables when deploying</li> </ol>"},{"location":"using/multi-auth-headers/#common-patterns","title":"Common Patterns","text":""},{"location":"using/multi-auth-headers/#multiple-api-keys","title":"Multiple API Keys","text":"<pre><code>{\n  \"auth_headers\": [\n    {\"key\": \"X-Primary-Key\", \"value\": \"primary-secret\"},\n    {\"key\": \"X-Secondary-Key\", \"value\": \"secondary-secret\"}\n  ]\n}\n</code></pre>"},{"location":"using/multi-auth-headers/#api-key-with-client-identification","title":"API Key with Client Identification","text":"<pre><code>{\n  \"auth_headers\": [\n    {\"key\": \"X-API-Key\", \"value\": \"api-secret\"},\n    {\"key\": \"X-Client-ID\", \"value\": \"client-123\"},\n    {\"key\": \"X-Client-Secret\", \"value\": \"client-secret\"}\n  ]\n}\n</code></pre>"},{"location":"using/multi-auth-headers/#regional-configuration","title":"Regional Configuration","text":"<pre><code>{\n  \"auth_headers\": [\n    {\"key\": \"X-API-Key\", \"value\": \"api-secret\"},\n    {\"key\": \"X-Region\", \"value\": \"eu-west-1\"},\n    {\"key\": \"X-Environment\", \"value\": \"production\"}\n  ]\n}\n</code></pre>"},{"location":"using/multi-auth-headers/#troubleshooting","title":"Troubleshooting","text":""},{"location":"using/multi-auth-headers/#headers-not-being-sent","title":"Headers Not Being Sent","text":"<ol> <li>Check that your gateway is using <code>auth_type: \"authheaders\"</code></li> <li>Verify headers are properly formatted in the JSON array</li> <li>Ensure the gateway is enabled and reachable</li> <li>Check server logs to confirm headers are being received</li> </ol>"},{"location":"using/multi-auth-headers/#case-sensitivity","title":"Case Sensitivity","text":"<p>HTTP headers are case-insensitive by specification. Some HTTP clients or servers may normalize header names to lowercase. Your MCP server should handle headers in a case-insensitive manner.</p>"},{"location":"using/multi-auth-headers/#validation-errors","title":"Validation Errors","text":"<p>If you receive validation errors when saving: - Ensure at least one header is provided when using \"Custom Headers\" authentication - Check that your JSON is properly formatted if using the API - Verify that header keys don't contain invalid characters</p>"},{"location":"using/multi-auth-headers/#testing-your-configuration","title":"Testing Your Configuration","text":"<p>Use the \"Test\" button in the Admin UI to verify your gateway connection with the configured headers. The test will attempt to connect to your MCP server and validate that authentication is working correctly.</p>"},{"location":"using/multi-auth-headers/#migration-from-single-headers","title":"Migration from Single Headers","text":"<p>If you have existing gateways using single header authentication, they will continue to work without modification. To migrate to multi-headers:</p> <ol> <li>Edit your gateway in the Admin UI</li> <li>Your existing single header will be displayed</li> <li>Add additional headers as needed</li> <li>Save the configuration</li> </ol> <p>The system will automatically convert your configuration to the multi-header format while preserving your existing authentication.</p>"},{"location":"using/multi-auth-headers/#api-reference","title":"API Reference","text":""},{"location":"using/multi-auth-headers/#gatewaycreate-schema","title":"GatewayCreate Schema","text":"<pre><code>{\n    \"name\": str,\n    \"url\": str,\n    \"auth_type\": \"authheaders\",\n    \"auth_headers\": [\n        {\"key\": str, \"value\": str},\n        ...\n    ]\n}\n</code></pre>"},{"location":"using/multi-auth-headers/#gatewayupdate-schema","title":"GatewayUpdate Schema","text":"<pre><code>{\n    \"auth_type\": \"authheaders\",\n    \"auth_headers\": [\n        {\"key\": str, \"value\": str},\n        ...\n    ]\n}\n</code></pre>"},{"location":"using/multi-auth-headers/#related-documentation","title":"Related Documentation","text":"<ul> <li>Gateway Authentication</li> <li>Security Best Practices</li> <li>Multi-Auth Headers</li> </ul>"},{"location":"using/reverse-proxy/","title":"MCP Reverse Proxy","text":"<p>The MCP Reverse Proxy enables local MCP servers to be accessible through remote gateways without requiring inbound network access. This is similar to SSH reverse tunneling or ngrok, but specifically designed for the MCP protocol.</p>"},{"location":"using/reverse-proxy/#overview","title":"Overview","text":"<p>The reverse proxy establishes an outbound connection from a local environment to a remote gateway, then tunnels all MCP protocol messages through this persistent connection. This allows:</p> <ul> <li>Firewall traversal: Share MCP servers without opening inbound ports</li> <li>NAT bypass: Work seamlessly behind corporate or home NATs</li> <li>Edge deployments: Connect edge servers to central management</li> <li>Development testing: Test local servers with cloud-hosted gateways</li> </ul>"},{"location":"using/reverse-proxy/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Local MCP Server  \u2502 stdio   \u2502  Reverse Proxy   \u2502 WS/SSE  \u2502   Remote    \u2502\n\u2502  (uvx mcp-server)   \u2502 &lt;-----&gt; \u2502     Client       \u2502 &lt;-----&gt; \u2502   Gateway   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                                     \u2191\n                                                                     \u2502\n                                                              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                                              \u2502 MCP Clients \u2502\n                                                              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"using/reverse-proxy/#quick-start","title":"Quick Start","text":""},{"location":"using/reverse-proxy/#1-basic-usage","title":"1. Basic Usage","text":"<p>Connect a local MCP server to a remote gateway:</p> <pre><code># Set gateway URL and authentication\nexport REVERSE_PROXY_GATEWAY=https://gateway.example.com\nexport REVERSE_PROXY_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \\\n    --username admin --exp 10080 --secret your-secret-key)\n\n# Run the reverse proxy\npython3 -m mcpgateway.reverse_proxy \\\n    --local-stdio \"uvx mcp-server-git\"\n</code></pre>"},{"location":"using/reverse-proxy/#2-command-line-options","title":"2. Command Line Options","text":"<pre><code>python3 -m mcpgateway.reverse_proxy \\\n    --local-stdio \"uvx mcp-server-filesystem --directory /path/to/files\" \\\n    --gateway https://gateway.example.com \\\n    --token your-bearer-token \\\n    --reconnect-delay 2 \\\n    --max-retries 10 \\\n    --keepalive 30 \\\n    --log-level DEBUG\n</code></pre> <p>Options: - <code>--local-stdio</code>: Command to run the local MCP server (required) - <code>--gateway</code>: Remote gateway URL (or use REVERSE_PROXY_GATEWAY env var) - <code>--token</code>: Bearer token for authentication (or use REVERSE_PROXY_TOKEN env var) - <code>--reconnect-delay</code>: Initial reconnection delay in seconds (default: 1) - <code>--max-retries</code>: Maximum reconnection attempts, 0=infinite (default: 0) - <code>--keepalive</code>: Heartbeat interval in seconds (default: 30) - <code>--log-level</code>: Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL) - <code>--verbose</code>: Enable verbose logging (same as \u2013log-level DEBUG) - <code>--config</code>: Configuration file (YAML or JSON)</p>"},{"location":"using/reverse-proxy/#3-configuration-file","title":"3. Configuration File","text":"<p>Create a <code>reverse-proxy.yaml</code>:</p> <pre><code># reverse-proxy.yaml\nlocal_stdio: \"uvx mcp-server-git\"\ngateway: \"https://gateway.example.com\"\ntoken: \"your-bearer-token\"\nreconnect_delay: 2\nmax_retries: 0\nkeepalive: 30\nlog_level: \"INFO\"\n</code></pre> <p>Run with configuration:</p> <pre><code>python3 -m mcpgateway.reverse_proxy --config reverse-proxy.yaml\n</code></pre>"},{"location":"using/reverse-proxy/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>REVERSE_PROXY_GATEWAY</code>: Remote gateway URL</li> <li><code>REVERSE_PROXY_TOKEN</code>: Bearer token for authentication</li> <li><code>REVERSE_PROXY_RECONNECT_DELAY</code>: Initial reconnection delay (seconds)</li> <li><code>REVERSE_PROXY_MAX_RETRIES</code>: Maximum reconnection attempts (0=infinite)</li> <li><code>REVERSE_PROXY_LOG_LEVEL</code>: Python log level</li> </ul>"},{"location":"using/reverse-proxy/#docker-deployment","title":"Docker Deployment","text":""},{"location":"using/reverse-proxy/#single-container","title":"Single Container","text":"<pre><code>FROM python:3.11-slim\n\n# Install MCP gateway and server\nRUN pip install mcp-gateway mcp-server-git\n\n# Set environment\nENV REVERSE_PROXY_GATEWAY=https://gateway.example.com\nENV REVERSE_PROXY_TOKEN=your-token\n\n# Run reverse proxy\nCMD [\"python\", \"-m\", \"mcpgateway.reverse_proxy\", \\\n     \"--local-stdio\", \"mcp-server-git\"]\n</code></pre>"},{"location":"using/reverse-proxy/#docker-compose","title":"Docker Compose","text":"<pre><code>version: '3.8'\n\nservices:\n  reverse-proxy-git:\n    image: mcp-gateway:latest\n    environment:\n      REVERSE_PROXY_GATEWAY: https://gateway.example.com\n      REVERSE_PROXY_TOKEN: ${TOKEN}\n    command: &gt;\n      python -m mcpgateway.reverse_proxy\n      --local-stdio \"mcp-server-git\"\n      --keepalive 30\n      --log-level INFO\n    restart: unless-stopped\n\n  reverse-proxy-filesystem:\n    image: mcp-gateway:latest\n    environment:\n      REVERSE_PROXY_GATEWAY: https://gateway.example.com\n      REVERSE_PROXY_TOKEN: ${TOKEN}\n    volumes:\n      - ./data:/data:ro\n    command: &gt;\n      python -m mcpgateway.reverse_proxy\n      --local-stdio \"mcp-server-filesystem --directory /data\"\n    restart: unless-stopped\n</code></pre>"},{"location":"using/reverse-proxy/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mcp-reverse-proxy\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mcp-reverse-proxy\n  template:\n    metadata:\n      labels:\n        app: mcp-reverse-proxy\n    spec:\n      containers:\n      - name: reverse-proxy\n        image: mcp-gateway:latest\n        env:\n        - name: REVERSE_PROXY_GATEWAY\n          value: \"https://gateway.example.com\"\n        - name: REVERSE_PROXY_TOKEN\n          valueFrom:\n            secretKeyRef:\n              name: mcp-credentials\n              key: token\n        command:\n        - python\n        - -m\n        - mcpgateway.reverse_proxy\n        args:\n        - --local-stdio\n        - \"mcp-server-git\"\n        - --keepalive\n        - \"30\"\n        resources:\n          limits:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n</code></pre>"},{"location":"using/reverse-proxy/#gateway-side-configuration","title":"Gateway-Side Configuration","text":"<p>The remote gateway must have the reverse proxy endpoints enabled:</p>"},{"location":"using/reverse-proxy/#1-websocket-endpoint","title":"1. WebSocket Endpoint","text":"<p>The gateway exposes <code>/reverse-proxy/ws</code> for WebSocket connections:</p> <pre><code># Gateway receives connections at:\nwss://gateway.example.com/reverse-proxy/ws\n</code></pre>"},{"location":"using/reverse-proxy/#2-session-management","title":"2. Session Management","text":"<p>View active reverse proxy sessions:</p> <pre><code># List all sessions\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n     https://gateway.example.com/reverse-proxy/sessions\n\n# Disconnect a session\ncurl -X DELETE -H \"Authorization: Bearer $TOKEN\" \\\n     https://gateway.example.com/reverse-proxy/sessions/{session_id}\n</code></pre>"},{"location":"using/reverse-proxy/#3-virtual-server-registration","title":"3. Virtual Server Registration","text":"<p>Reverse-proxied servers automatically appear in the gateway's server catalog and can be accessed like any other MCP server.</p>"},{"location":"using/reverse-proxy/#security-considerations","title":"Security Considerations","text":""},{"location":"using/reverse-proxy/#authentication","title":"Authentication","text":"<ul> <li>Always use authentication tokens in production</li> <li>Tokens should have appropriate expiration times</li> <li>Consider using mutual TLS for additional security</li> </ul>"},{"location":"using/reverse-proxy/#network-security","title":"Network Security","text":"<ul> <li>The reverse proxy only requires outbound HTTPS/WSS</li> <li>No inbound firewall rules needed</li> <li>All traffic is encrypted via TLS</li> </ul>"},{"location":"using/reverse-proxy/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use specific tokens per deployment <pre><code># Generate deployment-specific token\npython3 -m mcpgateway.utils.create_jwt_token \\\n    --username edge-server-01 \\\n    --exp 10080 \\\n    --secret $JWT_SECRET\n</code></pre></p> </li> <li> <p>Monitor connection health</p> </li> <li>Check gateway logs for connection events</li> <li>Monitor reconnection attempts</li> <li> <p>Set up alerts for persistent failures</p> </li> <li> <p>Resource limits</p> </li> <li>Set appropriate memory/CPU limits in containers</li> <li>Configure max message sizes</li> <li>Implement rate limiting on the gateway</li> </ol>"},{"location":"using/reverse-proxy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"using/reverse-proxy/#connection-issues","title":"Connection Issues","text":"<ol> <li> <p>Check connectivity:    <pre><code># Test gateway reachability\ncurl -I https://gateway.example.com/healthz\n</code></pre></p> </li> <li> <p>Verify authentication:    <pre><code># Test token validity\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n     https://gateway.example.com/reverse-proxy/sessions\n</code></pre></p> </li> <li> <p>Enable debug logging:    <pre><code>python3 -m mcpgateway.reverse_proxy \\\n    --local-stdio \"uvx mcp-server-git\" \\\n    --log-level DEBUG\n</code></pre></p> </li> </ol>"},{"location":"using/reverse-proxy/#common-errors","title":"Common Errors","text":"Error Cause Solution <code>Connection refused</code> Gateway unreachable Check gateway URL and network <code>401 Unauthorized</code> Invalid token Regenerate token with correct secret <code>WebSocket connection failed</code> Firewall blocking WSS Check outbound port 443 <code>Subprocess not running</code> Local server crashed Check server command and logs <code>Max retries exceeded</code> Persistent network issue Check network stability"},{"location":"using/reverse-proxy/#performance-tuning","title":"Performance Tuning","text":"<ol> <li> <p>Adjust keepalive interval:    <pre><code># Shorter interval for unstable networks\n--keepalive 15\n\n# Longer interval for stable networks\n--keepalive 60\n</code></pre></p> </li> <li> <p>Configure reconnection strategy:    <pre><code># Quick reconnect with limited retries\n--reconnect-delay 0.5 --max-retries 20\n\n# Slow reconnect with infinite retries\n--reconnect-delay 5 --max-retries 0\n</code></pre></p> </li> </ol>"},{"location":"using/reverse-proxy/#advanced-usage","title":"Advanced Usage","text":""},{"location":"using/reverse-proxy/#multiple-local-servers","title":"Multiple Local Servers","text":"<p>Run multiple reverse proxies for different servers:</p> <pre><code># multi-server.yaml\nservers:\n  - name: git-server\n    command: \"uvx mcp-server-git\"\n    gateway: \"https://gateway1.example.com\"\n\n  - name: filesystem-server\n    command: \"uvx mcp-server-filesystem --directory /data\"\n    gateway: \"https://gateway2.example.com\"\n</code></pre>"},{"location":"using/reverse-proxy/#load-balancing","title":"Load Balancing","text":"<p>Connect the same server to multiple gateways:</p> <pre><code># Primary gateway\npython3 -m mcpgateway.reverse_proxy \\\n    --local-stdio \"uvx mcp-server-git\" \\\n    --gateway https://gateway1.example.com &amp;\n\n# Backup gateway\npython3 -m mcpgateway.reverse_proxy \\\n    --local-stdio \"uvx mcp-server-git\" \\\n    --gateway https://gateway2.example.com &amp;\n</code></pre>"},{"location":"using/reverse-proxy/#monitoring-integration","title":"Monitoring Integration","text":"<p>Export metrics for monitoring systems:</p> <pre><code># Custom monitoring wrapper\nimport asyncio\nfrom mcpgateway.reverse_proxy import ReverseProxyClient\n\nclass MonitoredReverseProxy(ReverseProxyClient):\n    async def connect(self):\n        # Export connection metric\n        prometheus_client.Counter('reverse_proxy_connections_total').inc()\n        await super().connect()\n</code></pre>"},{"location":"using/reverse-proxy/#related-documentation","title":"Related Documentation","text":"<ul> <li>MCP Gateway Documentation</li> <li>MCP Protocol Specification</li> <li>Transport Protocols</li> <li>Authentication Guide</li> </ul>"},{"location":"using/tool-annotations/","title":"Tool Annotations","text":"<p>Tool annotations provide metadata hints about tool behavior, helping clients and UIs make informed decisions about how to present and use tools. MCP Gateway supports the standard MCP annotation types for enhanced tool interaction.</p>"},{"location":"using/tool-annotations/#overview","title":"Overview","text":"<p>Tool annotations are optional metadata that can be attached to tools to provide behavioral hints such as:</p> <ul> <li>Safety indicators: Whether a tool is read-only or potentially destructive</li> <li>Execution hints: Whether a tool is idempotent or operates in an open-world assumption</li> <li>UI hints: How tools should be presented in user interfaces</li> </ul>"},{"location":"using/tool-annotations/#supported-annotation-types","title":"Supported Annotation Types","text":"Annotation Type Description <code>readOnlyHint</code> <code>boolean</code> Indicates the tool only reads data and doesn't modify state <code>destructiveHint</code> <code>boolean</code> Warns that the tool may cause irreversible changes <code>idempotentHint</code> <code>boolean</code> Indicates the tool can be called multiple times safely <code>openWorldHint</code> <code>boolean</code> Suggests the tool operates under open-world assumptions"},{"location":"using/tool-annotations/#setting-annotations-via-admin-ui","title":"Setting Annotations via Admin UI","text":"<p>Use the Admin UI to set tool annotations through the web interface:</p> <ol> <li>Navigate to Tools section in the Admin UI</li> <li>Click Edit on the desired tool</li> <li>In the Annotations field, enter JSON:</li> </ol> <pre><code>{\n  \"readOnlyHint\": true,\n  \"destructiveHint\": false,\n  \"idempotentHint\": true,\n  \"openWorldHint\": false\n}\n</code></pre> <ol> <li>Click Save to persist the annotations</li> </ol>"},{"location":"using/tool-annotations/#setting-annotations-via-api","title":"Setting Annotations via API","text":""},{"location":"using/tool-annotations/#complete-annotation-example","title":"Complete Annotation Example","text":"<p>Here's a comprehensive example showing all available annotation types:</p> <pre><code>curl -X POST /tools \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\n    \"name\": \"file-reader\",\n    \"url\": \"http://example.com/api/read-file\",\n    \"description\": \"Safely reads file contents\",\n    \"annotations\": {\n      \"readOnlyHint\": true,\n      \"destructiveHint\": false,\n      \"idempotentHint\": true,\n      \"openWorldHint\": false\n    }\n  }'\n</code></pre>"},{"location":"using/tool-annotations/#individual-annotation-examples","title":"Individual Annotation Examples","text":""},{"location":"using/tool-annotations/#read-only-tool","title":"Read-Only Tool","text":"<pre><code>{\n  \"name\": \"get-user-info\",\n  \"url\": \"http://api.example.com/users\",\n  \"annotations\": {\n    \"readOnlyHint\": true\n  }\n}\n</code></pre>"},{"location":"using/tool-annotations/#destructive-tool","title":"Destructive Tool","text":"<pre><code>{\n  \"name\": \"delete-file\",\n  \"url\": \"http://api.example.com/files/delete\",\n  \"annotations\": {\n    \"destructiveHint\": true,\n    \"idempotentHint\": false\n  }\n}\n</code></pre>"},{"location":"using/tool-annotations/#idempotent-tool","title":"Idempotent Tool","text":"<pre><code>{\n  \"name\": \"create-user\",\n  \"url\": \"http://api.example.com/users\",\n  \"annotations\": {\n    \"idempotentHint\": true,\n    \"readOnlyHint\": false\n  }\n}\n</code></pre>"},{"location":"using/tool-annotations/#updating-existing-tool-annotations","title":"Updating Existing Tool Annotations","text":"<pre><code>curl -X PUT /tools/{tool_id} \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\n    \"annotations\": {\n      \"readOnlyHint\": true,\n      \"destructiveHint\": false\n    }\n  }'\n</code></pre>"},{"location":"using/tool-annotations/#gateway-discovered-tools","title":"Gateway-Discovered Tools","text":"<p>When registering MCP servers via <code>/gateways</code>, tools are automatically discovered. To add annotations:</p>"},{"location":"using/tool-annotations/#step-1-register-the-gateway","title":"Step 1: Register the Gateway","text":"<pre><code>curl -X POST /gateways \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\n    \"name\": \"my-mcp-server\",\n    \"url\": \"http://localhost:8080/sse\"\n  }'\n</code></pre>"},{"location":"using/tool-annotations/#step-2-add-annotations-to-discovered-tools","title":"Step 2: Add Annotations to Discovered Tools","text":"<pre><code># First, get the tool ID from the tools list\ncurl -H \"Authorization: Bearer $TOKEN\" http://localhost:4444/tools\n\n# Then update the specific tool with annotations\ncurl -X PUT /tools/{discovered_tool_id} \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\n    \"annotations\": {\n      \"readOnlyHint\": true,\n      \"destructiveHint\": false,\n      \"idempotentHint\": true\n    }\n  }'\n</code></pre>"},{"location":"using/tool-annotations/#complex-annotation-scenarios","title":"Complex Annotation Scenarios","text":""},{"location":"using/tool-annotations/#mixed-safety-tool","title":"Mixed Safety Tool","text":"<p>A tool that reads configuration but may modify cache:</p> <pre><code>{\n  \"annotations\": {\n    \"readOnlyHint\": false,\n    \"destructiveHint\": false,\n    \"idempotentHint\": true,\n    \"openWorldHint\": true\n  }\n}\n</code></pre>"},{"location":"using/tool-annotations/#high-risk-administrative-tool","title":"High-Risk Administrative Tool","text":"<p>A tool that performs system-level operations:</p> <pre><code>{\n  \"annotations\": {\n    \"readOnlyHint\": false,\n    \"destructiveHint\": true,\n    \"idempotentHint\": false,\n    \"openWorldHint\": false\n  }\n}\n</code></pre>"},{"location":"using/tool-annotations/#information-gathering-tool","title":"Information Gathering Tool","text":"<p>A tool that queries external APIs safely:</p> <pre><code>{\n  \"annotations\": {\n    \"readOnlyHint\": true,\n    \"destructiveHint\": false,\n    \"idempotentHint\": true,\n    \"openWorldHint\": true\n  }\n}\n</code></pre>"},{"location":"using/tool-annotations/#best-practices","title":"Best Practices","text":""},{"location":"using/tool-annotations/#1-be-conservative-with-safety-hints","title":"1. Be Conservative with Safety Hints","text":"<ul> <li>Default to <code>destructiveHint: true</code> if uncertain</li> <li>Only set <code>readOnlyHint: true</code> for genuinely safe operations</li> </ul>"},{"location":"using/tool-annotations/#2-consider-idempotency-carefully","title":"2. Consider Idempotency Carefully","text":"<ul> <li>Set <code>idempotentHint: true</code> only if multiple calls are truly safe</li> <li>Database writes are typically not idempotent unless using upsert patterns</li> </ul>"},{"location":"using/tool-annotations/#3-use-open-world-hints-appropriately","title":"3. Use Open-World Hints Appropriately","text":"<ul> <li>Set <code>openWorldHint: true</code> for tools that query external data sources</li> <li>Set <code>openWorldHint: false</code> for tools operating on known, closed datasets</li> </ul>"},{"location":"using/tool-annotations/#4-combine-annotations-logically","title":"4. Combine Annotations Logically","text":"<pre><code>// \u2705 Good: Read-only tool that's safe to retry\n{\n  \"readOnlyHint\": true,\n  \"destructiveHint\": false,\n  \"idempotentHint\": true\n}\n\n// \u274c Avoid: Contradictory annotations\n{\n  \"readOnlyHint\": true,\n  \"destructiveHint\": true  // Contradicts read-only\n}\n</code></pre>"},{"location":"using/tool-annotations/#viewing-annotations","title":"Viewing Annotations","text":"<p>Annotations appear in tool JSON responses:</p> <pre><code>curl -H \"Authorization: Bearer $TOKEN\" \\\n     http://localhost:4444/tools/{tool_id}\n</code></pre> <p>Response: <pre><code>{\n  \"id\": \"tool_123\",\n  \"name\": \"file-reader\",\n  \"url\": \"http://example.com/api/read-file\",\n  \"annotations\": {\n    \"readOnlyHint\": true,\n    \"destructiveHint\": false,\n    \"idempotentHint\": true,\n    \"openWorldHint\": false\n  },\n  \"description\": \"Safely reads file contents\",\n  ...\n}\n</code></pre></p>"},{"location":"using/tool-annotations/#integration-with-clients","title":"Integration with Clients","text":"<p>Many MCP clients use annotations to:</p> <ul> <li>Show warning dialogs for destructive tools</li> <li>Enable auto-retry for idempotent tools</li> <li>Cache results from read-only tools</li> <li>Adjust UI presentation based on safety hints</li> </ul> <p>Properly annotated tools provide better user experiences and safer AI agent interactions.</p>"},{"location":"using/agents/","title":"Agent Integrations","text":"<p>This section provides guidance on integrating various AI agent frameworks with the Model Context Protocol (MCP) Gateway. MCP enables agents to dynamically discover and utilize tools across multiple servers, enhancing their capabilities and flexibility.</p>"},{"location":"using/agents/#supported-agent-frameworks","title":"\ud83e\udde0 Supported Agent Frameworks","text":""},{"location":"using/agents/#using-mcp-gateway-agent-frameworks-as-mcp-clients","title":"Using MCP Gateway (Agent frameworks as MCP clients)","text":"<ul> <li>LangChain: Utilize MCP tools within LangChain agents using the <code>langchain-mcp-adapters</code> package.</li> <li>LangGraph: Integrate MCP tools into LangGraph agents for advanced workflow orchestration.</li> <li>CrewAI: Connect CrewAI agents to MCP servers using the <code>crewai-tools</code> library.</li> <li>Bee Agent Framework: Leverage MCP tools within the Bee Agent Framework for scalable agent deployments.</li> <li>AutoGen: Integrate MCP tools with AutoGen agents using the <code>autogen-ext-mcp</code> package.</li> <li>LlamaIndex: Incorporate MCP tools into LlamaIndex workflows for enhanced data retrieval and question answering.</li> <li>OpenAI Agents SDK: Utilize MCP tools within OpenAI's Agents SDK for building AI agents with standardized tool access.</li> <li>Semantic Kernel: Connect Semantic Kernel agents to MCP servers for enriched context and tool integration.</li> </ul>"},{"location":"using/agents/#a2a-agent-to-agent-integration-external-agents-in-mcp-gateway","title":"A2A (Agent-to-Agent) Integration (External agents in MCP Gateway)","text":"<ul> <li>A2A Integration: Complete guide to registering external AI agents in the MCP Gateway</li> <li>External AI Agents: Register external AI agents (OpenAI, Anthropic, custom) as A2A agents in the gateway</li> <li>Tool Exposure: A2A agents are automatically exposed as MCP tools for other agents to discover and use</li> <li>Protocol Support: Supports JSONRPC, custom protocols, and multiple authentication methods</li> <li>Admin Management: Full admin UI for registering, testing, and managing external agents</li> <li>Virtual Server Integration: Associate A2A agents with virtual servers for organized tool catalogs</li> </ul>"},{"location":"using/agents/#overview","title":"\ud83d\udd0d Overview","text":"<p>Each integration guide includes:</p> <ul> <li>Installation Instructions: Step-by-step setup for the respective agent framework.</li> <li>Configuration Details: How to connect the agent to the MCP Gateway, including authentication and transport options.</li> <li>Usage Examples: Sample code demonstrating how to invoke MCP tools within the agent's workflow.</li> <li>Additional Resources: Links to official documentation and repositories for further reference.</li> </ul>"},{"location":"using/agents/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Model Context Protocol Overview</li> <li>MCP Gateway Documentation</li> </ul>"},{"location":"using/agents/a2a/","title":"A2A (Agent-to-Agent) Integration","text":"<p>The MCP Gateway supports A2A (Agent-to-Agent) integration, allowing you to register external AI agents and expose them as MCP tools for seamless integration with other agents and MCP clients.</p>"},{"location":"using/agents/a2a/#overview","title":"Overview","text":"<p>A2A integration enables you to: - Register external AI agents (OpenAI, Anthropic, custom agents) - Expose agents as MCP tools for universal discovery and access - Support multiple protocols (JSONRPC, custom formats) - Manage agent lifecycle through admin UI and APIs - Monitor performance with comprehensive metrics - Configure authentication with various auth methods</p>"},{"location":"using/agents/a2a/#quick-start","title":"Quick Start","text":""},{"location":"using/agents/a2a/#1-enable-a2a-features","title":"1. Enable A2A Features","text":"<pre><code># In your .env file or environment variables\nMCPGATEWAY_A2A_ENABLED=true\nMCPGATEWAY_A2A_METRICS_ENABLED=true\n</code></pre>"},{"location":"using/agents/a2a/#2-register-an-a2a-agent","title":"2. Register an A2A Agent","text":"<p>Via Admin UI: 1. Go to <code>http://localhost:4444/admin</code> 2. Click the \"A2A Agents\" tab 3. Fill out the \"Add New A2A Agent\" form 4. Click \"Add A2A Agent\"</p> <p>Via REST API: <pre><code>curl -X POST \"http://localhost:4444/a2a\" \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"hello_world_agent\",\n    \"endpoint_url\": \"http://localhost:9999/\",\n    \"agent_type\": \"jsonrpc\",\n    \"description\": \"External AI agent for hello world functionality\",\n    \"auth_type\": \"api_key\",\n    \"auth_value\": \"your-api-key\",\n    \"tags\": [\"ai\", \"hello-world\"]\n  }'\n</code></pre></p>"},{"location":"using/agents/a2a/#3-test-the-agent","title":"3. Test the Agent","text":"<p>Via Admin UI: - Click the blue \"Test\" button next to your agent - See real-time test results</p> <p>Via API: <pre><code>curl -X POST \"http://localhost:4444/a2a/hello_world_agent/invoke\" \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"parameters\": {\n      \"method\": \"message/send\",\n      \"params\": {\n        \"message\": {\n          \"messageId\": \"test-123\",\n          \"role\": \"user\",\n          \"parts\": [{\"type\": \"text\", \"text\": \"Hello!\"}]\n        }\n      }\n    },\n    \"interaction_type\": \"test\"\n  }'\n</code></pre></p>"},{"location":"using/agents/a2a/#4-create-virtual-server-with-a2a-agent","title":"4. Create Virtual Server with A2A Agent","text":"<pre><code>curl -X POST \"http://localhost:4444/servers\" \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"AI Assistant Server\",\n    \"description\": \"Virtual server with AI agents\",\n    \"associated_a2a_agents\": [\"agent-id-from-step-2\"]\n  }'\n</code></pre>"},{"location":"using/agents/a2a/#5-use-agent-via-mcp-protocol","title":"5. Use Agent via MCP Protocol","text":"<pre><code># A2A agents are now available as MCP tools\ncurl -X POST \"http://localhost:4444/rpc\" \\\n  -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tools/call\",\n    \"params\": {\n      \"name\": \"a2a_hello_world_agent\",\n      \"arguments\": {\n        \"method\": \"message/send\",\n        \"params\": {\"message\": {\"messageId\": \"test\", \"role\": \"user\", \"parts\": [{\"type\": \"text\", \"text\": \"Hi!\"}]}}\n      }\n    },\n    \"id\": 1\n  }'\n</code></pre>"},{"location":"using/agents/a2a/#agent-types","title":"Agent Types","text":""},{"location":"using/agents/a2a/#genericjsonrpc-agents","title":"Generic/JSONRPC Agents","text":"<p>For agents that expect standard JSONRPC format: <pre><code>{\n  \"agent_type\": \"jsonrpc\",\n  \"endpoint_url\": \"http://your-agent/\",\n  \"protocol_version\": \"1.0\"\n}\n</code></pre></p>"},{"location":"using/agents/a2a/#openai-compatible-agents","title":"OpenAI-compatible Agents","text":"<pre><code>{\n  \"agent_type\": \"openai\",\n  \"endpoint_url\": \"https://api.openai.com/v1/chat/completions\",\n  \"auth_type\": \"api_key\",\n  \"auth_value\": \"your-openai-api-key\"\n}\n</code></pre>"},{"location":"using/agents/a2a/#anthropic-compatible-agents","title":"Anthropic-compatible Agents","text":"<pre><code>{\n  \"agent_type\": \"anthropic\",\n  \"endpoint_url\": \"https://api.anthropic.com/v1/messages\",\n  \"auth_type\": \"api_key\",\n  \"auth_value\": \"your-anthropic-api-key\"\n}\n</code></pre>"},{"location":"using/agents/a2a/#custom-agents","title":"Custom Agents","text":"<pre><code>{\n  \"agent_type\": \"custom\",\n  \"endpoint_url\": \"https://your-custom-agent.com/api\",\n  \"auth_type\": \"bearer\",\n  \"auth_value\": \"your-token\",\n  \"capabilities\": {\"streaming\": true, \"functions\": false},\n  \"config\": {\"max_tokens\": 1000, \"temperature\": 0.7}\n}\n</code></pre>"},{"location":"using/agents/a2a/#authentication-methods","title":"Authentication Methods","text":"Auth Type Description Example <code>api_key</code> API key in Authorization header <code>Authorization: Bearer your-key</code> <code>bearer</code> Bearer token authentication <code>Authorization: Bearer your-token</code> <code>oauth</code> OAuth 2.0 flow (stored tokens) Handled automatically <code>none</code> No authentication required -"},{"location":"using/agents/a2a/#protocol-detection","title":"Protocol Detection","text":"<p>The gateway automatically detects agent protocols:</p> <ul> <li>JSONRPC Format: For <code>agent_type: \"jsonrpc\"</code> or URLs ending with <code>/</code></li> <li>Custom A2A Format: For other agent types</li> </ul>"},{"location":"using/agents/a2a/#monitoring-and-metrics","title":"Monitoring and Metrics","text":"<p>A2A agents provide comprehensive metrics: - Execution Count: Total number of invocations - Success Rate: Percentage of successful calls - Response Times: Min/max/average response times - Last Interaction: Timestamp of most recent call - Error Tracking: Failed call details and error messages</p>"},{"location":"using/agents/a2a/#virtual-server-integration","title":"Virtual Server Integration","text":"<p>Associate A2A agents with virtual servers to: - Organize agents by purpose or team - Control access via server-specific endpoints - Group capabilities for specific use cases - Enable MCP discovery for client tools</p>"},{"location":"using/agents/a2a/#configuration","title":"Configuration","text":"Variable Description Default <code>MCPGATEWAY_A2A_ENABLED</code> Master toggle for A2A features <code>true</code> <code>MCPGATEWAY_A2A_MAX_AGENTS</code> Maximum agents allowed <code>100</code> <code>MCPGATEWAY_A2A_DEFAULT_TIMEOUT</code> HTTP timeout (seconds) <code>30</code> <code>MCPGATEWAY_A2A_MAX_RETRIES</code> Retry attempts <code>3</code> <code>MCPGATEWAY_A2A_METRICS_ENABLED</code> Enable metrics collection <code>true</code>"},{"location":"using/agents/a2a/#security-considerations","title":"Security Considerations","text":"<ul> <li>Encrypted Storage: Agent credentials are encrypted in the database</li> <li>Rate Limiting: Configurable limits on agent invocations</li> <li>Access Control: Full authentication and authorization</li> <li>Audit Logging: All agent interactions are logged</li> <li>Network Security: HTTPS support and SSL verification</li> </ul>"},{"location":"using/agents/a2a/#troubleshooting","title":"Troubleshooting","text":""},{"location":"using/agents/a2a/#agent-not-responding","title":"Agent Not Responding","text":"<ol> <li>Check agent status in Admin UI (should be \"Active\" and \"Reachable\")</li> <li>Verify endpoint URL is correct and accessible</li> <li>Test authentication credentials</li> <li>Check agent logs for protocol format issues</li> </ol>"},{"location":"using/agents/a2a/#protocol-format-issues","title":"Protocol Format Issues","text":"<ol> <li>Verify agent expects JSONRPC format vs custom format</li> <li>Check required fields in agent's API documentation</li> <li>Use Admin UI test button to validate communication</li> <li>Review gateway logs for request/response details</li> </ol>"},{"location":"using/agents/a2a/#authentication-problems","title":"Authentication Problems","text":"<ol> <li>Verify auth_type matches agent's expected authentication</li> <li>Check auth_value is correct and not expired</li> <li>Test direct agent communication outside gateway</li> <li>Review agent's authentication documentation</li> </ol> <p>For more information on MCP Gateway features and configuration, see the main documentation.</p>"},{"location":"using/agents/autogen/","title":"AutoGen Integration with MCP Gateway","text":"<p>AutoGen is an open-source framework from Microsoft for building multi-agent systems. It supports tool calling and dynamic agent coordination.</p>"},{"location":"using/agents/autogen/#mcp-support","title":"\ud83d\udd27 MCP Support","text":"<p>Experimental support for MCP integration is available via custom <code>ToolAgent</code> wrappers that call MCP tools via HTTP or <code>mcpgateway-wrapper</code>.</p> <p>A full guide is coming soon. For now, you can use <code>requests</code> or <code>httpx</code> to call MCP Gateway endpoints from AutoGen agents.</p>"},{"location":"using/agents/autogen/#resources","title":"\ud83d\udd17 Resources","text":"<ul> <li>AutoGen GitHub</li> <li>AutoGen Docs</li> </ul>"},{"location":"using/agents/bee/","title":"Bee Agent Framework Integration with MCP Gateway","text":"<p>The Bee Agent Framework is an open-source platform developed by IBM for building, deploying, and managing AI agents at scale. Integrating Bee with the Model Context Protocol (MCP) allows agents to dynamically discover and utilize tools hosted on MCP servers, enhancing their capabilities and flexibility.</p>"},{"location":"using/agents/bee/#key-features","title":"\ud83e\uddf0 Key Features","text":"<ul> <li>Dynamic Tool Discovery: Agents can fetch available tools from MCP servers in real-time.</li> <li>Standardized Communication: Utilizes the open MCP standard for consistent tool integration.</li> <li>Multi-Server Support: Interact with tools defined on multiple MCP servers simultaneously.</li> <li>Human-in-the-Loop: Incorporate human feedback into agent workflows for improved decision-making.</li> </ul>"},{"location":"using/agents/bee/#installation","title":"\ud83d\udee0 Installation","text":"<p>To use MCP tools in the Bee Agent Framework, follow these steps:</p> <ol> <li>Clone the Bee Agent Framework Repository:</li> </ol> <p><code>bash    git clone https://github.com/i-am-bee/bee-agent-framework.git    cd bee-agent-framework</code></p> <ol> <li>Install Dependencies:</li> </ol> <pre><code>yarn install\n</code></pre> <ol> <li>Set Up the Environment:</li> </ol> <p>Ensure you have Node.js and Yarn installed. You may also need to set environment variables for your MCP server:</p> <pre><code>export MCP_GATEWAY_BASE_URL=http://localhost:4444\nexport MCP_AUTH=\"your_bearer_token\"\n</code></pre>"},{"location":"using/agents/bee/#connecting-to-mcp-gateway","title":"\ud83d\udd17 Connecting to MCP Gateway","text":"<p>Bee provides a native <code>MCPTool</code> class to simplify integration with MCP servers. Here's how to set it up:</p> <ol> <li>Import the MCPTool Class:</li> </ol> <pre><code>import { MCPTool } from 'bee-agent-framework/tools/mcp';\n</code></pre> <ol> <li>Configure the MCPTool:</li> </ol> <pre><code>const mcpTool = new MCPTool({\n  baseUrl: process.env.MCP_GATEWAY_BASE_URL,\n  auth: {\n    username: process.env.MCP_AUTH_USER,\n    password: process.env.MCP_AUTH_PASS,\n  },\n});\n</code></pre> <ol> <li>Register the Tool with Your Agent:</li> </ol> <pre><code>agent.registerTool(mcpTool);\n</code></pre> <p>This setup allows your Bee agent to discover and invoke tools from the specified MCP server dynamically.</p>"},{"location":"using/agents/bee/#creating-an-agent","title":"\ud83e\udd16 Creating an Agent","text":"<p>After setting up the MCPTool, you can create a Bee agent:</p> <pre><code>import { Agent } from 'bee-agent-framework';\n\nconst agent = new Agent({\n  name: 'Data Analyst',\n  tools: [mcpTool],\n});\n</code></pre>"},{"location":"using/agents/bee/#using-the-agent","title":"\ud83e\uddea Using the Agent","text":"<p>Once the agent is created, you can assign tasks and execute them:</p> <pre><code>agent.runTask('Generate a sales report for Q1 2025');\n</code></pre> <p>The agent will utilize tools from the MCP server to accomplish the task.</p>"},{"location":"using/agents/bee/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Bee Agent Framework Documentation</li> <li>Bee Agent Framework GitHub Repository</li> <li>Model Context Protocol Overview</li> </ul>"},{"location":"using/agents/crewai/","title":"CrewAI Integration with MCP Gateway","text":"<p>CrewAI is a multi-agent orchestration framework that enables AI agents to collaborate on complex tasks. Integrating CrewAI with the Model Context Protocol (MCP) allows agents to dynamically discover and utilize tools hosted on MCP servers, enhancing their capabilities and flexibility.</p>"},{"location":"using/agents/crewai/#key-features","title":"\ud83e\uddf0 Key Features","text":"<ul> <li>Dynamic Tool Discovery: Agents can fetch available tools from MCP servers in real-time.</li> <li>Standardized Communication: Utilizes the open MCP standard for consistent tool integration.</li> <li>Multi-Server Support: Interact with tools defined on multiple MCP servers simultaneously.</li> </ul>"},{"location":"using/agents/crewai/#installation","title":"\ud83d\udee0 Installation","text":"<p>To use MCP tools in CrewAI, install the <code>crewai-tools</code> package with MCP support:</p> <pre><code>pip install \"crewai-tools[mcp]\"\n</code></pre>"},{"location":"using/agents/langchain/","title":"LangChain Integration with MCP Gateway","text":"<p>LangChain is a framework for developing applications powered by language models. Integrating LangChain with the Model Context Protocol (MCP) allows agents to utilize tools defined across one or more MCP servers, enabling seamless interaction with external data sources and services.</p>"},{"location":"using/agents/langchain/#key-features","title":"\ud83e\uddf0 Key Features","text":"<ul> <li>Dynamic Tool Access: Connects to MCP servers to fetch available tools in real time.</li> <li>Multi-Server Support: Interact with tools defined on multiple MCP servers simultaneously.</li> <li>Standardized Communication: Utilizes the open MCP standard for consistent tool integration.</li> </ul>"},{"location":"using/agents/langchain/#installation","title":"\ud83d\udee0 Installation","text":"<p>To use MCP tools in LangChain, install the <code>langchain-mcp-adapters</code> package:</p> <pre><code>pip install langchain-mcp-adapters\n</code></pre>"},{"location":"using/agents/langchain/#connecting-to-mcp-gateway","title":"\ud83d\udd17 Connecting to MCP Gateway","text":"<p>Here's how to set up a connection to your MCP Gateway:</p> <pre><code>from langchain_mcp_adapters.client import MultiServerMCPClient\nfrom langgraph.prebuilt import create_react_agent\n\nclient = MultiServerMCPClient(\n    {\n        \"gateway\": {\n            \"url\": \"http://localhost:4444/mcp\",\n            \"transport\": \"streamable_http\",\n        }\n    }\n)\n</code></pre> <p>Replace <code>\"http://localhost:4444/mcp\"</code> with the URL of your MCP Gateway.</p>"},{"location":"using/agents/langchain/#creating-an-agent","title":"\ud83e\udd16 Creating an Agent","text":"<p>After setting up the client, you can create a LangChain agent:</p> <pre><code>agent = create_react_agent(\n    tools=client.get_tools(),\n    llm=your_language_model,\n)\n</code></pre> <p>Replace <code>your_language_model</code> with your configured language model instance.</p>"},{"location":"using/agents/langchain/#using-the-agent","title":"\ud83e\uddea Using the Agent","text":"<p>Once the agent is created, you can use it to perform tasks:</p> <pre><code>response = agent.run(\"Use the 'weather' tool to get the forecast for Dublin.\")\nprint(response)\n</code></pre>"},{"location":"using/agents/langchain/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>LangChain MCP Adapters Documentation</li> <li>LangChain GitHub Repository</li> <li>Model Context Protocol Overview</li> </ul>"},{"location":"using/agents/langgraph/","title":"LangGraph Integration with MCP Gateway","text":"<p>LangGraph is a framework for developing applications powered by language models. Integrating LangGraph with the Model Context Protocol (MCP) allows agents to utilize tools defined across one or more MCP servers, enabling seamless interaction with external data sources and services.</p>"},{"location":"using/agents/langgraph/#key-features","title":"\ud83e\uddf0 Key Features","text":"<ul> <li>Dynamic Tool Access: Connects to MCP servers to fetch available tools in real time.</li> <li>Multi-Server Support: Interact with tools defined on multiple MCP servers simultaneously.</li> <li>Standardized Communication: Utilizes the open MCP standard for consistent tool integration.</li> </ul>"},{"location":"using/agents/langgraph/#installation","title":"\ud83d\udee0 Installation","text":"<p>To use MCP tools in LangGraph, install the <code>langchain-mcp-adapters</code> package:</p> <pre><code>pip install langchain-mcp-adapters\n</code></pre>"},{"location":"using/agents/langgraph/#connecting-to-mcp-gateway","title":"\ud83d\udd17 Connecting to MCP Gateway","text":"<p>Here's how to set up a connection to your MCP Gateway:</p> <pre><code>from langchain_mcp_adapters.client import MultiServerMCPClient\nfrom langgraph.prebuilt import create_react_agent\n\nclient = MultiServerMCPClient(\n    {\n        \"gateway\": {\n            \"url\": \"http://localhost:4444/mcp\",\n            \"transport\": \"streamable_http\",\n        }\n    }\n)\n</code></pre> <p>Replace <code>\"http://localhost:4444/mcp\"</code> with the URL of your MCP Gateway.</p>"},{"location":"using/agents/langgraph/#creating-an-agent","title":"\ud83e\udd16 Creating an Agent","text":"<p>After setting up the client, you can create a LangGraph agent:</p> <pre><code>agent = create_react_agent(\n    tools=client.get_tools(),\n    llm=your_language_model,\n)\n</code></pre> <p>Replace <code>your_language_model</code> with your configured language model instance.</p>"},{"location":"using/agents/langgraph/#using-the-agent","title":"\ud83e\uddea Using the Agent","text":"<p>Once the agent is created, you can use it to perform tasks:</p> <pre><code>response = agent.run(\"Use the 'weather' tool to get the forecast for Dublin.\")\nprint(response)\n</code></pre>"},{"location":"using/agents/langgraph/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>LangGraph MCP Integration Documentation</li> <li>LangChain MCP Adapters GitHub Repository</li> <li>Model Context Protocol Overview</li> </ul>"},{"location":"using/agents/llamaindex/","title":"LlamaIndex Integration with MCP Gateway","text":"<p>LlamaIndex is a framework for building retrieval-augmented generation (RAG) pipelines.</p>"},{"location":"using/agents/llamaindex/#mcp-support","title":"\ud83d\udd27 MCP Support","text":"<p>You can wrap tool calls from MCP Gateway as query engines, retrievers, or tool nodes inside LlamaIndex.</p> <p>A dedicated <code>ToolRetriever</code> adapter is under development to support direct MCP tool discovery.</p>"},{"location":"using/agents/openai-sdk/","title":"OpenAI Agents SDK + MCP Gateway","text":"<p>OpenAI's Agents SDK supports structured tool use and multi-modal workflows. MCP Gateway can serve as a unified tool registry for OpenAI agents.</p>"},{"location":"using/agents/openai-sdk/#integration","title":"\ud83d\udd27 Integration","text":"<p>OpenAI SDK has native support for MCP.</p>"},{"location":"using/agents/openai-sdk/#resources","title":"\ud83d\udd17 Resources","text":"<ul> <li>OpenAI Agents SDK</li> <li>MCP Tool Protocol</li> </ul>"},{"location":"using/agents/semantic-kernel/","title":"Semantic Kernel Integration with MCP Gateway","text":"<p>Semantic Kernel is a Microsoft OSS framework for building AI-first apps.</p>"},{"location":"using/agents/semantic-kernel/#mcp-integration","title":"\ud83d\udd27 MCP Integration","text":"<p>Support for external tools via REST allows you to call MCP tools from SK plugins using <code>HttpFunction</code>.</p> <p>Define a plugin that points to MCP Gateway's <code>/tools/invoke</code> and pass arguments as JSON.</p>"},{"location":"using/agents/semantic-kernel/#resources","title":"\ud83d\udd17 Resources","text":"<ul> <li>Semantic Kernel GitHub</li> <li>Using REST APIs in SK</li> </ul>"},{"location":"using/clients/","title":"MCP Clients","text":"<p>MCP Gateway is compatible with any client that speaks the Model Context Protocol (MCP). This section documents tested clients, their configuration, and any integration tips.</p>"},{"location":"using/clients/#client-types","title":"\ud83d\udd0c Client Types","text":"<p>There are two ways clients typically connect:</p> <ul> <li>Direct to Gateway (HTTP/SSE/WS)</li> <li>Via <code>mcpgateway-wrapper</code> (stdio transport, especially for LLM apps)</li> </ul>"},{"location":"using/clients/#compatible-clients","title":"\u2705 Compatible Clients","text":"Client Type Notes Claude Desktop UI Configure to launch <code>mcpgateway.wrapper</code> via JSON Cline CLI Supports stdio or direct MCP over HTTP Continue VSCode plugin MCP plugin support MCP Inspector Web debugger Great for manual testing and exploring protocol features <p>Each of these tools can consume the MCP protocol and dynamically detect tools from the Gateway.</p>"},{"location":"using/clients/#whats-in-this-section","title":"\ud83d\udcc1 What's in This Section","text":"Page Description Claude Desktop How to connect Claude to MCP Gateway via wrapper Cline Using the CLI tool for invoking tools or prompts Continue Integrating with the VSCode plugin MCP Inspector Launch and test the Gateway or wrapper via a web debugger"},{"location":"using/clients/claude-desktop/","title":"Claude Desktop \u00d7 MCP Gateway","text":"<p>Claude Desktop can launch a local stdio process for every chat \"backend\". By pointing it at <code>mcpgateway.wrapper</code> you give Claude instant access to every tool, prompt and resource registered in your Gateway.</p>"},{"location":"using/clients/claude-desktop/#where-to-edit-the-config","title":"\ud83d\udcc2 Where to edit the config","text":"OS Path macOS <code>~/Library/Application Support/Claude/claude_desktop_config.json</code> Windows <code>%APPDATA%\\Claude\\claude_desktop_config.json</code> Linux (Flatpak / AppImage) <code>$HOME/.config/Claude/claude_desktop_config.json</code>"},{"location":"using/clients/claude-desktop/#minimal-json-block","title":"\u2699\ufe0f Minimal JSON block","text":"<pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"command\": \"python3\",\n      \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n      \"env\": {\n        \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1\",\n        \"MCP_AUTH\": \"&lt;YOUR_JWT_TOKEN&gt;\",\n        \"MCP_TOOL_CALL_TIMEOUT\": \"120\"\n      }\n    }\n  }\n}\n</code></pre> <p>Use the real server ID instead of <code>1</code> and paste your bearer token.</p>"},{"location":"using/clients/claude-desktop/#docker-alternative","title":"\ud83d\udc33 Docker alternative","text":"<pre><code>{\n  \"command\": \"docker\",\n  \"args\": [\n    \"run\", \"--rm\", \"--network=host\", \"-i\",\n    \"-e\", \"MCP_SERVER_URL=http://localhost:4444/servers/UUID_OF_SERVER_1\",\n    \"-e\", \"MCP_AUTH=&lt;YOUR_JWT_TOKEN&gt;\",\n    \"ghcr.io/ibm/mcp-context-forge:0.6.0\",\n    \"python3\", \"-m\", \"mcpgateway.wrapper\"\n  ]\n}\n</code></pre> <p>(Mac / Windows users should replace <code>localhost</code> with <code>host.docker.internal</code>.)</p>"},{"location":"using/clients/claude-desktop/#pipx-uvx-one-liner-wrapper-already-installed","title":"\u26a1 pipx / uvx one-liner (wrapper already installed)","text":"<p>If you installed the package globally:</p> <pre><code>{\n  \"command\": \"pipx\",\n  \"args\": [\"run\", \"python3\", \"-m\", \"mcpgateway.wrapper\"],\n  \"env\": {\n    \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1\",\n    \"MCP_AUTH\": \"&lt;YOUR_JWT_TOKEN&gt;\"\n  }\n}\n</code></pre>"},{"location":"using/clients/claude-desktop/#smoke-test-inside-claude","title":"\ud83e\uddea Smoke-test inside Claude","text":"<ol> <li>Restart Claude Desktop (quit from system-tray).</li> <li>Select \"mcpgateway-wrapper\" in the chat dropdown.</li> <li>Type:</li> </ol> <p><pre><code>#get_system_time { \"timezone\": \"Europe/Dublin\" }\n</code></pre> 4. The wrapper should proxy the call \u2192 Gateway \u2192 tool \u2192 chat reply.</p> <p>If tools don't appear, open File \u25b8 Settings \u25b8 Developer \u25b8 View Logs to see wrapper output.</p>"},{"location":"using/clients/claude-desktop/#environment-variables-recap","title":"\ud83d\udd11 Environment variables recap","text":"Var Purpose <code>MCP_SERVER_URL</code> One or more <code>/servers/{id}</code> endpoints (comma-sep) <code>MCP_AUTH</code> JWT bearer for Gateway auth <code>MCP_TOOL_CALL_TIMEOUT</code> Per-tool timeout (seconds, optional) <code>MCP_WRAPPER_LOG_LEVEL</code> <code>DEBUG</code>, <code>INFO</code>, <code>OFF</code> (optional) <p>You can place them:</p> <ul> <li>under <code>\"env\"</code> in the mcpServers block (preferred)</li> <li>in your user/environment shell before launching Claude.</li> </ul>"},{"location":"using/clients/cline/","title":"Cline (VS Code Extension)","text":"<p>Cline is a Visual Studio Code extension that brings AI-powered coding assistance directly into your editor. It supports the Model Context Protocol (MCP), enabling seamless integration with MCP-compatible servers like MCP Gateway.</p>"},{"location":"using/clients/cline/#key-features","title":"\ud83e\uddf0 Key Features","text":"<ul> <li>AI-Powered Coding: Leverages advanced AI models (e.g., Claude 3.5 Sonnet, DeepSeek Chat) for code generation, editing, and debugging.</li> <li>MCP Integration: Connects to MCP servers to discover and utilize tools dynamically.</li> <li>Terminal and Browser Access: Executes terminal commands and performs browser operations with user permission.</li> <li>Custom Tools: Supports adding custom tools via MCP for extended functionality.</li> </ul>"},{"location":"using/clients/cline/#installation","title":"\ud83d\udee0 Installation","text":"<ol> <li>Install Cline Extension:</li> <li>Open VS Code.</li> <li>Navigate to the Extensions view (<code>Ctrl+Shift+X</code> or <code>Cmd+Shift+X</code>).</li> <li> <p>Search for \"Cline\" and click \"Install\".</p> </li> <li> <p>Sign In to Cline:</p> </li> <li>Click the Cline icon in the Activity Bar.</li> <li>Follow the prompts to sign in or create a new account at app.cline.bot.</li> <li>New users receive free credits; no credit card required.</li> </ol>"},{"location":"using/clients/cline/#connecting-to-mcp-gateway","title":"\ud83d\udd17 Connecting to MCP Gateway","text":"<p>To integrate Cline with your MCP Gateway:</p> <ol> <li>Configure MCP Server:</li> <li>Open the Cline settings in VS Code.</li> <li>Navigate to the MCP Servers section.</li> <li> <p>Add a new MCP server with the following configuration under mcpServers as shown below:</p> <pre><code>\"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n       \"disabled\": true,\n       \"timeout\": 60,\n       \"type\": \"stdio\",\n       \"command\": \"uv\",\n       \"args\": [\n       \"run\",\n       \"--directory\",\n       \"REPLACE_WITH_PATH_TO_REPO\",\n       \"-m\",\n       \"mcpgateway.wrapper\"\n       ],\n       \"env\": {\n          \"MCP_SERVER_URL\": \"http://localhost:4444\",\n          \"MCP_AUTH\": \"Bearer REPLACE_WITH_MCPGATEWAY_BEARER_TOKEN\",\n          \"MCP_WRAPPER_LOG_LEVEL\": \"OFF\"\n       }\n    }\n }\n</code></pre> </li> <li> <p>Enable the MCP Server:</p> </li> <li> <p>Ensure the newly added MCP server is enabled in the Cline settings.</p> </li> <li> <p>Verify Connection:</p> </li> <li>In the Cline interface, navigate to the MCP Servers section.</li> <li>Confirm that the MCP Gateway server is listed and shows a green status indicator.</li> </ol>"},{"location":"using/clients/cline/#using-mcp-tools-in-cline","title":"\ud83e\uddea Using MCP Tools in Cline","text":"<p>Once connected:</p> <ul> <li>Discover Tools: Cline will automatically fetch and list available tools from the MCP Gateway.</li> <li>Invoke Tools: Use natural language prompts in Cline to invoke tools. For example:</li> <li>\"Run the <code>hello_world</code> tool with the argument <code>name: Alice</code>.\"</li> <li>Monitor Responses: Cline will display the tool's output directly within the chat interface.</li> </ul>"},{"location":"using/clients/cline/#tips-for-effective-use","title":"\ud83d\udcdd Tips for Effective Use","text":"<ul> <li>.clinerules File: Create a <code>.clinerules</code> file in your project root to define project-specific behaviors and instructions for Cline.</li> <li>Custom Instructions: Utilize Cline's Custom Instructions feature to tailor its behavior across all projects.</li> <li>Model Selection: Choose the AI model that best fits your project's needs within the Cline settings.</li> </ul>"},{"location":"using/clients/cline/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Cline Official Website</li> <li>Cline Documentation</li> </ul>"},{"location":"using/clients/continue/","title":"Continue (VS Code Extension)","text":"<p>Continue is an open-source AI code assistant for Visual Studio Code. Because it speaks the Model Context Protocol (MCP), Continue can discover and call the tools you publish through MCP Gateway - no plug-in code required.</p>"},{"location":"using/clients/continue/#key-features","title":"\ud83e\uddf0 Key Features","text":"<ul> <li>\u2728 AI-powered completions, edits &amp; chat</li> <li>\ud83d\udd0c MCP integration - dynamic tool list pulled from your gateway</li> <li>\ud83c\udfd7 Bring-your-own model - local Ollama, OpenAI, Anthropic, etc.</li> <li>\ud83e\udde0 Context-aware - reads your workspace to craft better replies</li> </ul>"},{"location":"using/clients/continue/#installation","title":"\ud83d\udee0 Installation","text":"<ol> <li>Install \"Continue\": <code>Ctrl \u21e7 X</code> \u2192 search Continue \u2192 Install</li> <li>Open config: <code>Ctrl \u21e7 P</code> \u2192 \"Continue: Open Config\"    \u2192 edits <code>~/.continue/config.json</code></li> </ol>"},{"location":"using/clients/continue/#connecting-continue-to-mcp-gateway","title":"\ud83d\udd17 Connecting Continue to MCP Gateway","text":"<p>There are two ways to attach Continue to a gateway:</p> Transport When to use Snippet SSE (HTTP) Remote / SSL / no local process <code>&lt;-- see Option A&gt;</code> Stdio wrapper Local dev, no SSE, or auth-header issues <code>&lt;-- see Option B&gt;</code> <p>For both options you still need a JWT or Basic auth if the gateway is protected.</p>"},{"location":"using/clients/continue/#option-a-direct-sse","title":"Option A - Direct SSE","text":"<pre><code>// ~/.continue/config.json\n{\n  \"experimental\": {\n    \"modelContextProtocolServer\": {\n      \"transport\": {\n        \"type\": \"sse\",\n        \"url\": \"http://localhost:4444/servers/UUID_OF_SERVER_1/sse\",\n        \"headers\": {\n          \"Authorization\": \"Bearer ${env:MCP_AUTH}\"\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>Generate a token:</p> <pre><code>export MCP_AUTH=$(python3 -m mcpgateway.utils.create_jwt_token -u admin --secret my-test-key)\n</code></pre>"},{"location":"using/clients/continue/#option-b-local-stdio-bridge-mcpgatewaywrapper","title":"Option B - Local stdio bridge (<code>mcpgateway.wrapper</code>)","text":"<ol> <li>Install the wrapper (pipx keeps it isolated):</li> </ol> <pre><code>pipx install --include-deps mcp-contextforge-gateway\n</code></pre> <ol> <li>Config in Continue:</li> </ol> <pre><code>{\n  \"experimental\": {\n    \"modelContextProtocolServer\": {\n      \"transport\": {\n        \"type\": \"stdio\",\n        \"command\": \"python3\",\n        \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n        \"env\": {\n          \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1\",\n          \"MCP_AUTH\": \"${env:MCP_AUTH}\",\n          \"MCP_TOOL_CALL_TIMEOUT\": \"120\"\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>If you prefer Docker: replace <code>\"command\": \"python3\"</code> with <code>\"command\": \"docker\"</code> and use the same container arguments shown in the Copilot docs.</p>"},{"location":"using/clients/continue/#using-gateway-tools","title":"\ud83e\uddea Using Gateway Tools","text":"<p>Once VS Code restarts:</p> <ol> <li>Open Continue Chat (<code>\u2325 C</code> on macOS / <code>Alt C</code> on Windows/Linux)</li> <li>Click Tools - your gateway's tools should appear</li> <li>Chat naturally:</li> </ol> <pre><code>Run hello_world with name = \"Alice\"\n</code></pre> <p>The wrapper/Gateway executes and streams the JSON result back to Continue.</p>"},{"location":"using/clients/continue/#tips","title":"\ud83d\udcdd Tips","text":"<ul> <li>SSE vs stdio - SSE is simpler in prod, stdio is great for offline or   header-free environments.</li> <li>Multiple servers - add more blocks under <code>\"servers\"</code> if you run staging vs prod.</li> <li>Custom instructions - Continue's Custom Instructions pane lets you steer tool use.</li> </ul>"},{"location":"using/clients/continue/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>\ud83c\udf10 Continue docs</li> <li>\ud83d\udcd6 MCP Spec</li> <li>\ud83d\udee0 MCP Gateway GitHub</li> </ul>"},{"location":"using/clients/copilot/","title":"\ud83e\udde0 GitHub Copilot + MCP Gateway","text":"<p>Super-charge Copilot (or any VS Code chat agent that speaks MCP) with tools, prompts and resources from your own MCP Gateway.</p> <p>With Copilot \u2192 MCP you can:</p> <ul> <li>\ud83d\udd27 call custom / enterprise tools from chat</li> <li>\ud83d\udcc2 pull live resources (configs, docs, snippets)</li> <li>\ud83e\udde9 render prompts or templates directly inside the IDE</li> </ul> <p>Copilot supports SSE streams out-of-the-box; for environments that forbid long-lived HTTP or require local stdio, you can insert the bundled <code>mcpgateway.wrapper</code> bridge.</p>"},{"location":"using/clients/copilot/#prerequisites","title":"\ud83d\udee0 Prerequisites","text":"<ul> <li>VS Code \u2265 1.99</li> <li><code>\"chat.mcp.enabled\": true</code> in your settings.json</li> <li>An MCP Gateway running (<code>make serve</code>, Docker, or container image)</li> <li>A JWT or Basic credentials (<code>admin</code> / <code>changeme</code> in dev)</li> </ul>"},{"location":"using/clients/copilot/#option-1-direct-sse-best-for-prod-remote","title":"\ud83d\udd17 Option 1 - Direct SSE (best for prod / remote)","text":""},{"location":"using/clients/copilot/#1-create-vscodemcpjson","title":"1 - Create <code>.vscode/mcp.json</code>","text":"<pre><code>{\n  \"servers\": {\n    \"mcp-gateway\": {\n      \"type\": \"sse\",\n      \"url\": \"https://mcpgateway.example.com/servers/UUID_OF_SERVER_1/sse\",\n      \"headers\": {\n        \"Authorization\": \"Bearer &lt;YOUR_JWT_TOKEN&gt;\"\n      }\n    }\n  }\n}\n</code></pre> <p>Tip - generate a token</p> <pre><code>python3 -m mcpgateway.utils.create_jwt_token -u admin --exp 10080 --secret my-test-key\n</code></pre>"},{"location":"using/clients/copilot/#option-2-streamable-http-best-for-prod-remote","title":"\ud83d\udd17 Option 2 - Streamable HTTP (best for prod / remote)","text":""},{"location":"using/clients/copilot/#2-create-vscodemcpjson","title":"2 - Create <code>.vscode/mcp.json</code>","text":"<pre><code>{\n  \"servers\": {\n    \"mcp-gateway\": {\n      \"type\": \"http\",\n      \"url\": \"https://mcpgateway.example.com/servers/UUID_OF_SERVER_1/mcp/\",\n      \"headers\": {\n        \"Authorization\": \"Bearer &lt;YOUR_JWT_TOKEN&gt;\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"using/clients/copilot/#option-3-local-stdio-bridge-mcpgatewaywrapper","title":"\ud83d\udd17 Option 3 - Local stdio bridge (<code>mcpgateway.wrapper</code>)","text":"<p>Perfect when:</p> <ul> <li>the IDE cannot add HTTP headers, or</li> <li>you're offline / behind a corp proxy.</li> </ul>"},{"location":"using/clients/copilot/#1-install-the-wrapper-one-liner","title":"1 - Install the wrapper (one-liner)","text":"<pre><code>pipx install --include-deps mcp-contextforge-gateway          # isolates in ~/.local/pipx/venvs\n#   - or -\nuv pip install mcp-contextforge-gateway                       # inside any uv/venv you like\n</code></pre>"},{"location":"using/clients/copilot/#2-create-vscodemcpjson_1","title":"2 - Create <code>.vscode/mcp.json</code>","text":"<pre><code>{\n  \"servers\": {\n    \"mcp-wrapper\": {\n      \"type\": \"stdio\",\n      \"command\": \"python3\",\n      \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n      \"env\": {\n        \"MCP_SERVER_URL\": \"http://localhost:4444/servers/UUID_OF_SERVER_1/mcp\",\n        \"MCP_AUTH\": \"Bearer &lt;YOUR_JWT_TOKEN&gt;\",\n        \"MCP_TOOL_CALL_TIMEOUT\": \"120\"\n      }\n    }\n  }\n}\n</code></pre> <p>That's it - VS Code spawns the stdio process, pipes JSON-RPC, and you're ready to roll.</p> \ud83d\udc33 Docker alternative <pre><code>{\n  \"command\": \"docker\",\n  \"args\": [\n    \"run\", \"--rm\", \"--network=host\", \"-i\",\n    \"-e\", \"MCP_SERVER_URL=http://localhost:4444/servers/UUID_OF_SERVER_1\",\n    \"-e\", \"MCP_AUTH=&lt;YOUR_JWT_TOKEN&gt;\",\n    \"ghcr.io/ibm/mcp-context-forge:0.6.0\",\n    \"python3\", \"-m\", \"mcpgateway.wrapper\"\n  ]\n}\n</code></pre>"},{"location":"using/clients/copilot/#verify-inside-copilot","title":"\ud83e\uddea Verify inside Copilot","text":"<ol> <li>Open Copilot Chat \u2192 switch to Agent mode.</li> <li>Click Tools - your Gateway tools should list.</li> <li>Try:</li> </ol> <pre><code>#echo { \"message\": \"Hello from VS Code\" }\n</code></pre> <p>Copilot routes the call \u2192 Gateway \u2192 tool, and prints the reply.</p>"},{"location":"using/clients/copilot/#good-to-know","title":"\ud83d\udcdd Good to know","text":"<ul> <li>Use SSE for production, stdio for local/offline.</li> <li>You can manage servers, tools and prompts from the Gateway Admin UI (<code>/admin</code>).</li> <li>Need a bearer quickly?   <code>export MCP_AUTH=$(python3 -m mcpgateway.utils.create_jwt_token -u admin --secret my-test-key)</code></li> </ul>"},{"location":"using/clients/copilot/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Gateway GitHub \u2192 ibm/mcp-context-forge</li> <li>MCP Spec \u2192 https://modelcontextprotocol.io/</li> <li>Copilot docs \u2192 features/copilot</li> </ul>"},{"location":"using/clients/mcp-cli/","title":"\ud83d\udda5\ufe0f MCP CLI + MCP Context Forge Gateway","text":"<p>A powerful, feature-rich command-line interface for interacting with Model Context Protocol servers through IBM's MCP Context Forge Gateway. The mcp-cli provides multiple operational modes including chat, interactive shell, and scriptable automation, with support for multiple LLM providers.</p> <p>With mcp-cli \u2192 MCP Context Forge Gateway you can:</p> <ul> <li>\ud83d\udd27 Auto-discover tools from your MCP Context Forge Gateway and use them seamlessly</li> <li>\ud83d\udd04 Switch between providers (OpenAI, Anthropic, Ollama) during sessions</li> <li>\ud83d\udcca Export conversation history to JSON for analysis and debugging</li> <li>\ud83e\udd16 Chat with LLMs that automatically invoke Gateway tools and resources</li> <li>\ud83d\udcdc Automate workflows with scriptable command-line operations</li> <li>\ud83d\udee0\ufe0f Compare modes - chat vs. interactive vs. command-line automation</li> </ul> <p>The mcp-cli supports stdio connections out-of-the-box through the bundled <code>mcpgateway.wrapper</code> bridge, with optional direct SSE access for production environments.</p>"},{"location":"using/clients/mcp-cli/#prerequisites","title":"\ud83d\udee0 Prerequisites","text":"<ul> <li>Python \u2265 3.11</li> <li>uv (recommended) or pip for dependency management</li> <li>MCP Context Forge Gateway running locally or remotely (default: http://localhost:4444)</li> <li>JWT or Basic Auth credentials for Gateway access</li> <li>LLM Provider API keys (optional, for chat mode):</li> <li>OpenAI: <code>OPENAI_API_KEY</code> environment variable</li> <li>Anthropic: <code>ANTHROPIC_API_KEY</code> environment variable</li> <li>Ollama: Local Ollama installation with function-calling capable models</li> </ul>"},{"location":"using/clients/mcp-cli/#installation","title":"\ud83d\ude80 Installation","text":""},{"location":"using/clients/mcp-cli/#install-mcp-cli","title":"Install MCP CLI","text":"<pre><code>git clone https://github.com/chrishayuk/mcp-cli\ncd mcp-cli\npip install -e \".[cli,dev]\"\n</code></pre>"},{"location":"using/clients/mcp-cli/#using-uv-recommended","title":"Using UV (Recommended)","text":"<pre><code># Install UV if not already installed\npip install uv\n\n# Clone and install\ngit clone https://github.com/chrishayuk/mcp-cli\ncd mcp-cli\nuv sync --reinstall\n\n# Run using UV\nuv run mcp-cli --help\n</code></pre>"},{"location":"using/clients/mcp-cli/#install-mcp-context-forge-gateway","title":"Install MCP Context Forge Gateway","text":"<pre><code># Clone the MCP Context Forge repository\ngit clone https://github.com/IBM/mcp-context-forge\ncd mcp-context-forge\n\n# Install and start the gateway\nmake venv install serve\n# Gateway will be available at http://localhost:4444\n</code></pre>"},{"location":"using/clients/mcp-cli/#configuring-your-server","title":"\u2699\ufe0f Configuring Your Server","text":"<p>Create a <code>server_config.json</code> file to define your MCP Context Forge Gateway connection:</p>"},{"location":"using/clients/mcp-cli/#basic-configuration-local-development","title":"Basic Configuration (Local Development)","text":"<pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"command\": \"/path/to/mcp-context-forge/.venv/bin/python\",\n      \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n      \"env\": {\n        \"MCP_AUTH\": \"&lt;YOUR_AUTH_TOKEN_HERE&gt;\",\n        \"MCP_SERVER_URL\": \"http://localhost:4444\",\n        \"MCP_TOOL_CALL_TIMEOUT\": \"120\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"using/clients/mcp-cli/#docker-based-configuration-production","title":"Docker-based Configuration (Production)","text":"<pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"MCP_SERVER_URL=http://host.docker.internal:4444\",\n        \"-e\",\n        \"MCP_AUTH=${MCPGATEWAY_BEARER_TOKEN}\",\n        \"--entrypoint\",\n        \"uv\",\n        \"ghcr.io/ibm/mcp-context-forge:0.6.0\",\n        \"run\",\n        \"--directory\",\n        \"mcpgateway-wrapper\",\n        \"mcpgateway-wrapper\"\n      ],\n      \"env\": {\n        \"MCPGATEWAY_BEARER_TOKEN\": \"your-jwt-token-here\"\n      }\n    }\n  }\n}\n</code></pre> <p>\ud83d\udca1 Generate a JWT token for your Gateway</p> <pre><code># From your mcp-context-forge directory\npython3 -m mcpgateway.utils.create_jwt_token -u admin --exp 10080 --secret my-test-key\n</code></pre> <p>\u26a0\ufe0f Important Notes - Use the full path to your virtual environment's Python to avoid import errors - Make sure your MCP Context Forge Gateway is running on the correct port (default: 4444) - The wrapper requires <code>MCP_SERVER_URL</code> environment variable</p>"},{"location":"using/clients/mcp-cli/#available-modes","title":"\ud83c\udf10 Available Modes","text":""},{"location":"using/clients/mcp-cli/#1-chat-mode-default","title":"1. Chat Mode (Default)","text":"<p>Natural language interface where LLMs automatically use available tools:</p> <pre><code># Default chat mode with OpenAI\nexport OPENAI_API_KEY=\"your-api-key\"\nmcp-cli chat --server mcpgateway-wrapper\n\n# Using Ollama (recommended to avoid OpenAI tool name length limits)\nmcp-cli chat --server mcpgateway-wrapper --provider ollama --model mistral-nemo:latest\n\n# Using Anthropic\nexport ANTHROPIC_API_KEY=\"your-api-key\"\nmcp-cli chat --server mcpgateway-wrapper --provider anthropic --model claude-sonnet-4-20250514\n</code></pre>"},{"location":"using/clients/mcp-cli/#2-interactive-mode","title":"2. Interactive Mode","text":"<p>Command-driven shell interface for direct server operations:</p> <pre><code>mcp-cli interactive --server mcpgateway-wrapper\n</code></pre>"},{"location":"using/clients/mcp-cli/#3-command-mode","title":"3. Command Mode","text":"<p>Unix-friendly interface for automation and pipeline integration:</p> <pre><code># Process content with LLM\nmcp-cli cmd --server mcpgateway-wrapper --input document.md --prompt \"Summarize: {{input}}\"\n\n# Direct tool invocation\nmcp-cli cmd --server mcpgateway-wrapper --tool github-server-list-notifications --raw\n\n# Search for GitHub issues\nmcp-cli cmd --server mcpgateway-wrapper --tool github-server-search-issues --tool-args '{\"q\":\"assignee:@me\"}' --raw\n</code></pre>"},{"location":"using/clients/mcp-cli/#4-direct-commands","title":"4. Direct Commands","text":"<p>Run individual commands without entering interactive mode:</p> <pre><code># List available tools\nmcp-cli tools list --server mcpgateway-wrapper\n\n# Ping the gateway\nmcp-cli ping --server mcpgateway-wrapper\n\n# List available prompts\nmcp-cli prompts list --server mcpgateway-wrapper\n\n# List available resources\nmcp-cli resources list --server mcpgateway-wrapper\n</code></pre>"},{"location":"using/clients/mcp-cli/#verify-tool-discovery","title":"\ud83e\uddea Verify Tool Discovery","text":"<p>Once connected to your MCP Context Forge Gateway, mcp-cli automatically discovers all available tools:</p> <ol> <li>Test connection: <code>mcp-cli ping --server mcpgateway-wrapper</code></li> <li>List tools: <code>mcp-cli tools list --server mcpgateway-wrapper</code></li> <li>Start Chat Mode: <code>mcp-cli chat --server mcpgateway-wrapper --provider ollama --model mistral-nemo:latest</code></li> <li>Type <code>/tools</code> - your Gateway tools should list automatically</li> <li>Try asking: <code>\"What tools are available?\"</code> and the LLM will show discovered tools</li> <li>Test GitHub integration: <code>\"What issues have been assigned to me?\"</code></li> </ol> <p>The CLI auto-discovers tools from your Gateway and makes them available across all modes.</p>"},{"location":"using/clients/mcp-cli/#llm-provider-setup","title":"\ud83d\udd27 LLM Provider Setup","text":""},{"location":"using/clients/mcp-cli/#openai-has-64-character-tool-name-limitation","title":"OpenAI (Has 64-character tool name limitation)","text":"<pre><code>export OPENAI_API_KEY=\"sk-your-api-key-here\"\nmcp-cli chat --server mcpgateway-wrapper --provider openai --model gpt-4o-mini\n</code></pre> <p>\u26a0\ufe0f Known Issue: OpenAI has a 64-character limit for tool names, but some MCP Context Forge tools exceed this limit (e.g., <code>github-server-add-pull-request-review-comment-to-pending-review</code> is 69 characters).</p>"},{"location":"using/clients/mcp-cli/#ollama-recommended-no-tool-name-limitations","title":"Ollama (Recommended - No tool name limitations)","text":"<pre><code># Install Ollama\ncurl -fsSL https://ollama.ai/install.sh | sh\n\n# Pull a function-calling capable model\nollama pull mistral-nemo:latest\n# or\nollama pull llama3.2:latest\n\n# Use with mcp-cli\nmcp-cli chat --server mcpgateway-wrapper --provider ollama --model mistral-nemo:latest\n</code></pre>"},{"location":"using/clients/mcp-cli/#anthropic-claude","title":"Anthropic Claude","text":"<pre><code>export ANTHROPIC_API_KEY=\"sk-ant-your-api-key-here\"\nmcp-cli chat --server mcpgateway-wrapper --provider anthropic --model claude-3-sonnet\n</code></pre>"},{"location":"using/clients/mcp-cli/#basic-usage","title":"\ud83e\uddea Basic Usage","text":""},{"location":"using/clients/mcp-cli/#chat-mode-commands","title":"Chat Mode Commands","text":"<p>In chat mode, use these slash commands for enhanced functionality:</p>"},{"location":"using/clients/mcp-cli/#general-commands","title":"General Commands","text":"<ul> <li><code>/help</code> - Show available commands</li> <li><code>/quickhelp</code> or <code>/qh</code> - Quick reference guide</li> <li><code>exit</code> or <code>quit</code> - Exit chat mode</li> </ul>"},{"location":"using/clients/mcp-cli/#provider-model-management","title":"Provider &amp; Model Management","text":"<ul> <li><code>/provider</code> - Show current provider and model</li> <li><code>/provider list</code> - List all configured providers</li> <li><code>/provider &lt;name&gt;</code> - Switch to different provider</li> <li><code>/model &lt;name&gt;</code> - Switch to different model</li> </ul>"},{"location":"using/clients/mcp-cli/#tool-management","title":"Tool Management","text":"<ul> <li><code>/tools</code> - Display all available tools from your Gateway</li> <li><code>/tools --all</code> - Show detailed tool information</li> <li><code>/toolhistory</code> or <code>/th</code> - Show tool call history</li> </ul>"},{"location":"using/clients/mcp-cli/#conversation-management","title":"Conversation Management","text":"<ul> <li><code>/conversation</code> or <code>/ch</code> - Show conversation history</li> <li><code>/save &lt;filename&gt;</code> - Save conversation to JSON file</li> <li><code>/compact</code> - Condense conversation history</li> </ul>"},{"location":"using/clients/mcp-cli/#example-chat-interactions","title":"Example Chat Interactions","text":"<pre><code>&gt; what issues have been assigned to me?\n[Tool Call: github-server-get-me]\n[Tool Call: github-server-search-issues with q=\"assignee:username\"]\n\n&gt; what files are in my Downloads folder?\n[Tool Call: filesystem-downloads-list-directory]\n\n&gt; create a memory about this conversation\n[Tool Call: memory-server-store-memory]\n\n&gt; what time is it in London?\n[Tool Call: time-server-get-system-time with timezone=\"Europe/London\"]\n</code></pre>"},{"location":"using/clients/mcp-cli/#interactive-mode-commands","title":"Interactive Mode Commands","text":"<p>In interactive mode, use these commands:</p> <ul> <li><code>/help</code> - Show available commands</li> <li><code>/tools</code> or <code>/t</code> - List/call tools interactively</li> <li><code>/resources</code> or <code>/res</code> - List available resources</li> <li><code>/prompts</code> or <code>/p</code> - List available prompts</li> <li><code>/servers</code> or <code>/srv</code> - List connected servers</li> <li><code>/ping</code> - Ping connected servers</li> </ul>"},{"location":"using/clients/mcp-cli/#command-mode-options","title":"Command Mode Options","text":"<ul> <li><code>--input</code> - Input file path (use <code>-</code> for stdin)</li> <li><code>--output</code> - Output file path (use <code>-</code> for stdout)</li> <li><code>--prompt</code> - Prompt template with <code>{{input}}</code> placeholder</li> <li><code>--tool</code> - Directly call a specific tool</li> <li><code>--tool-args</code> - JSON arguments for tool call</li> <li><code>--provider</code> - Specify LLM provider</li> <li><code>--model</code> - Specify model to use</li> <li><code>--raw</code> - Output raw response without formatting</li> </ul>"},{"location":"using/clients/mcp-cli/#advanced-configuration","title":"\ud83d\udd27 Advanced Configuration","text":""},{"location":"using/clients/mcp-cli/#environment-variables","title":"Environment Variables","text":"<pre><code># MCP Context Forge Gateway connection\nexport MCP_AUTH=\"your-jwt-token\"\nexport MCP_SERVER_URL=\"http://localhost:4444\"\n\n# LLM Provider API keys\nexport OPENAI_API_KEY=\"sk-your-openai-key\"\nexport ANTHROPIC_API_KEY=\"sk-ant-your-anthropic-key\"\n\n# Default provider settings\nexport LLM_PROVIDER=\"ollama\"\nexport LLM_MODEL=\"mistral-nemo:latest\"\n</code></pre>"},{"location":"using/clients/mcp-cli/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"using/clients/mcp-cli/#modulenotfounderror-no-module-named-mcpgateway","title":"\"ModuleNotFoundError: No module named 'mcpgateway'\"","text":"<p>Solution: Use the full path to your virtual environment's Python:</p> <pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"command\": \"/Users/username/path/to/mcp-context-forge/.venv/bin/python\",\n      \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n      \"env\": { ... }\n    }\n  }\n}\n</code></pre>"},{"location":"using/clients/mcp-cli/#mcp_server_url-environment-variable-is-required","title":"\"MCP_SERVER_URL environment variable is required\"","text":"<p>Solution: Ensure your <code>server_config.json</code> includes the required environment variables in the <code>env</code> section.</p>"},{"location":"using/clients/mcp-cli/#openai-tool-name-length-error","title":"OpenAI Tool Name Length Error","text":"<p>Error: <code>string too long. Expected a string with maximum length 64</code></p> <p>Solution: Use Ollama or Anthropic instead:</p> <pre><code>mcp-cli chat --server mcpgateway-wrapper --provider ollama --model mistral-nemo:latest\n</code></pre>"},{"location":"using/clients/mcp-cli/#model-doesnt-support-tools","title":"Model doesn't support tools","text":"<p>Error: <code>does not support tools (status code: 400)</code></p> <p>Solution: Use a function-calling capable model:</p> <pre><code># Pull compatible models\nollama pull mistral-nemo:latest\nollama pull llama3.2:latest\n\n# Use in mcp-cli\nmcp-cli chat --server mcpgateway-wrapper --provider ollama --model mistral-nemo:latest\n</code></pre>"},{"location":"using/clients/mcp-cli/#advanced-usage-examples","title":"\ud83d\udcc8 Advanced Usage Examples","text":""},{"location":"using/clients/mcp-cli/#github-integration","title":"GitHub Integration","text":"<pre><code># Get your GitHub profile\nmcp-cli cmd --server mcpgateway-wrapper --tool github-server-get-me --raw\n\n# List notifications\nmcp-cli cmd --server mcpgateway-wrapper --tool github-server-list-notifications --raw\n\n# Search for issues assigned to you\nmcp-cli cmd --server mcpgateway-wrapper --tool github-server-search-issues \\\n  --tool-args '{\"q\":\"assignee:@me is:open\"}' --raw\n\n# Create a new issue\nmcp-cli cmd --server mcpgateway-wrapper --tool github-server-create-issue \\\n  --tool-args '{\"owner\":\"username\",\"repo\":\"repository\",\"title\":\"New Issue\",\"body\":\"Issue description\"}' --raw\n</code></pre>"},{"location":"using/clients/mcp-cli/#file-system-operations","title":"File System Operations","text":"<pre><code># List allowed directories\nmcp-cli cmd --server mcpgateway-wrapper --tool filesystem-downloads-list-allowed-directories --raw\n\n# Read a file\nmcp-cli cmd --server mcpgateway-wrapper --tool filesystem-downloads-read-file \\\n  --tool-args '{\"path\":\"/path/to/file.txt\"}' --raw\n\n# Search for files\nmcp-cli cmd --server mcpgateway-wrapper --tool filesystem-downloads-search-files \\\n  --tool-args '{\"path\":\"/Users/username/Downloads\",\"pattern\":\"*.pdf\"}' --raw\n</code></pre>"},{"location":"using/clients/mcp-cli/#memory-management","title":"Memory Management","text":"<pre><code># Store a memory\nmcp-cli cmd --server mcpgateway-wrapper --tool memory-server-store-memory \\\n  --tool-args '{\"content\":\"Important project note\",\"bucket\":\"work\"}' --raw\n\n# Get memories\nmcp-cli cmd --server mcpgateway-wrapper --tool memory-server-get-memories \\\n  --tool-args '{\"bucket\":\"work\"}' --raw\n</code></pre>"},{"location":"using/clients/mcp-cli/#time-operations","title":"Time Operations","text":"<pre><code># Get current time\nmcp-cli cmd --server mcpgateway-wrapper --tool time-server-get-system-time --raw\n\n# Convert time zones\nmcp-cli cmd --server mcpgateway-wrapper --tool time-server-convert-time \\\n  --tool-args '{\"from_timezone\":\"UTC\",\"to_timezone\":\"America/New_York\",\"time\":\"2025-01-01T12:00:00Z\"}' --raw\n</code></pre>"},{"location":"using/clients/mcp-cli/#integration-with-mcp-context-forge-gateway","title":"\ud83d\udd17 Integration with MCP Context Forge Gateway","text":"<p>The mcp-cli integrates with MCP Context Forge Gateway through multiple connection methods:</p>"},{"location":"using/clients/mcp-cli/#local-development-setup","title":"Local Development Setup","text":"<ol> <li> <p>Start the Gateway: <pre><code>cd mcp-context-forge\nmake serve  # Starts on http://localhost:4444\n</code></pre></p> </li> <li> <p>Configure mcp-cli: <pre><code>{\n  \"mcpServers\": {\n    \"mcpgateway-wrapper\": {\n      \"command\": \"/path/to/mcp-context-forge/.venv/bin/python\",\n      \"args\": [\"-m\", \"mcpgateway.wrapper\"],\n      \"env\": {\n        \"MCP_AUTH\": \"your-jwt-token\",\n        \"MCP_SERVER_URL\": \"http://localhost:4444\"\n      }\n    }\n  }\n}\n</code></pre></p> </li> <li> <p>Test the connection: <pre><code>mcp-cli ping --server mcpgateway-wrapper\n</code></pre></p> </li> </ol>"},{"location":"using/clients/mcp-cli/#production-docker-setup","title":"Production Docker Setup","text":"<p>Use the official Docker image for production environments:</p> <pre><code># Start the gateway\ndocker run -d --name mcpgateway \\\n  -p 4444:4444 \\\n  -e HOST=0.0.0.0 \\\n  -e JWT_SECRET_KEY=my-secret-key \\\n  -e BASIC_AUTH_USER=admin \\\n  -e BASIC_AUTH_PASSWORD=changeme \\\n  ghcr.io/ibm/mcp-context-forge:0.6.0\n\n# Generate token\nexport MCPGATEWAY_BEARER_TOKEN=$(docker exec mcpgateway python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 10080 --secret my-secret-key)\n\n# Test connection\ncurl -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" http://localhost:4444/tools\n</code></pre>"},{"location":"using/clients/mcp-cli/#available-tool-categories","title":"\ud83d\udcdd Available Tool Categories","text":"<p>Your MCP Context Forge Gateway provides these tool categories:</p>"},{"location":"using/clients/mcp-cli/#filesystem-tools","title":"\ud83d\uddc2\ufe0f Filesystem Tools","text":"<ul> <li>Downloads &amp; Documents: Read, write, edit, search files</li> <li>Directory Operations: List, create, move files and directories</li> <li>File Management: Get file info, create directory trees</li> </ul>"},{"location":"using/clients/mcp-cli/#github-integration_1","title":"\ud83d\udc19 GitHub Integration","text":"<ul> <li>Issue Management: Create, update, list, search issues</li> <li>Pull Requests: Create, review, merge, comment on PRs</li> <li>Repository Operations: Fork, create, manage repositories</li> <li>Notifications: List, manage, dismiss notifications</li> <li>Code Analysis: Search code, get commits, manage branches</li> </ul>"},{"location":"using/clients/mcp-cli/#memory-server","title":"\ud83e\udde0 Memory Server","text":"<ul> <li>Memory Storage: Store and retrieve contextual memories</li> <li>Bucket Management: Organize memories in buckets</li> <li>Memory Querying: Search and filter stored memories</li> </ul>"},{"location":"using/clients/mcp-cli/#time-operations_1","title":"\u23f0 Time Operations","text":"<ul> <li>System Time: Get current time in any timezone</li> <li>Time Conversion: Convert between different timezones</li> </ul>"},{"location":"using/clients/mcp-cli/#features-comparison","title":"\ud83d\udcca Features Comparison","text":"Feature Chat Mode Interactive Mode Command Mode Natural language interface \u2705 \u274c \u274c Automatic tool usage \u2705 \u274c \u274c Direct tool invocation \u274c \u2705 \u2705 Scriptable automation \u274c \u274c \u2705 Conversation history \u2705 \u274c \u274c Provider switching \u2705 \u2705 \u2705 Batch processing \u274c \u274c \u2705 Pipeline integration \u274c \u274c \u2705 GitHub integration \u2705 \u2705 \u2705 File system access \u2705 \u2705 \u2705"},{"location":"using/clients/mcp-cli/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>mcp-cli GitHub \u2192 chrishayuk/mcp-cli</li> <li>CHUK-MCP Protocol \u2192 chrishayuk/chuk-mcp</li> <li>MCP Context Forge Gateway \u2192 IBM/mcp-context-forge</li> <li>MCP Specification \u2192 https://modelcontextprotocol.io/</li> </ul>"},{"location":"using/clients/mcp-cli/#quick-start-checklist","title":"\ud83c\udfaf Quick Start Checklist","text":"<ul> <li> Install mcp-cli: <code>pip install -e \".[cli,dev]\"</code></li> <li> Install MCP Context Forge Gateway</li> <li> Start gateway: <code>make serve</code> (runs on localhost:4444)</li> <li> Create <code>server_config.json</code> with correct Python path</li> <li> Generate JWT token for authentication</li> <li> Test connection: <code>mcp-cli ping --server mcpgateway-wrapper</code></li> <li> Install Ollama and pull a compatible model (recommended)</li> <li> Start chat: <code>mcp-cli chat --server mcpgateway-wrapper --provider ollama --model mistral-nemo:latest</code></li> <li> Try asking: \"What tools are available?\" or \"What issues have been assigned to me?\"</li> </ul>"},{"location":"using/clients/mcp-inspector/","title":"MCP Inspector","text":"<p>MCP Inspector is a visual debugging GUI for the Model Context Protocol. Point it at any MCP-compliant endpoint \u2014 a live Gateway SSE stream or a local <code>mcpgateway.wrapper</code> stdio server \u2014 and you can:</p> <ul> <li>\ud83d\udd0d Browse tools, prompts and resources in real time</li> <li>\ud83d\udee0 Invoke tools with JSON params and inspect raw results</li> <li>\ud83d\udcdc Watch the full bidirectional JSON-RPC / MCP traffic live</li> <li>\ud83d\udd04 Replay or edit previous requests</li> <li>\ud83d\udcac Stream sampling messages (where supported)</li> </ul>"},{"location":"using/clients/mcp-inspector/#quick-launch-recipes","title":"\ud83d\ude80 Quick launch recipes","text":"<p>All commands use npx (bundled with Node \u2265 14). Feel free to <code>npm install -g @modelcontextprotocol/inspector</code> for a global binary.</p> Use-case One-liner What happens 1. Connect to Gateway (SSE) <code>bash&lt;br/&gt;npx @modelcontextprotocol/inspector \\\\&lt;br/&gt;  --url http://localhost:4444/servers/UUID_OF_SERVER_1/sse \\\\&lt;br/&gt;  --header \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\"&lt;br/&gt;</code> Inspector opens <code>http://localhost:5173</code> and attaches directly to the gateway stream. 2. Connect to Gateway (Streamable HTTP) <code>bash&lt;br/&gt;npx @modelcontextprotocol/inspector \\\\&lt;br/&gt;  --url http://localhost:4444/servers/UUID_OF_SERVER_1/mcp/ \\\\&lt;br/&gt;  --header \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\"&lt;br/&gt;</code> Inspector opens <code>http://localhost:5173</code> and attaches directly to the gateway stream. 3 - Spin up the stdio wrapper in-process <code>bash&lt;br/&gt;export MCP_AUTH=$MCPGATEWAY_BEARER_TOKEN&lt;br/&gt;export MCP_SERVER_URL=http://localhost:4444/servers/UUID_OF_SERVER_1/mcp&lt;br/&gt;&lt;br/&gt;npx @modelcontextprotocol/inspector \\\\&lt;br/&gt;  python3 -m mcpgateway.wrapper&lt;br/&gt;</code> Inspector forks <code>python3 -m mcpgateway.wrapper</code>, then connects to its stdio port automatically. 4 - Same, but via uv / uvx <code>bash&lt;br/&gt;npx @modelcontextprotocol/inspector \\\\&lt;br/&gt;  uvx python3 -m mcpgateway.wrapper&lt;br/&gt;</code> Uses the super-fast uv virtual-env if you prefer. 5 - Wrapper already running Launch the wrapper in another shell, then:<code>bash&lt;br/&gt;npx @modelcontextprotocol/inspector --stdio&lt;br/&gt;</code> Inspector only opens the GUI and binds to the running stdio server on stdin/stdout."},{"location":"using/clients/mcp-inspector/#environment-variables","title":"\ud83d\udd10 Environment variables","text":"<p>Most wrappers / servers will need at least:</p> <pre><code>export MCP_SERVER_URL=http://localhost:4444/servers/UUID_OF_SERVER_1   # one or many\nexport MCP_AUTH=$(python3 -m mcpgateway.utils.create_jwt_token -u admin --secret my-test-key)\n</code></pre> <p>If you point Inspector directly at a Gateway SSE stream, pass the header:</p> <pre><code>--header \"Authorization: Bearer $MCP_AUTH\"\n</code></pre>"},{"location":"using/clients/mcp-inspector/#inspector-highlights","title":"\ud83d\udd27 Inspector Highlights","text":"<ul> <li>Real-time catalogue - tools/prompts/resources update as soon as the Gateway sends <code>*Changed</code> notifications.</li> <li>Request builder - JSON editor with schema hints (if the tool exposes an <code>inputSchema</code>).</li> <li>Traffic console - colour-coded view of every request &amp; reply; copy as cURL.</li> <li>Replay &amp; edit - click any previous call, tweak parameters, re-send.</li> <li>Streaming - see <code>sampling/createMessage</code> chunks scroll by live (MCP 2025-03-26 spec).</li> </ul>"},{"location":"using/clients/mcp-inspector/#connecting-through-translate-bridge-stdio-sse-bridge","title":"\ud83d\udef0 Connecting through Translate Bridge (stdio \u2192 SSE bridge)","text":"<p>Want to test a stdio-only MCP server inside Inspector?</p> <pre><code># Example: expose mcp-server-git over SSE on :8000\npython3 -m mcpgateway.translate --stdio \"uvx mcp-server-git\" --expose-sse --port 9002\n#   SSE stream:  http://localhost:8000/sse\n#   POST back-channel: http://localhost:8000/message\n</code></pre> <p>Then simply start Inspector:</p> <pre><code>npx @modelcontextprotocol/inspector \\\n  --url http://localhost:8000/sse\n</code></pre> <p>Translate Bridge handles the bridging; Inspector thinks it is speaking native SSE.</p>"},{"location":"using/clients/openwebui/","title":"OpenWebUI Integration with MCP Gateway","text":"<p>OpenWebUI is a self-hosted, extensible interface for interacting with large language models (LLMs). Integrating OpenWebUI with the Model Context Protocol (MCP) allows you to enhance your AI workflows by leveraging tools and resources provided by MCP servers.</p>"},{"location":"using/clients/openwebui/#integration-overview","title":"\ud83d\udd0c Integration Overview","text":"<p>OpenWebUI supports integration with external tools via OpenAPI specifications. MCP Gateway exposes its tools through OpenAPI-compatible endpoints, enabling seamless integration with OpenWebUI.</p>"},{"location":"using/clients/openwebui/#prerequisites","title":"\ud83d\udee0\ufe0f Prerequisites","text":"<ul> <li>OpenWebUI: Ensure you have OpenWebUI installed and running. Refer to the OpenWebUI documentation for installation instructions.</li> <li>MCP Gateway: Set up and run the MCP Gateway. Detailed setup instructions can be found in the MCP Gateway documentation.</li> </ul>"},{"location":"using/clients/openwebui/#connecting-mcp-tools-to-openwebui","title":"\ud83d\udd17 Connecting MCP Tools to OpenWebUI","text":""},{"location":"using/clients/openwebui/#1-launch-mcp-gateway","title":"1. Launch MCP Gateway","text":"<p>Start the MCP Gateway to expose its tools via OpenAPI endpoints. For example:</p> <pre><code>uv run mcpgateway\n</code></pre> <p>Ensure that the MCP Gateway is accessible at a known URL, such as <code>http://localhost:4444</code>.</p>"},{"location":"using/clients/openwebui/#2-identify-mcp-tool-endpoints","title":"2. Identify MCP Tool Endpoints","text":"<p>Determine the specific tool endpoints provided by the MCP Gateway. These endpoints follow the OpenAPI specification and are typically accessible at URLs like:</p> <pre><code>http://localhost:4444/tools/&lt;tool-name&gt;\n</code></pre> <p>Replace <code>&lt;tool-name&gt;</code> with the actual name of the tool you wish to integrate.</p>"},{"location":"using/clients/openwebui/#3-add-mcp-tools-to-openwebui","title":"3. Add MCP Tools to OpenWebUI","text":""},{"location":"using/clients/openwebui/#a-access-openwebui-settings","title":"a. Access OpenWebUI Settings","text":"<ul> <li>Navigate to the OpenWebUI interface in your browser.</li> <li>Click on the \u2699\ufe0f Settings icon.</li> </ul>"},{"location":"using/clients/openwebui/#b-add-a-new-tool-server","title":"b. Add a New Tool Server","text":"<ul> <li>In the Settings menu, locate the Tools section.</li> <li>Click on the \u2795 Add Tool Server button.</li> <li>Enter the URL of the MCP tool endpoint (e.g., <code>http://localhost:4444/tools/&lt;tool-name&gt;</code>).</li> <li>Click Save to register the tool.</li> </ul> <p>Repeat this process for each MCP tool you wish to integrate.</p>"},{"location":"using/clients/openwebui/#using-mcp-tools-in-openwebui","title":"\ud83e\uddea Using MCP Tools in OpenWebUI","text":"<p>Once the MCP tools are registered:</p> <ul> <li>Enable Tools in Chat: In the chat interface, click on the \u2795 icon to view available tools. Toggle the desired MCP tools to enable them for the current session.</li> <li>Invoke Tools: Interact with the AI model as usual. When appropriate, the model will utilize the enabled MCP tools to fulfill your requests.</li> </ul>"},{"location":"using/clients/openwebui/#advanced-configuration","title":"\u2699\ufe0f Advanced Configuration","text":""},{"location":"using/clients/openwebui/#global-tool-servers","title":"Global Tool Servers","text":"<p>To make MCP tools available to all users:</p> <ul> <li>Navigate to Admin Settings &gt; Tools.</li> <li>Add the MCP tool endpoints as described above.</li> <li>These tools will now be accessible to all users, subject to individual activation in their chat sessions.</li> </ul>"},{"location":"using/clients/openwebui/#native-function-calling","title":"Native Function Calling","text":"<p>OpenWebUI supports native function calling for tools:</p> <ul> <li>In the chat interface, go to Chat Controls &gt; Advanced Params.</li> <li>Set the Function Calling parameter to <code>Native</code>.</li> <li>This enables more structured interactions between the AI model and the tools.</li> </ul>"},{"location":"using/clients/openwebui/#additional-resources","title":"\ud83e\uddf0 Additional Resources","text":"<ul> <li>OpenWebUI Documentation</li> <li>MCP Gateway Documentation</li> <li>OpenWebUI GitHub Repository</li> <li>MCP Gateway GitHub Repository</li> </ul> <p>By integrating MCP tools into OpenWebUI, you can enhance your AI assistant's capabilities, enabling it to perform a wider range of tasks by leveraging the diverse tools provided by the MCP ecosystem.</p>"},{"location":"using/plugins/","title":"Plugin Framework","text":"<p>Production Ready</p> <p>The plugin framework is production ready with comprehensive hook coverage, robust error handling, and battle-tested implementations. Supports both self-contained and external service plugins.</p>"},{"location":"using/plugins/#overview","title":"Overview","text":"<p>The MCP Context Forge Plugin Framework provides a comprehensive, production-grade system for extending gateway functionality through pre/post processing hooks at various points in the MCP request lifecycle. The framework supports both high-performance self-contained plugins and sophisticated external AI service integrations.</p>"},{"location":"using/plugins/#key-capabilities","title":"Key Capabilities","text":"<ul> <li>AI Safety Middleware - Integration with LlamaGuard, OpenAI Moderation, custom ML models</li> <li>Content Security - PII detection and masking, input validation, output sanitization</li> <li>Policy Enforcement - Business rules, compliance checking, audit trails</li> <li>Performance Protection - Timeout handling, resource limits, graceful degradation</li> <li>Operational Excellence - Hot configuration reload, health monitoring, detailed metrics</li> <li>Enterprise Features - Multi-tenant isolation, conditional execution, sophisticated context management</li> </ul>"},{"location":"using/plugins/#architecture","title":"Architecture","text":"<p>The plugin framework implements a hybrid architecture supporting both self-contained and external service integrations:</p>"},{"location":"using/plugins/#self-contained-plugins","title":"Self-Contained Plugins","text":"<ul> <li>In-Process Execution: Written in Python, run directly within the gateway process</li> <li>High Performance: Sub-millisecond latency, no network overhead</li> <li>Direct Access: Full access to gateway internals and context</li> <li>Use Cases: PII filtering, regex transformations, input validation, simple business rules</li> <li>Examples: <code>PIIFilterPlugin</code>, <code>SearchReplacePlugin</code>, <code>DenyListPlugin</code></li> </ul>"},{"location":"using/plugins/#external-service-plugins","title":"External Service Plugins","text":"<ul> <li>Microservice Integration: Call external AI safety services via HTTP/gRPC/MCP</li> <li>Enterprise AI Support: LlamaGuard, OpenAI Moderation, custom ML models</li> <li>Authentication Support: Bearer tokens, API keys, mutual TLS, custom headers</li> <li>Scalable Architecture: Services can be deployed independently, auto-scaled</li> <li>Use Cases: Advanced AI safety, complex ML inference, enterprise policy engines</li> <li>Examples: LlamaGuard integration, OpenAI Moderation, HashiCorp Vault, OPA</li> </ul>"},{"location":"using/plugins/#unified-plugin-interface","title":"Unified Plugin Interface","text":"<p>Both plugin types implement the same interface, enabling seamless switching between deployment models:</p> <pre><code>class Plugin:\n    async def prompt_pre_fetch(self, payload, context) -&gt; PluginResult\n    async def tool_pre_invoke(self, payload, context) -&gt; PluginResult\n    # ... unified interface for all hook points\n</code></pre>"},{"location":"using/plugins/#enabling-plugins","title":"Enabling Plugins","text":""},{"location":"using/plugins/#1-environment-configuration","title":"1. Environment Configuration","text":"<p>Enable the plugin framework in your <code>.env</code> file:</p> <pre><code># Enable plugin framework\nPLUGINS_ENABLED=true\n\n# Optional: Custom plugin config path\nPLUGIN_CONFIG_FILE=plugins/config.yaml\n</code></pre>"},{"location":"using/plugins/#2-plugin-configuration","title":"2. Plugin Configuration","text":"<p>The plugin configuration file is used to configure a set of plugins to run a set of hook points throughout the MCP Context Forge.  An example configuration is below.  It contains two main sections: <code>plugins</code> and <code>plugin_settings</code>.</p> <p>Create or modify <code>plugins/config.yaml</code>:</p> <pre><code># Main plugin configuration\nplugins:\n  - name: \"ContentFilter\"\n    kind: \"plugins.native.content_filter.ContentFilterPlugin\"\n    description: \"Filters inappropriate content\"\n    version: \"1.0\"\n    author: \"Your Team\"\n    hooks: [\"prompt_pre_fetch\", \"prompt_post_fetch\"]\n    tags: [\"security\", \"filter\"]\n    mode: \"enforce\"  # enforce | permissive | disabled\n    priority: 100    # Lower number = higher priority\n    conditions:\n      - prompts: [\"customer_chat\", \"support_bot\"]\n        server_ids: []  # Apply to all servers\n        tenant_ids: []  # Apply to all tenants\n    config:\n      # Plugin-specific configuration\n      block_patterns: [\"ssn\", \"credit_card\"]\n      mask_char: \"*\"\n\n# Global plugin settings\nplugin_settings:\n  parallel_execution_within_band: false\n  plugin_timeout: 30\n  fail_on_plugin_error: false\n  enable_plugin_api: true\n  plugin_health_check_interval: 60\n</code></pre> <p>The <code>plugins</code> section lists the set of configured plugins that will be loaded by the Context Forge at startup.  Each plugin contains a set of standard configurations, and then a <code>config</code> section designed for plugin specific configurations. The attributes are defined as follows:</p> Attribute Description Example Value name A unique name for the plugin. MyFirstPlugin kind A fully qualified string representing the plugin python object. plugins.native.content_filter.ContentFilterPlugin description The description of the plugin configuration. A plugin for replacing bad words. version The version of the plugin configuration. 0.1 author The team that wrote the plugin. MCP Context Forge hooks A list of hooks for which the plugin will be executed. Supported hooks: \"prompt_pre_fetch\", \"prompt_post_fetch\", \"tool_pre_invoke\", \"tool_post_invoke\", \"resource_pre_fetch\", \"resource_post_fetch\" [\"prompt_pre_fetch\", \"prompt_post_fetch\", \"tool_pre_invoke\", \"tool_post_invoke\", \"resource_pre_fetch\", \"resource_post_fetch\"] tags Descriptive keywords that make the configuration searchable. [\"security\", \"filter\"] mode Mode of operation of the plugin. - enforce (stops during a violation), permissive (audits a violation but doesn't stop), disabled (disabled) permissive priority The priority in which the plugin will run - 0 is higher priority 100 conditions A list of conditions under which a plugin is run. See section on conditions. config Plugin specific configuration.  This is a dictionary and is passed to the plugin on initialization. <p>The <code>plugin_settings</code> are as follows:</p> Attribute Description Example Value parallel_execution_within_band Plugins in the same band are run in parallel (currently not implemented). true or false plugin_timeout The time in seconds before stopping plugin execution (not implemented). 30 fail_on_plugin_error Cause the execution of the task to fail if the plugin errors. true or false plugin_health_check_interval Health check interval in seconds (not implemented). 60"},{"location":"using/plugins/#3-execution-modes","title":"3. Execution Modes","text":"<p>Each plugin can operate in one of three modes:</p> Mode Description Use Case enforce Blocks requests on policy violations Production guardrails permissive Logs violations but allows requests Testing and monitoring disabled Plugin loaded but not executed Temporary deactivation"},{"location":"using/plugins/#4-priority-and-execution-order","title":"4. Priority and Execution Order","text":"<p>Plugins execute in priority order (ascending):</p> <pre><code># Execution order example\nplugins:\n  - name: \"Authentication\"\n    priority: 10      # Runs first\n\n  - name: \"RateLimiter\"\n    priority: 50      # Runs second\n\n  - name: \"ContentFilter\"\n    priority: 100     # Runs third\n\n  - name: \"Logger\"\n    priority: 200     # Runs last\n</code></pre> <p>Plugins with the same priority may execute in parallel if <code>parallel_execution_within_band</code> is enabled.</p>"},{"location":"using/plugins/#5-conditions-of-execution","title":"5. Conditions of Execution","text":"<p>Users may only want plugins to be invoked on specific servers, tools, and prompts. To address this, a set of conditionals can be applied to a plugin. The attributes in a conditional combine together in as a set of <code>and</code> operations, while each attribute list item is <code>ored</code> with other items in the list.  The attributes are defined as follows:</p> Attribute Description server_ids The list of MCP servers on which the plugin will trigger tools The list of tools on which the plugin will be applied. prompts The list of prompts on which the plugin will be applied. resources The list of resource URIs on which the plugin will be applied. user_patterns The list of users on which the plugin will be applied. content_types The list of content types on which the plugin will trigger."},{"location":"using/plugins/#available-hooks","title":"Available Hooks","text":"<p>The plugin framework provides comprehensive hook coverage across the entire MCP request lifecycle:</p>"},{"location":"using/plugins/#production-hooks-implemented","title":"Production Hooks (Implemented)","text":"Hook Execution Point Use Cases Payload Type <code>prompt_pre_fetch</code> Before prompt template retrieval Argument validation, PII scanning, input sanitization <code>PromptPrehookPayload</code> <code>prompt_post_fetch</code> After prompt template rendering Content filtering, output transformation, safety checks <code>PromptPosthookPayload</code> <code>tool_pre_invoke</code> Before tool execution Authorization, argument validation, dangerous operation blocking <code>ToolPreInvokePayload</code> <code>tool_post_invoke</code> After tool execution Result filtering, PII masking, audit logging, response transformation <code>ToolPostInvokePayload</code> <code>resource_pre_fetch</code> Before resource fetching URI validation, protocol checking, metadata injection <code>ResourcePreFetchPayload</code> <code>resource_post_fetch</code> After resource content retrieval Content filtering, size validation, sensitive data redaction <code>ResourcePostFetchPayload</code>"},{"location":"using/plugins/#planned-hooks-roadmap","title":"Planned Hooks (Roadmap)","text":"Hook Purpose Expected Release <code>server_pre_register</code> Server attestation and validation before admission v0.7.0 <code>server_post_register</code> Post-registration processing and setup v0.7.0 <code>auth_pre_check</code> Custom authentication logic integration v0.7.0 <code>auth_post_check</code> Post-authentication processing and enrichment v0.7.0 <code>federation_pre_sync</code> Gateway federation validation and filtering v0.8.0 <code>federation_post_sync</code> Post-federation data processing and reconciliation v0.8.0"},{"location":"using/plugins/#tool-hooks-details","title":"Tool Hooks Details","text":"<p>The tool hooks enable plugins to intercept and modify tool invocations:</p> <ul> <li><code>tool_pre_invoke</code>: Receives the tool name and arguments before execution. Can modify arguments or block the invocation entirely.</li> <li><code>tool_post_invoke</code>: Receives the tool result after execution. Can modify the result or block it from being returned.</li> </ul> <p>Example use cases: - PII detection and masking in tool inputs/outputs - Rate limiting specific tools - Audit logging of tool usage - Input validation and sanitization - Output filtering and transformation</p>"},{"location":"using/plugins/#resource-hooks-details","title":"Resource Hooks Details","text":"<p>The resource hooks enable plugins to intercept and modify resource fetching:</p> <ul> <li><code>resource_pre_fetch</code>: Receives the resource URI and metadata before fetching. Can modify the URI, add metadata, or block the fetch entirely.</li> <li><code>resource_post_fetch</code>: Receives the resource content after fetching. Can modify the content, redact sensitive information, or block it from being returned.</li> </ul> <p>Example use cases: - Protocol validation (block non-HTTPS resources) - Domain blocklisting/allowlisting - Content size limiting - Sensitive data redaction - Content transformation and filtering - Resource caching metadata</p> <p>Planned hooks (not yet implemented):</p> <ul> <li><code>server_pre_register</code> / <code>server_post_register</code> - Server validation</li> <li><code>auth_pre_check</code> / <code>auth_post_check</code> - Custom authentication</li> <li><code>federation_pre_sync</code> / <code>federation_post_sync</code> - Gateway federation</li> </ul>"},{"location":"using/plugins/#writing-plugins","title":"Writing Plugins","text":""},{"location":"using/plugins/#plugin-structure","title":"Plugin Structure","text":"<pre><code>from mcpgateway.plugins.framework import (\n    Plugin,\n    PluginConfig,\n    PluginContext,\n    PromptPrehookPayload,\n    PromptPrehookResult,\n    PromptPosthookPayload,\n    PromptPosthookResult,\n    ToolPreInvokePayload,\n    ToolPreInvokeResult,\n    ToolPostInvokePayload,\n    ToolPostInvokeResult,\n    ResourcePreFetchPayload,\n    ResourcePreFetchResult,\n    ResourcePostFetchPayload,\n    ResourcePostFetchResult\n)\n\nclass MyPlugin(Plugin):\n    \"\"\"Example plugin implementation.\"\"\"\n\n    def __init__(self, config: PluginConfig):\n        super().__init__(config)\n        # Initialize plugin-specific configuration\n        self.my_setting = config.config.get(\"my_setting\", \"default\")\n\n    async def prompt_pre_fetch(\n        self,\n        payload: PromptPrehookPayload,\n        context: PluginContext\n    ) -&gt; PromptPrehookResult:\n        \"\"\"Process prompt before retrieval.\"\"\"\n\n        # Access prompt name and arguments\n        prompt_name = payload.name\n        args = payload.args\n\n        # Example: Block requests with forbidden words\n        if \"forbidden\" in str(args.values()).lower():\n            return PromptPrehookResult(\n                continue_processing=False,\n                violation=PluginViolation(\n                    plugin_name=self.name,\n                    description=\"Forbidden content detected\",\n                    violation_code=\"FORBIDDEN_CONTENT\",\n                    details={\"found_in\": \"arguments\"}\n                )\n            )\n\n        # Example: Modify arguments\n        if \"transform_me\" in args:\n            args[\"transform_me\"] = args[\"transform_me\"].upper()\n            return PromptPrehookResult(\n                modified_payload=PromptPrehookPayload(prompt_name, args)\n            )\n\n        # Allow request to continue unmodified\n        return PromptPrehookResult()\n\n    async def prompt_post_fetch(\n        self,\n        payload: PromptPosthookPayload,\n        context: PluginContext\n    ) -&gt; PromptPosthookResult:\n        \"\"\"Process prompt after rendering.\"\"\"\n\n        # Access rendered prompt\n        prompt_result = payload.result\n\n        # Example: Add metadata to context\n        context.metadata[\"processed_by\"] = self.name\n\n        # Example: Modify response\n        for message in prompt_result.messages:\n            message.content.text = message.content.text.replace(\n                \"old_text\", \"new_text\"\n            )\n\n        return PromptPosthookResult(\n            modified_payload=payload\n        )\n\n    async def tool_pre_invoke(\n        self,\n        payload: ToolPreInvokePayload,\n        context: PluginContext\n    ) -&gt; ToolPreInvokeResult:\n        \"\"\"Process tool before invocation.\"\"\"\n\n        # Access tool name and arguments\n        tool_name = payload.name\n        args = payload.args\n\n        # Example: Block dangerous operations\n        if tool_name == \"file_delete\" and \"system\" in str(args):\n            return ToolPreInvokeResult(\n                continue_processing=False,\n                violation=PluginViolation(\n                    plugin_name=self.name,\n                    description=\"Dangerous operation blocked\",\n                    violation_code=\"DANGEROUS_OP\",\n                    details={\"tool\": tool_name}\n                )\n            )\n\n        # Example: Modify arguments\n        if \"sanitize_me\" in args:\n            args[\"sanitize_me\"] = self.sanitize_input(args[\"sanitize_me\"])\n            return ToolPreInvokeResult(\n                modified_payload=ToolPreInvokePayload(tool_name, args)\n            )\n\n        return ToolPreInvokeResult()\n\n    async def tool_post_invoke(\n        self,\n        payload: ToolPostInvokePayload,\n        context: PluginContext\n    ) -&gt; ToolPostInvokeResult:\n        \"\"\"Process tool after invocation.\"\"\"\n\n        # Access tool result\n        tool_name = payload.name\n        result = payload.result\n\n        # Example: Filter sensitive data from results\n        if isinstance(result, dict) and \"sensitive_data\" in result:\n            result[\"sensitive_data\"] = \"[REDACTED]\"\n            return ToolPostInvokeResult(\n                modified_payload=ToolPostInvokePayload(tool_name, result)\n            )\n\n        # Example: Add audit metadata\n        context.metadata[\"tool_executed\"] = tool_name\n        context.metadata[\"execution_time\"] = time.time()\n\n        return ToolPostInvokeResult()\n\n    async def resource_pre_fetch(\n        self,\n        payload: ResourcePreFetchPayload,\n        context: PluginContext\n    ) -&gt; ResourcePreFetchResult:\n        \"\"\"Process resource before fetching.\"\"\"\n\n        # Access resource URI and metadata\n        uri = payload.uri\n        metadata = payload.metadata\n\n        # Example: Block certain protocols\n        from urllib.parse import urlparse\n        parsed = urlparse(uri)\n        if parsed.scheme not in [\"http\", \"https\", \"file\"]:\n            return ResourcePreFetchResult(\n                continue_processing=False,\n                violation=PluginViolation(\n                    plugin_name=self.name,\n                    description=f\"Protocol {parsed.scheme} not allowed\",\n                    violation_code=\"PROTOCOL_BLOCKED\",\n                    details={\"uri\": uri, \"protocol\": parsed.scheme}\n                )\n            )\n\n        # Example: Add metadata\n        metadata[\"validated_by\"] = self.name\n        return ResourcePreFetchResult(\n            modified_payload=ResourcePreFetchPayload(uri, metadata)\n        )\n\n    async def resource_post_fetch(\n        self,\n        payload: ResourcePostFetchPayload,\n        context: PluginContext\n    ) -&gt; ResourcePostFetchResult:\n        \"\"\"Process resource after fetching.\"\"\"\n\n        # Access resource content\n        uri = payload.uri\n        content = payload.content\n\n        # Example: Redact sensitive patterns from text content\n        if hasattr(content, 'text') and content.text:\n            # Redact email addresses\n            import re\n            content.text = re.sub(\n                r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b',\n                '[EMAIL_REDACTED]',\n                content.text\n            )\n\n        return ResourcePostFetchResult(\n            modified_payload=ResourcePostFetchPayload(uri, content)\n        )\n\n    async def shutdown(self):\n        \"\"\"Cleanup when plugin shuts down.\"\"\"\n        # Close connections, save state, etc.\n        pass\n</code></pre>"},{"location":"using/plugins/#plugin-context-and-state","title":"Plugin Context and State","text":"<p>Plugins can maintain state between pre/post hooks:</p> <pre><code>async def prompt_pre_fetch(self, payload, context):\n    # Store state for later use\n    context.set_state(\"request_time\", time.time())\n    context.set_state(\"original_args\", payload.args.copy())\n\n    return PromptPrehookResult()\n\nasync def prompt_post_fetch(self, payload, context):\n    # Retrieve state from pre-hook\n    elapsed = time.time() - context.get_state(\"request_time\", 0)\n    original = context.get_state(\"original_args\", {})\n\n    # Add timing metadata\n    context.metadata[\"processing_time_ms\"] = elapsed * 1000\n\n    return PromptPosthookResult()\n</code></pre>"},{"location":"using/plugins/#external-service-plugin-example","title":"External Service Plugin Example","text":"<pre><code>class LLMGuardPlugin(Plugin):\n    \"\"\"Example external service integration.\"\"\"\n\n    def __init__(self, config: PluginConfig):\n        super().__init__(config)\n        self.service_url = config.config.get(\"service_url\")\n        self.api_key = config.config.get(\"api_key\")\n        self.timeout = config.config.get(\"timeout\", 30)\n\n    async def prompt_pre_fetch(self, payload, context):\n        # Call external service\n        async with httpx.AsyncClient() as client:\n            try:\n                response = await client.post(\n                    f\"{self.service_url}/analyze\",\n                    json={\n                        \"text\": str(payload.args),\n                        \"policy\": \"strict\"\n                    },\n                    headers={\n                        \"Authorization\": f\"Bearer {self.api_key}\"\n                    },\n                    timeout=self.timeout\n                )\n\n                result = response.json()\n\n                if result.get(\"blocked\", False):\n                    return PromptPrehookResult(\n                        continue_processing=False,\n                        violation=PluginViolation(\n                            plugin_name=self.name,\n                            description=result.get(\"reason\", \"Content blocked\"),\n                            violation_code=\"LLMGUARD_BLOCKED\",\n                            details=result\n                        )\n                    )\n\n            except Exception as e:\n                # Handle errors based on plugin settings\n                if self.config.mode == PluginMode.ENFORCE:\n                    return PromptPrehookResult(\n                        continue_processing=False,\n                        violation=PluginViolation(\n                            plugin_name=self.name,\n                            description=f\"Service error: {str(e)}\",\n                            violation_code=\"SERVICE_ERROR\",\n                            details={\"error\": str(e)}\n                        )\n                    )\n\n        return PromptPrehookResult()\n</code></pre>"},{"location":"using/plugins/#plugin-development-guide","title":"Plugin Development Guide","text":""},{"location":"using/plugins/#1-create-plugin-directory","title":"1. Create Plugin Directory","text":"<pre><code>mkdir -p plugins/my_plugin\ntouch plugins/my_plugin/__init__.py\ntouch plugins/my_plugin/plugin.py\ntouch plugins/my_plugin/plugin-manifest.yaml\n</code></pre>"},{"location":"using/plugins/#2-write-plugin-manifest","title":"2. Write Plugin Manifest","text":"<pre><code># plugins/my_plugin/plugin-manifest.yaml\ndescription: \"My custom plugin for X\"\nauthor: \"Your Name\"\nversion: \"1.0.0\"\ntags: [\"custom\", \"filter\"]\navailable_hooks:\n  - \"prompt_pre_fetch\"\n  - \"prompt_post_fetch\"\ndefault_config:\n  setting_one: \"default_value\"\n  setting_two: 123\n</code></pre>"},{"location":"using/plugins/#3-implement-plugin-class","title":"3. Implement Plugin Class","text":"<pre><code># plugins/my_plugin/plugin.py\nfrom mcpgateway.plugins.framework import Plugin\n\nclass MyPlugin(Plugin):\n    # Implementation here\n    pass\n</code></pre>"},{"location":"using/plugins/#4-register-in-configuration","title":"4. Register in Configuration","text":"<pre><code># plugins/config.yaml\nplugins:\n  - name: \"MyCustomPlugin\"\n    kind: \"plugins.my_plugin.plugin.MyPlugin\"\n    hooks: [\"prompt_pre_fetch\"]\n    # ... other configuration\n</code></pre>"},{"location":"using/plugins/#5-test-your-plugin","title":"5. Test Your Plugin","text":"<pre><code># tests/test_my_plugin.py\nimport pytest\nfrom plugins.my_plugin.plugin import MyPlugin\nfrom mcpgateway.plugins.framework import PluginConfig\n\n@pytest.mark.asyncio\nasync def test_my_plugin():\n    config = PluginConfig(\n        name=\"test\",\n        kind=\"plugins.my_plugin.plugin.MyPlugin\",\n        hooks=[\"prompt_pre_fetch\"],\n        config={\"setting_one\": \"test_value\"}\n    )\n\n    plugin = MyPlugin(config)\n\n    # Test your plugin logic\n    result = await plugin.prompt_pre_fetch(payload, context)\n    assert result.continue_processing\n</code></pre>"},{"location":"using/plugins/#best-practices","title":"Best Practices","text":""},{"location":"using/plugins/#1-error-handling","title":"1. Error Handling","text":"<p>Always handle errors gracefully:</p> <pre><code>async def prompt_pre_fetch(self, payload, context):\n    try:\n        # Plugin logic\n        pass\n    except Exception as e:\n        logger.error(f\"Plugin {self.name} error: {e}\")\n\n        # In permissive mode, log and continue\n        if self.mode == PluginMode.PERMISSIVE:\n            return PromptPrehookResult()\n\n        # In enforce mode, block the request\n        return PromptPrehookResult(\n            continue_processing=False,\n            violation=PluginViolation(\n                plugin_name=self.name,\n                description=\"Plugin error occurred\",\n                violation_code=\"PLUGIN_ERROR\",\n                details={\"error\": str(e)}\n            )\n        )\n</code></pre>"},{"location":"using/plugins/#2-performance-considerations","title":"2. Performance Considerations","text":"<ul> <li>Keep plugin operations lightweight</li> <li>Use caching for expensive operations</li> <li>Respect the configured timeout</li> <li>Consider async operations for I/O</li> </ul> <pre><code>class CachedPlugin(Plugin):\n    def __init__(self, config):\n        super().__init__(config)\n        self._cache = {}\n        self._cache_ttl = config.config.get(\"cache_ttl\", 300)\n\n    async def expensive_operation(self, key):\n        # Check cache first\n        if key in self._cache:\n            cached_value, timestamp = self._cache[key]\n            if time.time() - timestamp &lt; self._cache_ttl:\n                return cached_value\n\n        # Perform expensive operation\n        result = await self._do_expensive_work(key)\n\n        # Cache result\n        self._cache[key] = (result, time.time())\n        return result\n</code></pre>"},{"location":"using/plugins/#3-conditional-execution","title":"3. Conditional Execution","text":"<p>Use conditions to limit plugin scope:</p> <pre><code>conditions:\n  - prompts: [\"sensitive_prompt\"]\n    server_ids: [\"prod-server-1\", \"prod-server-2\"]\n    tenant_ids: [\"enterprise-tenant\"]\n    user_patterns: [\"admin-*\", \"support-*\"]\n</code></pre>"},{"location":"using/plugins/#4-logging-and-monitoring","title":"4. Logging and Monitoring","text":"<p>Use appropriate log levels:</p> <pre><code>logger.debug(f\"Plugin {self.name} processing prompt: {payload.name}\")\nlogger.info(f\"Plugin {self.name} blocked request: {violation_code}\")\nlogger.warning(f\"Plugin {self.name} timeout approaching\")\nlogger.error(f\"Plugin {self.name} failed: {error}\")\n</code></pre>"},{"location":"using/plugins/#api-reference","title":"API Reference","text":""},{"location":"using/plugins/#plugin-management-endpoints","title":"Plugin Management Endpoints","text":"Endpoint Method Description <code>/plugins</code> GET List all loaded plugins <code>/plugins/stats</code> GET Get plugin execution statistics <code>/plugins/reload/{name}</code> POST Reload a specific plugin <code>/plugins/stats/reset</code> POST Reset plugin statistics"},{"location":"using/plugins/#example-api-usage","title":"Example API Usage","text":"<pre><code># List plugins\ncurl http://localhost:8000/plugins\n\n# Response\n[\n  {\n    \"name\": \"ContentFilter\",\n    \"priority\": 100,\n    \"mode\": \"enforce\",\n    \"hooks\": [\"prompt_pre_fetch\", \"prompt_post_fetch\"],\n    \"tags\": [\"security\", \"filter\"],\n    \"conditions\": {\n      \"prompts\": [\"customer_chat\"]\n    }\n  }\n]\n</code></pre>"},{"location":"using/plugins/#troubleshooting","title":"Troubleshooting","text":""},{"location":"using/plugins/#plugin-not-loading","title":"Plugin Not Loading","text":"<ol> <li>Check server logs for initialization errors</li> <li>Verify plugin class path in configuration</li> <li>Ensure all dependencies are installed</li> <li>Check Python import path includes plugin directory</li> </ol>"},{"location":"using/plugins/#plugin-not-executing","title":"Plugin Not Executing","text":"<ol> <li>Verify plugin is enabled (<code>mode</code> != \"disabled\")</li> <li>Check conditions match your request</li> <li>Review priority ordering</li> <li>Enable debug logging to see execution flow</li> </ol>"},{"location":"using/plugins/#performance-issues","title":"Performance Issues","text":"<ol> <li>Monitor plugin execution time in logs</li> <li>Check for blocking I/O operations</li> <li>Review timeout settings</li> <li>Consider caching expensive operations</li> </ol>"},{"location":"using/plugins/#production-deployment-examples","title":"Production Deployment Examples","text":""},{"location":"using/plugins/#enterprise-ai-safety-pipeline","title":"Enterprise AI Safety Pipeline","text":"<pre><code># Production-grade AI safety configuration\nplugins:\n  # Step 1: PII Detection and Masking (Highest Priority)\n  - name: \"PIIFilter\"\n    kind: \"plugins.pii_filter.pii_filter.PIIFilterPlugin\"\n    hooks: [\"prompt_pre_fetch\", \"prompt_post_fetch\", \"tool_pre_invoke\", \"tool_post_invoke\"]\n    mode: \"enforce\"\n    priority: 10\n    config:\n      detect_ssn: true\n      detect_credit_card: true\n      detect_email: true\n      mask_strategy: \"partial\"\n      block_on_detection: false\n\n  # Step 2: External AI Safety Service (LlamaGuard)\n  - name: \"LlamaGuardSafety\"\n    kind: \"external\"\n    hooks: [\"prompt_pre_fetch\", \"tool_pre_invoke\"]\n    mode: \"enforce\"\n    priority: 20\n    mcp:\n      proto: STREAMABLEHTTP\n      url: \"https://ai-safety.internal.corp/llamaguard/v1\"\n    conditions:\n      - server_ids: [\"production-chat\", \"customer-support\"]\n\n  # Step 3: OpenAI Moderation for Final Check\n  - name: \"OpenAIMod\"\n    kind: \"external\"\n    hooks: [\"prompt_post_fetch\", \"tool_post_invoke\"]\n    mode: \"permissive\"  # Log violations but don't block\n    priority: 30\n    mcp:\n      proto: STREAMABLEHTTP\n      url: \"https://api.openai.com/v1/moderations\"\n\n  # Step 4: Audit Logging (Lowest Priority)\n  - name: \"AuditLogger\"\n    kind: \"plugins.audit.audit_logger.AuditLoggerPlugin\"\n    hooks: [\"prompt_pre_fetch\", \"tool_pre_invoke\", \"tool_post_invoke\"]\n    mode: \"permissive\"\n    priority: 100\n    config:\n      log_level: \"INFO\"\n      include_payloads: false  # For privacy\n      audit_endpoints: [\"https://audit.internal.corp/api/v1/logs\"]\n</code></pre>"},{"location":"using/plugins/#multi-tenant-security-configuration","title":"Multi-Tenant Security Configuration","text":"<pre><code>plugins:\n  # Enterprise tenant gets strict filtering\n  - name: \"EnterpriseSecurityFilter\"\n    kind: \"plugins.security.enterprise_filter.EnterpriseFilterPlugin\"\n    hooks: [\"prompt_pre_fetch\", \"tool_pre_invoke\"]\n    mode: \"enforce\"\n    priority: 50\n    conditions:\n      - tenant_ids: [\"enterprise-corp\", \"banking-client\"]\n        tools: [\"database-query\", \"file-access\", \"system-command\"]\n    config:\n      sql_injection_protection: true\n      command_injection_protection: true\n      file_system_restrictions: true\n\n  # Free tier gets basic content filtering\n  - name: \"BasicContentFilter\"\n    kind: \"plugins.content.basic_filter.BasicFilterPlugin\"\n    hooks: [\"prompt_pre_fetch\", \"prompt_post_fetch\"]\n    mode: \"permissive\"\n    priority: 75\n    conditions:\n      - tenant_ids: [\"free-tier\"]\n    config:\n      profanity_filter: true\n      spam_detection: true\n      rate_limit_warnings: true\n</code></pre>"},{"location":"using/plugins/#development-vs-production-configurations","title":"Development vs Production Configurations","text":"<pre><code># Development Environment\nplugins:\n  - name: \"DevPIIFilter\"\n    kind: \"plugins.pii_filter.pii_filter.PIIFilterPlugin\"\n    hooks: [\"prompt_pre_fetch\", \"tool_pre_invoke\"]\n    mode: \"permissive\"  # Don't block in dev\n    priority: 50\n    config:\n      detect_ssn: true\n      log_detections: true\n      mask_strategy: \"partial\"\n      whitelist_patterns:\n        - \"test@example.com\"\n        - \"555-555-5555\"\n        - \"123-45-6789\"  # Test SSN\n\n# Production Environment\nplugins:\n  - name: \"ProdPIIFilter\"\n    kind: \"plugins.pii_filter.pii_filter.PIIFilterPlugin\"\n    hooks: [\"prompt_pre_fetch\", \"prompt_post_fetch\", \"tool_pre_invoke\", \"tool_post_invoke\"]\n    mode: \"enforce\"  # Block in production\n    priority: 10\n    config:\n      detect_ssn: true\n      detect_credit_card: true\n      detect_phone: true\n      detect_email: true\n      detect_api_keys: true\n      block_on_detection: true\n      audit_detections: true\n      compliance_mode: \"strict\"\n</code></pre>"},{"location":"using/plugins/#performance-and-scalability","title":"Performance and Scalability","text":""},{"location":"using/plugins/#benchmark-results","title":"Benchmark Results","text":"<ul> <li>Self-Contained Plugins: &lt;1ms latency overhead per hook</li> <li>External Service Plugins: 10-100ms depending on service (cached responses: &lt;5ms)</li> <li>Memory Usage: ~5MB base overhead + ~1MB per active plugin</li> <li>Throughput: Tested to 1,000+ req/s with 5 active plugins</li> </ul>"},{"location":"using/plugins/#performance-optimization-tips","title":"Performance Optimization Tips","text":"<pre><code># Optimize plugin configuration for high-throughput environments\nplugin_settings:\n  plugin_timeout: 5000  # 5 second timeout for external services\n  parallel_execution_within_band: true  # Enable when available\n  fail_on_plugin_error: false  # Continue processing on plugin failures\n\nplugins:\n  - name: \"CachedAIService\"\n    kind: \"external\"\n    priority: 50\n    config:\n      cache_ttl_seconds: 300  # Cache responses for 5 minutes\n      cache_max_entries: 10000  # LRU cache with 10K entries\n      timeout_ms: 2000  # Fast timeout for high-throughput\n      retry_attempts: 1  # Single retry only\n</code></pre>"},{"location":"using/plugins/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"using/plugins/#plugin-metrics","title":"Plugin Metrics","text":"<p>The framework exposes comprehensive metrics for monitoring:</p> <pre><code># Plugin execution metrics\nmcpgateway_plugin_executions_total{plugin=\"PIIFilter\",hook=\"prompt_pre_fetch\",status=\"success\"}\nmcpgateway_plugin_duration_seconds{plugin=\"PIIFilter\",hook=\"prompt_pre_fetch\"}\nmcpgateway_plugin_violations_total{plugin=\"PIIFilter\",violation_code=\"PII_DETECTED\"}\nmcpgateway_plugin_errors_total{plugin=\"LlamaGuard\",error_type=\"timeout\"}\n\n# Context and memory metrics\nmcpgateway_plugin_contexts_active\nmcpgateway_plugin_contexts_cleaned_total\nmcpgateway_plugin_memory_usage_bytes\n</code></pre>"},{"location":"using/plugins/#health-check-integration","title":"Health Check Integration","text":"<pre><code>plugins:\n  - name: \"ExternalAIService\"\n    kind: \"external\"\n    mcp:\n      proto: STREAMABLEHTTP\n      url: \"https://ai-service.corp/api/v1\"\n      health_check_endpoint: \"/health\"\n      health_check_interval: 30\n    config:\n      circuit_breaker_enabled: true\n      circuit_breaker_failure_threshold: 5\n      circuit_breaker_timeout: 60\n</code></pre>"},{"location":"using/plugins/#security-considerations","title":"Security Considerations","text":""},{"location":"using/plugins/#plugin-isolation-and-security","title":"Plugin Isolation and Security","text":"<ul> <li>Input Validation: All plugin configurations validated against JSON schemas</li> <li>Timeout Protection: Configurable timeouts prevent plugin hangs</li> <li>Resource Limits: Memory and payload size limits prevent resource exhaustion</li> <li>Error Isolation: Plugin failures don't affect gateway stability</li> <li>Audit Logging: Complete audit trail of plugin executions and violations</li> </ul>"},{"location":"using/plugins/#external-service-security","title":"External Service Security","text":"<pre><code># Secure external service configuration\nplugins:\n  - name: \"SecureExternalService\"\n    kind: \"external\"\n    mcp:\n      proto: STREAMABLEHTTP\n      url: \"https://secure-ai-service.corp/api/v1\"\n      tls_verify: true\n      tls_client_cert: \"/etc/ssl/certs/client.crt\"\n      tls_client_key: \"/etc/ssl/private/client.key\"\n      auth:\n        type: \"bearer\"\n        token: \"${AI_SERVICE_TOKEN}\"  # Environment variable\n    config:\n      allowed_response_codes: [200, 201]\n      max_response_size_mb: 10\n      connection_pool_size: 20\n</code></pre>"},{"location":"using/plugins/#future-roadmap","title":"Future Roadmap","text":""},{"location":"using/plugins/#near-term-enhancements-v070","title":"Near-term Enhancements (v0.7.0)","text":"<ul> <li>Server Attestation Hooks: <code>server_pre_register</code> with TPM/TEE support</li> <li>Authentication Hooks: <code>auth_pre_check</code>/<code>auth_post_check</code> for custom auth</li> <li>Admin UI: Visual plugin management and monitoring dashboard</li> <li>Hot Configuration Reload: Update plugin configs without restart</li> <li>Advanced Caching: Redis-backed caching for external service calls</li> </ul>"},{"location":"using/plugins/#long-term-vision-v080","title":"Long-term Vision (v0.8.0+)","text":"<ul> <li>Plugin Marketplace: Community plugin sharing and discovery</li> <li>Advanced Analytics: Plugin performance analytics and optimization recommendations</li> <li>A/B Testing Framework: Split traffic between plugin configurations</li> <li>Policy as Code: Integration with Open Policy Agent (OPA) for complex rule evaluation</li> <li>Machine Learning Pipeline: Built-in support for custom ML model deployment</li> </ul>"},{"location":"using/plugins/#contributing","title":"Contributing","text":"<p>To contribute a plugin:</p> <ol> <li>Follow the plugin structure guidelines</li> <li>Include comprehensive tests</li> <li>Document configuration options</li> <li>Submit a pull request with examples</li> </ol> <p>For framework improvements, please open an issue to discuss proposed changes.</p>"},{"location":"using/plugins/lifecycle/","title":"Plugin Lifecycle","text":"<p>The plugin framework includes CLI tools to help you create, test, and deploy your plugins.</p>"},{"location":"using/plugins/lifecycle/#development-flow","title":"Development Flow","text":"<p>The plugin development workflow  follows a straightforward workflow that gets you from idea to running plugin quickly.</p> <pre><code>graph LR\n\n    A[\"template\"]\n    B([\"$&gt; bootstrap\"])\n    C([\"$&gt; build\"])\n    D([\"$&gt; serve\"])\n\n    subgraph dev\n        A -.-&gt; B\n    end\n\n    subgraph deploy\n        C --&gt; D\n    end\n\n    B --&gt; C\n\n    subgraph CF[\"Context Forge\"]\n        E[\"gateway\"]\n        D o--\"MCP&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;small&gt;tools/call &lt;i&gt;hook&lt;/i&gt;&lt;/small&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\"--o E\n    end\n\n    style A stroke-dasharray: 3 3;</code></pre> <p>The process breaks down into these main steps:</p> <ul> <li>Bootstrap: Start with a plugin template and run the bootstrap command to set up your project structure</li> <li>Build: Compile and package your plugin code</li> <li>Serve: Launch a local development server to test your plugin</li> <li>Connect: Your served plugin automatically integrates with Context Forge's gateway via MCP (Model Context Protocol), using tool calls over standardized hooks for seamless communication</li> </ul> <p>This streamlined approach lets developers focus on building functionality rather than wrestling with configuration, while ensuring plugins work smoothly within the broader Context Forge ecosystem.</p>"},{"location":"using/plugins/lifecycle/#bootstrap","title":"Bootstrap","text":"<p>Creating a new plugin for Context Forge only takes a few minutes!</p> <p>Using the <code>mcpplugins</code> tool (installed with Context Forge),</p> <pre><code>mcpplugins bootstrap --destination your/plugin/dir\n</code></pre> <p>The interactive prompt you guide you to enter plugin metadata, and will boostrap a complete plugin project for you including everything you need to kick the tires writing your new plugin.</p> <p>For a full list of options, check:</p> <pre><code>mcpplugins bootstrap --help\n</code></pre> <p>Tip</p> <pre><code>When prompted for the choosing the plugin type, select `external` to create standalone plugins (with their own lock files and dependency trees).\nSelect `native` if you want to create a plugin that embeds and gets loaded directly into the gateway environment.\n</code></pre> <p>The examples under the <code>plugins</code> directory in the gateway repository serve as a guide of how to develop and test <code>native</code> plugins.</p> <p>The following instructions apply to <code>external</code> plugins. First, change directory to work with your newly bootstrapped plugin:</p> <pre><code>cd your/plugin/dir\ncp .env.template .env\n</code></pre>"},{"location":"using/plugins/lifecycle/#configuration","title":"Configuration","text":"<p>There are two main configuration files for your project.</p> <pre><code>./resources\n    /plugins/config.yaml # configuration for your plugin and the plugin loader\n    /runtime/config.yaml # configuration for the plugin server runtime\n</code></pre> <p>Inspect those two files and get familiar with them. There are many options you can customize, depending on your use case.</p>"},{"location":"using/plugins/lifecycle/#dependencies","title":"Dependencies","text":"<p>Plugins are Python packages with dependencies managed by <code>uv</code>. Just like the gateway, you can add, lock, lint, and ensure that best practices are followed when creating your plugins. To install dependencies with dev packages (required for linting and testing), run:</p> <pre><code>make install-dev\n</code></pre> <p>Alternatively, you can also install it in editable mode:</p> <pre><code>make install-editable\n</code></pre>"},{"location":"using/plugins/lifecycle/#test","title":"Test","text":"<p>To run all unit tests for your plugins:</p> <pre><code>make test\n</code></pre>"},{"location":"using/plugins/lifecycle/#build","title":"Build","text":"<p>To build a container image (runtime) containing a standardized plugin server, run:</p> <pre><code>make build\n</code></pre>"},{"location":"using/plugins/lifecycle/#serve","title":"Serve","text":"<p>To start the plugin server:</p> <pre><code>make start\n</code></pre> <p>By default, this will start a Streamable HTTP MCP server on <code>http://localhost:8000/mcp</code>.</p> <p>You can run <code>mcp inspector</code> to check your new server (note, it requires <code>npm</code>):</p> <pre><code>npx @modelcontextprotocol/inspector\n</code></pre>"},{"location":"using/plugins/lifecycle/#gateway-integration","title":"Gateway Integration","text":"<p>Let's assume you have boostrapped the following plugin (<code>resources/plugins/config.yaml</code>) with default runtime (<code>resources/runtime/config.yaml</code>) options:</p> <pre><code>plugins:\n  - name: \"MyFilter\"\n    kind: \"myfilter.plugin.MyFilter\"\n    description: \"A filter plugin\"\n    version: \"0.1.0\"\n    author: \"Frederico Araujo\"\n    hooks: [\"prompt_pre_fetch\", \"prompt_post_fetch\", \"tool_pre_invoke\", \"tool_post_invoke\"]\n    tags: [\"plugin\"]\n    mode: \"enforce\"  # enforce | permissive | disabled\n    priority: 150\n    conditions:\n      # Apply to specific tools/servers\n      - server_ids: []  # Apply to all servers\n        tenant_ids: []  # Apply to all tenants\n    config:\n      # Plugin config dict passed to the plugin constructor\n\n# Plugin directories to scan\nplugin_dirs:\n  - \"myfilter\"\n\n# Global plugin settings\nplugin_settings:\n  parallel_execution_within_band: true\n  plugin_timeout: 30\n  fail_on_plugin_error: false\n  enable_plugin_api: true\n  plugin_health_check_interval: 60\n</code></pre> <p>To integrate this plugin with the gateway, all you need to do is copying the following configuration under the <code>plugins</code> list in the gateway's <code>plugins/config.yaml</code> file:</p> <pre><code>plugins:\n  # External Filter Plugin\n  - name: \"MyFilter\"\n    kind: \"external\"\n    priority: 10 # adjust the priority\n    mcp:\n      proto: STREAMABLEHTTP\n      url: http://localhost:8000/mcp\n</code></pre> <p>Then, start the gateway:</p> <pre><code>make serve\n</code></pre> <p>Note</p> <pre><code>`PLUGINS_ENABLED=true` should be set in your gateway `.env` file.\n</code></pre>"},{"location":"using/servers/","title":"\ud83c\udfaf Sample MCP Servers","text":"<p>The MCP Context Forge Gateway includes a collection of high-performance sample MCP servers built in different programming languages. These servers serve multiple purposes: demonstrating best practices for MCP implementation, providing ready-to-use tools for testing and development, and showcasing the performance characteristics of different language ecosystems.</p> <p>Perfect for testing, learning, and production use - each server is optimized for speed, reliability, and demonstrates language-specific MCP patterns.</p>"},{"location":"using/servers/#available-servers","title":"\ud83c\udf1f Available Servers","text":""},{"location":"using/servers/#fast-time-server-go","title":"\ud83e\uddab Fast Time Server (Go)","text":"<p><code>mcp-servers/go/fast-time-server</code> - Ultra-fast timezone and time conversion tools</p> <ul> <li>Language: Go 1.21+</li> <li>Performance: Sub-millisecond response times</li> <li>Transport: stdio, HTTP, SSE, dual-mode</li> <li>Tools: <code>get_system_time</code>, timezone conversions with DST support</li> <li>Container: <code>ghcr.io/ibm/fast-time-server:latest</code></li> </ul> <p>\ud83d\udcd6 Full Documentation \u2192</p>"},{"location":"using/servers/#quick-start","title":"Quick Start","text":"<pre><code># Docker (recommended)\ndocker run --rm -it -p 8888:8080 \\\n  ghcr.io/ibm/fast-time-server:latest \\\n  -transport=dual -log-level=debug\n\n# From source\ncd mcp-servers/go/fast-time-server\nmake build &amp;&amp; make run\n</code></pre>"},{"location":"using/servers/#coming-soon","title":"\ud83d\ude80 Coming Soon","text":""},{"location":"using/servers/#python-samples","title":"\ud83d\udc0d Python Samples","text":"<ul> <li>Fast Calculator Server - Mathematical operations and conversions</li> <li>System Info Server - OS and hardware information tools</li> <li>File Operations Server - Safe file system operations</li> </ul>"},{"location":"using/servers/#javascripttypescript-samples","title":"\ud83d\udfe8 JavaScript/TypeScript Samples","text":"<ul> <li>Web Scraper Server - URL content extraction and parsing</li> <li>JSON Transformer Server - Data transformation and validation</li> <li>API Client Server - REST API interaction tools</li> </ul>"},{"location":"using/servers/#rust-samples","title":"\ud83e\udd80 Rust Samples","text":"<ul> <li>High-Performance Parser Server - Ultra-fast text and data parsing</li> <li>Crypto Utils Server - Cryptographic operations and hashing</li> <li>Network Tools Server - Network diagnostics and utilities</li> </ul>"},{"location":"using/servers/#java-samples","title":"\u2615 Java Samples","text":"<ul> <li>Enterprise Integration Server - Database and messaging operations</li> <li>Document Processor Server - PDF and office document handling</li> <li>Monitoring Server - Application metrics and health checks</li> </ul>"},{"location":"using/servers/#use-cases","title":"\ud83c\udfaf Use Cases","text":""},{"location":"using/servers/#testing-development","title":"\ud83e\uddea Testing &amp; Development","text":"<ul> <li>Protocol Testing - Validate MCP client implementations</li> <li>Performance Benchmarking - Compare language runtime characteristics</li> <li>Integration Testing - Test gateway federation and tool routing</li> </ul>"},{"location":"using/servers/#learning-reference","title":"\ud83d\udcda Learning &amp; Reference","text":"<ul> <li>Best Practices - Language-specific MCP implementation patterns</li> <li>Architecture Examples - Different transport and authentication approaches</li> <li>Performance Optimization - Learn optimization techniques per language</li> </ul>"},{"location":"using/servers/#production-ready","title":"\ud83c\udfed Production Ready","text":"<ul> <li>Horizontal Scaling - All servers support container orchestration</li> <li>Monitoring Integration - Built-in health checks and metrics</li> <li>Security Hardened - Authentication, input validation, and safe defaults</li> </ul>"},{"location":"using/servers/#gateway-integration","title":"\ud83c\udf10 Gateway Integration","text":"<p>All sample servers are designed to integrate seamlessly with the MCP Gateway:</p>"},{"location":"using/servers/#direct-registration","title":"Direct Registration","text":"<pre><code># Register any sample server with the gateway\ncurl -X POST -H \"Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\":\"sample_server\",\"url\":\"http://localhost:8080/sse\"}' \\\n     http://localhost:4444/gateways\n</code></pre>"},{"location":"using/servers/#via-translate-bridge","title":"Via Translate Bridge","text":"<pre><code># Expose stdio servers over SSE using mcpgateway.translate\npython3 -m mcpgateway.translate \\\n  --stdio \"path/to/sample-server\" \\\n  --expose-sse \\\n  --port 8002\n</code></pre>"},{"location":"using/servers/#testing-with-wrapper","title":"Testing with Wrapper","text":"<pre><code># Test through mcpgateway.wrapper\nexport MCP_AUTH=$MCPGATEWAY_BEARER_TOKEN\nexport MCP_SERVER_URL='http://localhost:4444/servers/UUID_OF_SERVER_1'\npython3 -m mcpgateway.wrapper\n</code></pre>"},{"location":"using/servers/#development-guidelines","title":"\ud83d\udee0 Development Guidelines","text":""},{"location":"using/servers/#adding-new-sample-servers","title":"Adding New Sample Servers","text":"<p>Each sample server should follow these conventions:</p>"},{"location":"using/servers/#directory-structure","title":"Directory Structure","text":"<pre><code>mcp-servers/\n\u251c\u2500\u2500 go/\n\u2502   \u2514\u2500\u2500 your-server/\n\u2502       \u251c\u2500\u2500 main.go\n\u2502       \u251c\u2500\u2500 Makefile\n\u2502       \u251c\u2500\u2500 Dockerfile\n\u2502       \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 python/\n\u2502   \u2514\u2500\u2500 your-server/\n\u2502       \u251c\u2500\u2500 main.py\n\u2502       \u251c\u2500\u2500 pyproject.toml\n\u2502       \u251c\u2500\u2500 Dockerfile\n\u2502       \u2514\u2500\u2500 README.md\n\u2514\u2500\u2500 typescript/\n    \u2514\u2500\u2500 your-server/\n        \u251c\u2500\u2500 src/index.ts\n        \u251c\u2500\u2500 package.json\n        \u251c\u2500\u2500 Dockerfile\n        \u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"using/servers/#required-features","title":"Required Features","text":"<ul> <li>\u2705 Multiple transports - stdio, SSE, HTTP support</li> <li>\u2705 Container ready - Dockerfile with multi-stage builds</li> <li>\u2705 Health checks - <code>/health</code> endpoint for monitoring</li> <li>\u2705 Authentication - Bearer token support for web transports</li> <li>\u2705 Logging - Configurable log levels</li> <li>\u2705 Documentation - Complete usage examples and API docs</li> </ul>"},{"location":"using/servers/#performance-targets","title":"Performance Targets","text":"<ul> <li>Response Time: &lt; 10ms for simple operations</li> <li>Memory Usage: &lt; 50MB baseline memory footprint</li> <li>Startup Time: &lt; 1 second cold start</li> <li>Throughput: &gt; 1000 requests/second under load</li> </ul>"},{"location":"using/servers/#performance-comparison","title":"\ud83d\udcca Performance Comparison","text":"Server Language Response Time Memory Binary Size Cold Start fast-time-server Go 0.5ms 8MB 12MB 100ms coming soon Python ~2ms 25MB N/A 300ms coming soon TypeScript ~3ms 35MB N/A 400ms coming soon Rust 0.3ms 4MB 8MB 50ms coming soon Java ~5ms 45MB 25MB 800ms <p>Benchmarks measured on standard GitHub Actions runners</p>"},{"location":"using/servers/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions of new sample servers!</p>"},{"location":"using/servers/#contribution-process","title":"Contribution Process","text":"<ol> <li>Choose a language and create the directory structure</li> <li>Implement core MCP functionality following our guidelines</li> <li>Add comprehensive tests and performance benchmarks</li> <li>Create documentation following the fast-time-server example</li> <li>Submit a pull request with your implementation</li> </ol>"},{"location":"using/servers/#language-priorities","title":"Language Priorities","text":"<p>We're particularly interested in: - Python - Most popular for AI/ML tooling - TypeScript - Web-native integration - Rust - Maximum performance critical applications - Java - Enterprise integration scenarios</p>"},{"location":"using/servers/#resources","title":"\ud83d\udcda Resources","text":""},{"location":"using/servers/#mcp-specification","title":"MCP Specification","text":"<ul> <li>Model Context Protocol</li> <li>JSON-RPC 2.0 Specification</li> </ul>"},{"location":"using/servers/#gateway-documentation","title":"Gateway Documentation","text":"<ul> <li>MCP Context Forge Gateway</li> <li>mcpgateway.wrapper Usage</li> <li>mcpgateway.translate Bridge</li> </ul>"},{"location":"using/servers/#development-tools","title":"Development Tools","text":"<ul> <li>MCP Inspector - Interactive protocol debugging</li> <li>mcpgateway.translate Bridge - stdio \u2194 SSE/Streamable HTTP bridge</li> <li>UV - Fast Python package management</li> </ul>"},{"location":"using/servers/#quick-links","title":"\ud83d\udd17 Quick Links","text":"<ul> <li>\ud83e\uddab Fast Time Server (Go) \u2192</li> </ul> <p>Want to add a new sample server? Open an issue or submit a pull request!</p>"},{"location":"using/servers/go-fast-time-server/","title":"Go Fast Time Server","text":""},{"location":"using/servers/go-fast-time-server/#overview","title":"Overview","text":"<p>The fast-time-server is a high-performance Go-based MCP server that provides time-related tools for LLM applications. It offers multiple transport modes including stdio, HTTP, SSE, dual (MCP + REST), and REST-only modes, making it versatile for various integration scenarios.</p>"},{"location":"using/servers/go-fast-time-server/#features","title":"Features","text":"<ul> <li>Multiple Transport Modes: stdio, HTTP (JSON-RPC), SSE, dual (MCP + REST), and REST API</li> <li>Comprehensive Time Operations: Get system time, convert between timezones</li> <li>MCP Resources: Timezone data, world times, format examples, business hours</li> <li>MCP Prompts: Time comparisons, meeting scheduling, detailed conversions</li> <li>REST API: Traditional HTTP endpoints alongside MCP protocol</li> <li>OpenAPI Documentation: Interactive Swagger UI and OpenAPI 3.0 specification</li> <li>CORS Support: Enabled for browser-based testing</li> <li>Authentication: Optional Bearer token authentication</li> <li>Lightweight: Single static binary (~2 MiB)</li> <li>High Performance: Sub-millisecond response times</li> </ul>"},{"location":"using/servers/go-fast-time-server/#installation","title":"Installation","text":""},{"location":"using/servers/go-fast-time-server/#from-source","title":"From Source","text":"<pre><code>git clone https://github.com/IBM/mcp-context-forge.git\ncd mcp-servers/go/fast-time-server\nmake build\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#using-go-install","title":"Using Go Install","text":"<pre><code>go install github.com/IBM/mcp-context-forge/mcp-servers/go/fast-time-server@latest\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#transport-modes","title":"Transport Modes","text":""},{"location":"using/servers/go-fast-time-server/#1-stdio-mode-default","title":"1. STDIO Mode (Default)","text":"<p>For desktop clients like Claude Desktop:</p> <pre><code>./fast-time-server\n# or with specific log level\n./fast-time-server -transport=stdio -log-level=error\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#2-http-mode","title":"2. HTTP Mode","text":"<p>JSON-RPC 2.0 over HTTP:</p> <pre><code>./fast-time-server -transport=http -port=8080\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#3-sse-mode","title":"3. SSE Mode","text":"<p>Server-Sent Events for web clients:</p> <pre><code>./fast-time-server -transport=sse -port=8080\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#4-dual-mode","title":"4. Dual Mode","text":"<p>Both MCP (SSE/HTTP) and REST API:</p> <pre><code>./fast-time-server -transport=dual -port=8080\n</code></pre> <p>Endpoints: - <code>/sse</code> - MCP SSE events - <code>/messages</code> - MCP SSE messages - <code>/http</code> - MCP HTTP (JSON-RPC) - <code>/api/v1/*</code> - REST API endpoints - <code>/api/v1/docs</code> - Interactive API documentation</p>"},{"location":"using/servers/go-fast-time-server/#5-rest-mode","title":"5. REST Mode","text":"<p>REST API only (no MCP protocol):</p> <pre><code>./fast-time-server -transport=rest -port=8080\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#mcp-tools","title":"MCP Tools","text":""},{"location":"using/servers/go-fast-time-server/#get_system_time","title":"get_system_time","text":"<p>Returns the current time in a specified timezone.</p> <p>Parameters: - <code>timezone</code> (optional): IANA timezone name (default: \"UTC\")</p> <p>Example: <pre><code>{\n  \"tool\": \"get_system_time\",\n  \"arguments\": {\n    \"timezone\": \"America/New_York\"\n  }\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#convert_time","title":"convert_time","text":"<p>Converts time between different timezones.</p> <p>Parameters: - <code>time</code> (required): Time to convert (RFC3339 or common formats) - <code>source_timezone</code> (required): Source IANA timezone - <code>target_timezone</code> (required): Target IANA timezone</p> <p>Example: <pre><code>{\n  \"tool\": \"convert_time\",\n  \"arguments\": {\n    \"time\": \"2025-01-10T10:00:00Z\",\n    \"source_timezone\": \"UTC\",\n    \"target_timezone\": \"Asia/Tokyo\"\n  }\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#mcp-resources","title":"MCP Resources","text":"<p>The server provides four MCP resources that can be accessed through the MCP protocol:</p>"},{"location":"using/servers/go-fast-time-server/#timezoneinfo","title":"timezone://info","text":"<p>Comprehensive timezone information including offsets, DST status, major cities, and population data.</p> <p>Example Response: <pre><code>{\n  \"timezones\": [\n    {\n      \"id\": \"America/New_York\",\n      \"name\": \"Eastern Time\",\n      \"offset\": \"-05:00\",\n      \"dst\": true,\n      \"abbreviation\": \"EST/EDT\",\n      \"major_cities\": [\"New York\", \"Toronto\", \"Montreal\"],\n      \"population\": 141000000\n    }\n  ],\n  \"timezone_groups\": {\n    \"us_timezones\": [\"America/New_York\", \"America/Chicago\", \"America/Denver\", \"America/Los_Angeles\"]\n  }\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#timecurrentworld","title":"time://current/world","text":"<p>Current time in major cities around the world, updated in real-time.</p> <p>Example Response: <pre><code>{\n  \"last_updated\": \"2025-01-10T16:30:00Z\",\n  \"times\": {\n    \"New York\": \"2025-01-10 11:30:00 EST\",\n    \"London\": \"2025-01-10 16:30:00 GMT\",\n    \"Tokyo\": \"2025-01-11 01:30:00 JST\"\n  }\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#timeformats","title":"time://formats","text":"<p>Examples of supported time formats for parsing and display.</p> <p>Example Response: <pre><code>{\n  \"input_formats\": [\n    \"2006-01-02 15:04:05\",\n    \"2006-01-02T15:04:05Z\",\n    \"2006-01-02T15:04:05-07:00\"\n  ],\n  \"output_formats\": {\n    \"iso8601\": \"2006-01-02T15:04:05Z07:00\",\n    \"rfc3339\": \"2006-01-02T15:04:05Z\"\n  }\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#timebusiness-hours","title":"time://business-hours","text":"<p>Standard business hours across different regions.</p> <p>Example Response: <pre><code>{\n  \"regions\": {\n    \"north_america\": {\n      \"standard_hours\": \"9:00 AM - 5:00 PM\",\n      \"lunch_break\": \"12:00 PM - 1:00 PM\",\n      \"working_days\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    }\n  }\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#mcp-prompts","title":"MCP Prompts","text":"<p>The server provides three prompt templates for common time-related tasks:</p>"},{"location":"using/servers/go-fast-time-server/#compare_timezones","title":"compare_timezones","text":"<p>Compare current times across multiple time zones.</p> <p>Arguments: - <code>timezones</code> (required): Comma-separated list of timezone IDs - <code>reference_time</code> (optional): Reference time (defaults to now)</p> <p>Example: <pre><code>{\n  \"prompt\": \"compare_timezones\",\n  \"arguments\": {\n    \"timezones\": \"UTC,America/New_York,Asia/Tokyo\"\n  }\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#schedule_meeting","title":"schedule_meeting","text":"<p>Find optimal meeting time across multiple time zones.</p> <p>Arguments: - <code>participants</code> (required): Comma-separated list of participant locations/timezones - <code>duration</code> (required): Meeting duration in minutes - <code>preferred_hours</code> (optional): Preferred time range (default: \"9 AM - 5 PM\") - <code>date_range</code> (optional): Date range to consider (default: \"next 7 days\")</p> <p>Example: <pre><code>{\n  \"prompt\": \"schedule_meeting\",\n  \"arguments\": {\n    \"participants\": \"New York,London,Tokyo\",\n    \"duration\": \"60\",\n    \"preferred_hours\": \"9 AM - 5 PM\"\n  }\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#convert_time_detailed","title":"convert_time_detailed","text":"<p>Convert time with detailed context.</p> <p>Arguments: - <code>time</code> (required): Time to convert - <code>from_timezone</code> (required): Source timezone - <code>to_timezones</code> (required): Comma-separated list of target timezones - <code>include_context</code> (optional): Include contextual information (true/false)</p> <p>Example: <pre><code>{\n  \"prompt\": \"convert_time_detailed\",\n  \"arguments\": {\n    \"time\": \"2025-01-10T10:00:00Z\",\n    \"from_timezone\": \"UTC\",\n    \"to_timezones\": \"America/New_York,Europe/London,Asia/Tokyo\",\n    \"include_context\": \"true\"\n  }\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#rest-api-endpoints","title":"REST API Endpoints","text":"<p>When using <code>rest</code> or <code>dual</code> transport modes, the following REST endpoints are available:</p>"},{"location":"using/servers/go-fast-time-server/#get-system-time","title":"Get System Time","text":"<pre><code># With query parameter\ncurl http://localhost:8080/api/v1/time?timezone=America/New_York\n\n# With path parameter\ncurl http://localhost:8080/api/v1/time/Europe/London\n</code></pre> <p>Response: <pre><code>{\n  \"time\": \"2025-01-10T11:30:00-05:00\",\n  \"timezone\": \"America/New_York\",\n  \"unix\": 1736522400,\n  \"utc\": \"2025-01-10T16:30:00Z\"\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#convert-time","title":"Convert Time","text":"<pre><code>curl -X POST http://localhost:8080/api/v1/convert \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"time\": \"2025-01-10T10:00:00Z\",\n    \"from_timezone\": \"UTC\",\n    \"to_timezone\": \"Asia/Tokyo\"\n  }'\n</code></pre> <p>Response: <pre><code>{\n  \"original_time\": \"2025-01-10T10:00:00Z\",\n  \"from_timezone\": \"UTC\",\n  \"converted_time\": \"2025-01-10T19:00:00+09:00\",\n  \"to_timezone\": \"Asia/Tokyo\",\n  \"unix\": 1736503200\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#batch-convert","title":"Batch Convert","text":"<pre><code>curl -X POST http://localhost:8080/api/v1/convert/batch \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"conversions\": [\n      {\n        \"time\": \"2025-01-10T10:00:00Z\",\n        \"from_timezone\": \"UTC\",\n        \"to_timezone\": \"America/New_York\"\n      },\n      {\n        \"time\": \"2025-01-10T10:00:00Z\",\n        \"from_timezone\": \"UTC\",\n        \"to_timezone\": \"Europe/Paris\"\n      }\n    ]\n  }'\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#list-timezones","title":"List Timezones","text":"<pre><code># All timezones\ncurl http://localhost:8080/api/v1/timezones\n\n# Filtered timezones\ncurl http://localhost:8080/api/v1/timezones?filter=Europe\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#timezone-info","title":"Timezone Info","text":"<pre><code>curl http://localhost:8080/api/v1/timezones/Asia/Tokyo/info\n</code></pre> <p>Response: <pre><code>{\n  \"name\": \"Asia/Tokyo\",\n  \"offset\": \"+09:00\",\n  \"current_time\": \"2025-01-10T19:00:00+09:00\",\n  \"is_dst\": false,\n  \"abbreviation\": \"JST\"\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#mcp-resources-via-rest","title":"MCP Resources via REST","text":"<pre><code># List all resources\ncurl http://localhost:8080/api/v1/resources\n\n# Get specific resource\ncurl http://localhost:8080/api/v1/resources/timezone-info\ncurl http://localhost:8080/api/v1/resources/current-world\ncurl http://localhost:8080/api/v1/resources/time-formats\ncurl http://localhost:8080/api/v1/resources/business-hours\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#mcp-prompts-via-rest","title":"MCP Prompts via REST","text":"<pre><code># List all prompts\ncurl http://localhost:8080/api/v1/prompts\n\n# Execute a prompt\ncurl -X POST http://localhost:8080/api/v1/prompts/compare_timezones/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"timezones\": \"UTC,America/New_York,Asia/Tokyo\"}'\n\ncurl -X POST http://localhost:8080/api/v1/prompts/schedule_meeting/execute \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"participants\": \"New York,London,Tokyo\", \"duration\": \"60\"}'\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#test-endpoints","title":"Test Endpoints","text":"<pre><code># Echo test\ncurl http://localhost:8080/api/v1/test/echo?message=Hello\n\n# Validate JSON\ncurl -X POST http://localhost:8080/api/v1/test/validate \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"test\": \"data\"}'\n\n# Performance metrics\ncurl http://localhost:8080/api/v1/test/performance\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#api-documentation","title":"API Documentation","text":"<ul> <li>OpenAPI Spec: <code>http://localhost:8080/api/v1/openapi.json</code></li> <li>Swagger UI: <code>http://localhost:8080/api/v1/docs</code></li> </ul>"},{"location":"using/servers/go-fast-time-server/#configuration","title":"Configuration","text":""},{"location":"using/servers/go-fast-time-server/#command-line-flags","title":"Command-Line Flags","text":"Flag Default Description <code>-transport</code> <code>stdio</code> Transport mode: stdio, http, sse, dual, rest <code>-port</code> <code>8080</code> TCP port for HTTP/SSE/REST <code>-listen</code> <code>0.0.0.0</code> Listen interface <code>-addr</code> (empty) Full address (overrides -listen/-port) <code>-auth-token</code> (empty) Bearer token for authentication <code>-log-level</code> <code>info</code> Log level: debug, info, warn, error, none <code>-public-url</code> (empty) External base URL for SSE clients"},{"location":"using/servers/go-fast-time-server/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>AUTH_TOKEN</code>: Bearer token for authentication (overrides <code>-auth-token</code> flag)</li> </ul>"},{"location":"using/servers/go-fast-time-server/#authentication","title":"Authentication","text":"<p>When authentication is enabled, include the Bearer token in requests:</p> <pre><code># Set token\nexport TOKEN=\"your-secret-token\"\n\n# Start server with authentication\n./fast-time-server -transport=rest -auth-token=$TOKEN\n\n# Make authenticated requests\ncurl -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost:8080/api/v1/time\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#developer-guide-raw-json-rpc-protocol-usage","title":"Developer Guide: Raw JSON-RPC Protocol Usage","text":"<p>This section demonstrates how to interact with the fast-time-server using raw MCP JSON-RPC commands via curl or stdio. This is useful for developers who want to understand the underlying protocol or integrate with the server at a low level.</p>"},{"location":"using/servers/go-fast-time-server/#json-rpc-over-http","title":"JSON-RPC Over HTTP","text":"<p>When running in HTTP mode (<code>-transport=http</code>), the server accepts MCP JSON-RPC 2.0 messages over HTTP.</p>"},{"location":"using/servers/go-fast-time-server/#running-the-server","title":"Running the Server","text":"<pre><code># Start in HTTP mode\n./fast-time-server -transport=http -port=8080\n\n# Or in dual mode (both MCP and REST)\n./fast-time-server -transport=dual -port=8080\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#complete-session-example","title":"Complete Session Example","text":"<p>Here's a complete session showing the full MCP protocol flow:</p> <pre><code>#!/bin/bash\n# Complete MCP JSON-RPC session example\n\nSERVER=\"http://localhost:8080/http\"  # Use /http endpoint in dual mode\n# SERVER=\"http://localhost:8080/\"    # Root endpoint in http-only mode\n\necho \"=== MCP JSON-RPC Session with fast-time-server ===\"\n\n# Function to make JSON-RPC calls with pretty output\ncall_mcp() {\n    echo \"Request: $1\"\n    echo \"Response:\"\n    curl -s -X POST \"$SERVER\" \\\n         -H \"Content-Type: application/json\" \\\n         -d \"$1\" | jq '.'\n    echo \"---\"\n}\n\n# 1. Initialize the MCP connection\necho \"=== Step 1: Initialize ===\"\ncall_mcp '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2025-03-26\",\n    \"capabilities\": {\n      \"tools\": {},\n      \"resources\": {},\n      \"prompts\": {}\n    },\n    \"clientInfo\": {\n      \"name\": \"curl-client\",\n      \"version\": \"1.0\"\n    }\n  }\n}'\n\n# 2. Send initialized notification\necho \"=== Step 2: Send Initialized Notification ===\"\ncall_mcp '{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/initialized\",\n  \"params\": {}\n}'\n\n# 3. List available tools\necho \"=== Step 3: List Tools ===\"\ncall_mcp '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/list\",\n  \"params\": {}\n}'\n\n# 4. List available resources\necho \"=== Step 4: List Resources ===\"\ncall_mcp '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"resources/list\",\n  \"params\": {}\n}'\n\n# 5. List available prompts\necho \"=== Step 5: List Prompts ===\"\ncall_mcp '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"method\": \"prompts/list\",\n  \"params\": {}\n}'\n\n# 6. Call get_system_time tool (UTC)\necho \"=== Step 6: Get System Time (UTC) ===\"\ncall_mcp '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_system_time\",\n    \"arguments\": {}\n  }\n}'\n\n# 7. Call get_system_time tool (specific timezone)\necho \"=== Step 7: Get System Time (New York) ===\"\ncall_mcp '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 6,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_system_time\",\n    \"arguments\": {\n      \"timezone\": \"America/New_York\"\n    }\n  }\n}'\n\n# 8. Call convert_time tool\necho \"=== Step 8: Convert Time ===\"\ncall_mcp '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 7,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"convert_time\",\n    \"arguments\": {\n      \"time\": \"2025-01-15T14:00:00Z\",\n      \"source_timezone\": \"UTC\",\n      \"target_timezone\": \"Asia/Tokyo\"\n    }\n  }\n}'\n\n# 9. Read a resource\necho \"=== Step 9: Read Resource (timezone info) ===\"\ncall_mcp '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 8,\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"timezone://info\"\n  }\n}'\n\n# 10. Get a prompt\necho \"=== Step 10: Get Prompt ===\"\ncall_mcp '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 9,\n  \"method\": \"prompts/get\",\n  \"params\": {\n    \"name\": \"compare_timezones\",\n    \"arguments\": {\n      \"timezones\": \"UTC,America/New_York,Europe/London\"\n    }\n  }\n}'\n\necho \"=== Session Complete ===\"\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#individual-command-examples","title":"Individual Command Examples","text":"<p>Initialize Connection: <pre><code>curl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"jsonrpc\": \"2.0\",\n       \"id\": 1,\n       \"method\": \"initialize\",\n       \"params\": {\n         \"protocolVersion\": \"2025-03-26\",\n         \"capabilities\": {\n           \"tools\": {},\n           \"resources\": {},\n           \"prompts\": {}\n         },\n         \"clientInfo\": {\n           \"name\": \"curl-client\",\n           \"version\": \"1.0\"\n         }\n       }\n     }'\n</code></pre></p> <p>List Available Tools: <pre><code>curl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"jsonrpc\": \"2.0\",\n       \"id\": 2,\n       \"method\": \"tools/list\",\n       \"params\": {}\n     }'\n</code></pre></p> <p>Call Tool - Get Current Time: <pre><code># UTC time (default)\ncurl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"jsonrpc\": \"2.0\",\n       \"id\": 3,\n       \"method\": \"tools/call\",\n       \"params\": {\n         \"name\": \"get_system_time\",\n         \"arguments\": {}\n       }\n     }'\n\n# Specific timezone\ncurl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"jsonrpc\": \"2.0\",\n       \"id\": 4,\n       \"method\": \"tools/call\",\n       \"params\": {\n         \"name\": \"get_system_time\",\n         \"arguments\": {\n           \"timezone\": \"Europe/Dublin\"\n         }\n       }\n     }'\n</code></pre></p> <p>Call Tool - Convert Time: <pre><code>curl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"jsonrpc\": \"2.0\",\n       \"id\": 5,\n       \"method\": \"tools/call\",\n       \"params\": {\n         \"name\": \"convert_time\",\n         \"arguments\": {\n           \"time\": \"2025-01-15T10:00:00\",\n           \"source_timezone\": \"Europe/Dublin\",\n           \"target_timezone\": \"America/New_York\"\n         }\n       }\n     }'\n</code></pre></p> <p>Read Resources: <pre><code># List all resources\ncurl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"jsonrpc\": \"2.0\",\n       \"id\": 6,\n       \"method\": \"resources/list\",\n       \"params\": {}\n     }'\n\n# Read specific resource\ncurl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"jsonrpc\": \"2.0\",\n       \"id\": 7,\n       \"method\": \"resources/read\",\n       \"params\": {\n         \"uri\": \"time://current/world\"\n       }\n     }'\n</code></pre></p> <p>Work with Prompts: <pre><code># List all prompts\ncurl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"jsonrpc\": \"2.0\",\n       \"id\": 8,\n       \"method\": \"prompts/list\",\n       \"params\": {}\n     }'\n\n# Get a prompt with arguments\ncurl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n       \"jsonrpc\": \"2.0\",\n       \"id\": 9,\n       \"method\": \"prompts/get\",\n       \"params\": {\n         \"name\": \"schedule_meeting\",\n         \"arguments\": {\n           \"participants\": \"New York,London,Tokyo\",\n           \"duration\": \"60\",\n           \"preferred_hours\": \"9 AM - 5 PM\"\n         }\n       }\n     }'\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#json-rpc-over-stdio","title":"JSON-RPC Over STDIO","text":"<p>When running in stdio mode (<code>-transport=stdio</code>), the server communicates via standard input/output using newline-delimited JSON.</p>"},{"location":"using/servers/go-fast-time-server/#testing-stdio-mode","title":"Testing STDIO Mode","text":"<pre><code># Start the server in stdio mode\n./fast-time-server -transport=stdio -log-level=error\n\n# The server is now waiting for JSON-RPC messages on stdin\n# Each message should be on a single line\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#stdio-session-example","title":"STDIO Session Example","text":"<pre><code>#!/bin/bash\n# Test stdio mode with a script\n\necho \"=== Testing STDIO Mode ===\"\n\n# Start the server in background and capture its PID\n./fast-time-server -transport=stdio -log-level=error &amp;\nSERVER_PID=$!\n\n# Function to send JSON-RPC message and read response\nsend_message() {\n    echo \"$1\" | ./fast-time-server -transport=stdio -log-level=error 2&gt;/dev/null\n}\n\n# Initialize\necho \"Initializing...\"\nINIT_RESPONSE=$(send_message '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2025-03-26\",\"capabilities\":{},\"clientInfo\":{\"name\":\"script-client\",\"version\":\"1.0\"}}}')\necho \"Response: $INIT_RESPONSE\"\n\n# Send initialized notification\necho \"Sending initialized...\"\nsend_message '{\"jsonrpc\":\"2.0\",\"method\":\"notifications/initialized\",\"params\":{}}'\n\n# List tools\necho \"Listing tools...\"\nTOOLS_RESPONSE=$(send_message '{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/list\",\"params\":{}}')\necho \"Response: $TOOLS_RESPONSE\"\n\n# Get current time\necho \"Getting current time...\"\nTIME_RESPONSE=$(send_message '{\"jsonrpc\":\"2.0\",\"id\":3,\"method\":\"tools/call\",\"params\":{\"name\":\"get_system_time\",\"arguments\":{\"timezone\":\"UTC\"}}}')\necho \"Response: $TIME_RESPONSE\"\n\n# Clean up\nkill $SERVER_PID 2&gt;/dev/null\necho \"=== STDIO Test Complete ===\"\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#interactive-stdio-testing","title":"Interactive STDIO Testing","text":"<p>For interactive testing, you can use a simple script or tools like <code>nc</code> (netcat):</p> <pre><code># Method 1: Direct pipe interaction\necho '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2025-03-26\",\"capabilities\":{},\"clientInfo\":{\"name\":\"test\",\"version\":\"1.0\"}}}' | ./fast-time-server -transport=stdio -log-level=error\n\n# Method 2: Using a here document\n./fast-time-server -transport=stdio -log-level=error &lt;&lt; 'EOF'\n{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2025-03-26\",\"capabilities\":{},\"clientInfo\":{\"name\":\"test\",\"version\":\"1.0\"}}}\n{\"jsonrpc\":\"2.0\",\"method\":\"notifications/initialized\",\"params\":{}}\n{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/list\",\"params\":{}}\n{\"jsonrpc\":\"2.0\",\"id\":3,\"method\":\"tools/call\",\"params\":{\"name\":\"get_system_time\",\"arguments\":{}}}\nEOF\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#authentication-with-json-rpc","title":"Authentication with JSON-RPC","text":"<p>When the server is running with authentication (<code>-auth-token=secret</code>):</p> <pre><code># Start server with authentication\n./fast-time-server -transport=http -port=8080 -auth-token=mysecret\n\n# Include Bearer token in HTTP headers\ncurl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Authorization: Bearer mysecret\" \\\n     -d '{\n       \"jsonrpc\": \"2.0\",\n       \"id\": 1,\n       \"method\": \"initialize\",\n       \"params\": {\n         \"protocolVersion\": \"2025-03-26\",\n         \"capabilities\": {},\n         \"clientInfo\": {\"name\": \"auth-client\", \"version\": \"1.0\"}\n       }\n     }'\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#expected-response-formats","title":"Expected Response Formats","text":"<p>Successful Initialize Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"protocolVersion\": \"2025-03-26\",\n    \"capabilities\": {\n      \"tools\": {\n        \"listChanged\": false\n      },\n      \"resources\": {\n        \"subscribe\": false,\n        \"listChanged\": false\n      },\n      \"prompts\": {\n        \"listChanged\": false\n      }\n    },\n    \"serverInfo\": {\n      \"name\": \"fast-time-server\",\n      \"version\": \"1.5.0\"\n    }\n  }\n}\n</code></pre></p> <p>Tools List Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"tools\": [\n      {\n        \"name\": \"get_system_time\",\n        \"description\": \"Get current system time in specified timezone\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"timezone\": {\n              \"type\": \"string\",\n              \"description\": \"IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Defaults to UTC if not specified.\"\n            }\n          }\n        }\n      },\n      {\n        \"name\": \"convert_time\",\n        \"description\": \"Convert time between different timezones\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"time\": {\n              \"type\": \"string\",\n              \"description\": \"Time to convert in RFC3339 format or common formats like '2006-01-02 15:04:05'\"\n            },\n            \"source_timezone\": {\n              \"type\": \"string\",\n              \"description\": \"Source IANA timezone name\"\n            },\n            \"target_timezone\": {\n              \"type\": \"string\",\n              \"description\": \"Target IANA timezone name\"\n            }\n          },\n          \"required\": [\"time\", \"source_timezone\", \"target_timezone\"]\n        }\n      }\n    ]\n  }\n}\n</code></pre></p> <p>Tool Call Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"2025-01-15T16:30:45Z\"\n      }\n    ],\n    \"isError\": false\n  }\n}\n</code></pre></p> <p>Error Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"invalid timezone \\\"Invalid/Zone\\\": unknown time zone Invalid/Zone\"\n      }\n    ],\n    \"isError\": true\n  }\n}\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#json-rpc-troubleshooting","title":"JSON-RPC Troubleshooting","text":"<p>Common Issues:</p> <ol> <li> <p>Connection Refused <pre><code># Check if server is running\ncurl -f http://localhost:8080/health || echo \"Server not running\"\n\n# Check what's listening on the port\nlsof -i :8080\n</code></pre></p> </li> <li> <p>Invalid JSON-RPC Format <pre><code># Ensure proper JSON-RPC 2.0 format\n# Must include: jsonrpc, method, id (for requests)\ncurl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\",\"params\":{}}'\n</code></pre></p> </li> <li> <p>Missing Content-Type Header <pre><code># Always include Content-Type for POST requests\ncurl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -d '...'\n</code></pre></p> </li> <li> <p>Authentication Errors <pre><code># Include Bearer token when server uses authentication\ncurl -X POST http://localhost:8080/http \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Authorization: Bearer your-token\" \\\n     -d '...'\n</code></pre></p> </li> <li> <p>STDIO Mode Issues</p> </li> <li>Ensure each JSON message is on a single line</li> <li>Use <code>-log-level=error</code> or <code>-log-level=none</code> to avoid log interference</li> <li>Check that the binary has proper permissions</li> </ol>"},{"location":"using/servers/go-fast-time-server/#integration-examples","title":"Integration Examples","text":"<p>Python Integration: <pre><code>import json\nimport requests\nimport subprocess\n\nclass MCPClient:\n    def __init__(self, base_url):\n        self.base_url = base_url\n        self.session = requests.Session()\n        self.request_id = 0\n\n    def call(self, method, params=None):\n        self.request_id += 1\n        payload = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": self.request_id,\n            \"method\": method,\n            \"params\": params or {}\n        }\n\n        response = self.session.post(\n            f\"{self.base_url}/http\",\n            json=payload,\n            headers={\"Content-Type\": \"application/json\"}\n        )\n\n        return response.json()\n\n    def initialize(self):\n        return self.call(\"initialize\", {\n            \"protocolVersion\": \"2025-03-26\",\n            \"capabilities\": {},\n            \"clientInfo\": {\"name\": \"python-client\", \"version\": \"1.0\"}\n        })\n\n    def get_time(self, timezone=\"UTC\"):\n        return self.call(\"tools/call\", {\n            \"name\": \"get_system_time\",\n            \"arguments\": {\"timezone\": timezone}\n        })\n\n# Usage\nclient = MCPClient(\"http://localhost:8080\")\nclient.initialize()\ntime_result = client.get_time(\"America/New_York\")\nprint(time_result[\"result\"][\"content\"][0][\"text\"])\n</code></pre></p> <p>Node.js Integration: <pre><code>const axios = require('axios');\n\nclass MCPClient {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n        this.requestId = 0;\n    }\n\n    async call(method, params = {}) {\n        this.requestId++;\n        const payload = {\n            jsonrpc: \"2.0\",\n            id: this.requestId,\n            method,\n            params\n        };\n\n        const response = await axios.post(`${this.baseUrl}/http`, payload, {\n            headers: { 'Content-Type': 'application/json' }\n        });\n\n        return response.data;\n    }\n\n    async initialize() {\n        return this.call(\"initialize\", {\n            protocolVersion: \"2025-03-26\",\n            capabilities: {},\n            clientInfo: { name: \"node-client\", version: \"1.0\" }\n        });\n    }\n\n    async getTime(timezone = \"UTC\") {\n        return this.call(\"tools/call\", {\n            name: \"get_system_time\",\n            arguments: { timezone }\n        });\n    }\n}\n\n// Usage\n(async () =&gt; {\n    const client = new MCPClient(\"http://localhost:8080\");\n    await client.initialize();\n    const result = await client.getTime(\"Asia/Tokyo\");\n    console.log(result.result.content[0].text);\n})();\n</code></pre></p>"},{"location":"using/servers/go-fast-time-server/#claude-desktop-configuration","title":"Claude Desktop Configuration","text":"<p>Add to <code>claude_desktop_config.json</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"fast-time\": {\n      \"command\": \"/path/to/fast-time-server\",\n      \"args\": [\"-log-level=error\"]\n    }\n  }\n}\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#mcp-gateway-integration","title":"MCP Gateway Integration","text":"<p>The fast-time-server can be registered with MCP Gateway for federation:</p> <pre><code># Start the server in dual mode\n./fast-time-server -transport=dual -port=8080\n\n# Register with MCP Gateway\ncurl -X POST http://gateway:4444/gateways \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"fast-time-server\",\n    \"url\": \"http://localhost:8080\",\n    \"transport\": \"sse\"\n  }'\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#development","title":"Development","text":""},{"location":"using/servers/go-fast-time-server/#building-from-source","title":"Building from Source","text":"<pre><code># Build binary\nmake build\n\n# Run tests\nmake test\n\n# Generate coverage report\nmake coverage\n\n# Run linters\nmake lint staticcheck\n\n# Build for multiple platforms\nmake cross\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#running-different-modes","title":"Running Different Modes","text":"<pre><code># Development with hot reload\nmake run\n\n# HTTP mode\nmake run-http\n\n# SSE mode\nmake run-sse\n\n# Dual mode\nmake run-dual\n\n# REST mode\nmake run-rest\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#docker-support","title":"Docker Support","text":"<pre><code># Build Docker image\nmake docker-build\n\n# Run in Docker\nmake docker-run\n\n# Run with authentication\nmake docker-run-sse-auth TOKEN=mysecret\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#performance","title":"Performance","text":"<p>The fast-time-server is optimized for high performance:</p> <ul> <li>Response Time: &lt; 1ms for simple queries</li> <li>Throughput: &gt; 10,000 requests/second</li> <li>Memory Usage: &lt; 10 MB</li> <li>CPU Usage: Minimal, single-threaded design</li> <li>Startup Time: &lt; 100ms</li> </ul>"},{"location":"using/servers/go-fast-time-server/#benchmarking","title":"Benchmarking","text":"<pre><code># Install hey (HTTP load tester)\ngo install github.com/rakyll/hey@latest\n\n# Run benchmark\nhey -n 10000 -c 100 http://localhost:8080/api/v1/time\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#error-handling","title":"Error Handling","text":"<p>The REST API returns consistent error responses:</p> <pre><code>{\n  \"error\": \"Bad Request\",\n  \"message\": \"Invalid timezone: Invalid/Zone\",\n  \"code\": 400\n}\n</code></pre> <p>Common HTTP status codes: - <code>200 OK</code>: Successful request - <code>400 Bad Request</code>: Invalid parameters - <code>401 Unauthorized</code>: Missing or invalid authentication - <code>405 Method Not Allowed</code>: Wrong HTTP method - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"using/servers/go-fast-time-server/#cors-support","title":"CORS Support","text":"<p>CORS is enabled for REST endpoints, allowing browser-based testing:</p> <pre><code>fetch('http://localhost:8080/api/v1/time?timezone=UTC')\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data));\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#troubleshooting","title":"Troubleshooting","text":""},{"location":"using/servers/go-fast-time-server/#server-wont-start","title":"Server won't start","text":"<ul> <li>Check if the port is already in use: <code>lsof -i :8080</code></li> <li>Verify the binary has execute permissions: <code>chmod +x fast-time-server</code></li> </ul>"},{"location":"using/servers/go-fast-time-server/#authentication-errors","title":"Authentication errors","text":"<ul> <li>Ensure the Bearer token is correctly formatted: <code>Bearer &lt;token&gt;</code></li> <li>Check that the token matches between server and client</li> <li>Health and version endpoints bypass authentication</li> </ul>"},{"location":"using/servers/go-fast-time-server/#timezone-errors","title":"Timezone errors","text":"<ul> <li>Use valid IANA timezone names (e.g., \"America/New_York\", not \"EST\")</li> <li>Check available timezones: <code>curl http://localhost:8080/api/v1/timezones</code></li> </ul>"},{"location":"using/servers/go-fast-time-server/#performance-issues","title":"Performance issues","text":"<ul> <li>Use <code>-log-level=error</code> or <code>-log-level=none</code> to reduce logging overhead</li> <li>Consider using the compiled binary instead of <code>go run</code></li> <li>Enable caching in your HTTP client for repeated requests</li> </ul>"},{"location":"using/servers/go-fast-time-server/#examples","title":"Examples","text":""},{"location":"using/servers/go-fast-time-server/#time-zone-conversion-script","title":"Time Zone Conversion Script","text":"<pre><code>#!/bin/bash\n# Convert meeting time to multiple timezones\n\nTIME=\"2025-01-15T14:00:00Z\"\nZONES=(\"America/New_York\" \"Europe/London\" \"Asia/Tokyo\")\n\nfor zone in \"${ZONES[@]}\"; do\n  result=$(curl -s -X POST http://localhost:8080/api/v1/convert \\\n    -H \"Content-Type: application/json\" \\\n    -d \"{\n      \\\"time\\\": \\\"$TIME\\\",\n      \\\"from_timezone\\\": \\\"UTC\\\",\n      \\\"to_timezone\\\": \\\"$zone\\\"\n    }\" | jq -r '.converted_time')\n\n  echo \"$zone: $result\"\ndone\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#python-client-example","title":"Python Client Example","text":"<pre><code>import requests\nimport json\n\n# Get current time in Tokyo\nresponse = requests.get('http://localhost:8080/api/v1/time/Asia/Tokyo')\ndata = response.json()\nprint(f\"Current time in Tokyo: {data['time']}\")\n\n# Convert time\nconversion = {\n    \"time\": \"2025-01-15T10:00:00Z\",\n    \"from_timezone\": \"UTC\",\n    \"to_timezone\": \"America/New_York\"\n}\nresponse = requests.post(\n    'http://localhost:8080/api/v1/convert',\n    json=conversion\n)\nresult = response.json()\nprint(f\"Converted time: {result['converted_time']}\")\n</code></pre>"},{"location":"using/servers/go-fast-time-server/#related-resources","title":"Related Resources","text":"<ul> <li>MCP Protocol Specification</li> <li>MCP Gateway Documentation</li> <li>Go MCP SDK</li> <li>Time Zone Database</li> </ul>"}]}