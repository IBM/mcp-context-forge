# ===============================================================
# üì¶ Secure Docker Build & Scan Workflow
# ===============================================================
#
# This workflow:
#   ‚Ä¢ Builds and tags the container image (`latest` + timestamp)
#   ‚Ä¢ Re-uses a BuildKit layer cache for faster rebuilds
#   ‚Ä¢ Lints the Dockerfile with Hadolint
#   ‚Ä¢ Lints the finished image with Dockle (CIS best-practices)
#   ‚Ä¢ Generates an SPDX SBOM with Syft
#   ‚Ä¢ Scans the image for CRITICAL/HIGH CVEs with Trivy
#   ‚Ä¢ Uploads both Dockle and Trivy results as SARIF files
#   ‚Ä¢ Pushes the image to GitHub Container Registry (GHCR)
#   ‚Ä¢ Signs and attests the image with Cosign **key-less (OIDC)** ‚Äì
#     no private keys or secrets required
#
# Triggers:
#   ‚Ä¢ Every push / PR to `main`
#   ‚Ä¢ Weekly scheduled run (Tue 18:17 UTC) to catch newly-disclosed CVEs
# ---------------------------------------------------------------

name: Secure Docker Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '17 18 * * 2'   # every Tuesday @ 18:17 UTC

# -----------------------------------------------------------------
# GitHub permission scopes for this job
#   - contents: read    ‚Üí checkout source
#   - packages: write   ‚Üí push to GHCR with the builtin GITHUB_TOKEN
#   - security-events: write ‚Üí upload SARIF to ‚ÄúCode-scanning alerts‚Äù
#   - actions: read     ‚Üí required by upload-sarif in private repos
# -----------------------------------------------------------------
permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

jobs:
  build-scan-sign:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
      CACHE_DIR: /tmp/.buildx-cache   # local BuildKit layer cache

    steps:
    # -------------------------------------------------------------
    # 0Ô∏è‚É£  Checkout source
    # -------------------------------------------------------------
    - name: ‚¨áÔ∏è  Checkout code
      uses: actions/checkout@v4

    # -------------------------------------------------------------
    # 1Ô∏è‚É£  Lint Dockerfile (Hadolint)
    # -------------------------------------------------------------
    - name: üîç Dockerfile lint (Hadolint)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Containerfile.lite

    # -------------------------------------------------------------
    # 2Ô∏è‚É£  Set up Buildx & restore cache
    # -------------------------------------------------------------
    - name: üõ†Ô∏è  Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîÑ Restore BuildKit layer cache
      uses: actions/cache@v4
      with:
        path: ${{ env.CACHE_DIR }}
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # -------------------------------------------------------------
    # 3Ô∏è‚É£  Build & tag image (timestamp + latest)
    # -------------------------------------------------------------
    - name: üèóÔ∏è  Build Docker image
      run: |
        TAG=$(date +%s)
        docker buildx build \
          --file Containerfile.lite \
          --tag $IMAGE_NAME:$TAG \
          --tag $IMAGE_NAME:latest \
          --cache-from type=local,src=${{ env.CACHE_DIR }} \
          --cache-to   type=local,dest=${{ env.CACHE_DIR }},mode=max \
          --load

    # -------------------------------------------------------------
    # 4Ô∏è‚É£  Lint image with Dockle
    # -------------------------------------------------------------
    - name: üîç Image lint (Dockle)
      uses: erzz/dockle-action@v2
      with:
        image: ${{ env.IMAGE_NAME }}:latest
        format: sarif
        output: dockle-results.sarif
        exit-code: 1     # fail on WARN+  (remove to make non-blocking)

    - name: ‚òÅÔ∏è Upload Dockle SARIF
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: dockle-results.sarif

    # -------------------------------------------------------------
    # 5Ô∏è‚É£  Generate SPDX SBOM with Syft
    # -------------------------------------------------------------
    - name: üìÑ Generate SBOM (Syft)
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.IMAGE_NAME }}:latest
        output-file: sbom.spdx.json

    # -------------------------------------------------------------
    # 6Ô∏è‚É£  Trivy CVE scan ‚Üí SARIF  (fails on CRITICAL/HIGH)
    # -------------------------------------------------------------
    - name: üõ°Ô∏è  Trivy vulnerability scan
      uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
      with:
        image-ref: ${{ env.IMAGE_NAME }}:latest
        format: template
        template: '@/contrib/sarif.tpl'
        output: trivy-results.sarif
        severity: CRITICAL,HIGH
        exit-code: 1        # break build on CRITICAL/HIGH vulns

    - name: ‚òÅÔ∏è Upload Trivy SARIF
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

    # -------------------------------------------------------------
    # 7Ô∏è‚É£  Push both tags to GHCR (uses built-in GITHUB_TOKEN)
    # -------------------------------------------------------------
    - name: üîë Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: üöÄ Push image to GHCR
      run: |
        # Grab the timestamp tag we built earlier
        TIMESTAMP_TAG=$(docker images --format '{{.Tag}}' $IMAGE_NAME | grep -v latest)
        docker push $IMAGE_NAME:$TIMESTAMP_TAG
        docker push $IMAGE_NAME:latest

    # -------------------------------------------------------------
    # 8Ô∏è‚É£  Key-less Cosign sign (OIDC) + provenance
    # -------------------------------------------------------------
    - name: üì• Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: üîè Sign & attest image
      env:
        COSIGN_EXPERIMENTAL: "1"   # enable key-less OIDC flow
      run: |
        # Cosign will interactively fetch an OIDC token from GitHub Actions
        cosign sign   --yes $IMAGE_NAME:latest
        cosign attest --yes --predicate sbom.spdx.json $IMAGE_NAME:latest
