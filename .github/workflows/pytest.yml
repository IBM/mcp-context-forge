# ===============================================================
# 🧪  PyTest & Coverage – Quality Gate
# ===============================================================
#
# This workflow
#   • runs the full test-suite across three Python versions
#   • measures branch + line coverage (fails < 40 %)
#   • uploads the XML/HTML coverage reports as build artifacts
#   • generates / commits an SVG badge (main branch only)
#   • posts a concise coverage table to the job summary
#   • executes on every push/PR to *main* and weekly
# ---------------------------------------------------------------

name: Tests & Coverage

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  # schedule:
  #   - cron: '42 3 * * 1'   # Monday 03:42 UTC

permissions:
  contents: write # needed to commit the badge
  checks: write
  actions: read

jobs:
  test:
    name: pytest (${{ matrix.python }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python: ["3.10", "3.11", "3.12"]

    env:
      PYTHONUNBUFFERED: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"

    steps:
      # -----------------------------------------------------------
      # 0️⃣  Checkout
      # -----------------------------------------------------------
      - name: ⬇️  Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # -----------------------------------------------------------
      # 1️⃣  Set-up Python
      # -----------------------------------------------------------
      - name: 🐍  Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"

      # -----------------------------------------------------------
      # 2️⃣  Install dependencies
      # -----------------------------------------------------------
      - name: 📦  Install requirements
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install pytest pytest-cov pytest-asyncio coverage[toml]
          fi

      # -----------------------------------------------------------
      # 3️⃣  Run the tests with coverage
      # -----------------------------------------------------------
      - name: 🧪  Run pytest
        run: |
          pytest \
            --cov=mcpgateway \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --cov-branch \
            --cov-fail-under=40

    # -----------------------------------------------------------
    # 4️⃣  Upload coverage artifacts (XML + HTML)
    # -----------------------------------------------------------

#     - name: 📤  Upload coverage.xml
#       uses: actions/upload-artifact@v4
#       with:
#         name: coverage-xml-${{ matrix.python }}
#         path: coverage.xml
#
#     - name: 📤  Upload HTML coverage
#       uses: actions/upload-artifact@v4
#       with:
#         name: htmlcov-${{ matrix.python }}
#         path: htmlcov/

# -----------------------------------------------------------
# 5️⃣  Generate + commit badge (once, on main / highest ver)
# -----------------------------------------------------------
# - name: 📊  Create coverage badge
#   if: matrix.python == '3.11' && github.ref == 'refs/heads/main'
#   id: make_badge
#   uses: tj-actions/coverage-badge@v2
#   with:
#     coverage-file: coverage.xml          # input
#     output: .github/badges/coverage.svg  # output file
#   env:
#     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# - name: 🚀  Commit badge
#   if: steps.make_badge.outputs.badge-updated == 'true'
#   uses: stefanzweifel/git-auto-commit-action@v5
#   with:
#     commit_message: "docs(badge): update coverage badge"
#     file_pattern: ".github/badges/coverage.svg"

# -----------------------------------------------------------
# 6️⃣  Publish coverage table to the job summary
# -----------------------------------------------------------
#     - name: 📝  Coverage summary
#       if: always()
#       run: |
#         echo "### Coverage – Python ${{ matrix.python }}" >> $GITHUB_STEP_SUMMARY
#         # table header
#         echo "| File | Stmts | Miss | Branch | BrMiss | Cover |" >> $GITHUB_STEP_SUMMARY
#         echo "|------|------:|-----:|-------:|-------:|------:|" >> $GITHUB_STEP_SUMMARY
#         # append trimmed coverage report
#         coverage json -q -o cov.json
#         python - <<'PY'
# import json, os, pathlib, sys
# d = json.load(open("cov.json"))
# for f in d["files"].values():
#     rel = pathlib.Path(f["filename"]).relative_to(pathlib.Path().resolve())
#     print(f"| {rel} | {f['summary']['num_statements']} | {f['summary']['missing_lines']} | "
#           f"{f['summary']['num_branches']} | {f['summary']['missing_branches']} | "
#           f"{f['summary']['percent_covered']:.1f}% |")
# PY >> $GITHUB_STEP_SUMMARY
