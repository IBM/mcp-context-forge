# MCP LangChain Agent Configuration
# ===================================

# Gateway Configuration
# ----------------------
# URL of the MCP Gateway instance
MCP_GATEWAY_URL=http://localhost:4444

# JWT token for authenticating with the MCP Gateway
# Generate with: python3 -m mcpgateway.utils.create_jwt_token -u admin --secret my-test-key
MCPGATEWAY_BEARER_TOKEN=your-jwt-token-here

# OpenAI Configuration (Required)
# --------------------------------
# Your OpenAI API key for LangChain LLM calls
OPENAI_API_KEY=your-openai-api-key-here

# Tool Configuration (Optional)
# ------------------------------
# Comma-separated list of tools to allow (if unset, all tools from gateway are used)
# Leave empty for development, set for production security
TOOLS=

# Example tool allowlist for production:
# TOOLS=list-users,books-search,weather-tool

# Agent Configuration
# -------------------
# Default OpenAI model to use
DEFAULT_MODEL=gpt-4o-mini

# Maximum number of tool call iterations
MAX_ITERATIONS=10

# Temperature for LLM responses (0.0-2.0)
TEMPERATURE=0.7

# Enable streaming responses (true/false)
STREAMING_ENABLED=true

# Enable debug logging (true/false)
DEBUG_MODE=false

# Agent Behavior
# --------------
# Agent name for identification
AGENT_NAME=MCP LangChain Agent

# Agent description
AGENT_DESCRIPTION=A LangChain agent with MCP tool integration

# Application Configuration
# -------------------------
# Port to run the agent on
PORT=8000

# Host to bind to
HOST=0.0.0.0

# Log level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# CORS Configuration
# ------------------
# Allowed origins for CORS (comma-separated)
CORS_ORIGINS=*

# Enable CORS credentials
CORS_CREDENTIALS=true

# Security Configuration
# ----------------------
# Enable authentication for agent endpoints (true/false)
AUTH_ENABLED=false

# API key for agent endpoints (if auth enabled)
AGENT_API_KEY=your-agent-api-key

# Performance Configuration
# -------------------------
# Timeout for MCP Gateway requests (seconds)
GATEWAY_TIMEOUT=30

# Maximum concurrent requests
MAX_CONCURRENT_REQUESTS=10

# Request rate limiting (requests per minute)
RATE_LIMIT=60