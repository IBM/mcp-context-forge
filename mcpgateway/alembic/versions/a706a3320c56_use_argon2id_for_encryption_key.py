"""Use Argon2id for encryption key

Revision ID: a706a3320c56
Revises: 3c89a45f32e5
Create Date: 2025-10-30 15:31:25.115536

"""
import base64
import json
import os
from typing import Sequence, Union

from mcpgateway.config import settings

from alembic import op
import sqlalchemy as sa
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from argon2.low_level import hash_secret_raw, Type

def reencrypt_with_argon2id(encrypted_text: str) -> str:
    """Re-encrypts an existing encrypted text using Argon2id KDF.
    
    Args:
        encrypted_text: The original encrypted text using PBKDF2HMAC.

    Returns:
        A JSON string containing the Argon2id re-encrypted token and parameters.
    """
    encryption_secret = settings.auth_encryption_secret.get_secret_value().encode()
    original_kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=b"mcp_gateway_oauth",  # Fixed salt for consistency
        iterations=100000,
    )
    original_key = base64.urlsafe_b64encode(original_kdf.derive(encryption_secret))
    original_fernet = Fernet(original_key)
    original_encrypted_bytes = base64.urlsafe_b64decode(encrypted_text.encode())
    original_decrypted_bytes = original_fernet.decrypt(original_encrypted_bytes)

    time_cost = getattr(settings, "argon2id_time_cost", 3)
    memory_cost = getattr(settings, "argon2id_memory_cost", 65536)
    parallelism = getattr(settings, "argon2id_parallelism", 1)
    hash_len = 32

    salt = os.urandom(16)
    argon2id_raw = hash_secret_raw(
        secret=encryption_secret,
        salt=salt,
        time_cost=time_cost,
        memory_cost=memory_cost,  # KiB
        parallelism=parallelism,
        hash_len=hash_len,
        type=Type.ID,
    )
    argon2id_key = base64.urlsafe_b64encode(argon2id_raw)
    argon2id_fernet = Fernet(argon2id_key)
    argon2id_encrypted_bytes = argon2id_fernet.encrypt(original_decrypted_bytes)
    return json.dumps(
        {
            "kdf": "argon2id",
            "t": time_cost,
            "m": memory_cost,
            "p": parallelism,
            "salt": base64.b64encode(salt).decode(),
            "token": argon2id_encrypted_bytes.decode(),
        }
    )

# revision identifiers, used by Alembic.
revision: str = 'a706a3320c56'
down_revision: Union[str, Sequence[str], None] = '3c89a45f32e5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
