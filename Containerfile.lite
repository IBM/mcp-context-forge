# syntax=docker/dockerfile:1.7

###############################################################################
# MCP Gateway (lite) – OCI-compliant container build
#
# This multi-stage Dockerfile produces an ultra-slim, scratch-based runtime
# image that automatically tracks the latest Python 3.11.x patch release
# from the RHEL 9 repositories and is fully patched on each rebuild.
#
# Key design points:
#   • Builder stage has full DNF + devel headers for wheel compilation
#   • Runtime stage is scratch: only the Python runtime and app
#   • Both builder and runtime rootfs receive `dnf upgrade -y`
#   • Development headers are dropped from the final image
#   • Hadolint DL3041 is suppressed to allow "latest patch" RPM usage
###############################################################################

###########################
# Build-time arguments
###########################
ARG ROOTFS_PATH=/tmp/rootfs        # Temporary dir for assembling the scratch rootfs
ARG PYTHON_VERSION=3.11            # Python major.minor series to track

###########################
# Base image for copying into scratch
###########################
FROM registry.access.redhat.com/ubi9/ubi-micro:9.6-1747318857 AS base

###########################
# Builder stage
###########################
FROM registry.access.redhat.com/ubi9/ubi:9.6-1747219013 AS builder

ARG PYTHON_VERSION
ARG ROOTFS_PATH

# ----------------------------------------------------------------------------
# 1) Patch the OS
# 2) Install Python + headers for building wheels
# 3) Register python3 alternative
# 4) Clean caches to reduce layer size
# ----------------------------------------------------------------------------
# hadolint ignore=DL3041
RUN set -euo pipefail \
    && dnf upgrade -y \
    && dnf install -y \
         python${PYTHON_VERSION} \
         python${PYTHON_VERSION}-devel \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 1 \
    && dnf clean all

WORKDIR /app

# Copy project source last so small code changes don't bust earlier caches
COPY . /app

# ----------------------------------------------------------------------------
# Create and populate virtual environment
#  - Upgrade pip, setuptools, wheel, pdm, uv
#  - Install project dependencies and package
#  - Remove build caches
# ----------------------------------------------------------------------------
RUN set -euo pipefail \
    && python3 -m venv /app/.venv \
    && /app/.venv/bin/pip install --no-cache-dir --upgrade pip setuptools wheel pdm uv \
    && /app/.venv/bin/uv pip install . \
    && rm -rf /root/.cache /var/cache/dnf

# ----------------------------------------------------------------------------
# Build a minimal, fully-patched rootfs containing only the runtime Python
# ----------------------------------------------------------------------------
# hadolint ignore=DL3041
RUN set -euo pipefail \
    && mkdir -p "${ROOTFS_PATH}" \
    && dnf --installroot="${ROOTFS_PATH}" --releasever=9 upgrade -y \
    && dnf --installroot="${ROOTFS_PATH}" --releasever=9 install -y \
         --setopt=install_weak_deps=0 \
         python${PYTHON_VERSION} \
    && dnf clean all --installroot="${ROOTFS_PATH}"

###########################
# Runtime stage
###########################
FROM scratch AS runtime

ARG PYTHON_VERSION
ARG ROOTFS_PATH

# ----------------------------------------------------------------------------
# OCI image metadata
# ----------------------------------------------------------------------------
LABEL maintainer="Mihai Criveti" \
      org.opencontainers.image.title="mcp/mcpgateway" \
      org.opencontainers.image.description="MCP Gateway: An enterprise-ready Model Context Protocol Gateway" \
      org.opencontainers.image.licenses="Apache-2.0"

# ----------------------------------------------------------------------------
# Populate the scratch filesystem
#  - Copy in the minimal Python runtime
#  - Copy in the application directory
# ----------------------------------------------------------------------------
COPY --from=builder ${ROOTFS_PATH}/ /
COPY --from=builder /app /app

# ----------------------------------------------------------------------------
# Create `python3` symlink for compatibility
# ----------------------------------------------------------------------------
RUN ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python3

# ----------------------------------------------------------------------------
# Fix permissions for non-root user (1001) and OpenShift compatibility
# ----------------------------------------------------------------------------
RUN chown -R 1001:0 /app && chmod -R g=u /app

# Application working directory
WORKDIR /app

# ----------------------------------------------------------------------------
# Expose application port
# ----------------------------------------------------------------------------
EXPOSE 4444

# ----------------------------------------------------------------------------
# Run as non-root user
# ----------------------------------------------------------------------------
USER 1001

# ----------------------------------------------------------------------------
# Ensure our virtual environment binaries have priority in PATH
# ----------------------------------------------------------------------------
ENV PATH="/app/.venv/bin:${PATH}"

# ----------------------------------------------------------------------------
# Entrypoint
# ----------------------------------------------------------------------------
CMD ["./run-gunicorn.sh"]
